"use strict";(self.webpackChunk_antv_g6_site=self.webpackChunk_antv_g6_site||[]).push([[9706],{34548:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(60045);var t={}},27297:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(88051);var t={}},23242:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(31554);var t={}},17050:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(47834);var t={}},52891:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(33229);var t={}},45621:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(3447);var t={}},1172:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(38122);var t={}},12444:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(68153);var t={}},54159:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(786);var t={}},76021:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(10714);var t={}},89146:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(81775);var t={}},19183:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(18627);var t={}},49747:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(71828);var t={}},84753:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(99135);var t={}},74905:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(3938);var t={}},63056:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(53766);var t={}},46790:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(11515);var t={}},45974:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(88486);var t={}},58315:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(23340);var t={}},63294:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(1421);var t={}},90037:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(90417);var t={}},48101:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(13519);var t={}},27105:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(57064);var t={}},74096:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(62039);var t={}},66767:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(56590);var t={}},4921:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(7069);var t={}},65983:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83606);var t={}},66474:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(37648);var t={}},64133:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(6019);var t={}},82052:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(40116);var t={}},58039:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(88625);var t={}},29738:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(47968);var t={}},86490:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(75184);var t={}},79406:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(43250);var t={}},75873:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(64826);var t={}},68923:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(85881);var t={}},26424:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(29267);var t={}},13439:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(92783);var t={}},56031:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(46412);var t={}},3581:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(35558);var t={}},18958:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(75142);var t={}},92595:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(16731);var t={}},23947:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(39100);var t={}},22439:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(71745);var t={}},76141:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(52852);var t={}},45549:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(20031);var t={}},45173:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(17227);var t={}},84502:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(99937);var t={}},20186:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(29184);var t={}},81699:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(7403);var t={}},8249:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(9259);var t={}},76714:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(85743);var t={}},12984:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(79226);var t={}},49428:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(98415);var t={}},41099:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(10297);var t={}},50007:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(1452);var t={}},73320:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(71412);var t={}},4059:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(87547);var t={}},11946:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(13088);var t={}},39017:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(97099);var t={}},83121:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(49502);var t={}},54368:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(21977);var t={}},51493:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(19862);var t={}},24351:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(30411);var t={}},29968:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83749);var t={}},77958:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(49465);var t={}},86336:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83873);var t={}},96543:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(9644);var t={}},29705:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(86486);var t={}},83528:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(94240);var t={}},65865:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(24437);var t={}},10939:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(45724);var t={}},47357:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(69260);var t={}},69988:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(53251);var t={}},21300:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(79720);var t={}},85520:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(52311);var t={}},89906:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(35999);var t={}},84746:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(23996);var t={}},32609:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(24578);var t={}},48466:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(72891);var t={}},69701:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(32173);var t={}},5302:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(78454);var t={}},82399:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(98966);var t={}},11594:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(52717);var t={}},30607:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(40465);var t={}},59625:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(71551);var t={}},57013:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(93264);var t={}},24275:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(6496);var t={}},37800:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(81821);var t={}},78950:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(58767);var t={}},49817:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(57577);var t={}},92654:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(80760);var t={}},31360:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(52216);var t={}},6699:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(82419);var t={}},14690:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(75676);var t={}},44923:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(63664);var t={}},71524:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(40757);var t={}},36416:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(19984);var t={}},10831:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(43478);var t={}},86473:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(82069);var t={}},60159:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(54536);var t={}},23052:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(4938);var t={}},31669:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(91404);var t={}},39856:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(62509);var t={}},62875:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(30947);var t={}},32268:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(65324);var t={}},66232:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(75730);var t={}},19260:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(42865);var t={}},98136:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(78245);var t={}},10793:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(60498);var t={}},90322:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(87598);var t={}},71603:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(67367);var t={}},21377:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(46664);var t={}},66753:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(19590);var t={}},40584:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(91853);var t={}},43431:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(2877);var t={}},72205:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(3944);var t={}},17712:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(94114);var t={}},81383:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(78355);var t={}},97650:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(98292);var t={}},45573:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(61320);var t={}},66520:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(3333);var t={}},80872:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(4803);var t={}},14994:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(75986);var t={}},21425:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(36678);var t={}},50729:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(13934);var t={}},44771:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83466);var t={}},30673:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(42806);var t={}},5561:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(99152);var t={}},46213:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(12961);var t={}},64028:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83717);var t={}},31202:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(97648);var t={}},6566:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(98615);var t={}},83667:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(83847);var t={}},11485:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(69694);var t={}},91943:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(12406);var t={}},35870:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(80014);var t={}},4413:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(76699);var t={}},91810:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(90406);var t={}},92016:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(62054);var t={}},74193:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(87086);var t={}},29060:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(53732);var t={}},54077:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(55826),n(77981);var t={}},87638:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60045);const t=[{value:"Behavior is a core building block of G6, precisely defining the interaction between users and the graph. Each Behavior plugin is a highly encapsulated functional unit, integrating event listening, state management, and response handling logic for specific scenarios.",paraId:0,tocIndex:0},{value:"G6's built-in Behaviors cover most common interaction needs and provide a flexible extension mechanism, allowing developers to create customized interaction experiences based on business scenarios. For a complete list of behavior types, configuration options, and development examples, please refer to the ",paraId:1,tocIndex:0},{value:"Behavior Overview",paraId:2,tocIndex:0},{value:" section.",paraId:1,tocIndex:0},{value:"Get all configured behaviors in the current graph.",paraId:3,tocIndex:2},{value:"getBehaviors(): BehaviorOptions;\n",paraId:4,tocIndex:2},{value:"Return Value",paraId:5,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:": ",paraId:6,tocIndex:2},{value:"BehaviorOptions",paraId:7,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:": All configured behaviors in the current graph",paraId:6,tocIndex:2},{value:"Example",paraId:8,tocIndex:2},{value:"// Get all current behaviors\nconst behaviors = graph.getBehaviors();\nconsole.log('Current graph behaviors:', behaviors);\n",paraId:9,tocIndex:2},{value:"Set the behaviors of the graph, replacing all existing behaviors.",paraId:10,tocIndex:3},{value:"setBehaviors(behaviors: BehaviorOptions | ((prev: BehaviorOptions) => BehaviorOptions)): void;\n",paraId:11,tocIndex:3},{value:"Parameters",paraId:12,tocIndex:3},{value:"Parameter",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default",paraId:13,tocIndex:3},{value:"Required",paraId:13,tocIndex:3},{value:"behaviors",paraId:13,tocIndex:3},{value:"New behavior configuration, or a function returning new configuration based on the current one",paraId:13,tocIndex:3},{value:"BehaviorOptions",paraId:14,tocIndex:3},{value:" | (prev: BehaviorOptions) => BehaviorOptions",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"Note",paraId:15,tocIndex:3},{value:"The set behaviors will completely replace the original ones. To add new behaviors, you can use functional updates:",paraId:16,tocIndex:3},{value:"graph.setBehaviors((behaviors) => [...behaviors, { type: 'zoom-canvas' }]);\n",paraId:17,tocIndex:3},{value:"Example 1",paraId:18,tocIndex:3},{value:": Set basic behaviors",paraId:18,tocIndex:3},{value:"// Set basic behaviors\ngraph.setBehaviors([\n  'drag-canvas', // Drag canvas\n  'zoom-canvas', // Zoom canvas\n  'drag-element', // Drag element\n]);\n",paraId:19,tocIndex:3},{value:"Example 2",paraId:20,tocIndex:3},{value:": Set behaviors with configuration",paraId:20,tocIndex:3},{value:"graph.setBehaviors([\n  // String form (using default configuration)\n  'drag-canvas',\n\n  // Object form (custom configuration)\n  {\n    type: 'zoom-canvas',\n    key: 'my-zoom', // Specify a unique identifier for subsequent updates\n    sensitivity: 1.5, // Zoom sensitivity\n  },\n\n  // Enable drag only on nodes\n  {\n    type: 'drag-element',\n    key: 'drag-node-only',\n    enable: (event) => event.targetType === 'node', // Enable drag only on nodes\n  },\n]);\n",paraId:21,tocIndex:3},{value:"Example 3",paraId:22,tocIndex:3},{value:": Use functional updates",paraId:22,tocIndex:3},{value:"// Add new behavior\ngraph.setBehaviors((currentBehaviors) => [\n  ...currentBehaviors,\n  {\n    type: 'brush-select',\n    key: 'selection-brush',\n  },\n]);\n\n// Replace specific behavior\ngraph.setBehaviors((currentBehaviors) => {\n  // Filter out existing zoom behaviors\n  const filteredBehaviors = currentBehaviors.filter((behavior) => {\n    if (typeof behavior === 'string') return behavior !== 'zoom-canvas';\n    return behavior.type !== 'zoom-canvas';\n  });\n\n  // Add new zoom behavior configuration\n  return [\n    ...filteredBehaviors,\n    {\n      type: 'zoom-canvas',\n      key: 'new-zoom',\n      enableOptimize: true,\n    },\n  ];\n});\n",paraId:23,tocIndex:3},{value:"Update the configuration of a specific behavior, identified by the ",paraId:24,tocIndex:4},{value:"key",paraId:24,tocIndex:4},{value:".",paraId:24,tocIndex:4},{value:"updateBehavior(behavior: UpdateBehaviorOption): void;\n",paraId:25,tocIndex:4},{value:"Parameters",paraId:26,tocIndex:4},{value:"Parameter",paraId:27,tocIndex:4},{value:"Description",paraId:27,tocIndex:4},{value:"Type",paraId:27,tocIndex:4},{value:"Default",paraId:27,tocIndex:4},{value:"Required",paraId:27,tocIndex:4},{value:"behavior",paraId:27,tocIndex:4},{value:"Configuration of the behavior to update",paraId:27,tocIndex:4},{value:"UpdateBehaviorOption",paraId:28,tocIndex:4},{value:"-",paraId:27,tocIndex:4},{value:"✓",paraId:27,tocIndex:4},{value:"Note",paraId:29,tocIndex:4},{value:"To update a behavior, the original behavior configuration must specify the ",paraId:30,tocIndex:4},{value:"key",paraId:30,tocIndex:4},{value:" field to accurately locate and update the behavior.",paraId:30,tocIndex:4},{value:"Example 1",paraId:31,tocIndex:4},{value:": Update behavior configuration",paraId:31,tocIndex:4},{value:"// Specify key when initially setting behaviors\ngraph.setBehaviors([\n  {\n    type: 'zoom-canvas',\n    key: 'my-zoom-canvas',\n    sensitivity: 1.0,\n  },\n]);\n\n// Update behavior configuration\ngraph.updateBehavior({\n  key: 'my-zoom-canvas', // Specify the behavior to update\n  sensitivity: 2.0, // New zoom sensitivity\n  enableOptimize: true, // Add new configuration\n});\n",paraId:32,tocIndex:4},{value:"Example 2",paraId:33,tocIndex:4},{value:": Disable/Enable behavior",paraId:33,tocIndex:4},{value:"// Set behaviors with keys\ngraph.setBehaviors([\n  {\n    type: 'drag-canvas',\n    key: 'main-drag',\n  },\n  {\n    type: 'zoom-canvas',\n    key: 'main-zoom',\n  },\n]);\n\n// Disable drag functionality\ngraph.updateBehavior({\n  key: 'main-drag',\n  enable: false,\n});\n\n// Re-enable later\nsetTimeout(() => {\n  graph.updateBehavior({\n    key: 'main-drag',\n    enable: true,\n  });\n}, 5000);\n",paraId:34,tocIndex:4},{value:"type BehaviorOptions = (string | CustomBehaviorOption | ((this: Graph) => CustomBehaviorOption))[];\n\ntype CustomBehaviorOption = {\n  // Interaction type\n  type: string;\n\n  // Interaction key, a unique identifier for identifying and further operating this interaction\n  key?: string;\n\n  // There may be other configuration items for different types of interactions\n  [configKey: string]: any;\n};\n",paraId:35,tocIndex:6},{value:"type UpdateBehaviorOption = {\n  // Unique identifier of the behavior to update\n  key: string;\n\n  // Other configuration items to update\n  [configKey: string]: unknown;\n};\n",paraId:36,tocIndex:7}]},30543:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(88051);const t=[{value:"G6 provides a series of canvas operation APIs to control and obtain basic information about the canvas. With these APIs, you can:",paraId:0,tocIndex:0},{value:"Get the canvas instance",paraId:1,tocIndex:0},{value:"Get and set the canvas size",paraId:1,tocIndex:0},{value:"Operate the canvas renderer and layers",paraId:1,tocIndex:0},{value:"Get the canvas instance, which can be used for low-level canvas operations.",paraId:2,tocIndex:2},{value:"getCanvas(): Canvas;\n",paraId:3,tocIndex:2},{value:"Return Value Description",paraId:4,tocIndex:2},{value:"The Canvas instance includes the following main functions:",paraId:5,tocIndex:2},{value:"getLayer(name?: string)",paraId:6,tocIndex:2},{value:": Get the specified layer",paraId:6,tocIndex:2},{value:"getLayers()",paraId:6,tocIndex:2},{value:": Get all layers",paraId:6,tocIndex:2},{value:"getCamera()",paraId:6,tocIndex:2},{value:": Get the camera instance",paraId:6,tocIndex:2},{value:"getRoot()",paraId:6,tocIndex:2},{value:": Get the root node",paraId:6,tocIndex:2},{value:"setCursor(cursor: string)",paraId:6,tocIndex:2},{value:": Set the mouse cursor style",paraId:6,tocIndex:2},{value:"Example",paraId:7,tocIndex:2},{value:"// Get the canvas instance\nconst canvas = graph.getCanvas();\n\n// Get the main layer\nconst mainLayer = canvas.getLayer('main');\n\n// Set the mouse cursor style\ncanvas.setCursor('pointer');\n\n// Get the root node of the canvas\nconst root = canvas.getRoot();\n",paraId:8,tocIndex:2},{value:"Get the size of the current canvas container. Returns an array containing the width and height.",paraId:9,tocIndex:3},{value:"getSize(): [number, number];\n",paraId:10,tocIndex:3},{value:"Example",paraId:11,tocIndex:3},{value:"// Get the canvas size\nconst [width, height] = graph.getSize();\nconsole.log('Canvas width:', width);\nconsole.log('Canvas height:', height);\n\n// Use the size information for calculations\nconst centerX = width / 2;\nconst centerY = height / 2;\n",paraId:12,tocIndex:3},{value:"Set the size of the canvas container. This method will update both the canvas and container size.",paraId:13,tocIndex:4},{value:"setSize(width: number, height: number): void;\n",paraId:14,tocIndex:4},{value:"Parameters",paraId:15,tocIndex:4},{value:"Parameter",paraId:16,tocIndex:4},{value:"Description",paraId:16,tocIndex:4},{value:"Type",paraId:16,tocIndex:4},{value:"Default",paraId:16,tocIndex:4},{value:"Required",paraId:16,tocIndex:4},{value:"width",paraId:16,tocIndex:4},{value:"Canvas width (pixels)",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"✓",paraId:16,tocIndex:4},{value:"height",paraId:16,tocIndex:4},{value:"Canvas height (pixels)",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"✓",paraId:16,tocIndex:4},{value:"Example",paraId:17,tocIndex:4},{value:"// Set a fixed size\ngraph.setSize(800, 600);\n",paraId:18,tocIndex:4}]},46686:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31554);const t=[{value:"Understanding different coordinate systems and their transformations is crucial in graph visualization. G6 involves multiple coordinate systems, each used for different scenarios:",paraId:0,tocIndex:0},{value:"Client Coordinate System",paraId:1,tocIndex:0},{value:": Origin is at the top-left corner of the browser viewport, measured in pixels. Typically used for handling browser events.",paraId:1,tocIndex:0},{value:"Screen Coordinate System",paraId:1,tocIndex:0},{value:": Origin is at the top-left corner of the screen, affected by page scrolling.",paraId:1,tocIndex:0},{value:"Page Coordinate System",paraId:1,tocIndex:0},{value:": Origin is at the top-left corner of the document, considering document scrolling.",paraId:1,tocIndex:0},{value:"Canvas Coordinate System",paraId:1,tocIndex:0},{value:": Also known as the world coordinate system, used for drawing and layout, with the origin at the top-left corner of the canvas element.",paraId:1,tocIndex:0},{value:"Viewport Coordinate System",paraId:1,tocIndex:0},{value:": The visible area of the canvas, with the origin at the top-left corner of the viewport. The viewport can be panned and zoomed to view different areas of the Canvas.",paraId:1,tocIndex:0},{value:"In this ",paraId:2,tocIndex:0},{value:"example",paraId:2,tocIndex:0},{value:", moving the mouse shows the position in various coordinate systems:",paraId:2,tocIndex:0},{value:"When the canvas is not panned or zoomed, the Viewport and Canvas coordinate systems coincide. With user interactions like dragging or zooming, the two systems may shift.",paraId:3,tocIndex:0},{value:"G6 provides a series of APIs for converting between different coordinate systems, detailed below.",paraId:4,tocIndex:0},{value:"Convert browser coordinates (client coordinates) to canvas coordinates.",paraId:5,tocIndex:2},{value:"getCanvasByClient(point: Point): Point;\n",paraId:6,tocIndex:2},{value:"Parameters",paraId:7,tocIndex:2},{value:"Parameter",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"point",paraId:8,tocIndex:2},{value:"Browser coordinate point",paraId:8,tocIndex:2},{value:"[number, number] | [number, number, number]",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"Return Value",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:": [number, number] | [number, number, number]",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:": Coordinate point in the canvas coordinate system",paraId:10,tocIndex:2},{value:"Convert viewport coordinates to canvas coordinates.",paraId:11,tocIndex:3},{value:"getCanvasByViewport(point: Point): Point;\n",paraId:12,tocIndex:3},{value:"Parameters",paraId:13,tocIndex:3},{value:"Parameter",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Default",paraId:14,tocIndex:3},{value:"Required",paraId:14,tocIndex:3},{value:"point",paraId:14,tocIndex:3},{value:"Viewport coordinate point",paraId:14,tocIndex:3},{value:"[number, number] | [number, number, number]",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"Return Value",paraId:15,tocIndex:3},{value:"Type",paraId:16,tocIndex:3},{value:": [number, number] | [number, number, number]",paraId:16,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:": Coordinate point in the canvas coordinate system",paraId:16,tocIndex:3},{value:"Convert canvas coordinates to browser client coordinates.",paraId:17,tocIndex:4},{value:"getClientByCanvas(point: Point): Point;\n",paraId:18,tocIndex:4},{value:"Parameters",paraId:19,tocIndex:4},{value:"Parameter",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Default",paraId:20,tocIndex:4},{value:"Required",paraId:20,tocIndex:4},{value:"point",paraId:20,tocIndex:4},{value:"Canvas coordinate point",paraId:20,tocIndex:4},{value:"[number, number] | [number, number, number]",paraId:20,tocIndex:4},{value:"-",paraId:20,tocIndex:4},{value:"✓",paraId:20,tocIndex:4},{value:"Return Value",paraId:21,tocIndex:4},{value:"Type",paraId:22,tocIndex:4},{value:": [number, number] | [number, number, number]",paraId:22,tocIndex:4},{value:"Description",paraId:22,tocIndex:4},{value:": Coordinate point in the browser client coordinate system",paraId:22,tocIndex:4},{value:"Convert canvas coordinates to viewport coordinates.",paraId:23,tocIndex:5},{value:"getViewportByCanvas(point: Point): Point;\n",paraId:24,tocIndex:5},{value:"Parameters",paraId:25,tocIndex:5},{value:"Parameter",paraId:26,tocIndex:5},{value:"Description",paraId:26,tocIndex:5},{value:"Type",paraId:26,tocIndex:5},{value:"Default",paraId:26,tocIndex:5},{value:"Required",paraId:26,tocIndex:5},{value:"point",paraId:26,tocIndex:5},{value:"Canvas coordinate point",paraId:26,tocIndex:5},{value:"[number, number] | [number, number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"✓",paraId:26,tocIndex:5},{value:"Return Value",paraId:27,tocIndex:5},{value:"Type",paraId:28,tocIndex:5},{value:": [number, number] | [number, number, number]",paraId:28,tocIndex:5},{value:"Description",paraId:28,tocIndex:5},{value:": Coordinate point in the viewport coordinate system",paraId:28,tocIndex:5}]},68843:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(47834);const t=[{value:"G6 provides a comprehensive ",paraId:0,tocIndex:0},{value:"data",paraId:1,tocIndex:0},{value:" operation API, covering the complete lifecycle of graph data from query, modification to update.",paraId:0,tocIndex:0},{value:"Get the complete data of the graph.",paraId:2,tocIndex:2},{value:"getData(): Required<GraphData>;\n",paraId:3,tocIndex:2},{value:"Return Value",paraId:4,tocIndex:2},{value:":",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:": ",paraId:5,tocIndex:2},{value:"GraphData",paraId:6,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:": Returns the complete graph data containing all nodes, edges, and combo data",paraId:7,tocIndex:2},{value:"Example",paraId:8,tocIndex:2},{value:":",paraId:8,tocIndex:2},{value:"const graphData = graph.getData();\nconsole.log('Node data:', graphData.nodes);\nconsole.log('Edge data:', graphData.edges);\nconsole.log('Combo data:', graphData.combos);\n",paraId:9,tocIndex:2},{value:"Get node data, supporting three calling methods.",paraId:10,tocIndex:3},{value:"// Get all node data\ngetNodeData(): NodeData[];\n\n// Get single node data\ngetNodeData(id: ID): NodeData;\n\n// Get multiple node data\ngetNodeData(ids: ID[]): NodeData[];\n",paraId:11,tocIndex:3},{value:"Parameters",paraId:12,tocIndex:3},{value:":",paraId:12,tocIndex:3},{value:"Parameter",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default",paraId:13,tocIndex:3},{value:"Required",paraId:13,tocIndex:3},{value:"id",paraId:13,tocIndex:3},{value:"Node ID",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"ids",paraId:13,tocIndex:3},{value:"Node ID array",paraId:13,tocIndex:3},{value:"string[]",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"Return Value",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:": ",paraId:15,tocIndex:3},{value:"NodeData",paraId:16,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"NodeData",paraId:17,tocIndex:3},{value:"[]",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:": Returns the specified node data or node data array",paraId:15,tocIndex:3},{value:"Example",paraId:18,tocIndex:3},{value:":",paraId:18,tocIndex:3},{value:"// Get all nodes\nconst nodes = graph.getNodeData();\n\n// Get single node\nconst node = graph.getNodeData('node1');\nconsole.log('Node position:', node.style.x, node.style.y);\n\n// Get multiple nodes\nconst [node1, node2] = graph.getNodeData(['node1', 'node2']);\n",paraId:19,tocIndex:3},{value:"Get edge data, supporting three calling methods.",paraId:20,tocIndex:4},{value:"// Get all edge data\ngetEdgeData(): EdgeData[];\n\n// Get single edge data\ngetEdgeData(id: ID): EdgeData;\n\n// Get multiple edge data\ngetEdgeData(ids: ID[]): EdgeData[];\n",paraId:21,tocIndex:4},{value:"Parameters",paraId:22,tocIndex:4},{value:":",paraId:22,tocIndex:4},{value:"Parameter",paraId:23,tocIndex:4},{value:"Description",paraId:23,tocIndex:4},{value:"Type",paraId:23,tocIndex:4},{value:"Default",paraId:23,tocIndex:4},{value:"Required",paraId:23,tocIndex:4},{value:"id",paraId:23,tocIndex:4},{value:"Edge ID",paraId:23,tocIndex:4},{value:"string",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"ids",paraId:23,tocIndex:4},{value:"Edge ID array",paraId:23,tocIndex:4},{value:"string[]",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"Return Value",paraId:24,tocIndex:4},{value:":",paraId:24,tocIndex:4},{value:"Type",paraId:25,tocIndex:4},{value:": ",paraId:25,tocIndex:4},{value:"EdgeData",paraId:26,tocIndex:4},{value:" | ",paraId:25,tocIndex:4},{value:"EdgeData",paraId:27,tocIndex:4},{value:"[]",paraId:25,tocIndex:4},{value:"Description",paraId:25,tocIndex:4},{value:": Returns the specified edge data or edge data array",paraId:25,tocIndex:4},{value:"Example",paraId:28,tocIndex:4},{value:":",paraId:28,tocIndex:4},{value:"// Get all edges\nconst edges = graph.getEdgeData();\n\n// Get single edge\nconst edge = graph.getEdgeData('edge1');\nconsole.log('Edge source and target:', edge.source, edge.target);\n\n// Get multiple edges\nconst [edge1, edge2] = graph.getEdgeData(['edge1', 'edge2']);\n",paraId:29,tocIndex:4},{value:"Get combo data, supporting three calling methods.",paraId:30,tocIndex:5},{value:"// Get all combo data\ngetComboData(): ComboData[];\n\n// Get single combo data\ngetComboData(id: ID): ComboData;\n\n// Get multiple combo data\ngetComboData(ids: ID[]): ComboData[];\n",paraId:31,tocIndex:5},{value:"Parameters",paraId:32,tocIndex:5},{value:":",paraId:32,tocIndex:5},{value:"Parameter",paraId:33,tocIndex:5},{value:"Description",paraId:33,tocIndex:5},{value:"Type",paraId:33,tocIndex:5},{value:"Default",paraId:33,tocIndex:5},{value:"Required",paraId:33,tocIndex:5},{value:"id",paraId:33,tocIndex:5},{value:"Combo ID",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"ids",paraId:33,tocIndex:5},{value:"Combo ID array",paraId:33,tocIndex:5},{value:"string[]",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"Return Value",paraId:34,tocIndex:5},{value:":",paraId:34,tocIndex:5},{value:"Type",paraId:35,tocIndex:5},{value:": ",paraId:35,tocIndex:5},{value:"ComboData",paraId:36,tocIndex:5},{value:" | ",paraId:35,tocIndex:5},{value:"ComboData",paraId:37,tocIndex:5},{value:"[]",paraId:35,tocIndex:5},{value:"Description",paraId:35,tocIndex:5},{value:": Returns the specified combo data or combo data array",paraId:35,tocIndex:5},{value:"Example",paraId:38,tocIndex:5},{value:":",paraId:38,tocIndex:5},{value:"// Get all combos\nconst combos = graph.getComboData();\n\n// Get single combo\nconst combo = graph.getComboData('combo1');\nconsole.log('Nodes in combo:', combo.children);\n\n// Get multiple combos\nconst [combo1, combo2] = graph.getComboData(['combo1', 'combo2']);\n",paraId:39,tocIndex:5},{value:"Get single element data, supporting two calling methods.",paraId:40,tocIndex:6},{value:"⚠️ ",paraId:41,tocIndex:6},{value:"Note",paraId:41,tocIndex:6},{value:": This API directly gets the data of the element without considering the element type.",paraId:41,tocIndex:6},{value:"// Get single element data\ngetElementData(id: ID): ElementDatum;\n\n// Get multiple element data\ngetElementData(ids: ID[]): ElementDatum[];\n",paraId:42,tocIndex:6},{value:"Parameters",paraId:43,tocIndex:6},{value:":",paraId:43,tocIndex:6},{value:"Parameter",paraId:44,tocIndex:6},{value:"Description",paraId:44,tocIndex:6},{value:"Type",paraId:44,tocIndex:6},{value:"Default",paraId:44,tocIndex:6},{value:"Required",paraId:44,tocIndex:6},{value:"id",paraId:44,tocIndex:6},{value:"Element ID",paraId:44,tocIndex:6},{value:"string",paraId:44,tocIndex:6},{value:"-",paraId:44,tocIndex:6},{value:"ids",paraId:44,tocIndex:6},{value:"Element ID array",paraId:44,tocIndex:6},{value:"string[]",paraId:44,tocIndex:6},{value:"-",paraId:44,tocIndex:6},{value:"Return Value",paraId:45,tocIndex:6},{value:":",paraId:45,tocIndex:6},{value:"Type",paraId:46,tocIndex:6},{value:": ElementDatum | ElementDatum[]",paraId:46,tocIndex:6},{value:"Description",paraId:46,tocIndex:6},{value:": Directly gets the data of the element without considering the element type",paraId:46,tocIndex:6},{value:"Example",paraId:47,tocIndex:6},{value:":",paraId:47,tocIndex:6},{value:"const element = graph.getElementData('node-1');\nconsole.log('Element data:', element);\n\nconst elements = graph.getElementData(['node-1', 'edge-1']);\nconsole.log('Multiple element data:', elements);\n",paraId:48,tocIndex:6},{value:"Get element data in a specified state, supporting three calling methods.",paraId:49,tocIndex:7},{value:"// Get node data in a specified state\ngetElementDataByState(elementType: 'node', state: string): NodeData[];\n\n// Get edge data in a specified state\ngetElementDataByState(elementType: 'edge', state: string): EdgeData[];\n\n// Get combo data in a specified state\ngetElementDataByState(elementType: 'combo', state: string): ComboData[];\n",paraId:50,tocIndex:7},{value:"Parameters",paraId:51,tocIndex:7},{value:":",paraId:51,tocIndex:7},{value:"Parameter",paraId:52,tocIndex:7},{value:"Description",paraId:52,tocIndex:7},{value:"Type",paraId:52,tocIndex:7},{value:"Default",paraId:52,tocIndex:7},{value:"Required",paraId:52,tocIndex:7},{value:"elementType",paraId:52,tocIndex:7},{value:"Element type",paraId:52,tocIndex:7},{value:"'node'",paraId:52,tocIndex:7},{value:" | ",paraId:52,tocIndex:7},{value:"'edge'",paraId:52,tocIndex:7},{value:" | ",paraId:52,tocIndex:7},{value:"'combo'",paraId:52,tocIndex:7},{value:"-",paraId:52,tocIndex:7},{value:"✓",paraId:52,tocIndex:7},{value:"state",paraId:52,tocIndex:7},{value:"State",paraId:52,tocIndex:7},{value:"string",paraId:52,tocIndex:7},{value:"-",paraId:52,tocIndex:7},{value:"✓",paraId:52,tocIndex:7},{value:"Return Value",paraId:53,tocIndex:7},{value:":",paraId:53,tocIndex:7},{value:"Type",paraId:54,tocIndex:7},{value:": NodeData[] | EdgeData[] | ComboData[]",paraId:54,tocIndex:7},{value:"Description",paraId:54,tocIndex:7},{value:": Returns node data, edge data, or combo data in the specified state",paraId:54,tocIndex:7},{value:"Example",paraId:55,tocIndex:7},{value:":",paraId:55,tocIndex:7},{value:"const selectedNodes = graph.getElementDataByState('node', 'selected');\nconsole.log('Selected nodes:', selectedNodes);\n\nconst selectedEdges = graph.getElementDataByState('edge', 'selected');\nconsole.log('Selected edges:', selectedEdges);\n\nconst selectedCombos = graph.getElementDataByState('combo', 'selected');\nconsole.log('Selected combos:', selectedCombos);\n",paraId:56,tocIndex:7},{value:"Built-in States",paraId:57,tocIndex:7},{value:":",paraId:57,tocIndex:7},{value:"'selected'",paraId:58,tocIndex:7},{value:"'highlight'",paraId:58,tocIndex:7},{value:"'active'",paraId:58,tocIndex:7},{value:"'inactive'",paraId:58,tocIndex:7},{value:"'disabled'",paraId:58,tocIndex:7},{value:"Get the data of neighbor nodes of a node or combo.",paraId:59,tocIndex:8},{value:"getNeighborNodesData(id: ID): NodeData[];\n",paraId:60,tocIndex:8},{value:"Parameters",paraId:61,tocIndex:8},{value:":",paraId:61,tocIndex:8},{value:"Parameter",paraId:62,tocIndex:8},{value:"Description",paraId:62,tocIndex:8},{value:"Type",paraId:62,tocIndex:8},{value:"Default",paraId:62,tocIndex:8},{value:"Required",paraId:62,tocIndex:8},{value:"id",paraId:62,tocIndex:8},{value:"Node or combo ID",paraId:62,tocIndex:8},{value:"string",paraId:62,tocIndex:8},{value:"-",paraId:62,tocIndex:8},{value:"✓",paraId:62,tocIndex:8},{value:"Return Value",paraId:63,tocIndex:8},{value:":",paraId:63,tocIndex:8},{value:"Type",paraId:64,tocIndex:8},{value:": NodeData[]",paraId:64,tocIndex:8},{value:"Description",paraId:64,tocIndex:8},{value:": Returns neighbor node data",paraId:64,tocIndex:8},{value:"Example",paraId:65,tocIndex:8},{value:":",paraId:65,tocIndex:8},{value:"const neighbors = graph.getNeighborNodesData('node-1');\nconsole.log('Neighbor nodes:', neighbors);\n",paraId:66,tocIndex:8},{value:"Get the data of edges related to a node or combo.",paraId:67,tocIndex:9},{value:"getRelatedEdgesData(id: ID, direction?: EdgeDirection): EdgeData[];\n",paraId:68,tocIndex:9},{value:"Parameters",paraId:69,tocIndex:9},{value:":",paraId:69,tocIndex:9},{value:"Parameter",paraId:70,tocIndex:9},{value:"Description",paraId:70,tocIndex:9},{value:"Type",paraId:70,tocIndex:9},{value:"Default",paraId:70,tocIndex:9},{value:"Required",paraId:70,tocIndex:9},{value:"id",paraId:70,tocIndex:9},{value:"Node or combo ID",paraId:70,tocIndex:9},{value:"string",paraId:70,tocIndex:9},{value:"-",paraId:70,tocIndex:9},{value:"✓",paraId:70,tocIndex:9},{value:"direction",paraId:70,tocIndex:9},{value:"Edge direction",paraId:70,tocIndex:9},{value:"'in'",paraId:70,tocIndex:9},{value:" | ",paraId:70,tocIndex:9},{value:"'out'",paraId:70,tocIndex:9},{value:" | ",paraId:70,tocIndex:9},{value:"'both'",paraId:70,tocIndex:9},{value:"-",paraId:70,tocIndex:9},{value:"Return Value",paraId:71,tocIndex:9},{value:":",paraId:71,tocIndex:9},{value:"Type",paraId:72,tocIndex:9},{value:": EdgeData[]",paraId:72,tocIndex:9},{value:"Description",paraId:72,tocIndex:9},{value:": Returns the data of edges related to the specified node or combo",paraId:72,tocIndex:9},{value:"Example",paraId:73,tocIndex:9},{value:":",paraId:73,tocIndex:9},{value:"const relatedEdges = graph.getRelatedEdgesData('node-1');\nconsole.log('Related edges:', relatedEdges);\n",paraId:74,tocIndex:9},{value:"Get the data of the parent element of a node or combo.",paraId:75,tocIndex:10},{value:"getParentData(id: ID, hierarchy: HierarchyKey): NodeLikeData | undefined;\n",paraId:76,tocIndex:10},{value:"Parameters",paraId:77,tocIndex:10},{value:":",paraId:77,tocIndex:10},{value:"Parameter",paraId:78,tocIndex:10},{value:"Description",paraId:78,tocIndex:10},{value:"Type",paraId:78,tocIndex:10},{value:"Default",paraId:78,tocIndex:10},{value:"Required",paraId:78,tocIndex:10},{value:"id",paraId:78,tocIndex:10},{value:"Node or combo ID",paraId:78,tocIndex:10},{value:"string",paraId:78,tocIndex:10},{value:"-",paraId:78,tocIndex:10},{value:"✓",paraId:78,tocIndex:10},{value:"hierarchy",paraId:78,tocIndex:10},{value:"Specify hierarchy type",paraId:78,tocIndex:10},{value:"'tree'",paraId:78,tocIndex:10},{value:" | ",paraId:78,tocIndex:10},{value:"'combo'",paraId:78,tocIndex:10},{value:"-",paraId:78,tocIndex:10},{value:"Return Value",paraId:79,tocIndex:10},{value:":",paraId:79,tocIndex:10},{value:"Type",paraId:80,tocIndex:10},{value:": NodeData | ComboData | undefined",paraId:80,tocIndex:10},{value:"Description",paraId:80,tocIndex:10},{value:": Returns the parent element data, or undefined if it does not exist",paraId:80,tocIndex:10},{value:"Example",paraId:81,tocIndex:10},{value:":",paraId:81,tocIndex:10},{value:"// Get the parent node in a tree graph\nconst treeParent = graph.getParentData('node1', 'tree');\n\n// Get the parent combo in a combo\nconst comboParent = graph.getParentData('node1', 'combo');\n",paraId:82,tocIndex:10},{value:"Get the data of child elements of a node or combo.",paraId:83,tocIndex:11},{value:"getChildrenData(id: ID): (NodeData \\| ComboData)[];\n",paraId:84,tocIndex:11},{value:"Parameters",paraId:85,tocIndex:11},{value:":",paraId:85,tocIndex:11},{value:"Parameter",paraId:86,tocIndex:11},{value:"Description",paraId:86,tocIndex:11},{value:"Type",paraId:86,tocIndex:11},{value:"Default",paraId:86,tocIndex:11},{value:"Required",paraId:86,tocIndex:11},{value:"id",paraId:86,tocIndex:11},{value:"Node or combo ID",paraId:86,tocIndex:11},{value:"string",paraId:86,tocIndex:11},{value:"-",paraId:86,tocIndex:11},{value:"✓",paraId:86,tocIndex:11},{value:"Return Value",paraId:87,tocIndex:11},{value:":",paraId:87,tocIndex:11},{value:"Type",paraId:88,tocIndex:11},{value:": (NodeData | ComboData)[]",paraId:88,tocIndex:11},{value:"Description",paraId:88,tocIndex:11},{value:": Returns an array of child element data",paraId:88,tocIndex:11},{value:"Note",paraId:89,tocIndex:11},{value:":",paraId:89,tocIndex:11},{value:"Querying combo's child elements",paraId:90,tocIndex:11},{value:": If the id corresponds to a combo element, you can directly use this API to get all its child elements.",paraId:90,tocIndex:11},{value:"Querying node's child elements",paraId:90,tocIndex:11},{value:": If the id corresponds to a node, only when the graph data is a tree structure (i.e., the node data maintains a ",paraId:90,tocIndex:11},{value:"children",paraId:90,tocIndex:11},{value:" field, and ",paraId:90,tocIndex:11},{value:"children",paraId:90,tocIndex:11},{value:" is an array of child node IDs for that node), can you use this API to get the child elements of that node. Otherwise, an empty array is returned.",paraId:90,tocIndex:11},{value:"Example",paraId:91,tocIndex:11},{value:":",paraId:91,tocIndex:11},{value:"// Get the child elements of a combo\nconst children = graph.getChildrenData('combo1');\nconsole.log('Number of child nodes:', children.length);\n\n// Process each child element\nchildren.forEach((child) => {\n  console.log('Child element ID:', child.id);\n});\n",paraId:92,tocIndex:11},{value:"Get the data of all ancestor elements of a node or combo.",paraId:93,tocIndex:12},{value:"getAncestorsData(id: ID, hierarchy: HierarchyKey): NodeLikeData[];\n",paraId:94,tocIndex:12},{value:"Parameters",paraId:95,tocIndex:12},{value:":",paraId:95,tocIndex:12},{value:"Parameter",paraId:96,tocIndex:12},{value:"Description",paraId:96,tocIndex:12},{value:"Type",paraId:96,tocIndex:12},{value:"Default",paraId:96,tocIndex:12},{value:"Required",paraId:96,tocIndex:12},{value:"id",paraId:96,tocIndex:12},{value:"Node or combo ID",paraId:96,tocIndex:12},{value:"string",paraId:96,tocIndex:12},{value:"-",paraId:96,tocIndex:12},{value:"✓",paraId:96,tocIndex:12},{value:"hierarchy",paraId:96,tocIndex:12},{value:"Specify hierarchy type",paraId:96,tocIndex:12},{value:"'tree'",paraId:96,tocIndex:12},{value:" | ",paraId:96,tocIndex:12},{value:"'combo'",paraId:96,tocIndex:12},{value:"-",paraId:96,tocIndex:12},{value:"✓",paraId:96,tocIndex:12},{value:"Return Value",paraId:97,tocIndex:12},{value:":",paraId:97,tocIndex:12},{value:"Type",paraId:98,tocIndex:12},{value:": ",paraId:98,tocIndex:12},{value:"NodeData",paraId:99,tocIndex:12},{value:"[] | ",paraId:98,tocIndex:12},{value:"ComboData",paraId:100,tocIndex:12},{value:"[]",paraId:98,tocIndex:12},{value:"Description",paraId:98,tocIndex:12},{value:": Returns an array of ancestor element data, ordered from parent to root",paraId:98,tocIndex:12},{value:"Example",paraId:101,tocIndex:12},{value:":",paraId:101,tocIndex:12},{value:"// Get all ancestor nodes in a tree graph\nconst treeAncestors = graph.getAncestorsData('node1', 'tree');\nconsole.log(\n  'Ancestor node path:',\n  treeAncestors.map((node) => node.id),\n);\n\n// Get all parent combos in a combo\nconst comboAncestors = graph.getAncestorsData('node1', 'combo');\n",paraId:102,tocIndex:12},{value:"Get the data of all descendant elements of a node or combo.",paraId:103,tocIndex:13},{value:"getDescendantsData(id: ID): NodeLikeData[];\n",paraId:104,tocIndex:13},{value:"Parameters",paraId:105,tocIndex:13},{value:":",paraId:105,tocIndex:13},{value:"Parameter",paraId:106,tocIndex:13},{value:"Description",paraId:106,tocIndex:13},{value:"Type",paraId:106,tocIndex:13},{value:"Default",paraId:106,tocIndex:13},{value:"Required",paraId:106,tocIndex:13},{value:"id",paraId:106,tocIndex:13},{value:"Node or combo ID",paraId:106,tocIndex:13},{value:"string",paraId:106,tocIndex:13},{value:"-",paraId:106,tocIndex:13},{value:"✓",paraId:106,tocIndex:13},{value:"Return Value",paraId:107,tocIndex:13},{value:":",paraId:107,tocIndex:13},{value:"Type",paraId:108,tocIndex:13},{value:": ",paraId:108,tocIndex:13},{value:"NodeData",paraId:109,tocIndex:13},{value:"[] | ",paraId:108,tocIndex:13},{value:"ComboData",paraId:110,tocIndex:13},{value:"[]",paraId:108,tocIndex:13},{value:"Description",paraId:108,tocIndex:13},{value:": Returns an array of descendant element data",paraId:108,tocIndex:13},{value:"Example",paraId:111,tocIndex:13},{value:":",paraId:111,tocIndex:13},{value:"// Get all descendants of a node\nconst descendants = graph.getDescendantsData('node1');\nconsole.log('Number of descendants:', descendants.length);\n\n// Process all descendant elements\ndescendants.forEach((descendant) => {\n  console.log('Descendant element ID:', descendant.id);\n});\n",paraId:112,tocIndex:13},{value:"Set the complete data of the graph.",paraId:113,tocIndex:14},{value:"setData(data: GraphData | ((prev: GraphData) => GraphData)): void;\n",paraId:114,tocIndex:14},{value:"Parameters",paraId:115,tocIndex:14},{value:":",paraId:115,tocIndex:14},{value:"Parameter",paraId:116,tocIndex:14},{value:"Description",paraId:116,tocIndex:14},{value:"Type",paraId:116,tocIndex:14},{value:"Default",paraId:116,tocIndex:14},{value:"Required",paraId:116,tocIndex:14},{value:"data",paraId:116,tocIndex:14},{value:"New graph data or a function returning new graph data",paraId:116,tocIndex:14},{value:"GraphData",paraId:117,tocIndex:14},{value:" | ((prev: GraphData) => GraphData)",paraId:116,tocIndex:14},{value:"-",paraId:116,tocIndex:14},{value:"✓",paraId:116,tocIndex:14},{value:"Example",paraId:118,tocIndex:14},{value:":",paraId:118,tocIndex:14},{value:"// Directly set data\ngraph.setData({\n  nodes: [\n    { id: 'node1', style: { x: 100, y: 100 } },\n    { id: 'node2', style: { x: 200, y: 200 } },\n  ],\n  edges: [{ id: 'edge1', source: 'node1', target: 'node2' }],\n});\n\n// Use functional incremental update: get current graph data and return new graph data\ngraph.setData((prev) => ({\n  ...prev,\n  nodes: [...prev.nodes, { id: 'node3', style: { x: 300, y: 300 } }],\n}));\n",paraId:119,tocIndex:14},{value:"Add new element data.",paraId:120,tocIndex:15},{value:"addData(data: GraphData | ((prev: GraphData) => GraphData)): void;\n",paraId:121,tocIndex:15},{value:"Parameters",paraId:122,tocIndex:15},{value:":",paraId:122,tocIndex:15},{value:"Parameter",paraId:123,tocIndex:15},{value:"Description",paraId:123,tocIndex:15},{value:"Type",paraId:123,tocIndex:15},{value:"Default",paraId:123,tocIndex:15},{value:"Required",paraId:123,tocIndex:15},{value:"data",paraId:123,tocIndex:15},{value:"Graph data to add or a function returning new graph data",paraId:123,tocIndex:15},{value:"GraphData",paraId:124,tocIndex:15},{value:" | ((prev: GraphData) => GraphData)",paraId:123,tocIndex:15},{value:"-",paraId:123,tocIndex:15},{value:"✓",paraId:123,tocIndex:15},{value:"Example",paraId:125,tocIndex:15},{value:":",paraId:125,tocIndex:15},{value:"graph.addData({\n  nodes: [{ id: 'node-1' }, { id: 'node-2' }],\n  edges: [{ source: 'node-1', target: 'node-2' }],\n});\n",paraId:126,tocIndex:15},{value:"Add new node data.",paraId:127,tocIndex:16},{value:"addNodeData(data: NodeData[] | ((prev: NodeData[]) => NodeData[])): void;\n",paraId:128,tocIndex:16},{value:"Parameters",paraId:129,tocIndex:16},{value:":",paraId:129,tocIndex:16},{value:"Parameter",paraId:130,tocIndex:16},{value:"Description",paraId:130,tocIndex:16},{value:"Type",paraId:130,tocIndex:16},{value:"Default",paraId:130,tocIndex:16},{value:"Required",paraId:130,tocIndex:16},{value:"data",paraId:130,tocIndex:16},{value:"Node data to add or a function returning node data",paraId:130,tocIndex:16},{value:"NodeData",paraId:131,tocIndex:16},{value:"[] | (prev: NodeData[]) => NodeData[]",paraId:130,tocIndex:16},{value:"-",paraId:130,tocIndex:16},{value:"✓",paraId:130,tocIndex:16},{value:"Example",paraId:132,tocIndex:16},{value:":",paraId:132,tocIndex:16},{value:"// Add single node\ngraph.addNodeData([\n  {\n    id: 'node1',\n    style: { x: 100, y: 100 },\n    data: { label: 'Node 1' },\n  },\n]);\n\n// Add multiple nodes\ngraph.addNodeData([\n  { id: 'node2', style: { x: 200, y: 200 } },\n  { id: 'node3', style: { x: 300, y: 300 } },\n]);\n\n// Functional addition\ngraph.addNodeData((prev) => [...prev, { id: 'node4', style: { x: 400, y: 400 } }]);\n",paraId:133,tocIndex:16},{value:"Add new edge data.",paraId:134,tocIndex:17},{value:"addEdgeData(data: EdgeData[] | ((prev: EdgeData[]) => EdgeData[])): void;\n",paraId:135,tocIndex:17},{value:"Parameters",paraId:136,tocIndex:17},{value:":",paraId:136,tocIndex:17},{value:"Parameter",paraId:137,tocIndex:17},{value:"Description",paraId:137,tocIndex:17},{value:"Type",paraId:137,tocIndex:17},{value:"Default",paraId:137,tocIndex:17},{value:"Required",paraId:137,tocIndex:17},{value:"data",paraId:137,tocIndex:17},{value:"Edge data to add or a function returning edge data",paraId:137,tocIndex:17},{value:"EdgeData",paraId:138,tocIndex:17},{value:"[] | ((prev: EdgeData[]) => EdgeData[])",paraId:137,tocIndex:17},{value:"-",paraId:137,tocIndex:17},{value:"✓",paraId:137,tocIndex:17},{value:"Example",paraId:139,tocIndex:17},{value:":",paraId:139,tocIndex:17},{value:"// Add single edge\ngraph.addEdgeData([\n  {\n    id: 'edge1',\n    source: 'node1',\n    target: 'node2',\n    data: {\n      weight: 1,\n      label: 'Relation',\n    },\n  },\n]);\n\n// Add multiple edges\ngraph.addEdgeData([\n  { id: 'edge2', source: 'node2', target: 'node3' },\n  { id: 'edge3', source: 'node3', target: 'node1' },\n]);\n\n// Functional addition\ngraph.addEdgeData((prev) => [...prev, { id: 'edge4', source: 'node1', target: 'node4' }]);\n",paraId:140,tocIndex:17},{value:"Add new combo data.",paraId:141,tocIndex:18},{value:"addComboData(data: ComboData[] | ((prev: ComboData[]) => ComboData[])): void;\n",paraId:142,tocIndex:18},{value:"Parameters",paraId:143,tocIndex:18},{value:":",paraId:143,tocIndex:18},{value:"Parameter",paraId:144,tocIndex:18},{value:"Description",paraId:144,tocIndex:18},{value:"Type",paraId:144,tocIndex:18},{value:"Default",paraId:144,tocIndex:18},{value:"Required",paraId:144,tocIndex:18},{value:"data",paraId:144,tocIndex:18},{value:"Combo data to add or a function returning combo data",paraId:144,tocIndex:18},{value:"ComboData",paraId:145,tocIndex:18},{value:"[] | (prev: ComboData[]) => ComboData[]",paraId:144,tocIndex:18},{value:"-",paraId:144,tocIndex:18},{value:"✓",paraId:144,tocIndex:18},{value:"Example",paraId:146,tocIndex:18},{value:":",paraId:146,tocIndex:18},{value:"graph.addComboData([{ id: 'combo1', children: ['node1', 'node2'] }]);\n",paraId:147,tocIndex:18},{value:"Add child node data to a tree graph node.",paraId:148,tocIndex:19},{value:"⚠️ ",paraId:149,tocIndex:19},{value:"Note",paraId:149,tocIndex:19},{value:": Use addNodeData / addComboData methods to add child nodes to a combo.",paraId:149,tocIndex:19},{value:"addChildrenData(parentId: ID, childrenData: NodeData[]): void;\n",paraId:150,tocIndex:19},{value:"Parameters",paraId:151,tocIndex:19},{value:":",paraId:151,tocIndex:19},{value:"Parameter",paraId:152,tocIndex:19},{value:"Description",paraId:152,tocIndex:19},{value:"Type",paraId:152,tocIndex:19},{value:"Default",paraId:152,tocIndex:19},{value:"Required",paraId:152,tocIndex:19},{value:"parentId",paraId:152,tocIndex:19},{value:"Parent node ID",paraId:152,tocIndex:19},{value:"string",paraId:152,tocIndex:19},{value:"-",paraId:152,tocIndex:19},{value:"✓",paraId:152,tocIndex:19},{value:"childrenData",paraId:152,tocIndex:19},{value:"Child node data",paraId:152,tocIndex:19},{value:"NodeData",paraId:153,tocIndex:19},{value:"[]",paraId:152,tocIndex:19},{value:"-",paraId:152,tocIndex:19},{value:"✓",paraId:152,tocIndex:19},{value:"Example",paraId:154,tocIndex:19},{value:":",paraId:154,tocIndex:19},{value:"graph.addChildrenData('node1', [{ id: 'node2' }]);\n",paraId:155,tocIndex:19},{value:"Remove element data.",paraId:156,tocIndex:20},{value:"removeData(ids: DataID | ((data: GraphData) => DataID)): void;\n",paraId:157,tocIndex:20},{value:"Parameters",paraId:158,tocIndex:20},{value:":",paraId:158,tocIndex:20},{value:"Parameter",paraId:159,tocIndex:20},{value:"Description",paraId:159,tocIndex:20},{value:"Type",paraId:159,tocIndex:20},{value:"Default",paraId:159,tocIndex:20},{value:"Required",paraId:159,tocIndex:20},{value:"ids",paraId:159,tocIndex:20},{value:"Element IDs to remove or a function returning element IDs",paraId:159,tocIndex:20},{value:"DataID",paraId:160,tocIndex:20},{value:" | ((data: GraphData) => DataID)",paraId:159,tocIndex:20},{value:"-",paraId:159,tocIndex:20},{value:"✓",paraId:159,tocIndex:20},{value:"Return Value",paraId:161,tocIndex:20},{value:":",paraId:161,tocIndex:20},{value:"Type",paraId:162,tocIndex:20},{value:": void",paraId:162,tocIndex:20},{value:"Example",paraId:163,tocIndex:20},{value:":",paraId:163,tocIndex:20},{value:"graph.removeData({\n  nodes: ['node-1', 'node-2'],\n  edges: ['edge-1'],\n});\n",paraId:164,tocIndex:20},{value:"Remove node data.",paraId:165,tocIndex:21},{value:"removeNodeData(ids: ID[] | ((data: NodeData[]) => ID[])): void;\n",paraId:166,tocIndex:21},{value:"Parameters",paraId:167,tocIndex:21},{value:":",paraId:167,tocIndex:21},{value:"Parameter",paraId:168,tocIndex:21},{value:"Description",paraId:168,tocIndex:21},{value:"Type",paraId:168,tocIndex:21},{value:"Default",paraId:168,tocIndex:21},{value:"Required",paraId:168,tocIndex:21},{value:"ids",paraId:168,tocIndex:21},{value:"Node IDs to remove or a function returning node IDs",paraId:168,tocIndex:21},{value:"ID",paraId:169,tocIndex:21},{value:"[] | ((data: ",paraId:168,tocIndex:21},{value:"NodeData",paraId:170,tocIndex:21},{value:"[]) => ",paraId:168,tocIndex:21},{value:"ID",paraId:171,tocIndex:21},{value:"[])",paraId:168,tocIndex:21},{value:"-",paraId:168,tocIndex:21},{value:"✓",paraId:168,tocIndex:21},{value:"Return Value",paraId:172,tocIndex:21},{value:":",paraId:172,tocIndex:21},{value:"Type",paraId:173,tocIndex:21},{value:": void",paraId:173,tocIndex:21},{value:"Example",paraId:174,tocIndex:21},{value:":",paraId:174,tocIndex:21},{value:"graph.removeNodeData(['node-1', 'node-2']);\n",paraId:175,tocIndex:21},{value:"Remove edge data.",paraId:176,tocIndex:22},{value:"removeEdgeData(ids: ID[] | ((data: EdgeData[]) => ID[])): void;\n",paraId:177,tocIndex:22},{value:"Parameters",paraId:178,tocIndex:22},{value:":",paraId:178,tocIndex:22},{value:"Parameter",paraId:179,tocIndex:22},{value:"Description",paraId:179,tocIndex:22},{value:"Type",paraId:179,tocIndex:22},{value:"Default",paraId:179,tocIndex:22},{value:"Required",paraId:179,tocIndex:22},{value:"ids",paraId:179,tocIndex:22},{value:"Edge IDs to remove or a function returning edge IDs",paraId:179,tocIndex:22},{value:"ID",paraId:180,tocIndex:22},{value:"[] | ((data: ",paraId:179,tocIndex:22},{value:"EdgeData",paraId:181,tocIndex:22},{value:"[]) => ",paraId:179,tocIndex:22},{value:"ID",paraId:182,tocIndex:22},{value:"[])",paraId:179,tocIndex:22},{value:"-",paraId:179,tocIndex:22},{value:"✓",paraId:179,tocIndex:22},{value:"Return Value",paraId:183,tocIndex:22},{value:":",paraId:183,tocIndex:22},{value:"Type",paraId:184,tocIndex:22},{value:": void",paraId:184,tocIndex:22},{value:"Example",paraId:185,tocIndex:22},{value:":",paraId:185,tocIndex:22},{value:"graph.removeEdgeData(['edge-1']);\n",paraId:186,tocIndex:22},{value:"Remove combo data.",paraId:187,tocIndex:23},{value:"removeComboData(ids: ID[] | ((data: ComboData[]) => ID[])): void;\n",paraId:188,tocIndex:23},{value:"Parameters",paraId:189,tocIndex:23},{value:":",paraId:189,tocIndex:23},{value:"Parameter",paraId:190,tocIndex:23},{value:"Description",paraId:190,tocIndex:23},{value:"Type",paraId:190,tocIndex:23},{value:"Default",paraId:190,tocIndex:23},{value:"Required",paraId:190,tocIndex:23},{value:"ids",paraId:190,tocIndex:23},{value:"Combo IDs to remove or a function returning combo IDs",paraId:190,tocIndex:23},{value:"ID",paraId:191,tocIndex:23},{value:"[] | (data: ",paraId:190,tocIndex:23},{value:"ComboData",paraId:192,tocIndex:23},{value:"[]) => ",paraId:190,tocIndex:23},{value:"ID",paraId:193,tocIndex:23},{value:"[]",paraId:190,tocIndex:23},{value:"-",paraId:190,tocIndex:23},{value:"✓",paraId:190,tocIndex:23},{value:"Return Value",paraId:194,tocIndex:23},{value:":",paraId:194,tocIndex:23},{value:"Type",paraId:195,tocIndex:23},{value:": void",paraId:195,tocIndex:23},{value:"Example",paraId:196,tocIndex:23},{value:":",paraId:196,tocIndex:23},{value:"graph.removeComboData(['combo-1']);\n",paraId:197,tocIndex:23},{value:"Update element data.",paraId:198,tocIndex:24},{value:"⚠️ ",paraId:199,tocIndex:24},{value:"Note",paraId:199,tocIndex:24},{value:": Only the data that needs to be updated needs to be passed in, not the complete data.",paraId:199,tocIndex:24},{value:"updateData(data: PartialGraphData | ((prev: GraphData) => PartialGraphData)): void;\n",paraId:200,tocIndex:24},{value:"Parameters",paraId:201,tocIndex:24},{value:":",paraId:201,tocIndex:24},{value:"Parameter",paraId:202,tocIndex:24},{value:"Description",paraId:202,tocIndex:24},{value:"Type",paraId:202,tocIndex:24},{value:"Default",paraId:202,tocIndex:24},{value:"Required",paraId:202,tocIndex:24},{value:"data",paraId:202,tocIndex:24},{value:"Element data to update or a function returning element data",paraId:202,tocIndex:24},{value:"PartialGraphData",paraId:203,tocIndex:24},{value:" | ((prev: GraphData) => PartialGraphData)",paraId:202,tocIndex:24},{value:"-",paraId:202,tocIndex:24},{value:"✓",paraId:202,tocIndex:24},{value:"Return Value",paraId:204,tocIndex:24},{value:":",paraId:204,tocIndex:24},{value:"Type",paraId:205,tocIndex:24},{value:": void",paraId:205,tocIndex:24},{value:"Example",paraId:206,tocIndex:24},{value:":",paraId:206,tocIndex:24},{value:"graph.updateData({\n  nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  edges: [{ id: 'edge-1', style: { lineWidth: 2 } }],\n});\n",paraId:207,tocIndex:24},{value:"Update node data.",paraId:208,tocIndex:25},{value:"⚠️ ",paraId:209,tocIndex:25},{value:"Note",paraId:209,tocIndex:25},{value:": Only the data that needs to be updated needs to be passed in, not the complete data.",paraId:209,tocIndex:25},{value:"updateNodeData(data: NodeData[] | ((prev: NodeData[]) => NodeData[])): void;\n",paraId:210,tocIndex:25},{value:"Parameters",paraId:211,tocIndex:25},{value:":",paraId:211,tocIndex:25},{value:"Parameter",paraId:212,tocIndex:25},{value:"Description",paraId:212,tocIndex:25},{value:"Type",paraId:212,tocIndex:25},{value:"Default",paraId:212,tocIndex:25},{value:"Required",paraId:212,tocIndex:25},{value:"data",paraId:212,tocIndex:25},{value:"Node data to update or a function returning node data",paraId:212,tocIndex:25},{value:"NodeData[] | (prev: NodeData[]) => NodeData[]",paraId:212,tocIndex:25},{value:"-",paraId:212,tocIndex:25},{value:"✓",paraId:212,tocIndex:25},{value:"Return Value",paraId:213,tocIndex:25},{value:":",paraId:213,tocIndex:25},{value:"Type",paraId:214,tocIndex:25},{value:": void",paraId:214,tocIndex:25},{value:"Example",paraId:215,tocIndex:25},{value:":",paraId:215,tocIndex:25},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 100, y: 100 } }]);\n",paraId:216,tocIndex:25},{value:"Update edge data.",paraId:217,tocIndex:26},{value:"⚠️ ",paraId:218,tocIndex:26},{value:"Note",paraId:218,tocIndex:26},{value:": Only the data that needs to be updated needs to be passed in, not the complete data.",paraId:218,tocIndex:26},{value:"updateEdgeData(data: (PartialEdgeData<EdgeData>[] | ((prev: EdgeData[]) => PartialEdgeData<EdgeData>[]))): void;\n",paraId:219,tocIndex:26},{value:"Parameters",paraId:220,tocIndex:26},{value:":",paraId:220,tocIndex:26},{value:"| Parameter | Description | Type                                                  | Default                                                                                                                  | Required |\n| --------- | ----------- | ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ | -------- | --- | --- |\n| ",paraId:221,tocIndex:26},{value:" |",paraId:221,tocIndex:26},{value:"Return Value",paraId:222,tocIndex:26},{value:":",paraId:222,tocIndex:26},{value:"Type",paraId:223,tocIndex:26},{value:": void",paraId:223,tocIndex:26},{value:"Example",paraId:224,tocIndex:26},{value:":",paraId:224,tocIndex:26},{value:"graph.updateEdgeData([{ id: 'edge-1', style: { lineWidth: 2 } }]);\n",paraId:225,tocIndex:26},{value:"Update combo data.",paraId:226,tocIndex:27},{value:"⚠️ ",paraId:227,tocIndex:27},{value:"Note",paraId:227,tocIndex:27},{value:": Only the data that needs to be updated needs to be passed in, not the complete data.",paraId:227,tocIndex:27},{value:"updateComboData(data: (ComboData[] | ((prev: ComboData[]) => ComboData[]))): void;\n",paraId:228,tocIndex:27},{value:"Parameters",paraId:229,tocIndex:27},{value:":",paraId:229,tocIndex:27},{value:"Parameter",paraId:230,tocIndex:27},{value:"Description",paraId:230,tocIndex:27},{value:"Type",paraId:230,tocIndex:27},{value:"Default",paraId:230,tocIndex:27},{value:"Required",paraId:230,tocIndex:27},{value:"data",paraId:230,tocIndex:27},{value:"Combo data to update or a function returning combo data",paraId:230,tocIndex:27},{value:"ComboData",paraId:231,tocIndex:27},{value:"[] | (prev: ComboData[]) => ComboData[]",paraId:230,tocIndex:27},{value:"-",paraId:230,tocIndex:27},{value:"✓",paraId:230,tocIndex:27},{value:"Return Value",paraId:232,tocIndex:27},{value:":",paraId:232,tocIndex:27},{value:"Type",paraId:233,tocIndex:27},{value:": void",paraId:233,tocIndex:27},{value:"Example",paraId:234,tocIndex:27},{value:":",paraId:234,tocIndex:27},{value:"graph.updateComboData([{ id: 'combo-1', style: { x: 100, y: 100 } }]);\n",paraId:235,tocIndex:27},{value:"Element ID type.",paraId:236,tocIndex:29},{value:"type ID = string;\n",paraId:237,tocIndex:29},{value:"Multiple element ID type.",paraId:238,tocIndex:30},{value:"interface DataID {\n  nodes?: ID[];\n  edges?: ID[];\n  combos?: ID[];\n}\n",paraId:239,tocIndex:30},{value:"G6 graph data type.",paraId:240,tocIndex:31},{value:"interface GraphData {\n  nodes?: NodeData[];\n  edges?: EdgeData[];\n  combos?: ComboData[];\n}\n",paraId:241,tocIndex:31},{value:"Node data type.",paraId:242,tocIndex:32},{value:"interface NodeData {\n  id: string; // Node ID\n  type?: string; // Node type\n  data?: Record<string, any>; // Node data\n  style?: Record<string, any>; // Node style\n  states?: string[]; // Initial node states\n  combo?: string; // Belonging combo\n  children?: string[]; // Array of child node IDs\n}\n",paraId:243,tocIndex:32},{value:"For detailed type definitions, please refer to ",paraId:244,tocIndex:32},{value:"Node Data",paraId:245,tocIndex:32},{value:".",paraId:244,tocIndex:32},{value:"Edge data type.",paraId:246,tocIndex:33},{value:"interface EdgeData {\n  source: string; // Source ID\n  target: string; // Target ID\n  id?: string; // Edge ID\n  type?: string; // Edge type\n  data?: Record<string, any>; // Edge data\n  style?: Record<string, any>; // Edge style\n  states?: string[]; // Initial edge states\n}\n",paraId:247,tocIndex:33},{value:"For detailed type definitions, please refer to ",paraId:248,tocIndex:33},{value:"Edge Data",paraId:249,tocIndex:33},{value:".",paraId:248,tocIndex:33},{value:"Combo data type.",paraId:250,tocIndex:34},{value:"interface ComboData {\n  id: string; // Combo ID\n  type?: string; // Combo type\n  data?: Record<string, any>; // Combo data\n  style?: Record<string, any>; // Combo style\n  states?: string[]; // Initial combo states\n  combo?: string; // Parent combo ID\n}\n",paraId:251,tocIndex:34},{value:"For detailed type definitions, please refer to ",paraId:252,tocIndex:34},{value:"Combo Data",paraId:253,tocIndex:34},{value:".",paraId:252,tocIndex:34}]},44071:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(33229);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"Element",paraId:1,tocIndex:0},{value:" operation API in G6 allows you to control the behavior and attributes of elements such as nodes, edges, and Combos in the graph. These APIs can be used for:",paraId:0,tocIndex:0},{value:"Element State Management",paraId:2,tocIndex:0},{value:": Set, update, or remove the state of elements",paraId:2,tocIndex:0},{value:"Element Display Control",paraId:2,tocIndex:0},{value:": Control the z-index and visibility of elements",paraId:2,tocIndex:0},{value:"Element Collapse/Expand",paraId:2,tocIndex:0},{value:": Operate the collapse/expand state of collapsible elements",paraId:2,tocIndex:0},{value:"Element Position Operations",paraId:2,tocIndex:0},{value:": Move and align element positions",paraId:2,tocIndex:0},{value:"Element Focus",paraId:2,tocIndex:0},{value:": Focus the viewport on specific elements",paraId:2,tocIndex:0},{value:"Through these operations, you can achieve rich interactive effects and visual presentations.",paraId:3,tocIndex:0},{value:"Get the position of an element.",paraId:4,tocIndex:2},{value:"getElementPosition(id: ID): Point;\n",paraId:5,tocIndex:2},{value:"Parameters",paraId:6,tocIndex:2},{value:":",paraId:6,tocIndex:2},{value:"Parameter",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"id",paraId:7,tocIndex:2},{value:"Element ID",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"Return Value",paraId:8,tocIndex:2},{value:":",paraId:8,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:": [number, number] | [number, number, number]",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": Returns the coordinates of the element",paraId:9,tocIndex:2},{value:"Example",paraId:10,tocIndex:2},{value:":",paraId:10,tocIndex:2},{value:"graph.getElementPosition('node1');\n",paraId:11,tocIndex:2},{value:"Get the rendering bounding box of the element itself and its child nodes in the world coordinate system.",paraId:12,tocIndex:3},{value:"getElementRenderBounds(id: ID): AABB;\n",paraId:13,tocIndex:3},{value:"Parameters",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"Parameter",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Default",paraId:15,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:"id",paraId:15,tocIndex:3},{value:"Element ID",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓",paraId:15,tocIndex:3},{value:"Return Value",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:"Type",paraId:17,tocIndex:3},{value:": ",paraId:17,tocIndex:3},{value:"AABB",paraId:18,tocIndex:3},{value:"Description",paraId:17,tocIndex:3},{value:": Returns the rendering bounding box of the element",paraId:17,tocIndex:3},{value:"Get the rendering style of an element.",paraId:19,tocIndex:4},{value:"getElementRenderStyle(id: ID): Record<string, any>;\n",paraId:20,tocIndex:4},{value:"Parameters",paraId:21,tocIndex:4},{value:":",paraId:21,tocIndex:4},{value:"Parameter",paraId:22,tocIndex:4},{value:"Description",paraId:22,tocIndex:4},{value:"Type",paraId:22,tocIndex:4},{value:"Default",paraId:22,tocIndex:4},{value:"Required",paraId:22,tocIndex:4},{value:"id",paraId:22,tocIndex:4},{value:"Element ID",paraId:22,tocIndex:4},{value:"string",paraId:22,tocIndex:4},{value:"-",paraId:22,tocIndex:4},{value:"✓",paraId:22,tocIndex:4},{value:"Return Value",paraId:23,tocIndex:4},{value:":",paraId:23,tocIndex:4},{value:"Type",paraId:24,tocIndex:4},{value:": Record<string, any>",paraId:24,tocIndex:4},{value:"Description",paraId:24,tocIndex:4},{value:": Returns the rendering style of the element",paraId:24,tocIndex:4},{value:"Get the state of an element.",paraId:25,tocIndex:5},{value:"getElementState(id: ID): State[];\n",paraId:26,tocIndex:5},{value:"Parameters",paraId:27,tocIndex:5},{value:":",paraId:27,tocIndex:5},{value:"Parameter",paraId:28,tocIndex:5},{value:"Description",paraId:28,tocIndex:5},{value:"Type",paraId:28,tocIndex:5},{value:"Default",paraId:28,tocIndex:5},{value:"Required",paraId:28,tocIndex:5},{value:"id",paraId:28,tocIndex:5},{value:"Element ID",paraId:28,tocIndex:5},{value:"string",paraId:28,tocIndex:5},{value:"-",paraId:28,tocIndex:5},{value:"✓",paraId:28,tocIndex:5},{value:"Return Value",paraId:29,tocIndex:5},{value:":",paraId:29,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:": ",paraId:30,tocIndex:5},{value:"State",paraId:31,tocIndex:5},{value:"[]",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:": Returns the state of the element",paraId:30,tocIndex:5},{value:"Get the type of an element.",paraId:32,tocIndex:6},{value:"getElementType(id: ID): string;\n",paraId:33,tocIndex:6},{value:"Parameters",paraId:34,tocIndex:6},{value:":",paraId:34,tocIndex:6},{value:"Parameter",paraId:35,tocIndex:6},{value:"Description",paraId:35,tocIndex:6},{value:"Type",paraId:35,tocIndex:6},{value:"Default",paraId:35,tocIndex:6},{value:"Required",paraId:35,tocIndex:6},{value:"id",paraId:35,tocIndex:6},{value:"Element ID",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"✓",paraId:35,tocIndex:6},{value:"Return Value",paraId:36,tocIndex:6},{value:":",paraId:36,tocIndex:6},{value:"Type",paraId:37,tocIndex:6},{value:": string",paraId:37,tocIndex:6},{value:"Description",paraId:37,tocIndex:6},{value:": Returns the type of the element",paraId:37,tocIndex:6},{value:"Get the visibility of an element.",paraId:38,tocIndex:7},{value:"getElementVisibility(id: ID): 'visible' | 'hidden';\n",paraId:39,tocIndex:7},{value:"Parameters",paraId:40,tocIndex:7},{value:":",paraId:40,tocIndex:7},{value:"Parameter",paraId:41,tocIndex:7},{value:"Description",paraId:41,tocIndex:7},{value:"Type",paraId:41,tocIndex:7},{value:"Default",paraId:41,tocIndex:7},{value:"Required",paraId:41,tocIndex:7},{value:"id",paraId:41,tocIndex:7},{value:"Element ID",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"✓",paraId:41,tocIndex:7},{value:"Return Value",paraId:42,tocIndex:7},{value:":",paraId:42,tocIndex:7},{value:"Type",paraId:43,tocIndex:7},{value:": 'visible' | 'hidden'",paraId:43,tocIndex:7},{value:"Description",paraId:43,tocIndex:7},{value:": Returns the visibility of the element",paraId:43,tocIndex:7},{value:"Get the z-index of an element.",paraId:44,tocIndex:8},{value:"getElementZIndex(id: ID): number;\n",paraId:45,tocIndex:8},{value:"Parameters",paraId:46,tocIndex:8},{value:":",paraId:46,tocIndex:8},{value:"Parameter",paraId:47,tocIndex:8},{value:"Description",paraId:47,tocIndex:8},{value:"Type",paraId:47,tocIndex:8},{value:"Default",paraId:47,tocIndex:8},{value:"Required",paraId:47,tocIndex:8},{value:"id",paraId:47,tocIndex:8},{value:"Element ID",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"✓",paraId:47,tocIndex:8},{value:"Return Value",paraId:48,tocIndex:8},{value:":",paraId:48,tocIndex:8},{value:"Type",paraId:49,tocIndex:8},{value:": number",paraId:49,tocIndex:8},{value:"Description",paraId:49,tocIndex:8},{value:": Returns the z-index of the element",paraId:49,tocIndex:8},{value:"Set the state of an element, supporting two calling methods:",paraId:50,tocIndex:9},{value:"// Set the state of a single element\nsetElementState(id: ID, state: State | State[], animation?: boolean): Promise<void>;\n\n// Set the state of multiple elements\nsetElementState(state: Record<ID, State | State[]>, animation?: boolean): Promise<void>;\n",paraId:51,tocIndex:9},{value:"Parameters",paraId:52,tocIndex:9},{value:":",paraId:52,tocIndex:9},{value:"Single Element State Setting",paraId:53,tocIndex:9},{value:"| Parameter | Description       | Type            | Default | Required |\n| --------- | ----------------- | --------------- | ------- | -------- | --- |\n| id        | Element ID to set | string          | -       | ✓        |\n| state     | State to set      | ",paraId:54,tocIndex:9},{value:"State",paraId:55,tocIndex:9},{value:" | State[] | -        | ✓   |\n| animation | Enable animation  | boolean         | -       |          |",paraId:54,tocIndex:9},{value:"Batch Element State Setting",paraId:56,tocIndex:9},{value:"| Parameter | Description                    | Type                       | Default  | Required |\n| --------- | ------------------------------ | -------------------------- | -------- | -------- | --- |\n| state     | Mapping of element ID to state | Record<ID, ",paraId:57,tocIndex:9},{value:"State",paraId:58,tocIndex:9},{value:" | State[]> | -        | ✓   |\n| animation | Enable animation               | boolean                    | -        |          |",paraId:57,tocIndex:9},{value:"Return Value",paraId:59,tocIndex:9},{value:":",paraId:59,tocIndex:9},{value:"Type",paraId:60,tocIndex:9},{value:": Promise",paraId:60,tocIndex:9},{value:"Description",paraId:60,tocIndex:9},{value:": Returns a Promise that resolves when the state setting operation is complete",paraId:60,tocIndex:9},{value:"Example",paraId:61,tocIndex:9},{value:":",paraId:61,tocIndex:9},{value:"// Set the state of a single element\nawait graph.setElementState('node1', 'selected');\n\n// Set the state of multiple elements\nawait graph.setElementState({\n  node1: 'selected',\n  node2: 'hover',\n  node3: ['selected', 'hover'],\n});\n",paraId:62,tocIndex:9},{value:"Set the visibility of an element, supporting two calling methods:",paraId:63,tocIndex:10},{value:"// Set the visibility of a single element\nsetElementVisibility(id: ID, visibility: 'visible' | 'hidden', animation?: boolean): Promise<void>;\n\n// Set the visibility of multiple elements\nsetElementVisibility(visibility: Record<ID, 'visible' | 'hidden'>, animation?: boolean): Promise<void>;\n",paraId:64,tocIndex:10},{value:"Parameters",paraId:65,tocIndex:10},{value:":",paraId:65,tocIndex:10},{value:"Single Element Visibility Setting",paraId:66,tocIndex:10},{value:"| Parameter  | Description       | Type      | Default  | Required |\n| ---------- | ----------------- | --------- | -------- | -------- | --- |\n| id         | Element ID to set | string    | -        | ✓        |\n| visibility | Visibility to set | 'visible' | 'hidden' | -        | ✓   |\n| animation  | Enable animation  | boolean   | -        |          |",paraId:67,tocIndex:10},{value:"Batch Element Visibility Setting",paraId:68,tocIndex:10},{value:"| Parameter  | Description                         | Type                 | Default   | Required |\n| ---------- | ----------------------------------- | -------------------- | --------- | -------- | --- |\n| visibility | Mapping of element ID to visibility | Record<ID, 'visible' | 'hidden'> | -        | ✓   |\n| animation  | Enable animation                    | boolean              | -         |          |",paraId:69,tocIndex:10},{value:"Return Value",paraId:70,tocIndex:10},{value:":",paraId:70,tocIndex:10},{value:"Type",paraId:71,tocIndex:10},{value:": Promise",paraId:71,tocIndex:10},{value:"Description",paraId:71,tocIndex:10},{value:": Returns a Promise that resolves when the visibility setting operation is complete",paraId:71,tocIndex:10},{value:"Example",paraId:72,tocIndex:10},{value:":",paraId:72,tocIndex:10},{value:"// Set the visibility of a single element\nawait graph.setElementVisibility('node1', 'hidden');\n\n// Set the visibility of multiple elements\nawait graph.setElementVisibility({\n  node1: 'hidden',\n  node2: 'visibility',\n});\n",paraId:73,tocIndex:10},{value:"Set the z-index of an element, supporting two calling methods:",paraId:74,tocIndex:11},{value:"// Set the z-index of a single element\nsetElementZIndex(id: ID, zIndex: number): Promise<void>;\n\n// Set the z-index of multiple elements\nsetElementZIndex(zIndex: Record<ID, number>): Promise<void>;\n",paraId:75,tocIndex:11},{value:"Parameters",paraId:76,tocIndex:11},{value:":",paraId:76,tocIndex:11},{value:"Single Element Z-Index Setting",paraId:77,tocIndex:11},{value:"Parameter",paraId:78,tocIndex:11},{value:"Description",paraId:78,tocIndex:11},{value:"Type",paraId:78,tocIndex:11},{value:"Default",paraId:78,tocIndex:11},{value:"Required",paraId:78,tocIndex:11},{value:"id",paraId:78,tocIndex:11},{value:"Element ID",paraId:78,tocIndex:11},{value:"string",paraId:78,tocIndex:11},{value:"-",paraId:78,tocIndex:11},{value:"✓",paraId:78,tocIndex:11},{value:"zIndex",paraId:78,tocIndex:11},{value:"Z-Index",paraId:78,tocIndex:11},{value:"number",paraId:78,tocIndex:11},{value:"-",paraId:78,tocIndex:11},{value:"✓",paraId:78,tocIndex:11},{value:"Batch Element Z-Index Setting",paraId:79,tocIndex:11},{value:"Parameter",paraId:80,tocIndex:11},{value:"Description",paraId:80,tocIndex:11},{value:"Type",paraId:80,tocIndex:11},{value:"Default",paraId:80,tocIndex:11},{value:"Required",paraId:80,tocIndex:11},{value:"zIndex",paraId:80,tocIndex:11},{value:"Mapping of element ID to z-index",paraId:80,tocIndex:11},{value:"Record<ID, number>",paraId:80,tocIndex:11},{value:"-",paraId:80,tocIndex:11},{value:"✓",paraId:80,tocIndex:11},{value:"Return Value",paraId:81,tocIndex:11},{value:":",paraId:81,tocIndex:11},{value:"Type",paraId:82,tocIndex:11},{value:": Promise",paraId:82,tocIndex:11},{value:"Description",paraId:82,tocIndex:11},{value:": Returns a Promise that resolves when the z-index setting operation is complete",paraId:82,tocIndex:11},{value:"Example",paraId:83,tocIndex:11},{value:":",paraId:83,tocIndex:11},{value:"// Set the z-index of a single element\nawait graph.setElementZIndex('node1', 10);\n\n// Set the z-index of multiple elements\nawait graph.setElementZIndex({\n  node1: 10,\n  node2: 20,\n  node3: 30,\n});\n",paraId:84,tocIndex:11},{value:"Set the node style mapping, i.e., the value of ",paraId:85,tocIndex:12},{value:"options.node",paraId:85,tocIndex:12},{value:".",paraId:85,tocIndex:12},{value:"setNode(node: NodeOptions): void;\n",paraId:86,tocIndex:12},{value:"Parameters",paraId:87,tocIndex:12},{value:":",paraId:87,tocIndex:12},{value:"Parameter",paraId:88,tocIndex:12},{value:"Description",paraId:88,tocIndex:12},{value:"Type",paraId:88,tocIndex:12},{value:"Default",paraId:88,tocIndex:12},{value:"Required",paraId:88,tocIndex:12},{value:"node",paraId:88,tocIndex:12},{value:"Node configuration",paraId:88,tocIndex:12},{value:"NodeOptions",paraId:89,tocIndex:12},{value:"-",paraId:88,tocIndex:12},{value:"✓",paraId:88,tocIndex:12},{value:"Example",paraId:90,tocIndex:12},{value:":",paraId:90,tocIndex:12},{value:"// Set the fill color of all nodes to red\ngraph.setNode({\n  style: {\n    fill: 'red',\n  },\n});\n",paraId:91,tocIndex:12},{value:"Set the edge style mapping, i.e., the value of ",paraId:92,tocIndex:13},{value:"options.edge",paraId:92,tocIndex:13},{value:".",paraId:92,tocIndex:13},{value:"setEdge(edge: EdgeOptions): void;\n",paraId:93,tocIndex:13},{value:"Parameters",paraId:94,tocIndex:13},{value:":",paraId:94,tocIndex:13},{value:"Parameter",paraId:95,tocIndex:13},{value:"Description",paraId:95,tocIndex:13},{value:"Type",paraId:95,tocIndex:13},{value:"Default",paraId:95,tocIndex:13},{value:"Required",paraId:95,tocIndex:13},{value:"edge",paraId:95,tocIndex:13},{value:"Edge configuration",paraId:95,tocIndex:13},{value:"EdgeOptions",paraId:96,tocIndex:13},{value:"-",paraId:95,tocIndex:13},{value:"✓",paraId:95,tocIndex:13},{value:"Set the combo style mapping, i.e., the value of ",paraId:97,tocIndex:14},{value:"options.combo",paraId:97,tocIndex:14},{value:".",paraId:97,tocIndex:14},{value:"setCombo(combo: ComboOptions): void;\n",paraId:98,tocIndex:14},{value:"Parameters",paraId:99,tocIndex:14},{value:":",paraId:99,tocIndex:14},{value:"Parameter",paraId:100,tocIndex:14},{value:"Description",paraId:100,tocIndex:14},{value:"Type",paraId:100,tocIndex:14},{value:"Default",paraId:100,tocIndex:14},{value:"Required",paraId:100,tocIndex:14},{value:"combo",paraId:100,tocIndex:14},{value:"Combo configuration",paraId:100,tocIndex:14},{value:"ComboOptions",paraId:101,tocIndex:14},{value:"-",paraId:100,tocIndex:14},{value:"✓",paraId:100,tocIndex:14},{value:"Collapse the specified element, usually used to collapse Combos or nodes with child elements.",paraId:102,tocIndex:15},{value:"collapseElement(id: ID, options?: boolean | CollapseExpandNodeOptions): Promise<void>;\n",paraId:103,tocIndex:15},{value:"Parameters",paraId:104,tocIndex:15},{value:":",paraId:104,tocIndex:15},{value:"| Parameter | Description                                                     | Type    | Default                                                 | Required |\n| --------- | --------------------------------------------------------------- | ------- | ------------------------------------------------------- | -------- | --- |\n| id        | Element ID to collapse                                          | string  | -                                                       | ✓        |\n| options   | Enable animation or detailed configuration for collapsing nodes | boolean | ",paraId:105,tocIndex:15},{value:"CollapseExpandNodeOptions",paraId:106,tocIndex:15},{value:" | -        |     |",paraId:105,tocIndex:15},{value:"Return Value",paraId:107,tocIndex:15},{value:":",paraId:107,tocIndex:15},{value:"Type",paraId:108,tocIndex:15},{value:": Promise",paraId:108,tocIndex:15},{value:"Description",paraId:108,tocIndex:15},{value:": Returns a Promise that resolves when the collapse operation is complete",paraId:108,tocIndex:15},{value:"Example",paraId:109,tocIndex:15},{value:":",paraId:109,tocIndex:15},{value:"// Simple collapse with default configuration\nawait graph.collapseElement('combo1');\n\n// Collapse with animation\ngraph.collapseElement('combo1', true);\n\n// Collapse while ensuring the position of expanded/collapsed nodes remains unchanged\nawait graph.collapseElement('combo1', {\n  align: true,\n});\n",paraId:110,tocIndex:15},{value:"Expand the specified element, usually used to expand previously collapsed Combos or nodes.",paraId:111,tocIndex:16},{value:"expandElement(id: ID, options?: boolean | CollapseExpandNodeOptions): Promise<void>;\n",paraId:112,tocIndex:16},{value:"Parameters",paraId:113,tocIndex:16},{value:":",paraId:113,tocIndex:16},{value:"| Parameter | Description                                                    | Type    | Default                                                 | Required |\n| --------- | -------------------------------------------------------------- | ------- | ------------------------------------------------------- | -------- | --- |\n| id        | Element ID to expand                                           | string  | -                                                       | ✓        |\n| options   | Enable animation or detailed configuration for expanding nodes | boolean | ",paraId:114,tocIndex:16},{value:"CollapseExpandNodeOptions",paraId:115,tocIndex:16},{value:" | -        |     |",paraId:114,tocIndex:16},{value:"Return Value",paraId:116,tocIndex:16},{value:":",paraId:116,tocIndex:16},{value:"Type",paraId:117,tocIndex:16},{value:": Promise",paraId:117,tocIndex:16},{value:"Description",paraId:117,tocIndex:16},{value:": Returns a Promise that resolves when the expand operation is complete",paraId:117,tocIndex:16},{value:"Example",paraId:118,tocIndex:16},{value:":",paraId:118,tocIndex:16},{value:"// Simple expand with default configuration\nawait graph.expandElement('combo1');\n\n// Expand with animation\nawait graph.expandElement('combo1', true);\n\n// Expand while ensuring the position of expanded/collapsed nodes remains unchanged\nawait graph.expandElement('combo1', {\n  align: true,\n});\n",paraId:119,tocIndex:16},{value:"Bring the specified element to the front, making it appear above other overlapping elements.",paraId:120,tocIndex:17},{value:"frontElement(id: ID | ID[]): void;\n",paraId:121,tocIndex:17},{value:"Parameters",paraId:122,tocIndex:17},{value:":",paraId:122,tocIndex:17},{value:"| Parameter | Description | Type   | Default  | Required |\n| --------- | ----------- | ------ | -------- | -------- | --- |\n| id        | Element ID  | string | string[] | -        | ✓   |",paraId:123,tocIndex:17},{value:"Return Value",paraId:124,tocIndex:17},{value:":",paraId:124,tocIndex:17},{value:"Type",paraId:125,tocIndex:17},{value:": void",paraId:125,tocIndex:17},{value:"Example",paraId:126,tocIndex:17},{value:":",paraId:126,tocIndex:17},{value:"// Bring a node to the front\ngraph.frontElement('node1');\n\n// Bring multiple selected nodes to the front\ngraph.frontElement(['node1', 'node2', 'node3']);\n",paraId:127,tocIndex:17},{value:"Show the specified element.",paraId:128,tocIndex:18},{value:"showElement(id: ID | ID[], animation?: boolean): Promise<void>;\n",paraId:129,tocIndex:18},{value:"Parameters",paraId:130,tocIndex:18},{value:":",paraId:130,tocIndex:18},{value:"| Parameter | Description      | Type    | Default  | Required |\n| --------- | ---------------- | ------- | -------- | -------- | --- |\n| id        | Element ID       | string  | string[] | -        | ✓   |\n| animation | Enable animation | boolean | -        |          |",paraId:131,tocIndex:18},{value:"Return Value",paraId:132,tocIndex:18},{value:":",paraId:132,tocIndex:18},{value:"Type",paraId:133,tocIndex:18},{value:": Promise",paraId:133,tocIndex:18},{value:"Description",paraId:133,tocIndex:18},{value:": Returns a Promise that resolves when the show operation is complete",paraId:133,tocIndex:18},{value:"Example",paraId:134,tocIndex:18},{value:":",paraId:134,tocIndex:18},{value:"// Show a single element\nawait graph.showElement('node1');\n\n// Show an element with animation\nawait graph.showElement('node1', true);\n\n// Show multiple elements\nawait graph.showElement(['node1', 'node2', 'node3']);\n",paraId:135,tocIndex:18},{value:"Hide the specified element.",paraId:136,tocIndex:19},{value:"hideElement(id: ID | ID[], animation?: boolean): Promise<void>;\n",paraId:137,tocIndex:19},{value:"Parameters",paraId:138,tocIndex:19},{value:":",paraId:138,tocIndex:19},{value:"| Parameter | Description      | Type    | Default  | Required |\n| --------- | ---------------- | ------- | -------- | -------- | --- |\n| id        | Element ID       | string  | string[] | -        | ✓   |\n| animation | Enable animation | boolean | -        |          |",paraId:139,tocIndex:19},{value:"Return Value",paraId:140,tocIndex:19},{value:":",paraId:140,tocIndex:19},{value:"Type",paraId:141,tocIndex:19},{value:": Promise",paraId:141,tocIndex:19},{value:"Description",paraId:141,tocIndex:19},{value:": Returns a Promise that resolves when the hide operation is complete",paraId:141,tocIndex:19},{value:"Example",paraId:142,tocIndex:19},{value:":",paraId:142,tocIndex:19},{value:"// Hide an element without animation\nawait graph.hideElement('node1');\n\n// Hide an element with animation\nawait graph.hideElement('node1', true);\n\n// Hide multiple elements\nawait graph.hideElement(['node1', 'node2', 'node3'], true);\n",paraId:143,tocIndex:19},{value:"Translate an element by a specified distance, supporting two calling methods:",paraId:144,tocIndex:20},{value:"// Translate an element by a specified distance (relative translation)\ntranslateElement(id: ID, offset: Point, animation?: boolean): Promise<void>;\n\n// Translate multiple elements by a specified distance (relative translation)\ntranslateElement(offsets: Record<ID, Point>, animation?: boolean): Promise<void>;\n",paraId:145,tocIndex:20},{value:"Parameters",paraId:146,tocIndex:20},{value:":",paraId:146,tocIndex:20},{value:"Single Element Translation",paraId:147,tocIndex:20},{value:"Parameter",paraId:148,tocIndex:20},{value:"Description",paraId:148,tocIndex:20},{value:"Type",paraId:148,tocIndex:20},{value:"Default",paraId:148,tocIndex:20},{value:"Required",paraId:148,tocIndex:20},{value:"id",paraId:148,tocIndex:20},{value:"Element ID",paraId:148,tocIndex:20},{value:"string",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"✓",paraId:148,tocIndex:20},{value:"offset",paraId:148,tocIndex:20},{value:"Relative translation distance [dx, dy]",paraId:148,tocIndex:20},{value:"[number, number]",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"✓",paraId:148,tocIndex:20},{value:"animation",paraId:148,tocIndex:20},{value:"Enable animation",paraId:148,tocIndex:20},{value:"boolean",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"Batch Element Translation",paraId:149,tocIndex:20},{value:"Parameter",paraId:150,tocIndex:20},{value:"Description",paraId:150,tocIndex:20},{value:"Type",paraId:150,tocIndex:20},{value:"Default",paraId:150,tocIndex:20},{value:"Required",paraId:150,tocIndex:20},{value:"offsets",paraId:150,tocIndex:20},{value:"Mapping of element ID to translation distance",paraId:150,tocIndex:20},{value:"Record<ID, [number, number]>",paraId:150,tocIndex:20},{value:"-",paraId:150,tocIndex:20},{value:"✓",paraId:150,tocIndex:20},{value:"animation",paraId:150,tocIndex:20},{value:"Enable animation",paraId:150,tocIndex:20},{value:"boolean",paraId:150,tocIndex:20},{value:"-",paraId:150,tocIndex:20},{value:"Return Value",paraId:151,tocIndex:20},{value:":",paraId:151,tocIndex:20},{value:"Type",paraId:152,tocIndex:20},{value:": Promise",paraId:152,tocIndex:20},{value:"Description",paraId:152,tocIndex:20},{value:": Returns a Promise that resolves when the translation operation is complete",paraId:152,tocIndex:20},{value:"Example",paraId:153,tocIndex:20},{value:":",paraId:153,tocIndex:20},{value:"// Translate right by 100 pixels and down by 50 pixels\nawait graph.translateElementBy('node1', [100, 50]);\n\n// Translate with animation\nawait graph.translateElementBy('node1', [100, 50], true);\n\n// Apply the same translation to multiple nodes\nawait graph.translateElementBy(\n  {\n    node1: [50, 50],\n    node2: [100, 100],\n    node3: [150, 150],\n  },\n  true,\n);\n",paraId:154,tocIndex:20},{value:"Move an element to a specified position, supporting two calling methods:",paraId:155,tocIndex:21},{value:"// Move an element to a specified position (absolute position)\ntranslateElementTo(id: ID, position: Point, animation?: boolean): Promise<void>;\n\n// Move multiple elements to specified positions (absolute position)\ntranslateElementTo(positions: Record<ID, Point>, animation?: boolean): Promise<void>;\n",paraId:156,tocIndex:21},{value:"Parameters",paraId:157,tocIndex:21},{value:":",paraId:157,tocIndex:21},{value:"Single Element Movement",paraId:158,tocIndex:21},{value:"Parameter",paraId:159,tocIndex:21},{value:"Description",paraId:159,tocIndex:21},{value:"Type",paraId:159,tocIndex:21},{value:"Default",paraId:159,tocIndex:21},{value:"Required",paraId:159,tocIndex:21},{value:"id",paraId:159,tocIndex:21},{value:"Element ID",paraId:159,tocIndex:21},{value:"string",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"✓",paraId:159,tocIndex:21},{value:"position",paraId:159,tocIndex:21},{value:"Target absolute position [x, y]",paraId:159,tocIndex:21},{value:"[number, number]",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"✓",paraId:159,tocIndex:21},{value:"animation",paraId:159,tocIndex:21},{value:"Enable animation",paraId:159,tocIndex:21},{value:"boolean",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"Batch Element Movement",paraId:160,tocIndex:21},{value:"Parameter",paraId:161,tocIndex:21},{value:"Description",paraId:161,tocIndex:21},{value:"Type",paraId:161,tocIndex:21},{value:"Default",paraId:161,tocIndex:21},{value:"Required",paraId:161,tocIndex:21},{value:"positions",paraId:161,tocIndex:21},{value:"Mapping of element ID to target position",paraId:161,tocIndex:21},{value:"Record<string, [number, number]>",paraId:161,tocIndex:21},{value:"-",paraId:161,tocIndex:21},{value:"✓",paraId:161,tocIndex:21},{value:"animation",paraId:161,tocIndex:21},{value:"Enable animation",paraId:161,tocIndex:21},{value:"boolean",paraId:161,tocIndex:21},{value:"-",paraId:161,tocIndex:21},{value:"Return Value",paraId:162,tocIndex:21},{value:":",paraId:162,tocIndex:21},{value:"Type",paraId:163,tocIndex:21},{value:": Promise",paraId:163,tocIndex:21},{value:"Description",paraId:163,tocIndex:21},{value:": Returns a Promise that resolves when the movement operation is complete",paraId:163,tocIndex:21},{value:"Example",paraId:164,tocIndex:21},{value:":",paraId:164,tocIndex:21},{value:"// Move a node to position (200, 300) on the canvas\nawait graph.translateElementTo('node1', [200, 300]);\n\n// Move with animation\nawait graph.translateElementTo('node1', [200, 300], true);\n\n// Arrange a group of nodes neatly\nawait graph.translateElementTo(\n  {\n    node1: [100, 100],\n    node2: [200, 200],\n    node3: [300, 100],\n  },\n  true,\n);\n",paraId:165,tocIndex:21},{value:"Focus on the specified element, centering it in the viewport.",paraId:166,tocIndex:22},{value:"focusElement(id: ID | ID[], animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:167,tocIndex:22},{value:"Parameters",paraId:168,tocIndex:22},{value:":",paraId:168,tocIndex:22},{value:"| Parameter | Description                         | Type                                                            | Default  | Required |\n| --------- | ----------------------------------- | --------------------------------------------------------------- | -------- | -------- | --- |\n| id        | One or more element IDs to focus on | string                                                          | string[] | -        | ✓   |\n| animation | Viewport animation configuration    | ",paraId:169,tocIndex:22},{value:"ViewportAnimationEffectTiming",paraId:170,tocIndex:22},{value:" | -        |          |",paraId:169,tocIndex:22},{value:"Return Value",paraId:171,tocIndex:22},{value:":",paraId:171,tocIndex:22},{value:"Type",paraId:172,tocIndex:22},{value:": Promise",paraId:172,tocIndex:22},{value:"Description",paraId:172,tocIndex:22},{value:": Returns a Promise that resolves when the focus operation is complete",paraId:172,tocIndex:22},{value:"Example",paraId:173,tocIndex:22},{value:":",paraId:173,tocIndex:22},{value:"// Focus on a single node\nawait graph.focusElement('node1');\n\n// Use custom animation configuration\nawait graph.focusElement('node1', {\n  duration: 800,\n  easing: 'ease-in-out',\n});\n\n// Focus on multiple nodes\nawait graph.focusElement(['node1', 'node2', 'node3']);\n",paraId:174,tocIndex:22},{value:"Configuration options for collapsing or expanding elements.",paraId:175,tocIndex:24},{value:"interface CollapseExpandNodeOptions {\n  /**\n   * Enable animation\n   */\n  animation?: boolean;\n  /**\n   * Ensure the position of expanded/collapsed nodes remains unchanged\n   */\n  align?: boolean;\n}\n",paraId:176,tocIndex:24},{value:"Viewport animation configuration type.",paraId:177,tocIndex:25},{value:"type ViewportAnimationEffectTiming =\n  | boolean // Enable animation\n  | {\n      easing?: string; // Easing function\n      duration?: number; // Animation duration (ms)\n    };\n",paraId:178,tocIndex:25},{value:"AABB (Axis-Aligned Bounding Box) is a fundamental concept in computer graphics.",paraId:179,tocIndex:26},{value:"interface AABB {\n  x: number; // x-coordinate of the top-left corner of the rectangle\n  y: number; // y-coordinate of the top-left corner of the rectangle\n  width: number; // Width of the rectangle\n  height: number; // Height of the rectangle\n}\n",paraId:180,tocIndex:26},{value:"Element state type.",paraId:181,tocIndex:27},{value:"type State = 'selected' | 'hover' | 'active' | 'inactive' | 'disabled' | string;\n",paraId:182,tocIndex:27}]},16810:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(3447);const t=[{value:"G6 provides a powerful event mechanism that allows you to respond to various interactive behaviors occurring in the chart, such as node clicks, edge hovers, canvas drags, etc. Through the event system, you can implement complex interactive logic to enhance user experience.",paraId:0,tocIndex:0},{value:"Events in G6 can be broadly categorized into the following types:",paraId:1,tocIndex:1},{value:"Element Events",paraId:2,tocIndex:1},{value:": Events related to nodes, edges, and Combos, such as ",paraId:2,tocIndex:1},{value:"node:click",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"edge:mouseenter",paraId:2,tocIndex:1},{value:"Canvas Events",paraId:2,tocIndex:1},{value:": Events related to the entire canvas, such as ",paraId:2,tocIndex:1},{value:"canvas:drag",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"canvas:zoom",paraId:2,tocIndex:1},{value:"Lifecycle Events",paraId:2,tocIndex:1},{value:": Events related to the chart lifecycle, such as ",paraId:2,tocIndex:1},{value:"beforerender",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"afterrender",paraId:2,tocIndex:1},{value:"G6 events follow the ",paraId:3,tocIndex:2},{value:"[object]:[event]",paraId:3,tocIndex:2},{value:" format, for example:",paraId:3,tocIndex:2},{value:"node:click",paraId:4,tocIndex:2},{value:" - Node click event",paraId:4,tocIndex:2},{value:"edge:mouseenter",paraId:4,tocIndex:2},{value:" - Mouse enters edge event",paraId:4,tocIndex:2},{value:"canvas:drag",paraId:4,tocIndex:2},{value:" - Canvas drag event",paraId:4,tocIndex:2},{value:"G6 provides a complete set of event constant enums, and it is ",paraId:5,tocIndex:3},{value:"strongly recommended",paraId:5,tocIndex:3},{value:" to use these constants instead of directly using string event names:",paraId:5,tocIndex:3},{value:"import { NodeEvent, EdgeEvent, CanvasEvent, GraphEvent } from '@antv/g6';\n\n// Use constant enums to listen to events\ngraph.on(NodeEvent.CLICK, handleNodeClick);\ngraph.on(EdgeEvent.POINTER_OVER, handleEdgeHover);\ngraph.on(CanvasEvent.DRAG, handleCanvasDrag);\ngraph.on(GraphEvent.AFTER_RENDER, handleAfterRender);\n",paraId:6,tocIndex:3},{value:"Advantages",paraId:7,tocIndex:3},{value:":",paraId:7,tocIndex:3},{value:"Type safety, avoiding string spelling errors",paraId:8,tocIndex:3},{value:"Provides intelligent code hints and auto-completion",paraId:8,tocIndex:3},{value:"Listen to a specified event and execute a callback function when the event is triggered.",paraId:9,tocIndex:5},{value:"on<T extends IEvent = IEvent>(eventName: string, callback: (event: T) => void, once?: boolean): this;\n",paraId:10,tocIndex:5},{value:"Parameter",paraId:11,tocIndex:6},{value:"Description",paraId:11,tocIndex:6},{value:"Type",paraId:11,tocIndex:6},{value:"Default",paraId:11,tocIndex:6},{value:"Required",paraId:11,tocIndex:6},{value:"eventName",paraId:11,tocIndex:6},{value:"Name of the event to listen to",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"✓",paraId:11,tocIndex:6},{value:"callback",paraId:11,tocIndex:6},{value:"Callback function executed when the event is triggered",paraId:11,tocIndex:6},{value:"(event: T) => void",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"✓",paraId:11,tocIndex:6},{value:"once",paraId:11,tocIndex:6},{value:"Whether to listen only once",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"Type:",paraId:12,tocIndex:7},{value:" this (Graph instance)",paraId:12,tocIndex:7},{value:"Description:",paraId:12,tocIndex:7},{value:" Returns the graph instance itself, supporting chain calls",paraId:12,tocIndex:7},{value:"import { NodeEvent, EdgeEvent, CanvasEvent } from '@antv/g6';\n\n// Listen to node click event\ngraph.on(NodeEvent.CLICK, (evt) => {\n  const { target } = evt; // Get the ID of the clicked node\n  console.log(`Node ${target.id} was clicked`);\n\n  // Get node data\n  const nodeData = graph.getNodeData(target.id);\n  console.log('Node data:', nodeData);\n\n  // Modify node state\n  graph.setElementState(target.id, 'selected');\n});\n\n// Listen to edge mouse enter event\ngraph.on(EdgeEvent.POINTER_OVER, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'highlight');\n});\n\n// Listen to canvas drag event\ngraph.on(CanvasEvent.DRAG, (evt) => {\n  console.log('Canvas is being dragged');\n});\n",paraId:13,tocIndex:8},{value:"Listen to an event once, and automatically remove the listener after the event is triggered once.",paraId:14,tocIndex:9},{value:"once<T extends IEvent = IEvent>(eventName: string, callback: (event: T) => void): this;\n",paraId:15,tocIndex:9},{value:"Parameter",paraId:16,tocIndex:10},{value:"Description",paraId:16,tocIndex:10},{value:"Type",paraId:16,tocIndex:10},{value:"Default",paraId:16,tocIndex:10},{value:"Required",paraId:16,tocIndex:10},{value:"eventName",paraId:16,tocIndex:10},{value:"Name of the event to listen to",paraId:16,tocIndex:10},{value:"string",paraId:16,tocIndex:10},{value:"-",paraId:16,tocIndex:10},{value:"✓",paraId:16,tocIndex:10},{value:"callback",paraId:16,tocIndex:10},{value:"Callback function executed when the event is triggered",paraId:16,tocIndex:10},{value:"(event: T) => void",paraId:16,tocIndex:10},{value:"-",paraId:16,tocIndex:10},{value:"✓",paraId:16,tocIndex:10},{value:"Type:",paraId:17,tocIndex:11},{value:" this (Graph instance)",paraId:17,tocIndex:11},{value:"Description:",paraId:17,tocIndex:11},{value:" Returns the graph instance itself, supporting chain calls",paraId:17,tocIndex:11},{value:"import { GraphEvent, NodeEvent } from '@antv/g6';\n\n// Listen to the chart's first load completion event, executed only once\ngraph.once(GraphEvent.AFTER_RENDER, () => {\n  console.log('Chart rendered for the first time');\n  // Execute one-time initialization operations\n  highlightImportantNodes();\n});\n\n// Wait for the user to click a node for the first time and then perform operations\ngraph.once(NodeEvent.CLICK, (evt) => {\n  console.log('User clicked a node for the first time:', evt.target.id);\n  showTutorialTip('You can drag nodes to change their position');\n});\n",paraId:18,tocIndex:12},{value:"Remove all event listeners.",paraId:19,tocIndex:13},{value:"off(): this;\n",paraId:20,tocIndex:13},{value:"Type:",paraId:21,tocIndex:14},{value:" this (Graph instance)",paraId:21,tocIndex:14},{value:"Description:",paraId:21,tocIndex:14},{value:" Returns the graph instance itself, supporting chain calls",paraId:21,tocIndex:14},{value:"// Remove all event listeners\ngraph.off();\nconsole.log('All event listeners have been removed');\n",paraId:22,tocIndex:15},{value:"Remove all listeners of a specified event type.",paraId:23,tocIndex:16},{value:"off(eventName: string): this;\n",paraId:24,tocIndex:16},{value:"Parameter",paraId:25,tocIndex:17},{value:"Description",paraId:25,tocIndex:17},{value:"Type",paraId:25,tocIndex:17},{value:"Default",paraId:25,tocIndex:17},{value:"Required",paraId:25,tocIndex:17},{value:"eventName",paraId:25,tocIndex:17},{value:"Name of the event to remove",paraId:25,tocIndex:17},{value:"string",paraId:25,tocIndex:17},{value:"-",paraId:25,tocIndex:17},{value:"✓",paraId:25,tocIndex:17},{value:"Type:",paraId:26,tocIndex:18},{value:" this (Graph instance)",paraId:26,tocIndex:18},{value:"Description:",paraId:26,tocIndex:18},{value:" Returns the graph instance itself, supporting chain calls",paraId:26,tocIndex:18},{value:"import { NodeEvent } from '@antv/g6';\n\n// Remove all node click event listeners\ngraph.off(NodeEvent.CLICK);\nconsole.log('All node click event listeners have been removed');\n\n// Remove related temporary event listeners after a certain operation mode ends\nfunction exitEditMode() {\n  // Remove all listeners in edit mode\n  graph.off(NodeEvent.DRAG_END);\n  graph.off(NodeEvent.DROP);\n  console.log('Exited edit mode');\n}\n",paraId:27,tocIndex:19},{value:"Remove a specific callback function for a specific event.",paraId:28,tocIndex:20},{value:"off(eventName: string, callback: (...args: any[]) => void): this;\n",paraId:29,tocIndex:20},{value:"Parameter",paraId:30,tocIndex:21},{value:"Description",paraId:30,tocIndex:21},{value:"Type",paraId:30,tocIndex:21},{value:"Default",paraId:30,tocIndex:21},{value:"Required",paraId:30,tocIndex:21},{value:"eventName",paraId:30,tocIndex:21},{value:"Name of the event to remove",paraId:30,tocIndex:21},{value:"string",paraId:30,tocIndex:21},{value:"-",paraId:30,tocIndex:21},{value:"✓",paraId:30,tocIndex:21},{value:"callback",paraId:30,tocIndex:21},{value:"Callback function to remove",paraId:30,tocIndex:21},{value:"(...args: any[]) => void",paraId:30,tocIndex:21},{value:"-",paraId:30,tocIndex:21},{value:"✓",paraId:30,tocIndex:21},{value:"Type:",paraId:31,tocIndex:22},{value:" this (Graph instance)",paraId:31,tocIndex:22},{value:"Description:",paraId:31,tocIndex:22},{value:" Returns the graph instance itself, supporting chain calls",paraId:31,tocIndex:22},{value:"import { NodeEvent } from '@antv/g6';\n\n// Define callback function\nconst handleNodeClick = (evt) => {\n  console.log('Node clicked:', evt.target.id);\n};\n\n// Add listener\ngraph.on(NodeEvent.CLICK, handleNodeClick);\n\n// Later, remove this specific listener at a certain point\ngraph.off(NodeEvent.CLICK, handleNodeClick);\nconsole.log('Specific node click event listener has been removed');\n",paraId:32,tocIndex:23},{value:"G6 provides various event constant enums to facilitate developers in using standardized event names. Below is a detailed description of all event constants:",paraId:33,tocIndex:24},{value:"Constant Name",paraId:34,tocIndex:25},{value:"Event Name",paraId:34,tocIndex:25},{value:"Description",paraId:34,tocIndex:25},{value:"CLICK",paraId:34,tocIndex:25},{value:"node:click",paraId:34,tocIndex:25},{value:"Triggered when a node is clicked",paraId:34,tocIndex:25},{value:"DBLCLICK",paraId:34,tocIndex:25},{value:"node:dblclick",paraId:34,tocIndex:25},{value:"Triggered when a node is double-clicked",paraId:34,tocIndex:25},{value:"POINTER_OVER",paraId:34,tocIndex:25},{value:"node:pointerover",paraId:34,tocIndex:25},{value:"Triggered when the pointer enters a node",paraId:34,tocIndex:25},{value:"POINTER_LEAVE",paraId:34,tocIndex:25},{value:"node:pointerleave",paraId:34,tocIndex:25},{value:"Triggered when the pointer leaves a node",paraId:34,tocIndex:25},{value:"POINTER_ENTER",paraId:34,tocIndex:25},{value:"node:pointerenter",paraId:34,tocIndex:25},{value:"Triggered when the pointer enters a node or its child elements (non-bubbling)",paraId:34,tocIndex:25},{value:"POINTER_MOVE",paraId:34,tocIndex:25},{value:"node:pointermove",paraId:34,tocIndex:25},{value:"Triggered when the pointer moves over a node",paraId:34,tocIndex:25},{value:"POINTER_OUT",paraId:34,tocIndex:25},{value:"node:pointerout",paraId:34,tocIndex:25},{value:"Triggered when the pointer leaves a node",paraId:34,tocIndex:25},{value:"POINTER_DOWN",paraId:34,tocIndex:25},{value:"node:pointerdown",paraId:34,tocIndex:25},{value:"Triggered when the pointer is pressed down on a node",paraId:34,tocIndex:25},{value:"POINTER_UP",paraId:34,tocIndex:25},{value:"node:pointerup",paraId:34,tocIndex:25},{value:"Triggered when the pointer is released on a node",paraId:34,tocIndex:25},{value:"CONTEXT_MENU",paraId:34,tocIndex:25},{value:"node:contextmenu",paraId:34,tocIndex:25},{value:"Triggered when the context menu is opened on a node",paraId:34,tocIndex:25},{value:"DRAG_START",paraId:34,tocIndex:25},{value:"node:dragstart",paraId:34,tocIndex:25},{value:"Triggered when dragging a node starts",paraId:34,tocIndex:25},{value:"DRAG",paraId:34,tocIndex:25},{value:"node:drag",paraId:34,tocIndex:25},{value:"Triggered during node dragging",paraId:34,tocIndex:25},{value:"DRAG_END",paraId:34,tocIndex:25},{value:"node:dragend",paraId:34,tocIndex:25},{value:"Triggered when node dragging ends",paraId:34,tocIndex:25},{value:"DRAG_ENTER",paraId:34,tocIndex:25},{value:"node:dragenter",paraId:34,tocIndex:25},{value:"Triggered when a draggable item enters a node",paraId:34,tocIndex:25},{value:"DRAG_OVER",paraId:34,tocIndex:25},{value:"node:dragover",paraId:34,tocIndex:25},{value:"Triggered when a draggable item is over a node",paraId:34,tocIndex:25},{value:"DRAG_LEAVE",paraId:34,tocIndex:25},{value:"node:dragleave",paraId:34,tocIndex:25},{value:"Triggered when a draggable item leaves a node",paraId:34,tocIndex:25},{value:"DROP",paraId:34,tocIndex:25},{value:"node:drop",paraId:34,tocIndex:25},{value:"Triggered when a draggable item is dropped on a node",paraId:34,tocIndex:25},{value:"Constant Name",paraId:35,tocIndex:26},{value:"Event Name",paraId:35,tocIndex:26},{value:"Description",paraId:35,tocIndex:26},{value:"CLICK",paraId:35,tocIndex:26},{value:"edge:click",paraId:35,tocIndex:26},{value:"Triggered when an edge is clicked",paraId:35,tocIndex:26},{value:"DBLCLICK",paraId:35,tocIndex:26},{value:"edge:dblclick",paraId:35,tocIndex:26},{value:"Triggered when an edge is double-clicked",paraId:35,tocIndex:26},{value:"POINTER_OVER",paraId:35,tocIndex:26},{value:"edge:pointerover",paraId:35,tocIndex:26},{value:"Triggered when the pointer enters an edge",paraId:35,tocIndex:26},{value:"POINTER_LEAVE",paraId:35,tocIndex:26},{value:"edge:pointerleave",paraId:35,tocIndex:26},{value:"Triggered when the pointer leaves an edge",paraId:35,tocIndex:26},{value:"POINTER_ENTER",paraId:35,tocIndex:26},{value:"edge:pointerenter",paraId:35,tocIndex:26},{value:"Triggered when the pointer enters an edge or its child elements (non-bubbling)",paraId:35,tocIndex:26},{value:"POINTER_MOVE",paraId:35,tocIndex:26},{value:"edge:pointermove",paraId:35,tocIndex:26},{value:"Triggered when the pointer moves over an edge",paraId:35,tocIndex:26},{value:"POINTER_OUT",paraId:35,tocIndex:26},{value:"edge:pointerout",paraId:35,tocIndex:26},{value:"Triggered when the pointer leaves an edge",paraId:35,tocIndex:26},{value:"POINTER_DOWN",paraId:35,tocIndex:26},{value:"edge:pointerdown",paraId:35,tocIndex:26},{value:"Triggered when the pointer is pressed down on an edge",paraId:35,tocIndex:26},{value:"POINTER_UP",paraId:35,tocIndex:26},{value:"edge:pointerup",paraId:35,tocIndex:26},{value:"Triggered when the pointer is released on an edge",paraId:35,tocIndex:26},{value:"CONTEXT_MENU",paraId:35,tocIndex:26},{value:"edge:contextmenu",paraId:35,tocIndex:26},{value:"Triggered when the context menu is opened on an edge",paraId:35,tocIndex:26},{value:"DRAG_ENTER",paraId:35,tocIndex:26},{value:"edge:dragenter",paraId:35,tocIndex:26},{value:"Triggered when a draggable item enters an edge",paraId:35,tocIndex:26},{value:"DRAG_OVER",paraId:35,tocIndex:26},{value:"edge:dragover",paraId:35,tocIndex:26},{value:"Triggered when a draggable item is over an edge",paraId:35,tocIndex:26},{value:"DRAG_LEAVE",paraId:35,tocIndex:26},{value:"edge:dragleave",paraId:35,tocIndex:26},{value:"Triggered when a draggable item leaves an edge",paraId:35,tocIndex:26},{value:"DROP",paraId:35,tocIndex:26},{value:"edge:drop",paraId:35,tocIndex:26},{value:"Triggered when a draggable item is dropped on an edge",paraId:35,tocIndex:26},{value:"Constant Name",paraId:36,tocIndex:27},{value:"Event Name",paraId:36,tocIndex:27},{value:"Description",paraId:36,tocIndex:27},{value:"CLICK",paraId:36,tocIndex:27},{value:"combo:click",paraId:36,tocIndex:27},{value:"Triggered when a Combo is clicked",paraId:36,tocIndex:27},{value:"DBLCLICK",paraId:36,tocIndex:27},{value:"combo:dblclick",paraId:36,tocIndex:27},{value:"Triggered when a Combo is double-clicked",paraId:36,tocIndex:27},{value:"POINTER_OVER",paraId:36,tocIndex:27},{value:"combo:pointerover",paraId:36,tocIndex:27},{value:"Triggered when the pointer enters a Combo",paraId:36,tocIndex:27},{value:"POINTER_LEAVE",paraId:36,tocIndex:27},{value:"combo:pointerleave",paraId:36,tocIndex:27},{value:"Triggered when the pointer leaves a Combo",paraId:36,tocIndex:27},{value:"POINTER_ENTER",paraId:36,tocIndex:27},{value:"combo:pointerenter",paraId:36,tocIndex:27},{value:"Triggered when the pointer enters a Combo or its child elements (non-bubbling)",paraId:36,tocIndex:27},{value:"POINTER_MOVE",paraId:36,tocIndex:27},{value:"combo:pointermove",paraId:36,tocIndex:27},{value:"Triggered when the pointer moves over a Combo",paraId:36,tocIndex:27},{value:"POINTER_OUT",paraId:36,tocIndex:27},{value:"combo:pointerout",paraId:36,tocIndex:27},{value:"Triggered when the pointer leaves a Combo",paraId:36,tocIndex:27},{value:"POINTER_DOWN",paraId:36,tocIndex:27},{value:"combo:pointerdown",paraId:36,tocIndex:27},{value:"Triggered when the pointer is pressed down on a Combo",paraId:36,tocIndex:27},{value:"POINTER_UP",paraId:36,tocIndex:27},{value:"combo:pointerup",paraId:36,tocIndex:27},{value:"Triggered when the pointer is released on a Combo",paraId:36,tocIndex:27},{value:"CONTEXT_MENU",paraId:36,tocIndex:27},{value:"combo:contextmenu",paraId:36,tocIndex:27},{value:"Triggered when the context menu is opened on a Combo",paraId:36,tocIndex:27},{value:"DRAG_START",paraId:36,tocIndex:27},{value:"combo:dragstart",paraId:36,tocIndex:27},{value:"Triggered when dragging a Combo starts",paraId:36,tocIndex:27},{value:"DRAG",paraId:36,tocIndex:27},{value:"combo:drag",paraId:36,tocIndex:27},{value:"Triggered during Combo dragging",paraId:36,tocIndex:27},{value:"DRAG_END",paraId:36,tocIndex:27},{value:"combo:dragend",paraId:36,tocIndex:27},{value:"Triggered when Combo dragging ends",paraId:36,tocIndex:27},{value:"DRAG_ENTER",paraId:36,tocIndex:27},{value:"combo:dragenter",paraId:36,tocIndex:27},{value:"Triggered when a draggable item enters a Combo",paraId:36,tocIndex:27},{value:"DRAG_OVER",paraId:36,tocIndex:27},{value:"combo:dragover",paraId:36,tocIndex:27},{value:"Triggered when a draggable item is over a Combo",paraId:36,tocIndex:27},{value:"DRAG_LEAVE",paraId:36,tocIndex:27},{value:"combo:dragleave",paraId:36,tocIndex:27},{value:"Triggered when a draggable item leaves a Combo",paraId:36,tocIndex:27},{value:"DROP",paraId:36,tocIndex:27},{value:"combo:drop",paraId:36,tocIndex:27},{value:"Triggered when a draggable item is dropped on a Combo",paraId:36,tocIndex:27},{value:"Constant Name",paraId:37,tocIndex:28},{value:"Event Name",paraId:37,tocIndex:28},{value:"Description",paraId:37,tocIndex:28},{value:"CLICK",paraId:37,tocIndex:28},{value:"canvas:click",paraId:37,tocIndex:28},{value:"Triggered when clicking on the canvas blank area",paraId:37,tocIndex:28},{value:"DBLCLICK",paraId:37,tocIndex:28},{value:"canvas:dblclick",paraId:37,tocIndex:28},{value:"Triggered when double-clicking on the canvas blank area",paraId:37,tocIndex:28},{value:"POINTER_OVER",paraId:37,tocIndex:28},{value:"canvas:pointerover",paraId:37,tocIndex:28},{value:"Triggered when the pointer enters the canvas",paraId:37,tocIndex:28},{value:"POINTER_LEAVE",paraId:37,tocIndex:28},{value:"canvas:pointerleave",paraId:37,tocIndex:28},{value:"Triggered when the pointer leaves the canvas",paraId:37,tocIndex:28},{value:"POINTER_ENTER",paraId:37,tocIndex:28},{value:"canvas:pointerenter",paraId:37,tocIndex:28},{value:"Triggered when the pointer enters the canvas or its child elements (non-bubbling)",paraId:37,tocIndex:28},{value:"POINTER_MOVE",paraId:37,tocIndex:28},{value:"canvas:pointermove",paraId:37,tocIndex:28},{value:"Triggered when the pointer moves over the canvas",paraId:37,tocIndex:28},{value:"POINTER_OUT",paraId:37,tocIndex:28},{value:"canvas:pointerout",paraId:37,tocIndex:28},{value:"Triggered when the pointer leaves the canvas",paraId:37,tocIndex:28},{value:"POINTER_DOWN",paraId:37,tocIndex:28},{value:"canvas:pointerdown",paraId:37,tocIndex:28},{value:"Triggered when the pointer is pressed down on the canvas",paraId:37,tocIndex:28},{value:"POINTER_UP",paraId:37,tocIndex:28},{value:"canvas:pointerup",paraId:37,tocIndex:28},{value:"Triggered when the pointer is released on the canvas",paraId:37,tocIndex:28},{value:"CONTEXT_MENU",paraId:37,tocIndex:28},{value:"canvas:contextmenu",paraId:37,tocIndex:28},{value:"Triggered when the context menu is opened on the canvas",paraId:37,tocIndex:28},{value:"DRAG_START",paraId:37,tocIndex:28},{value:"canvas:dragstart",paraId:37,tocIndex:28},{value:"Triggered when dragging the canvas starts",paraId:37,tocIndex:28},{value:"DRAG",paraId:37,tocIndex:28},{value:"canvas:drag",paraId:37,tocIndex:28},{value:"Triggered during canvas dragging",paraId:37,tocIndex:28},{value:"DRAG_END",paraId:37,tocIndex:28},{value:"canvas:dragend",paraId:37,tocIndex:28},{value:"Triggered when canvas dragging ends",paraId:37,tocIndex:28},{value:"DRAG_ENTER",paraId:37,tocIndex:28},{value:"canvas:dragenter",paraId:37,tocIndex:28},{value:"Triggered when a draggable item enters the canvas",paraId:37,tocIndex:28},{value:"DRAG_OVER",paraId:37,tocIndex:28},{value:"canvas:dragover",paraId:37,tocIndex:28},{value:"Triggered when a draggable item is over the canvas",paraId:37,tocIndex:28},{value:"DRAG_LEAVE",paraId:37,tocIndex:28},{value:"canvas:dragleave",paraId:37,tocIndex:28},{value:"Triggered when a draggable item leaves the canvas",paraId:37,tocIndex:28},{value:"DROP",paraId:37,tocIndex:28},{value:"canvas:drop",paraId:37,tocIndex:28},{value:"Triggered when a draggable item is dropped on the canvas",paraId:37,tocIndex:28},{value:"WHEEL",paraId:37,tocIndex:28},{value:"canvas:wheel",paraId:37,tocIndex:28},{value:"Triggered when scrolling the mouse wheel on the canvas",paraId:37,tocIndex:28},{value:"Constant Name",paraId:38,tocIndex:29},{value:"Event Name",paraId:38,tocIndex:29},{value:"Description",paraId:38,tocIndex:29},{value:"BEFORE_CANVAS_INIT",paraId:38,tocIndex:29},{value:"beforecanvasinit",paraId:38,tocIndex:29},{value:"Triggered before canvas initialization",paraId:38,tocIndex:29},{value:"AFTER_CANVAS_INIT",paraId:38,tocIndex:29},{value:"aftercanvasinit",paraId:38,tocIndex:29},{value:"Triggered after canvas initialization",paraId:38,tocIndex:29},{value:"BEFORE_SIZE_CHANGE",paraId:38,tocIndex:29},{value:"beforesizechange",paraId:38,tocIndex:29},{value:"Triggered before viewport size change",paraId:38,tocIndex:29},{value:"AFTER_SIZE_CHANGE",paraId:38,tocIndex:29},{value:"aftersizechange",paraId:38,tocIndex:29},{value:"Triggered after viewport size change",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_CREATE",paraId:38,tocIndex:29},{value:"beforeelementcreate",paraId:38,tocIndex:29},{value:"Triggered before element creation",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_CREATE",paraId:38,tocIndex:29},{value:"afterelementcreate",paraId:38,tocIndex:29},{value:"Triggered after element creation",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_UPDATE",paraId:38,tocIndex:29},{value:"beforeelementupdate",paraId:38,tocIndex:29},{value:"Triggered before element update",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_UPDATE",paraId:38,tocIndex:29},{value:"afterelementupdate",paraId:38,tocIndex:29},{value:"Triggered after element update",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_DESTROY",paraId:38,tocIndex:29},{value:"beforeelementdestroy",paraId:38,tocIndex:29},{value:"Triggered before element destruction",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_DESTROY",paraId:38,tocIndex:29},{value:"afterelementdestroy",paraId:38,tocIndex:29},{value:"Triggered after element destruction",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_TRANSLATE",paraId:38,tocIndex:29},{value:"beforeelementtranslate",paraId:38,tocIndex:29},{value:"Triggered before element translation",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_TRANSLATE",paraId:38,tocIndex:29},{value:"afterelementtranslate",paraId:38,tocIndex:29},{value:"Triggered after element translation",paraId:38,tocIndex:29},{value:"BEFORE_DRAW",paraId:38,tocIndex:29},{value:"beforedraw",paraId:38,tocIndex:29},{value:"Triggered before drawing starts",paraId:38,tocIndex:29},{value:"AFTER_DRAW",paraId:38,tocIndex:29},{value:"afterdraw",paraId:38,tocIndex:29},{value:"Triggered after drawing ends",paraId:38,tocIndex:29},{value:"BEFORE_RENDER",paraId:38,tocIndex:29},{value:"beforerender",paraId:38,tocIndex:29},{value:"Triggered before rendering starts",paraId:38,tocIndex:29},{value:"AFTER_RENDER",paraId:38,tocIndex:29},{value:"afterrender",paraId:38,tocIndex:29},{value:"Triggered after rendering completes",paraId:38,tocIndex:29},{value:"BEFORE_ANIMATE",paraId:38,tocIndex:29},{value:"beforeanimate",paraId:38,tocIndex:29},{value:"Triggered before animation starts",paraId:38,tocIndex:29},{value:"AFTER_ANIMATE",paraId:38,tocIndex:29},{value:"afteranimate",paraId:38,tocIndex:29},{value:"Triggered after animation ends",paraId:38,tocIndex:29},{value:"BEFORE_LAYOUT",paraId:38,tocIndex:29},{value:"beforelayout",paraId:38,tocIndex:29},{value:"Triggered before layout starts",paraId:38,tocIndex:29},{value:"AFTER_LAYOUT",paraId:38,tocIndex:29},{value:"afterlayout",paraId:38,tocIndex:29},{value:"Triggered after layout ends",paraId:38,tocIndex:29},{value:"BEFORE_STAGE_LAYOUT",paraId:38,tocIndex:29},{value:"beforestagelayout",paraId:38,tocIndex:29},{value:"Triggered before each stage in pipeline layout",paraId:38,tocIndex:29},{value:"AFTER_STAGE_LAYOUT",paraId:38,tocIndex:29},{value:"afterstagelayout",paraId:38,tocIndex:29},{value:"Triggered after each stage in pipeline layout",paraId:38,tocIndex:29},{value:"BEFORE_TRANSFORM",paraId:38,tocIndex:29},{value:"beforetransform",paraId:38,tocIndex:29},{value:"Triggered before viewport transformation",paraId:38,tocIndex:29},{value:"AFTER_TRANSFORM",paraId:38,tocIndex:29},{value:"aftertransform",paraId:38,tocIndex:29},{value:"Triggered after viewport transformation",paraId:38,tocIndex:29},{value:"BATCH_START",paraId:38,tocIndex:29},{value:"batchstart",paraId:38,tocIndex:29},{value:"Triggered when batch operation starts",paraId:38,tocIndex:29},{value:"BATCH_END",paraId:38,tocIndex:29},{value:"batchend",paraId:38,tocIndex:29},{value:"Triggered when batch operation ends",paraId:38,tocIndex:29},{value:"BEFORE_DESTROY",paraId:38,tocIndex:29},{value:"beforedestroy",paraId:38,tocIndex:29},{value:"Triggered before chart destruction",paraId:38,tocIndex:29},{value:"AFTER_DESTROY",paraId:38,tocIndex:29},{value:"afterdestroy",paraId:38,tocIndex:29},{value:"Triggered after chart destruction",paraId:38,tocIndex:29},{value:"BEFORE_RENDERER_CHANGE",paraId:38,tocIndex:29},{value:"beforerendererchange",paraId:38,tocIndex:29},{value:"Triggered before renderer change",paraId:38,tocIndex:29},{value:"AFTER_RENDERER_CHANGE",paraId:38,tocIndex:29},{value:"afterrendererchange",paraId:38,tocIndex:29},{value:"Triggered after renderer change",paraId:38,tocIndex:29},{value:"Constant Name",paraId:39,tocIndex:30},{value:"Event Name",paraId:39,tocIndex:30},{value:"Description",paraId:39,tocIndex:30},{value:"KEY_DOWN",paraId:39,tocIndex:30},{value:"keydown",paraId:39,tocIndex:30},{value:"Triggered when a keyboard key is pressed down",paraId:39,tocIndex:30},{value:"KEY_UP",paraId:39,tocIndex:30},{value:"keyup",paraId:39,tocIndex:30},{value:"Triggered when a keyboard key is released",paraId:39,tocIndex:30},{value:"These are events without prefixes and can be used to listen to global events:",paraId:40,tocIndex:31},{value:"Constant Name",paraId:41,tocIndex:31},{value:"Event Name",paraId:41,tocIndex:31},{value:"Description",paraId:41,tocIndex:31},{value:"CLICK",paraId:41,tocIndex:31},{value:"click",paraId:41,tocIndex:31},{value:"Triggered when any element is clicked",paraId:41,tocIndex:31},{value:"DBLCLICK",paraId:41,tocIndex:31},{value:"dblclick",paraId:41,tocIndex:31},{value:"Triggered when any element is double-clicked",paraId:41,tocIndex:31},{value:"POINTER_OVER",paraId:41,tocIndex:31},{value:"pointerover",paraId:41,tocIndex:31},{value:"Triggered when the pointer enters any element",paraId:41,tocIndex:31},{value:"POINTER_LEAVE",paraId:41,tocIndex:31},{value:"pointerleave",paraId:41,tocIndex:31},{value:"Triggered when the pointer leaves any element",paraId:41,tocIndex:31},{value:"POINTER_ENTER",paraId:41,tocIndex:31},{value:"pointerenter",paraId:41,tocIndex:31},{value:"Triggered when the pointer enters any element or its child elements (non-bubbling)",paraId:41,tocIndex:31},{value:"POINTER_MOVE",paraId:41,tocIndex:31},{value:"pointermove",paraId:41,tocIndex:31},{value:"Triggered when the pointer moves over any element",paraId:41,tocIndex:31},{value:"POINTER_OUT",paraId:41,tocIndex:31},{value:"pointerout",paraId:41,tocIndex:31},{value:"Triggered when the pointer leaves any element",paraId:41,tocIndex:31},{value:"POINTER_DOWN",paraId:41,tocIndex:31},{value:"pointerdown",paraId:41,tocIndex:31},{value:"Triggered when the pointer is pressed down on any element",paraId:41,tocIndex:31},{value:"POINTER_UP",paraId:41,tocIndex:31},{value:"pointerup",paraId:41,tocIndex:31},{value:"Triggered when the pointer is released on any element",paraId:41,tocIndex:31},{value:"CONTEXT_MENU",paraId:41,tocIndex:31},{value:"contextmenu",paraId:41,tocIndex:31},{value:"Triggered when the context menu is opened on any element",paraId:41,tocIndex:31},{value:"DRAG_START",paraId:41,tocIndex:31},{value:"dragstart",paraId:41,tocIndex:31},{value:"Triggered when dragging any element starts",paraId:41,tocIndex:31},{value:"DRAG",paraId:41,tocIndex:31},{value:"drag",paraId:41,tocIndex:31},{value:"Triggered during any element dragging",paraId:41,tocIndex:31},{value:"DRAG_END",paraId:41,tocIndex:31},{value:"dragend",paraId:41,tocIndex:31},{value:"Triggered when any element dragging ends",paraId:41,tocIndex:31},{value:"DRAG_ENTER",paraId:41,tocIndex:31},{value:"dragenter",paraId:41,tocIndex:31},{value:"Triggered when a draggable item enters any element",paraId:41,tocIndex:31},{value:"DRAG_OVER",paraId:41,tocIndex:31},{value:"dragover",paraId:41,tocIndex:31},{value:"Triggered when a draggable item is over any element",paraId:41,tocIndex:31},{value:"DRAG_LEAVE",paraId:41,tocIndex:31},{value:"dragleave",paraId:41,tocIndex:31},{value:"Triggered when a draggable item leaves any element",paraId:41,tocIndex:31},{value:"DROP",paraId:41,tocIndex:31},{value:"drop",paraId:41,tocIndex:31},{value:"Triggered when a draggable item is dropped on any element",paraId:41,tocIndex:31},{value:"KEY_DOWN",paraId:41,tocIndex:31},{value:"keydown",paraId:41,tocIndex:31},{value:"Triggered when a keyboard key is pressed down",paraId:41,tocIndex:31},{value:"KEY_UP",paraId:41,tocIndex:31},{value:"keyup",paraId:41,tocIndex:31},{value:"Triggered when a keyboard key is released",paraId:41,tocIndex:31},{value:"WHEEL",paraId:41,tocIndex:31},{value:"wheel",paraId:41,tocIndex:31},{value:"Triggered when scrolling the mouse wheel",paraId:41,tocIndex:31},{value:"PINCH",paraId:41,tocIndex:31},{value:"pinch",paraId:41,tocIndex:31},{value:"Triggered when pinching or spreading fingers on a multi-touch screen",paraId:41,tocIndex:31},{value:"G6's event API supports chain calls, allowing you to register multiple events consecutively:",paraId:42,tocIndex:33},{value:"import { NodeEvent, EdgeEvent, CanvasEvent } from '@antv/g6';\n\n// Use constant enums + chain calls\ngraph.on(NodeEvent.CLICK, handleNodeClick).on(EdgeEvent.CLICK, handleEdgeClick).on(CanvasEvent.WHEEL, handleCanvasZoom);\n",paraId:43,tocIndex:33},{value:"You can use the event bubbling mechanism to listen to all child element events on the parent element:",paraId:44,tocIndex:34},{value:"import { CommonEvent } from '@antv/g6';\n\n// Handle all element click events uniformly\ngraph.on(CommonEvent.CLICK, (evt) => {\n  const { targetType, target } = evt;\n  if (targetType === 'node') {\n    console.log('Clicked on node:', target.id);\n  } else if (targetType === 'edge') {\n    console.log('Clicked on edge:', target.id);\n  } else {\n    console.log('Clicked on canvas blank area');\n  }\n});\n",paraId:45,tocIndex:34},{value:"Most event callback functions receive an event object containing the following common properties:",paraId:46,tocIndex:35},{value:"target",paraId:47,tocIndex:35},{value:" - The element that triggered the event",paraId:47,tocIndex:35},{value:"targetType",paraId:47,tocIndex:35},{value:" - The type of the element that triggered the event (node/edge/combo/canvas)",paraId:47,tocIndex:35},{value:"originalTarget",paraId:47,tocIndex:35},{value:" - The original graphic that triggered the event",paraId:47,tocIndex:35},{value:"currentTarget",paraId:47,tocIndex:35},{value:" - The current object that triggered the event",paraId:47,tocIndex:35},{value:"originalEvent",paraId:47,tocIndex:35},{value:" - The original browser event object",paraId:47,tocIndex:35},{value:"With these properties, you can precisely control interactive behavior.",paraId:48,tocIndex:35}]},22522:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(38122);const t=[{value:"G6 provides the functionality to export the graph as an image, allowing you to export the current canvas content as a DataURL format. This is convenient for saving, sharing, or further processing. The exported image will retain all visible elements on the canvas, including nodes, edges, combos, and other custom graphics.",paraId:0,tocIndex:0},{value:"Export the current canvas as an image in DataURL format.",paraId:1,tocIndex:2},{value:"toDataURL(options?: Partial<DataURLOptions>): Promise<string>;\n",paraId:2,tocIndex:2},{value:"Parameters",paraId:3,tocIndex:2},{value:"Parameter",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Type",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:"options",paraId:4,tocIndex:2},{value:"Export image configuration",paraId:4,tocIndex:2},{value:"Partial<DataURLOptions>",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"Return Value",paraId:5,tocIndex:2},{value:"Returns a Promise that resolves to a DataURL string representing the image.",paraId:6,tocIndex:2},{value:"DataURLOptions Type Definition",paraId:7,tocIndex:2},{value:"Parameter",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"mode",paraId:8,tocIndex:2},{value:"'viewport' | 'overall'",paraId:8,tocIndex:2},{value:"No",paraId:8,tocIndex:2},{value:"Export mode ",paraId:8,tocIndex:2},{value:" - viewport: Export viewport content ",paraId:8,tocIndex:2},{value:" - overall: Export entire canvas",paraId:8,tocIndex:2},{value:"type",paraId:8,tocIndex:2},{value:"'image/png' | 'image/jpeg' | 'image/webp'",paraId:8,tocIndex:2},{value:"No",paraId:8,tocIndex:2},{value:"Image type ",paraId:8,tocIndex:2},{value:" - image/png: PNG format ",paraId:8,tocIndex:2},{value:" - image/jpeg: JPEG format ",paraId:8,tocIndex:2},{value:" - image/webp: WebP format",paraId:8,tocIndex:2},{value:"encoderOptions",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"No",paraId:8,tocIndex:2},{value:"Image quality, only effective for image/jpeg and image/webp, range 0 ~ 1",paraId:8,tocIndex:2},{value:"G6 5.0 only provides an API to export the canvas as a Base64 image (",paraId:9,tocIndex:3},{value:"toDataURL",paraId:10,tocIndex:3},{value:"). If you need to download the image, you can use the following method:",paraId:9,tocIndex:3},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:11,tocIndex:3},{value:"The exported image content may not include the complete canvas content. The export range only includes the content within the Graph canvas. Some plugins use custom containers, canvases, etc., which will not appear in the exported image.",paraId:12}]},8143:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(68153);const t=[{value:"Destroy the current graph instance and release all resources related to it.",paraId:0,tocIndex:1},{value:"⚠️ ",paraId:1,tocIndex:1},{value:"Note",paraId:1,tocIndex:1},{value:": After destruction, no operations can be performed. If you need to use it again, you must create a new graph instance.",paraId:1,tocIndex:1},{value:"destroy(): void;\n",paraId:2,tocIndex:1},{value:"Usage Scenarios",paraId:3,tocIndex:1},{value:":",paraId:3,tocIndex:1},{value:"When the user closes the chart or switches to another view, this method can be called to release resources.",paraId:4,tocIndex:1},{value:"When needing to recreate a graph instance, ensure the old instance is destroyed first to avoid memory leaks.",paraId:4,tocIndex:1}]},1754:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(786);const t=[{value:"Layout",paraId:0,tocIndex:0},{value:" is a crucial part of graph visualization, determining the positioning of nodes on the canvas. G6 offers a variety of layout algorithms to meet different data structures and visualization needs. Through the layout API, you can:",paraId:1,tocIndex:0},{value:"Set and update the graph's layout configuration",paraId:2,tocIndex:0},{value:"Execute or stop layout calculations",paraId:2,tocIndex:0},{value:"Combine multiple layout strategies",paraId:2,tocIndex:0},{value:"Customize layout algorithms",paraId:2,tocIndex:0},{value:"A suitable layout can clearly display the relationship patterns between nodes, enhancing the graph's readability and aesthetics.",paraId:3,tocIndex:0},{value:"Set the graph's layout algorithm and configuration.",paraId:4,tocIndex:2},{value:"⚠️ ",paraId:5,tocIndex:2},{value:"Note",paraId:5,tocIndex:2},{value:": Calling this function won't automatically re-layout, so there's need to call ",paraId:5,tocIndex:2},{value:"graph.layout()",paraId:5,tocIndex:2},{value:" separately.",paraId:5,tocIndex:2},{value:"setLayout(layout: LayoutOptions | ((prev: LayoutOptions) => LayoutOptions)): void;\n",paraId:6,tocIndex:2},{value:"Parameters",paraId:7,tocIndex:2},{value:"Parameter",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"Layout configuration object, or a function returning a new configuration based on the previous one",paraId:8,tocIndex:2},{value:"LayoutOptions",paraId:9,tocIndex:2},{value:" | ((prev: LayoutOptions) => LayoutOptions)",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"Example 1",paraId:10,tocIndex:2},{value:": Set a force-directed layout",paraId:10,tocIndex:2},{value:"// Set a simple force-directed layout\ngraph.setLayout({\n  type: 'force',\n  preventOverlap: true, // Prevent node overlap\n  nodeStrength: -50, // Repulsion between nodes, negative value for repulsion\n  edgeStrength: 0.5, // Edge strength, affects edge length\n});\n",paraId:11,tocIndex:2},{value:"Example 2",paraId:12,tocIndex:2},{value:": Update layout using a function",paraId:12,tocIndex:2},{value:"// Update based on the current layout configuration\ngraph.setLayout((prevLayout) => {\n  // If the previous layout was force-directed, adjust its parameters\n  if (prevLayout.type === 'force') {\n    return {\n      ...prevLayout,\n      preventOverlap: true,\n      nodeStrength: -100, // Increase repulsion\n      alphaDecay: 0.01, // Lower decay rate for more iteration time\n    };\n  }\n\n  // Otherwise, switch to radial layout\n  return {\n    type: 'radial',\n    unitRadius: 100,\n    preventOverlap: true,\n  };\n});\n",paraId:13,tocIndex:2},{value:"Example 3",paraId:14,tocIndex:2},{value:": Set a combined layout",paraId:14,tocIndex:2},{value:"// Set a combined layout - different nodes use different layout algorithms\ngraph.setLayout([\n  {\n    type: 'grid',\n    // Filter function: only nodes with type 'main' participate in the layout\n    nodeFilter: (node) => node.data.type === 'main',\n    rows: 1,\n  },\n  {\n    type: 'circle',\n    nodeFilter: (node) => node.data.type === 'sub',\n    radius: 100,\n  },\n]);\n",paraId:15,tocIndex:2},{value:"Get the current layout configuration.",paraId:16,tocIndex:3},{value:"getLayout(): LayoutOptions;\n",paraId:17,tocIndex:3},{value:"Return Value",paraId:18,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"LayoutOptions",paraId:20,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:": The current layout configuration object",paraId:19,tocIndex:3},{value:"Example",paraId:21,tocIndex:3},{value:"// Get the current layout configuration\nconst currentLayout = graph.getLayout();\nconsole.log('Current layout type:', currentLayout.type);\n",paraId:22,tocIndex:3},{value:"Execute layout calculations. When graph data changes, call this method to trigger the layout algorithm to recalculate node positions.",paraId:23,tocIndex:4},{value:"layout(layoutOptions?: LayoutOptions): Promise<void>;\n",paraId:24,tocIndex:4},{value:"Parameters",paraId:25,tocIndex:4},{value:"Parameter",paraId:26,tocIndex:4},{value:"Description",paraId:26,tocIndex:4},{value:"Type",paraId:26,tocIndex:4},{value:"Default",paraId:26,tocIndex:4},{value:"Required",paraId:26,tocIndex:4},{value:"layoutOptions",paraId:26,tocIndex:4},{value:"Layout configuration object",paraId:26,tocIndex:4},{value:"LayoutOptions",paraId:27,tocIndex:4},{value:" | ((prev: LayoutOptions) => LayoutOptions)",paraId:26,tocIndex:4},{value:"-",paraId:26,tocIndex:4},{value:"If ",paraId:28,tocIndex:4},{value:"layoutOptions",paraId:28,tocIndex:4},{value:" is provided, it takes precedence over the graph's current layout configuration.",paraId:28,tocIndex:4},{value:"Note",paraId:29,tocIndex:4},{value:"Layout calculation is an asynchronous process, especially for complex layout algorithms like force-directed layout. This method returns a Promise, which can be used to perform subsequent operations after the layout is complete.",paraId:30,tocIndex:4},{value:"Example 1",paraId:31,tocIndex:4},{value:": Basic usage",paraId:31,tocIndex:4},{value:"// Execute layout\nawait graph.layout();\nconsole.log('Layout calculation complete');\n",paraId:32,tocIndex:4},{value:"Example 2",paraId:33,tocIndex:4},{value:": Re-layout after adding data",paraId:33,tocIndex:4},{value:"// Add new nodes and edges\ngraph.addData({\n  nodes: [{ id: 'newNode1' }, { id: 'newNode2' }],\n  edges: [{ id: 'newEdge', source: 'existingNode', target: 'newNode1' }],\n});\n\n// Draw new nodes and edges\nawait graph.draw();\n\n// Recalculate layout\nawait graph.layout();\n",paraId:34,tocIndex:4},{value:"Example 3",paraId:35,tocIndex:4},{value:": Listen to layout events",paraId:35,tocIndex:4},{value:"import { GraphEvent } from '@antv/g6';\n\n// Before layout starts\ngraph.on(GraphEvent.BEFORE_LAYOUT, () => {\n  console.log('Layout calculation starting...');\n});\n\n// After layout completes\ngraph.on(GraphEvent.AFTER_LAYOUT, () => {\n  console.log('Layout calculation complete');\n});\n\n// Execute layout\ngraph.layout();\n",paraId:36,tocIndex:4},{value:"Stop an ongoing layout calculation. Mainly used to stop iterative layout algorithms like force-directed layout.",paraId:37,tocIndex:5},{value:"stopLayout(): void;\n",paraId:38,tocIndex:5},{value:"Note",paraId:39,tocIndex:5},{value:"Applicable to layouts with iterative animations, currently ",paraId:40,tocIndex:5},{value:"force",paraId:40,tocIndex:5},{value:" belongs to this category. If the layout calculation takes too long, you can manually stop the iteration.",paraId:40,tocIndex:5},{value:"Example 1",paraId:41,tocIndex:5},{value:": Basic usage",paraId:41,tocIndex:5},{value:"// Stop layout after 5 seconds\nsetTimeout(() => {\n  graph.stopLayout();\n  console.log('Layout manually stopped');\n}, 5000);\n",paraId:42,tocIndex:5},{value:"Example 2",paraId:43,tocIndex:5},{value:": Stop layout with user interaction",paraId:43,tocIndex:5},{value:"// Stop layout when the user clicks the canvas\nimport { CanvasEvent } from '@antv/g6';\n\ngraph.on(CanvasEvent.CLICK, () => {\n  graph.stopLayout();\n  console.log('User clicked canvas, layout stopped');\n});\n",paraId:44,tocIndex:5},{value:"Layout configuration type, can be a single layout configuration or an array of layout configurations.",paraId:45,tocIndex:7},{value:"type LayoutOptions = SingleLayoutOptions | SingleLayoutOptions[];\n",paraId:46,tocIndex:7},{value:"Single layout configuration, can be a built-in layout configuration or a custom base layout configuration.",paraId:47,tocIndex:8},{value:"type SingleLayoutOptions = BuiltInLayoutOptions | BaseLayoutOptions;\n",paraId:48,tocIndex:8},{value:"Basic configuration items common to all layout types.",paraId:49,tocIndex:9},{value:"interface BaseLayoutOptions {\n  // Layout type\n  type: string;\n\n  // Node filter function for participating in the layout\n  nodeFilter?: (node: NodeData) => boolean;\n\n  // Whether to calculate the layout before initializing elements\n  preLayout?: boolean;\n\n  // Whether invisible nodes participate in the layout (effective when preLayout is true)\n  isLayoutInvisibleNodes?: boolean;\n\n  // Enable layout animation, for iterative layouts, animation transitions occur between iterations\n  animation?: boolean;\n\n  // Whether to run the layout in a WebWorker\n  enableWorker?: boolean;\n\n  // Number of iterations for iterative layouts\n  iterations?: number;\n\n  // Other specific layout configuration items\n  [key: string]: any;\n}\n",paraId:50,tocIndex:9},{value:"Configuration for G6's built-in layout types, see ",paraId:51,tocIndex:10},{value:"API - Built-in Layouts",paraId:52,tocIndex:10},{value:" for details.",paraId:51,tocIndex:10}]},1718:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(10714);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"options",paraId:1,tocIndex:0},{value:" of a G6 graph instance control various aspects of the graph, including canvas settings, viewport properties, data, layout, styles, interaction behaviors, plugins, and more. By configuring these options appropriately, you can flexibly customize the appearance and behavior of the graph.",paraId:0,tocIndex:0},{value:"Options can be specified when creating a graph instance or dynamically modified at runtime through the API. Some basic configurations (such as devicePixelRatio, container) require destroying and recreating the graph instance to take effect after modification.",paraId:2,tocIndex:0},{value:"Retrieve all configuration options of the current graph.",paraId:3,tocIndex:2},{value:"getOptions(): GraphOptions;\n",paraId:4,tocIndex:2},{value:"Return Value",paraId:5,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:": ",paraId:6,tocIndex:2},{value:"GraphOptions",paraId:7,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:": Complete configuration options of the current graph",paraId:6,tocIndex:2},{value:"Example",paraId:8,tocIndex:2},{value:"// Retrieve the current graph's options\nconst options = graph.getOptions();\nconsole.log('Current graph options:', options);\n\n// Retrieve specific options\nconsole.log('Current canvas width:', options.width);\nconsole.log('Current layout options:', options.layout);\n",paraId:9,tocIndex:2},{value:"Update the graph's configuration options.",paraId:10,tocIndex:3},{value:"setOptions(options: GraphOptions): void;\n",paraId:11,tocIndex:3},{value:"Parameters",paraId:12,tocIndex:3},{value:"Parameter",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default",paraId:13,tocIndex:3},{value:"Required",paraId:13,tocIndex:3},{value:"options",paraId:13,tocIndex:3},{value:"New configuration options",paraId:13,tocIndex:3},{value:"GraphOptions",paraId:14,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"Note",paraId:15,tocIndex:3},{value:"⚠️ ",paraId:16,tocIndex:3},{value:"Attention",paraId:16,tocIndex:3},{value:": To update basic properties like devicePixelRatio, container, etc., you need to destroy the current graph instance and recreate it. Most other configurations can be dynamically updated.",paraId:16,tocIndex:3},{value:"Example 1",paraId:17,tocIndex:3},{value:": Basic Usage",paraId:17,tocIndex:3},{value:"// Update graph configuration\ngraph.setOptions({\n  width: 1000, // Update width\n  height: 800, // Update height\n  autoFit: true, // Enable auto-fit\n  animation: true, // Enable animation\n});\n",paraId:18,tocIndex:3},{value:"Example 2",paraId:19,tocIndex:3},{value:": Update Theme",paraId:19,tocIndex:3},{value:"// Update graph theme configuration\ngraph.setOptions({\n  theme: {\n    type: 'dark', // Switch to dark theme\n    // Custom theme configuration\n    node: {\n      palette: ['#1AAF8B', '#F8E71C', '#8B572A', '#7ED321'],\n    },\n    edge: {\n      palette: ['#F5A623', '#F8E71C', '#8B572A', '#7ED321'],\n    },\n  },\n});\n",paraId:20,tocIndex:3},{value:"Example 3",paraId:21,tocIndex:3},{value:": Update Layout Configuration",paraId:21,tocIndex:3},{value:"// Update layout configuration\ngraph.setOptions({\n  layout: {\n    type: 'force', // Switch to force-directed layout\n    preventOverlap: true,\n    nodeStrength: -50,\n    edgeStrength: 0.7,\n  },\n});\n",paraId:22,tocIndex:3},{value:"Example 4",paraId:23,tocIndex:3},{value:": Update Default Node and Edge Configuration",paraId:23,tocIndex:3},{value:"// Update default style configuration for nodes and edges\ngraph.setOptions({\n  node: {\n    style: {\n      fill: '#91d5ff',\n      stroke: '#40a9ff',\n      lineWidth: 1,\n      radius: 10,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 2,\n      endArrow: true,\n    },\n  },\n});\n",paraId:24,tocIndex:3},{value:"type GraphOptions = {\n  // Whether to enable zooming\n  enableZoom?: boolean;\n\n  // Whether to enable dragging\n  enableDrag?: boolean;\n\n  // Default style for nodes\n  defaultNodeStyle?: {\n    fill: string;\n    stroke: string;\n  };\n\n  // Additional configuration options for the graph\n  [configKey: string]: any;\n};\n",paraId:25,tocIndex:5}]},52119:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(81775);const t=[{value:"Plugins",paraId:0,tocIndex:0},{value:" are an important mechanism in G6 for extending functionality and enhancing the interactive experience of graphs. Plugins typically provide independent functional modules, such as thumbnails, toolbars, context menus, etc. They integrate well with the main graph while maintaining modular and maintainable code.",paraId:1,tocIndex:0},{value:'The plugin system is designed to follow the "plug and play" principle, allowing dynamic addition or removal as needed.',paraId:2,tocIndex:0},{value:"Retrieve the plugin instance specified by the key, used to access and operate the methods provided by the plugin.",paraId:3,tocIndex:2},{value:"getPluginInstance<T extends Plugin>(key: string): T;\n",paraId:4,tocIndex:2},{value:"Parameters",paraId:5,tocIndex:2},{value:"Parameter",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:"key",paraId:6,tocIndex:2},{value:"Unique identifier of the plugin",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"Return Value",paraId:7,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:": Plugin instance",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:": The plugin instance corresponding to the specified key",paraId:8,tocIndex:2},{value:"Note",paraId:9,tocIndex:2},{value:"Many plugins provide specific API methods, which can be directly called by obtaining the plugin instance. For example, the fullscreen plugin provides ",paraId:10,tocIndex:2},{value:"request()",paraId:10,tocIndex:2},{value:" and ",paraId:10,tocIndex:2},{value:"exit()",paraId:10,tocIndex:2},{value:" methods to control fullscreen status.",paraId:10,tocIndex:2},{value:"Example",paraId:11,tocIndex:2},{value:": Operate the fullscreen plugin",paraId:11,tocIndex:2},{value:"// Get the fullscreen plugin instance\nconst fullscreen = graph.getPluginInstance('fullscreen');\n\n// Request to enter fullscreen\nfullscreen.request();\n\n// Exit fullscreen later\nsetTimeout(() => {\n  fullscreen.exit();\n}, 5000);\n",paraId:12,tocIndex:2},{value:"Retrieve all configured plugins in the current graph.",paraId:13,tocIndex:3},{value:"getPlugins(): PluginOptions;\n",paraId:14,tocIndex:3},{value:"Return Value",paraId:15,tocIndex:3},{value:"Type",paraId:16,tocIndex:3},{value:": ",paraId:16,tocIndex:3},{value:"PluginOptions",paraId:17,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:": All configured plugins in the current graph",paraId:16,tocIndex:3},{value:"Example",paraId:18,tocIndex:3},{value:"// Get all plugin configurations\nconst plugins = graph.getPlugins();\n\n// View currently active plugins\nconsole.log('Current graph plugin configurations:', plugins);\n",paraId:19,tocIndex:3},{value:"Set the graph's plugins, replacing all existing plugin configurations.",paraId:20,tocIndex:4},{value:"setPlugins(plugins: PluginOptions | ((prev: PluginOptions) => PluginOptions)): void;\n",paraId:21,tocIndex:4},{value:"Parameters",paraId:22,tocIndex:4},{value:"Parameter",paraId:23,tocIndex:4},{value:"Description",paraId:23,tocIndex:4},{value:"Type",paraId:23,tocIndex:4},{value:"Default",paraId:23,tocIndex:4},{value:"Required",paraId:23,tocIndex:4},{value:"plugins",paraId:23,tocIndex:4},{value:"New plugin configurations, or a function returning new configurations based on the current ones",paraId:23,tocIndex:4},{value:"PluginOptions",paraId:24,tocIndex:4},{value:" | ((prev: PluginOptions) => PluginOptions)",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"✓",paraId:23,tocIndex:4},{value:"Note",paraId:25,tocIndex:4},{value:"The set plugins will completely replace the original plugin configurations. To add new plugins based on existing ones, you can use functional updates:",paraId:26,tocIndex:4},{value:"graph.setPlugins((plugins) => [...plugins, { type: 'grid', key: 'grid-line' }]);\n",paraId:27,tocIndex:4},{value:"Example 1",paraId:28,tocIndex:4},{value:": Set basic plugins",paraId:28,tocIndex:4},{value:"// Set multiple basic plugins\ngraph.setPlugins([\n  // String form (using default configuration)\n  'minimap',\n\n  // Object form (custom configuration)\n  {\n    type: 'grid',\n    key: 'grid-line',\n  },\n  {\n    type: 'toolbar',\n    key: 'graph-toolbar',\n    position: 'top-right',\n  },\n]);\n",paraId:29,tocIndex:4},{value:"Example 2",paraId:30,tocIndex:4},{value:": Use functional updates",paraId:30,tocIndex:4},{value:"// Add new plugins to existing configurations\ngraph.setPlugins((currentPlugins) => [\n  ...currentPlugins,\n  {\n    type: 'grid',\n    key: 'grid-line',\n  },\n]);\n\n// Replace specific plugins\ngraph.setPlugins((currentPlugins) => {\n  // Filter out existing grid plugins\n  const filteredPlugins = currentPlugins.filter((plugin) => {\n    if (typeof plugin === 'string') return plugin !== 'grid';\n    if (typeof plugin === 'function') return true;\n    return plugin.type !== 'grid';\n  });\n\n  // Add new grid plugin configuration\n  return [\n    ...filteredPlugins,\n    {\n      type: 'grid',\n      key: 'new-grid',\n      follow: true,\n    },\n  ];\n});\n",paraId:31,tocIndex:4},{value:"Update the configuration of a specified plugin, identified by the ",paraId:32,tocIndex:5},{value:"key",paraId:32,tocIndex:5},{value:" of the plugin to be updated.",paraId:32,tocIndex:5},{value:"updatePlugin(plugin: UpdatePluginOption): void;\n",paraId:33,tocIndex:5},{value:"Parameters",paraId:34,tocIndex:5},{value:"Parameter",paraId:35,tocIndex:5},{value:"Description",paraId:35,tocIndex:5},{value:"Type",paraId:35,tocIndex:5},{value:"Default",paraId:35,tocIndex:5},{value:"Required",paraId:35,tocIndex:5},{value:"plugin",paraId:35,tocIndex:5},{value:"Configuration of the plugin to be updated",paraId:35,tocIndex:5},{value:"UpdatePluginOption",paraId:36,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"✓",paraId:35,tocIndex:5},{value:"Note",paraId:37,tocIndex:5},{value:"To update a plugin, the ",paraId:38,tocIndex:5},{value:"key",paraId:38,tocIndex:5},{value:" field must be specified in the original plugin configuration to accurately locate and update the plugin.",paraId:38,tocIndex:5},{value:"Example 1",paraId:39,tocIndex:5},{value:": Update plugin configuration",paraId:39,tocIndex:5},{value:"// Specify key when initially setting plugins\ngraph.setPlugins([\n  {\n    type: 'grid',\n    key: 'main-grid',\n    follow: true,\n  },\n]);\n\n// Update grid plugin configuration\ngraph.updatePlugin({\n  key: 'main-grid',\n  follow: false,\n});\n",paraId:40,tocIndex:5},{value:"Plugin configuration type, representing an array of plugin configurations.",paraId:41,tocIndex:7},{value:"type PluginOptions = (string | CustomPluginOption | ((this: Graph) => CustomPluginOption))[];\n",paraId:42,tocIndex:7},{value:"Custom plugin configuration interface, used to configure plugin parameters.",paraId:43,tocIndex:8},{value:"type CustomPluginOption = {\n  // Plugin type\n  type: string;\n\n  // Plugin key, i.e., unique identifier\n  // Used to identify the plugin for further operations\n  key?: string;\n\n  // Other configuration items for different types of plugins\n  [configKey: string]: any;\n};\n",paraId:44,tocIndex:8},{value:"Configuration interface for updating plugins, used to dynamically modify plugin parameters.",paraId:45,tocIndex:9},{value:"type UpdatePluginOption = {\n  // Unique identifier of the plugin to be updated\n  key: string;\n\n  // Other configuration items to be updated\n  [configKey: string]: unknown;\n};\n",paraId:46,tocIndex:9}]},81874:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(18627);const t=[{value:"G6 provides a series of drawing and rendering-related APIs to control the display process of graphical elements. In G6, drawing and rendering are two different concepts:",paraId:0,tocIndex:0},{value:"Drawing (draw)",paraId:1,tocIndex:0},{value:": Responsible only for drawing graphical elements onto the canvas, without involving layout calculations.",paraId:1,tocIndex:0},{value:"Rendering (render)",paraId:1,tocIndex:0},{value:": A complete rendering process, including data processing, layout calculations, and final drawing.",paraId:1,tocIndex:0},{value:"Understanding the differences between these APIs is crucial for optimizing performance and achieving specific effects.",paraId:2,tocIndex:0},{value:"Draw elements without performing layout calculations.",paraId:3,tocIndex:2},{value:"draw(): Promise<void>;\n",paraId:4,tocIndex:2},{value:"Note",paraId:5,tocIndex:2},{value:"The ",paraId:6,tocIndex:2},{value:"draw",paraId:6,tocIndex:2},{value:" method only executes the drawing process of elements and does not recalculate the layout.",paraId:6,tocIndex:2},{value:"⚠️ ",paraId:7,tocIndex:2},{value:"Attention",paraId:7,tocIndex:2},{value:": ",paraId:7,tocIndex:2},{value:"draw",paraId:7,tocIndex:2},{value:" is an asynchronous method, requiring the use of ",paraId:7,tocIndex:2},{value:"await",paraId:7,tocIndex:2},{value:" or Promise chaining to ensure subsequent operations are executed after drawing is complete.",paraId:7,tocIndex:2},{value:"Example 1",paraId:8,tocIndex:2},{value:": Basic Usage",paraId:8,tocIndex:2},{value:"// Basic usage\nawait graph.draw();\n",paraId:9,tocIndex:2},{value:"Example 2",paraId:10,tocIndex:2},{value:": Redraw after modifying node styles",paraId:10,tocIndex:2},{value:"// Redraw after modifying node styles\ngraph.updateNodeData([\n  {\n    id: 'node1',\n    style: {\n      fill: 'red',\n      stroke: 'blue',\n      lineWidth: 2,\n    },\n  },\n]);\n\n// Only draw the updated styles without re-layout\nawait graph.draw();\n",paraId:11,tocIndex:2},{value:"Example 3",paraId:12,tocIndex:2},{value:": Batch update multiple elements and draw once",paraId:12,tocIndex:2},{value:"// Update multiple nodes\ngraph.updateNodeData([{ id: 'node1', style: { fill: 'red' } }]);\ngraph.updateNodeData([{ id: 'node2', style: { fill: 'blue' } }]);\n\n// Update edges\ngraph.updateEdgeData([{ id: 'edge1', style: { stroke: 'green' } }]);\n\n// Draw after batch operations\nawait graph.draw();\n",paraId:13,tocIndex:2},{value:"Example 4",paraId:14,tocIndex:2},{value:": Use event listener to detect drawing completion",paraId:14,tocIndex:2},{value:"import { GraphEvent } from '@antv/g6';\n\ngraph.on(GraphEvent.AFTER_DRAW, () => {\n  console.log('Drawing complete');\n});\n\nawait graph.draw();\n",paraId:15,tocIndex:2},{value:"Execute the complete rendering process, including data processing, layout calculations, and drawing.",paraId:16,tocIndex:3},{value:"render(): Promise<void>;\n",paraId:17,tocIndex:3},{value:"Note",paraId:18,tocIndex:3},{value:"The ",paraId:19,tocIndex:3},{value:"render",paraId:19,tocIndex:3},{value:" method executes the complete rendering process:",paraId:19,tocIndex:3},{value:"Process data updates",paraId:20,tocIndex:3},{value:"Draw elements onto the canvas",paraId:20,tocIndex:3},{value:"Execute layout algorithms",paraId:20,tocIndex:3},{value:"Example 1",paraId:21,tocIndex:3},{value:": Basic Usage",paraId:21,tocIndex:3},{value:"// Basic usage\nawait graph.render();\n",paraId:22,tocIndex:3},{value:"Example 2",paraId:23,tocIndex:3},{value:": Render after adding new data",paraId:23,tocIndex:3},{value:"graph.addData({\n  nodes: [{ id: 'node3' }, { id: 'node4' }],\n  edges: [{ id: 'edge2', source: 'node1', target: 'node3' }],\n});\nawait graph.render();\n",paraId:24,tocIndex:3},{value:"Example 3",paraId:25,tocIndex:3},{value:": Listen to rendering events",paraId:25,tocIndex:3},{value:"import { GraphEvent } from '@antv/g6';\n\n// Before rendering starts\ngraph.on(GraphEvent.BEFORE_RENDER, () => {\n  console.log('Rendering starts...');\n  // Show loading indicator\n  showLoadingIndicator();\n});\n\n// After rendering completes\ngraph.on(GraphEvent.AFTER_RENDER, () => {\n  console.log('Rendering complete');\n  // Hide loading indicator\n  hideLoadingIndicator();\n});\n\ngraph.render();\n",paraId:26,tocIndex:3},{value:"Clear all elements on the canvas, including nodes, edges, and other graphical elements.",paraId:27,tocIndex:4},{value:"clear(): Promise<void>;\n",paraId:28,tocIndex:4},{value:"Note",paraId:29,tocIndex:4},{value:"This method deletes all elements in the graph but retains the canvas configuration and styles. It is an asynchronous method that returns a Promise.",paraId:30,tocIndex:4},{value:"Example",paraId:31,tocIndex:4},{value:"// Basic usage\nawait graph.clear();\n",paraId:32,tocIndex:4},{value:"Use ",paraId:33,tocIndex:6},{value:"draw()",paraId:33,tocIndex:6},{value:" when:\n",paraId:33,tocIndex:6},{value:"Only the styles or states of elements are modified, without needing to recalculate positions.",paraId:34,tocIndex:6},{value:"Performance-sensitive, aiming to avoid unnecessary layout calculations.",paraId:34,tocIndex:6},{value:"Use ",paraId:33,tocIndex:6},{value:"render()",paraId:33,tocIndex:6},{value:" when:\n",paraId:33,tocIndex:6},{value:"Initializing the graph.",paraId:35,tocIndex:6},{value:"Changing layout configurations.",paraId:35,tocIndex:6},{value:"Adding or removing a large number of nodes/edges.",paraId:35,tocIndex:6},{value:"Need to recalculate positions of all elements.",paraId:35,tocIndex:6}]},87695:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(71828);const t=[{value:"G6 allows users to customize the appearance of graphs through themes. Themes can be used to define colors, shapes, and styles for nodes, edges, and other graph elements.",paraId:0,tocIndex:0},{value:"Get the theme",paraId:1,tocIndex:2},{value:"getTheme(): ThemeOptions;\n",paraId:2,tocIndex:2},{value:"Related Parameters",paraId:3},{value:"Return Value",paraId:4,tocIndex:2},{value:":",paraId:4,tocIndex:2},{value:"Type:",paraId:5,tocIndex:2},{value:" false | 'light' | 'dark' | string",paraId:5,tocIndex:2},{value:"Description:",paraId:6,tocIndex:2},{value:" Current theme",paraId:6,tocIndex:2},{value:"Set the theme",paraId:7,tocIndex:3},{value:"setTheme(theme: ThemeOptions | ((prev: ThemeOptions) => ThemeOptions)): void;\n",paraId:8,tocIndex:3},{value:"Example",paraId:9,tocIndex:3},{value:"graph.setTheme('dark');\n",paraId:10,tocIndex:3},{value:"Related Parameters",paraId:3},{value:"Parameter",paraId:11,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"theme",paraId:14,tocIndex:3},{value:"false | 'light' | 'dark' | string | ((prev: false | 'light' | 'dark' | string) => false | 'light' | 'dark' | string)",paraId:15,tocIndex:3},{value:"Theme name",paraId:16,tocIndex:3},{value:"Return Value",paraId:17,tocIndex:3},{value:":",paraId:17,tocIndex:3},{value:"Type:",paraId:18,tocIndex:3},{value:" void",paraId:18,tocIndex:3},{value:"type ThemeOptions = {\n  // Colors used in the theme\n  colors: string[];\n\n  // Node style settings\n  nodeStyle?: {\n    fill: string;\n    stroke: string;\n  };\n\n  // Edge style settings\n  edgeStyle?: {\n    stroke: string;\n  };\n\n  // Additional configuration options for the theme\n  [configKey: string]: any;\n};\n",paraId:19,tocIndex:5}]},23722:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(99135);const t=[{value:"Data Transformation",paraId:0,tocIndex:0},{value:" is a powerful feature in G6 that allows for processing and transforming data during the graph rendering process. With data transformers, you can achieve various data processing needs, such as:",paraId:1,tocIndex:0},{value:"Data Filtering: Filter nodes and edges to be displayed based on conditions",paraId:2,tocIndex:0},{value:"Data Calculation: Generate new attributes based on original data, such as calculating node size based on the number of connections, without polluting the original data",paraId:2,tocIndex:0},{value:"Data Aggregation: Aggregate a large number of nodes into fewer nodes to improve the performance of large-scale graphs",paraId:2,tocIndex:0},{value:"Data transformation occurs at specific stages of the rendering process, allowing flexible changes to the final presentation without modifying the original data source.",paraId:3,tocIndex:0},{value:"Retrieve all configured data transformers in the current graph.",paraId:4,tocIndex:2},{value:"getTransforms(): TransformOptions;\n",paraId:5,tocIndex:2},{value:"Return Value",paraId:6,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:": ",paraId:7,tocIndex:2},{value:"TransformOptions",paraId:8,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:": All configured data transformers in the current graph",paraId:7,tocIndex:2},{value:"Example",paraId:9,tocIndex:2},{value:"// Retrieve all data transformers\nconst transforms = graph.getTransforms();\nconsole.log('Data transformers in the current graph:', transforms);\n",paraId:10,tocIndex:2},{value:"Set the data transformers for the graph, replacing all existing transformers.",paraId:11,tocIndex:3},{value:"setTransforms(transforms: TransformOptions | ((prev: TransformOptions) => TransformOptions)): void;\n",paraId:12,tocIndex:3},{value:"Parameters",paraId:13,tocIndex:3},{value:"Parameter",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Default",paraId:14,tocIndex:3},{value:"Required",paraId:14,tocIndex:3},{value:"transforms",paraId:14,tocIndex:3},{value:"New data transformer configurations, or a function returning new configurations based on the current ones",paraId:14,tocIndex:3},{value:"TransformOptions",paraId:15,tocIndex:3},{value:" | (prev: TransformOptions) => TransformOptions",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"Note",paraId:16,tocIndex:3},{value:"Data transformers can process data at different stages of the graph rendering process. The set data transformations will completely replace the original ones. To add new data transformations based on existing ones, you can use functional updates.",paraId:17,tocIndex:3},{value:"Example 1",paraId:18,tocIndex:3},{value:": Set basic data transformations",paraId:18,tocIndex:3},{value:"graph.setTransforms(['process-parallel-edges', 'map-node-size']);\n",paraId:19,tocIndex:3},{value:"Example 2",paraId:20,tocIndex:3},{value:": Set data transformations with configurations",paraId:20,tocIndex:3},{value:"graph.setTransforms([\n  // String form (using default configuration)\n  'process-parallel-edges',\n\n  // Object form (custom configuration)\n  {\n    type: 'process-parallel-edges',\n    key: 'my-process-parallel-edges',\n    distance: 20, // Distance between parallel edges\n  },\n]);\n",paraId:21,tocIndex:3},{value:"Example 3",paraId:22,tocIndex:3},{value:": Use functional updates",paraId:22,tocIndex:3},{value:"// Add new data transformations to existing configurations\ngraph.setTransforms((currentTransforms) => [\n  ...currentTransforms,\n  {\n    type: 'map-node-size',\n    key: 'my-map-node-size',\n    maxSize: 100,\n    minSize: 20,\n  },\n]);\n",paraId:23,tocIndex:3},{value:"Update the configuration of a specified data transformer, identified by the ",paraId:24,tocIndex:4},{value:"key",paraId:24,tocIndex:4},{value:" of the transformer to be updated.",paraId:24,tocIndex:4},{value:"updateTransform(transform: UpdateTransformOption): void;\n",paraId:25,tocIndex:4},{value:"Parameters",paraId:26,tocIndex:4},{value:"Parameter",paraId:27,tocIndex:4},{value:"Description",paraId:27,tocIndex:4},{value:"Type",paraId:27,tocIndex:4},{value:"Default",paraId:27,tocIndex:4},{value:"Required",paraId:27,tocIndex:4},{value:"transform",paraId:27,tocIndex:4},{value:"Configuration of the data transformer to be updated",paraId:27,tocIndex:4},{value:"UpdateTransformOption",paraId:28,tocIndex:4},{value:"-",paraId:27,tocIndex:4},{value:"✓",paraId:27,tocIndex:4},{value:"Note",paraId:29,tocIndex:4},{value:"To update a data transformer, the ",paraId:30,tocIndex:4},{value:"key",paraId:30,tocIndex:4},{value:" field must be specified in the original data transformer configuration to accurately locate and update the transformer.",paraId:30,tocIndex:4},{value:"Example",paraId:31,tocIndex:4},{value:": Update data transformer configuration",paraId:31,tocIndex:4},{value:"// Specify key when initially setting data transformers\ngraph.setTransforms([\n  {\n    type: 'process-parallel-edges',\n    key: 'my-process-parallel-edges',\n    distance: 20,\n  },\n]);\n\n// Update distance between parallel edges\ngraph.updateTransform({\n  key: 'my-process-parallel-edges',\n  distance: 30,\n});\n",paraId:32,tocIndex:4},{value:"Data transformer configuration type, representing an array of data transformer configurations.",paraId:33,tocIndex:6},{value:"type TransformOptions = (CustomTransformOption | ((this: Graph) => CustomTransformOption))[];\n",paraId:34,tocIndex:6},{value:"Custom data transformer configuration interface, used to configure data processing parameters.",paraId:35,tocIndex:7},{value:"type CustomTransformOption = {\n  // Data processing type\n  type: string;\n\n  // Unique identifier for the data transformer\n  key?: string;\n\n  // Other configuration items for different types of data processing\n  [configKey: string]: any;\n};\n",paraId:36,tocIndex:7},{value:"Configuration interface for updating data transformers, used to dynamically modify data processing parameters.",paraId:37,tocIndex:8},{value:"type UpdateTransformOption = {\n  // Unique identifier of the data transformer to be updated\n  key: string;\n\n  // Other configuration items to be updated\n  [configKey: string]: unknown;\n};\n",paraId:38,tocIndex:8}]},25224:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(3938);const t=[{value:"G6 provides a series of viewport operation APIs to control the zooming, panning, and rotating of the canvas. These operations help users better view and interact with graphical content. Through viewport operations, you can achieve the following functions:",paraId:0,tocIndex:0},{value:"Zoom the canvas to view details or the global view",paraId:1,tocIndex:0},{value:"Pan the canvas to view different areas",paraId:1,tocIndex:0},{value:"Rotate the canvas to get different perspectives",paraId:1,tocIndex:0},{value:"Automatically fit content to the viewport",paraId:1,tocIndex:0},{value:"Viewport operations in G6 are mainly divided into the following categories:",paraId:2,tocIndex:1},{value:"Zoom Operations",paraId:3,tocIndex:1},{value:": such as ",paraId:3,tocIndex:1},{value:"zoomTo",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"zoomBy",paraId:3,tocIndex:1},{value:"Pan Operations",paraId:3,tocIndex:1},{value:": such as ",paraId:3,tocIndex:1},{value:"translateTo",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"translateBy",paraId:3,tocIndex:1},{value:"Rotate Operations",paraId:3,tocIndex:1},{value:": such as ",paraId:3,tocIndex:1},{value:"rotateTo",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"rotateBy",paraId:3,tocIndex:1},{value:"Fit Operations",paraId:3,tocIndex:1},{value:": such as ",paraId:3,tocIndex:1},{value:"fitView",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"fitCenter",paraId:3,tocIndex:1},{value:"Viewport Information Retrieval",paraId:3,tocIndex:1},{value:": such as ",paraId:3,tocIndex:1},{value:"getZoom",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"getPosition",paraId:3,tocIndex:1},{value:"Zoom the canvas to a specified scale (absolute zoom).",paraId:4,tocIndex:3},{value:"zoomTo(zoom: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:5,tocIndex:3},{value:"Parameters",paraId:6,tocIndex:3},{value:"Parameter",paraId:7,tocIndex:3},{value:"Description",paraId:7,tocIndex:3},{value:"Type",paraId:7,tocIndex:3},{value:"Default",paraId:7,tocIndex:3},{value:"Required",paraId:7,tocIndex:3},{value:"zoom",paraId:7,tocIndex:3},{value:"Target zoom scale (1 = original size, >1 zoom in, <1 zoom out)",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"✓",paraId:7,tocIndex:3},{value:"animation",paraId:7,tocIndex:3},{value:"Animation configuration",paraId:7,tocIndex:3},{value:"ViewportAnimationEffectTiming",paraId:8,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"origin",paraId:7,tocIndex:3},{value:"Zoom center point (viewport coordinates)",paraId:7,tocIndex:3},{value:"Point",paraId:9,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:"// Zoom in to 2x\ngraph.zoomTo(2);\n\n// Zoom out to 0.5x with animation\ngraph.zoomTo(0.5, {\n  duration: 500,\n  easing: 'ease',\n});\n\n// Zoom in with the viewport center as the origin\ngraph.zoomTo(1.5, false, graph.getCanvasCenter());\n",paraId:11,tocIndex:3},{value:"Zoom based on the current zoom scale (relative zoom).",paraId:12,tocIndex:4},{value:"zoomBy(ratio: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:13,tocIndex:4},{value:"Parameters",paraId:14,tocIndex:4},{value:"Parameter",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:"Type",paraId:15,tocIndex:4},{value:"Default",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:"ratio",paraId:15,tocIndex:4},{value:"Zoom ratio (>1 zoom in, <1 zoom out)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"✓",paraId:15,tocIndex:4},{value:"animation",paraId:15,tocIndex:4},{value:"Animation configuration",paraId:15,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:16,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"origin",paraId:15,tocIndex:4},{value:"Zoom center point (viewport coordinates)",paraId:15,tocIndex:4},{value:"Point",paraId:17,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"Example",paraId:18,tocIndex:4},{value:"// Zoom in by 1.2x based on the current scale\ngraph.zoomBy(1.2);\n\n// Zoom out to 0.8x based on the current scale with animation\ngraph.zoomBy(0.8, {\n  duration: 300,\n});\n",paraId:19,tocIndex:4},{value:"Pan the graph to a specified position (absolute pan).",paraId:20,tocIndex:5},{value:"translateTo(position: Point, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:21,tocIndex:5},{value:"Parameters",paraId:22,tocIndex:5},{value:"Parameter",paraId:23,tocIndex:5},{value:"Description",paraId:23,tocIndex:5},{value:"Type",paraId:23,tocIndex:5},{value:"Default",paraId:23,tocIndex:5},{value:"Required",paraId:23,tocIndex:5},{value:"position",paraId:23,tocIndex:5},{value:"Target position coordinates",paraId:23,tocIndex:5},{value:"Point",paraId:24,tocIndex:5},{value:"-",paraId:23,tocIndex:5},{value:"✓",paraId:23,tocIndex:5},{value:"animation",paraId:23,tocIndex:5},{value:"Animation configuration",paraId:23,tocIndex:5},{value:"ViewportAnimationEffectTiming",paraId:25,tocIndex:5},{value:"-",paraId:23,tocIndex:5},{value:"Example",paraId:26,tocIndex:5},{value:"// Pan to a specified position\ngraph.translateTo([100, 100]);\n\n// Pan with animation\ngraph.translateTo([200, 200], {\n  duration: 1000,\n  easing: 'ease-in-out',\n});\n",paraId:27,tocIndex:5},{value:"Pan the graph by a specified distance relative to the current position (relative pan).",paraId:28,tocIndex:6},{value:"translateBy(offset: Point, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:29,tocIndex:6},{value:"Parameters",paraId:30,tocIndex:6},{value:"Parameter",paraId:31,tocIndex:6},{value:"Description",paraId:31,tocIndex:6},{value:"Type",paraId:31,tocIndex:6},{value:"Default",paraId:31,tocIndex:6},{value:"Required",paraId:31,tocIndex:6},{value:"offset",paraId:31,tocIndex:6},{value:"Pan offset",paraId:31,tocIndex:6},{value:"Point",paraId:32,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"✓",paraId:31,tocIndex:6},{value:"animation",paraId:31,tocIndex:6},{value:"Animation configuration",paraId:31,tocIndex:6},{value:"ViewportAnimationEffectTiming",paraId:33,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"Example",paraId:34,tocIndex:6},{value:"// Pan right by 100 pixels and down by 50 pixels\ngraph.translateBy([100, 50]);\n\n// Relative pan with animation\ngraph.translateBy([-50, -50], {\n  duration: 500,\n});\n",paraId:35,tocIndex:6},{value:"Rotate the canvas to a specified angle (absolute rotation).",paraId:36,tocIndex:7},{value:"rotateTo(angle: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:37,tocIndex:7},{value:"Parameters",paraId:38,tocIndex:7},{value:"Parameter",paraId:39,tocIndex:7},{value:"Description",paraId:39,tocIndex:7},{value:"Type",paraId:39,tocIndex:7},{value:"Default",paraId:39,tocIndex:7},{value:"Required",paraId:39,tocIndex:7},{value:"angle",paraId:39,tocIndex:7},{value:"Target rotation angle (radians)",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"✓",paraId:39,tocIndex:7},{value:"animation",paraId:39,tocIndex:7},{value:"Animation configuration",paraId:39,tocIndex:7},{value:"ViewportAnimationEffectTiming",paraId:40,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"origin",paraId:39,tocIndex:7},{value:"Rotation center point (viewport coordinates)",paraId:39,tocIndex:7},{value:"Point",paraId:41,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"Example",paraId:42,tocIndex:7},{value:"// Rotate to 45 degrees\ngraph.rotateTo(Math.PI / 4);\n\n// Rotate to 90 degrees with animation\ngraph.rotateTo(Math.PI / 2, {\n  duration: 1000,\n});\n",paraId:43,tocIndex:7},{value:"Rotate based on the current angle (relative rotation).",paraId:44,tocIndex:8},{value:"rotateBy(angle: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:45,tocIndex:8},{value:"Parameters",paraId:46,tocIndex:8},{value:"Parameter",paraId:47,tocIndex:8},{value:"Description",paraId:47,tocIndex:8},{value:"Type",paraId:47,tocIndex:8},{value:"Default",paraId:47,tocIndex:8},{value:"Required",paraId:47,tocIndex:8},{value:"angle",paraId:47,tocIndex:8},{value:"Rotation angle increment (radians)",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"✓",paraId:47,tocIndex:8},{value:"animation",paraId:47,tocIndex:8},{value:"Animation configuration",paraId:47,tocIndex:8},{value:"ViewportAnimationEffectTiming",paraId:48,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"origin",paraId:47,tocIndex:8},{value:"Rotation center point (viewport coordinates)",paraId:47,tocIndex:8},{value:"Point",paraId:49,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"Example",paraId:50,tocIndex:8},{value:"// Rotate clockwise by 30 degrees relative to the current angle\ngraph.rotateBy(Math.PI / 6);\n\n// Relative rotation with animation\ngraph.rotateBy(-Math.PI / 4, {\n  duration: 500,\n  easing: 'ease-out',\n});\n",paraId:51,tocIndex:8},{value:"Scale the graph to fit the appropriate size and pan to the center of the viewport.",paraId:52,tocIndex:9},{value:"fitView(options?: FitViewOptions, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:53,tocIndex:9},{value:"Parameters",paraId:54,tocIndex:9},{value:"Parameter",paraId:55,tocIndex:9},{value:"Description",paraId:55,tocIndex:9},{value:"Type",paraId:55,tocIndex:9},{value:"Default",paraId:55,tocIndex:9},{value:"Required",paraId:55,tocIndex:9},{value:"options",paraId:55,tocIndex:9},{value:"Fit options",paraId:55,tocIndex:9},{value:"FitViewOptions",paraId:55,tocIndex:9},{value:"-",paraId:55,tocIndex:9},{value:"animation",paraId:55,tocIndex:9},{value:"Animation configuration",paraId:55,tocIndex:9},{value:"ViewportAnimationEffectTiming",paraId:56,tocIndex:9},{value:"-",paraId:55,tocIndex:9},{value:"FitViewOptions Type Description",paraId:57,tocIndex:9},{value:"Property",paraId:58,tocIndex:9},{value:"Type",paraId:58,tocIndex:9},{value:"Default",paraId:58,tocIndex:9},{value:"Description",paraId:58,tocIndex:9},{value:"when",paraId:58,tocIndex:9},{value:"'overflow' | 'always'",paraId:58,tocIndex:9},{value:"'overflow'",paraId:58,tocIndex:9},{value:"Fit timing: only when overflow or always",paraId:58,tocIndex:9},{value:"direction",paraId:58,tocIndex:9},{value:"'x' | 'y' | 'both'",paraId:58,tocIndex:9},{value:"'both'",paraId:58,tocIndex:9},{value:"Fit direction: x-axis, y-axis, or both directions",paraId:58,tocIndex:9},{value:"Example",paraId:59,tocIndex:9},{value:"// Basic usage\ngraph.fitView();\n\n// Configure fit options\ngraph.fitView(\n  {\n    when: 'always', // Always fit\n    direction: 'both', // Fit in both directions\n  },\n  {\n    duration: 1000, // With animation\n  },\n);\n\n// Fit in the x direction only when content overflows\ngraph.fitView({\n  when: 'overflow',\n  direction: 'x',\n});\n",paraId:60,tocIndex:9},{value:"Pan the graph to the center of the viewport.",paraId:61,tocIndex:10},{value:"fitCenter(animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:62,tocIndex:10},{value:"Parameters",paraId:63,tocIndex:10},{value:"Parameter",paraId:64,tocIndex:10},{value:"Description",paraId:64,tocIndex:10},{value:"Type",paraId:64,tocIndex:10},{value:"Default",paraId:64,tocIndex:10},{value:"Required",paraId:64,tocIndex:10},{value:"animation",paraId:64,tocIndex:10},{value:"Animation configuration",paraId:64,tocIndex:10},{value:"ViewportAnimationEffectTiming",paraId:65,tocIndex:10},{value:"-",paraId:64,tocIndex:10},{value:"Example",paraId:66,tocIndex:10},{value:"// Center the graph\ngraph.fitCenter();\n\n// Center with animation\ngraph.fitCenter({\n  duration: 500,\n  easing: 'ease-in',\n});\n",paraId:67,tocIndex:10},{value:"Get the current zoom scale.",paraId:68,tocIndex:11},{value:"getZoom(): number;\n",paraId:69,tocIndex:11},{value:"Example",paraId:70,tocIndex:11},{value:"const currentZoom = graph.getZoom();\nconsole.log('Current zoom scale:', currentZoom);\n",paraId:71,tocIndex:11},{value:"Get the position of the graph (position of the canvas origin in the viewport coordinate system).",paraId:72,tocIndex:12},{value:"getPosition(): Point;\n",paraId:73,tocIndex:12},{value:"Example",paraId:74,tocIndex:12},{value:"const position = graph.getPosition();\nconsole.log('Current position:', position);\n",paraId:75,tocIndex:12},{value:"Get the current rotation angle.",paraId:76,tocIndex:13},{value:"getRotation(): number;\n",paraId:77,tocIndex:13},{value:"Example",paraId:78,tocIndex:13},{value:"const rotation = graph.getRotation();\nconsole.log('Current rotation angle (radians):', rotation);\nconsole.log('Current rotation angle (degrees):', (rotation * 180) / Math.PI);\n",paraId:79,tocIndex:13},{value:"Get the viewport coordinates of the viewport center.",paraId:80,tocIndex:14},{value:"getCanvasCenter(): Point;\n",paraId:81,tocIndex:14},{value:"Example",paraId:82,tocIndex:14},{value:"const center = graph.getCanvasCenter();\nconsole.log('Viewport center coordinates:', center);\n",paraId:83,tocIndex:14},{value:"Get the canvas coordinates of the viewport center.",paraId:84,tocIndex:15},{value:"getViewportCenter(): Point;\n",paraId:85,tocIndex:15},{value:"Example",paraId:86,tocIndex:15},{value:"const viewportCenter = graph.getViewportCenter();\nconsole.log('Canvas coordinates of the viewport center:', viewportCenter);\n",paraId:87,tocIndex:15},{value:"Set the zoom range of the current graph.",paraId:88,tocIndex:16},{value:"setZoomRange(zoomRange: [number, number]): void;\n",paraId:89,tocIndex:16},{value:"Parameters",paraId:90,tocIndex:16},{value:"Parameter",paraId:91,tocIndex:16},{value:"Description",paraId:91,tocIndex:16},{value:"Type",paraId:91,tocIndex:16},{value:"Default",paraId:91,tocIndex:16},{value:"Required",paraId:91,tocIndex:16},{value:"zoomRange",paraId:91,tocIndex:16},{value:"Zoom range",paraId:91,tocIndex:16},{value:"[number, number] | undefined",paraId:91,tocIndex:16},{value:"-",paraId:91,tocIndex:16},{value:"✓",paraId:91,tocIndex:16},{value:"Example",paraId:92,tocIndex:16},{value:"// Limit the zoom range between 0.5x and 2x\ngraph.setZoomRange([0.5, 2]);\n\n// Remove zoom restrictions\ngraph.setZoomRange(undefined);\n",paraId:93,tocIndex:16},{value:"Get the zoom range of the current graph.",paraId:94,tocIndex:17},{value:"getZoomRange(): GraphOptions['zoomRange'];\n",paraId:95,tocIndex:17},{value:"Example",paraId:96,tocIndex:17},{value:"const range = graph.getZoomRange();\nconsole.log('Current zoom range:', range);\n",paraId:97,tocIndex:17},{value:"Resize the canvas to the size of the graph container.",paraId:98,tocIndex:18},{value:"resize(): void;\n",paraId:99,tocIndex:18},{value:"Resize the canvas to the specified width and height.",paraId:100,tocIndex:19},{value:"resize(width: number, height: number): void;\n",paraId:101,tocIndex:19},{value:"Parameters",paraId:102,tocIndex:19},{value:"Parameter",paraId:103,tocIndex:19},{value:"Description",paraId:103,tocIndex:19},{value:"Type",paraId:103,tocIndex:19},{value:"Default",paraId:103,tocIndex:19},{value:"Required",paraId:103,tocIndex:19},{value:"width",paraId:103,tocIndex:19},{value:"Target width",paraId:103,tocIndex:19},{value:"number",paraId:103,tocIndex:19},{value:"-",paraId:103,tocIndex:19},{value:"✓",paraId:103,tocIndex:19},{value:"height",paraId:103,tocIndex:19},{value:"Target height",paraId:103,tocIndex:19},{value:"number",paraId:103,tocIndex:19},{value:"-",paraId:103,tocIndex:19},{value:"✓",paraId:103,tocIndex:19},{value:"Example",paraId:104,tocIndex:19},{value:"// Set the canvas size to 800x600\ngraph.resize(800, 600);\n",paraId:105,tocIndex:19},{value:"Viewport animation configuration type.",paraId:106,tocIndex:21},{value:"type ViewportAnimationEffectTiming =\n  | boolean // Whether to enable animation\n  | {\n      easing?: string; // Easing function\n      duration?: number; // Animation duration (ms)\n    };\n",paraId:107,tocIndex:21},{value:"Coordinate point type.",paraId:108,tocIndex:22},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:109,tocIndex:22},{value:"View fit options.",paraId:110,tocIndex:23},{value:"interface FitViewOptions {\n  when?: 'overflow' | 'always'; // Fit timing\n  direction?: 'x' | 'y' | 'both'; // Fit direction\n}\n",paraId:111,tocIndex:23}]},86433:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(53766);const t=[{value:"Required",paraId:0,tocIndex:0},{value:"string",paraId:1,tocIndex:1},{value:"Plugin type",paraId:2,tocIndex:1},{value:"number | 'auto'",paraId:3,tocIndex:2},{value:"Camera viewport aspect ratio, only valid in perspective camera.",paraId:4,tocIndex:2},{value:"number : Specific aspect ratio",paraId:5,tocIndex:2},{value:"'auto'",paraId:6,tocIndex:2},{value:" : Automatically set to the aspect ratio of the canvas",paraId:6,tocIndex:2},{value:"number",paraId:7,tocIndex:3},{value:"Azimuth",paraId:8,tocIndex:3},{value:"'orbiting' | 'exploring' | 'tracking'",paraId:9,tocIndex:4},{value:"Camera type",paraId:10,tocIndex:4},{value:"'orbiting'",paraId:11,tocIndex:4},{value:": Fixed viewpoint, change camera position",paraId:11,tocIndex:4},{value:"'exploring'",paraId:12,tocIndex:4},{value:": Similar to orbiting, but allows the camera to rotate between the North Pole and the South Pole",paraId:12,tocIndex:4},{value:"'tracking'",paraId:13,tocIndex:4},{value:": Fixed camera position, change viewpoint",paraId:13,tocIndex:4},{value:"number",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"Default:",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"500",paraId:14,tocIndex:5},{value:"The distance from the camera to the target",paraId:15,tocIndex:5},{value:"number",paraId:16,tocIndex:6},{value:"Elevation",paraId:17,tocIndex:6},{value:"number",paraId:18,tocIndex:7},{value:"The position of the far plane",paraId:19,tocIndex:7},{value:"number",paraId:20,tocIndex:8},{value:"Camera field of view, only valid in perspective camera",paraId:21,tocIndex:8},{value:"number",paraId:22,tocIndex:9},{value:"Maximum distance",paraId:23,tocIndex:9},{value:"number",paraId:24,tocIndex:10},{value:"Minimum distance",paraId:25,tocIndex:10},{value:"number",paraId:26,tocIndex:11},{value:"The position of the near plane",paraId:27,tocIndex:11},{value:"'perspective' | 'orthographic'",paraId:28,tocIndex:12},{value:"Projection mode, perspective projection is only valid in 3D scenes",paraId:29,tocIndex:12},{value:"'perspective'",paraId:30,tocIndex:12},{value:" : perspective projection",paraId:30,tocIndex:12},{value:"'orthographic'",paraId:31,tocIndex:12},{value:" : Orthogonal projection",paraId:31,tocIndex:12},{value:"number",paraId:32,tocIndex:13},{value:"Roll",paraId:33,tocIndex:13}]},37876:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(11515);const t=[{value:"Animation refers to the state changes of elements over a period of time, such as the position, size, and color of nodes. In G6, animations are often used to enhance user experience and improve the coherence and smoothness of the graph update process.",paraId:0,tocIndex:0},{value:"G6 provides a set of animation paradigms to describe element animations and has built-in some common animation effects. Users can achieve different animation effects by configuring animation parameters.",paraId:1,tocIndex:0},{value:"The implementation of an animation paradigm is as follows:",paraId:2,tocIndex:0},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n];\n",paraId:3,tocIndex:0},{value:"The aforementioned animation paradigm indicates that when the ",paraId:4,tocIndex:0},{value:"x",paraId:4,tocIndex:0},{value:" and ",paraId:4,tocIndex:0},{value:"y",paraId:4,tocIndex:0},{value:" attributes of an element change, an animation will be executed.",paraId:4,tocIndex:0},{value:"In G6, animation configuration is divided into global configuration and local configuration. Global configuration is mainly used to set whether animations are enabled globally, the duration of animations, and other parameters. Local configuration is primarily used to set the animation effects for elements.",paraId:5,tocIndex:1},{value:"To disable global animations, you can pass the ",paraId:6,tocIndex:2},{value:"animation",paraId:6,tocIndex:2},{value:" option when instantiating the ",paraId:6,tocIndex:2},{value:"Graph",paraId:6,tocIndex:2},{value:":",paraId:6,tocIndex:2},{value:"{\n  animation: false,\n}\n",paraId:7,tocIndex:2},{value:"If you want to enable animations and also configure the default duration for the animations, you can pass the ",paraId:8,tocIndex:3},{value:"animation",paraId:8,tocIndex:3},{value:" option:",paraId:8,tocIndex:3},{value:"{\n  animation: {\n    duration: 500,\n  },\n}\n",paraId:9,tocIndex:3},{value:"For individual elements, you can configure animations at different stages. For example, if you want an element to have a fade-in and fade-out effect when it enters and exits, you can configure it as follows:",paraId:10,tocIndex:4},{value:"{\n  node: {\n    animation: {\n      enter: 'fade',\n      exit: 'fade'\n    }\n  }\n}\n",paraId:11,tocIndex:4},{value:"If you want to update the position of an element with a translation transition, you can configure it as follows:",paraId:12,tocIndex:4},{value:"{\n  node: {\n    animation: {\n      update: 'translate',\n    }\n  }\n}\n",paraId:13,tocIndex:4},{value:"If you wish to disable animations for an element, you can configure it as follows:",paraId:14,tocIndex:4},{value:"{\n  node: {\n    animation: false,\n  }\n}\n",paraId:15,tocIndex:4},{value:"The animation configuration mentioned in the previous section actually used the built-in animation paradigm. This section introduces how to customize the animation paradigm.",paraId:16,tocIndex:5},{value:"Before writing an animation paradigm, it is necessary to understand the compositional structure of an element. For details, please refer to the ",paraId:17},{value:"Element",paraId:18},{value:" section.",paraId:17},{value:"The ",paraId:19},{value:"Element",paraId:20},{value:" section mentioned that elements in G6 are composed of one or more atomic graphics. Therefore, the animation of an element is essentially a combination of these atomic shape animations.",paraId:19},{value:"Thus, the animation paradigm is an array that describes the animation effects of each atomic shape within the element. For the element itself, it is also a special composite shape and thus has basic shape attributes such as ",paraId:21},{value:"x",paraId:21},{value:", ",paraId:21},{value:"y",paraId:21},{value:", etc.",paraId:21},{value:"Therefore, you can directly write an animation paradigm for the element itself:",paraId:22},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n];\n",paraId:23},{value:"If the built-in animations do not meet your requirements, you can create custom animations. For details, please refer to ",paraId:24,tocIndex:6},{value:"Custom Animation",paraId:25,tocIndex:6},{value:".",paraId:24,tocIndex:6},{value:"Animation priority refers to the precedence between global animation configuration and element-specific animation configuration. It can be summarized as follows:",paraId:26,tocIndex:7},{value:"Global Animation Config",paraId:27,tocIndex:7},{value:"Local Animation Config",paraId:27,tocIndex:7},{value:"Whether to Execute Animation",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ Execute animation with default configuration",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ Won't execute animation",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"✅ Execute animation with local animation configuration",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"❌ Won't execute animation",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ Won't execute animation",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"❌ Won't execute animation",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ Execute animation with global animation configuration",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"✅ Execute animation, local animation configuration overrides the global animation configuration",paraId:27,tocIndex:7},{value:"✅ Custom Animation",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ Won't execute animation",paraId:27,tocIndex:7},{value:"If you want elements to have persistent animations, such as the undulating effect of nodes or the ant line effect of edges, this can be achieved by customizing the elements. Below is an implementation of an edge with an Ant Line animation provided:",paraId:28,tocIndex:8},{value:"import { Line } from '@antv/g6';\n\nclass AntLine extends Line {\n  onCreate() {\n    this.shapeMap.key.animate([{ lineDashOffset: -20 }, { lineDashOffset: 0 }], {\n      duration: 500,\n      iterations: Infinity,\n    });\n  }\n}\n",paraId:29,tocIndex:8},{value:"The ",paraId:30,tocIndex:8},{value:"onCreate",paraId:30,tocIndex:8},{value:" is a lifecycle hook used to execute animations when an element is created.",paraId:30,tocIndex:8},{value:"Configure the edge style in the options as follows:",paraId:31,tocIndex:8},{value:"{\n  edge: {\n    type: 'ant-line',\n    style:{\n      lineDash: [10, 10]\n    }\n  }\n}\n",paraId:32,tocIndex:8},{value:"import { register, Line, Graph } from '@antv/g6';\n\nclass AntLine extends Line {\n  onCreate() {\n    this.shapeMap.key.animate([{ lineDashOffset: 20 }, { lineDashOffset: 0 }], {\n      duration: 500,\n      iterations: Infinity,\n    });\n  }\n}\n\nregister('edge', 'ant-line', AntLine);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 25, y: 25 } },\n      { id: 'node-2', style: { x: 175, y: 25 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2', style: { lineDash: [10, 10] } }],\n  },\n  edge: {\n    type: 'ant-line',\n  },\n});\n\ngraph.render();\n",paraId:33,tocIndex:8},{value:"The ",paraId:34,tocIndex:8},{value:"lineDash",paraId:34,tocIndex:8},{value:" is an array for ",paraId:34,tocIndex:8},{value:"lineDashOffset",paraId:34,tocIndex:8},{value:", and the AntLine effect is achieved by continuously varying the ",paraId:34,tocIndex:8},{value:"lineDashOffset",paraId:34,tocIndex:8},{value:".",paraId:34,tocIndex:8},{value:"Similarly, you can also create a breathing effect for nodes:",paraId:35,tocIndex:8},{value:"import { Circle } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {}\n}\n",paraId:36,tocIndex:8},{value:"The ",paraId:37,tocIndex:8},{value:"lineDashOffset",paraId:37,tocIndex:8},{value:" is the offset for ",paraId:37,tocIndex:8},{value:"lineDash",paraId:37,tocIndex:8},{value:", and the AntLine effect is achieved by continuously varying the ",paraId:37,tocIndex:8},{value:"lineDashOffset",paraId:37,tocIndex:8},{value:".",paraId:37,tocIndex:8},{value:"Similarly, you can also create a breathing effect for nodes:",paraId:38,tocIndex:8},{value:"import { Circle } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {\n    this.shapeMap.halo.animate([{ lineWidth: 5 }, { lineWidth: 10 }], {\n      duration: 1000,\n      iterations: Infinity,\n      direction: 'alternate',\n    });\n  }\n}\n",paraId:39,tocIndex:8},{value:"Node Style Configuration:",paraId:40,tocIndex:8},{value:"{\n  node: {\n    type: 'breathing-circle',\n    style: {\n      halo: true,\n      haloLineWidth: 5,\n    },\n  },\n}\n",paraId:41,tocIndex:8},{value:"import { register, Circle, Graph } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {\n    this.shapeMap.halo.animate([{ lineWidth: 5 }, { lineWidth: 10 }], {\n      duration: 1000,\n      iterations: Infinity,\n      direction: 'alternate',\n    });\n  }\n}\n\nregister('node', 'breathing-circle', BreathingCircle);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 50,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25 } }],\n  },\n  node: {\n    type: 'breathing-circle',\n    style: {\n      halo: true,\n      haloLineWidth: 5,\n    },\n  },\n});\n\ngraph.render();\n",paraId:42,tocIndex:8}]},68875:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(88486);const t=[{value:"For circular node (Circle) elements, the main shape is a circle. Now, let's create an animation for it so that when the size of the node changes, it transitions with a scaling animation:",paraId:0,tocIndex:1},{value:"[\n  {\n    fields: ['r'],\n    shape: 'key',\n  },\n];\n",paraId:1,tocIndex:1},{value:"Now let's create a graph instance and update the element size to trigger the update animation:",paraId:2,tocIndex:1},{value:"const graph = new Graph({\n  container: 'container',\n  width: 50,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [{ fields: ['r'], shape: 'key' }],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\n  graph.draw();\n});\n",paraId:3,tocIndex:1},{value:"⬇️ Move the pointer to the graph below and click the play button on the left to replay",paraId:4,tocIndex:1},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  width: 50,\n  height: 50,\n  container,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['r'],\n          shape: 'key',\n        },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\n  graph.draw();\n});\n",paraId:5,tocIndex:1},{value:"When animating an element, the element converts its animation frame parameters into animation frame parameters for its individual sub-graphics and executes the corresponding animations.",paraId:6,tocIndex:2},{value:"In the example above, by updating the node size, an animation was performed on the node, and its animation frame parameters were:",paraId:7,tocIndex:2},{value:'[{ "size": 20 }, { "size": 40 }]\n',paraId:8,tocIndex:2},{value:"After obtaining the attribute, the node element converts it into animation frame parameters for the main shape (circle):",paraId:9,tocIndex:2},{value:'[{ "r": 10 }, { "r": 20 }]\n',paraId:10,tocIndex:2},{value:"Therefore, what is ultimately happening here is that a transition animation is being performed on the circle, changing its radius from 10 to 20.",paraId:11,tocIndex:2},{value:"By directly combining the position change animation with the size change animation into a single animation paradigm, you can obtain a composite animation paradigm:",paraId:12,tocIndex:3},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n  {\n    fields: ['r'],\n    shape: 'key',\n  },\n];\n",paraId:13,tocIndex:3},{value:"And update both the position and size of the node simultaneously:",paraId:14,tocIndex:3},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\ngraph.draw();\n",paraId:15,tocIndex:3},{value:"⬇️ Move the pointer to the graph below and click the play button on the left to replay",paraId:16,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['x', 'y'],\n        },\n        { fields: ['r'], shape: 'key' },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\n  graph.draw();\n});\n",paraId:17,tocIndex:3},{value:"Add color transition:",paraId:18,tocIndex:3},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n  {\n    fields: ['r', 'fill'],\n    shape: 'key',\n  },\n];\n",paraId:19,tocIndex:3},{value:"Execute node update:",paraId:20,tocIndex:3},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\ngraph.draw();\n",paraId:21,tocIndex:3},{value:"⬇️ Move the pointer to the graph below and click the play button on the left to replay",paraId:22,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['x', 'y'],\n        },\n        { fields: ['r', 'fill'], shape: 'key' },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\n  graph.draw();\n});\n",paraId:23,tocIndex:3}]},73974:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(23340);const t=[{value:"Auto-adapt label display is a dynamic label management strategy designed to intelligently adjust which labels should be displayed or hidden based on factors such as spatial allocation of the current visible range and node importance. By analyzing the visible area in real-time, it ensures that users receive the most relevant and clear information display in different interaction scenarios, while avoiding visual overload and information redundancy.",paraId:0,tocIndex:0},{value:"This interaction is mainly used for:",paraId:1,tocIndex:1},{value:"Node size changes",paraId:2,tocIndex:1},{value:"Graph scaling",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', style: { x: 200, y: 100, labelText: '短标签' } },\n        { id: 'node2', style: { x: 360, y: 100, labelText: '中等长度的标签' } },\n        { id: 'node3', style: { x: 280, y: 220, labelText: '这是一个非常非常长的标签，需要自适应显示' } },\n      ],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node2', target: 'node3' },\n      ],\n    },\n    node: {\n      style: { label: true, fill: '#7e3feb', labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'auto-adapt-label', type: 'auto-adapt-label' }],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'auto-adapt-label',\n      type: 'auto-adapt-label',\n      animation: true,\n      enable: true,\n      throttle: 100,\n      padding: 0,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'throttle', 0, 900, 100);\n    optionFolder.add(options, 'padding', 0, 20, 1);\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'auto-adapt-label',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this interaction in the graph configuration",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['auto-adapt-label'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'auto-adapt-label',\n      throttle: 200, // Throttle time\n      padding: 10, // Extra spacing when detecting overlap\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Interaction type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"auto-adapt-label",paraId:11,tocIndex:4},{value:"√",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable this interaction",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"throttle",paraId:11,tocIndex:4},{value:"Label update throttle time (ms)",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"100",paraId:11,tocIndex:4},{value:"padding",paraId:11,tocIndex:4},{value:"Extra spacing when detecting label overlap",paraId:11,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:"Custom sorting function, sorting elements from high to low importance, with higher importance elements having higher label display priority. Generally, combo > node > edge",paraId:11,tocIndex:4},{value:"(a: ElementDatum, b: ElementDatum) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"sortNode",paraId:11,tocIndex:4},{value:"Sort nodes from high to low importance, with higher importance nodes having higher label display priority. Several built-in ",paraId:11,tocIndex:4},{value:"centrality algorithms",paraId:13,tocIndex:4},{value:" are available, or a custom sorting function can be used. Note that if ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:" is set, ",paraId:11,tocIndex:4},{value:"sortNode",paraId:11,tocIndex:4},{value:" will not take effect",paraId:11,tocIndex:4},{value:"NodeCentralityOptions",paraId:14,tocIndex:4},{value:" | (nodeA: ",paraId:11,tocIndex:4},{value:"NodeData",paraId:15,tocIndex:4},{value:", nodeB: NodeData => -1 | 0 | 1)",paraId:11,tocIndex:4},{value:"type: 'degree'",paraId:11,tocIndex:4},{value:"sortEdge",paraId:11,tocIndex:4},{value:"Sort edges from high to low importance, with higher importance edges having higher label display priority. By default, it is sorted according to the order of data. Note that if ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:" is set, ",paraId:11,tocIndex:4},{value:"sortEdge",paraId:11,tocIndex:4},{value:" will not take effect",paraId:11,tocIndex:4},{value:"(edgeA: ",paraId:11,tocIndex:4},{value:"EdgeData",paraId:16,tocIndex:4},{value:", edgeB: EdgeData) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"sortCombo",paraId:11,tocIndex:4},{value:"Sort groups from high to low importance, with higher importance groups having higher label display priority. By default, it is sorted according to the order of data. Note that if ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:" is set, ",paraId:11,tocIndex:4},{value:"sortCombo",paraId:11,tocIndex:4},{value:" will not take effect",paraId:11,tocIndex:4},{value:"(comboA: ",paraId:11,tocIndex:4},{value:"ComboData",paraId:17,tocIndex:4},{value:", comboB: ComboData) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"Methods for measuring node centrality",paraId:18,tocIndex:5},{value:"'degree'",paraId:19,tocIndex:5},{value:": Degree centrality, measured by the degree of the node (number of connected edges). Nodes with high degree centrality usually have more direct connections and may play important roles in the network",paraId:19,tocIndex:5},{value:"'betweenness'",paraId:19,tocIndex:5},{value:": Betweenness centrality, measured by the number of times a node appears in all shortest paths. Nodes with high betweenness centrality usually act as bridges in the network, controlling the flow of information",paraId:19,tocIndex:5},{value:"'closeness'",paraId:19,tocIndex:5},{value:": Closeness centrality, measured by the reciprocal of the sum of the shortest path lengths from the node to all other nodes. Nodes with high closeness centrality can usually reach other nodes in the network more quickly",paraId:19,tocIndex:5},{value:"'eigenvector'",paraId:19,tocIndex:5},{value:": Eigenvector centrality, measured by the degree of connection of the node to other central nodes. Nodes with high eigenvector centrality are usually connected to other important nodes",paraId:19,tocIndex:5},{value:"'pagerank'",paraId:19,tocIndex:5},{value:": PageRank centrality, measured by the number of times a node is referenced by other nodes, commonly used in directed graphs. Nodes with high PageRank centrality usually have high influence in the network, similar to webpage ranking algorithms",paraId:19,tocIndex:5},{value:"type NodeCentralityOptions =\n  | { type: 'degree'; direction?: 'in' | 'out' | 'both' }\n  | { type: 'betweenness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'closeness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'eigenvector'; directed?: boolean }\n  | { type: 'pagerank'; epsilon?: number; linkProb?: number };\n",paraId:20,tocIndex:5}]},18995:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(1421);const t=[{value:"Brush select allows users to click and drag a box to enclose elements, selecting the elements within the box.",paraId:0,tocIndex:0},{value:"This interaction is mainly used for:",paraId:1,tocIndex:1},{value:"Quickly selecting a batch of elements",paraId:2,tocIndex:1},{value:"Quickly deselecting a batch of elements",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'brush-select',\n        key: 'brush-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'brush-select',\n      type: 'brush-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      immediately: false,\n      mode: 'default',\n      state: 'selected',\n      trigger: 'shift+drag',\n    };\n    const optionFolder = gui.addFolder('BrushSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'enableElements', [\n      ['node', 'edge', 'combo'],\n      ['node', 'edge'],\n      ['node', 'combo'],\n      ['combo', 'edge'],\n      ['node'],\n      ['edge'],\n      ['combo'],\n    ]);\n    optionFolder.add(options, 'trigger', {\n      'shift+drag': ['shift'],\n      drag: [],\n    });\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']).onChange((e) => {\n      immediately.show(e === 'default');\n    });\n    const immediately = optionFolder.add(options, 'immediately');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'brush-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this interaction in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['brush-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select-1',\n      immediately: true, // Elements are immediately selected as the box encloses them\n      trigger: ['shift', 'alt', 'control'], // Use multiple keys for selection\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Interaction type name. This plugin is built-in, and you can use it with ",paraId:11,tocIndex:4},{value:"type: 'brush-select'",paraId:11,tocIndex:4},{value:".",paraId:11,tocIndex:4},{value:"brush-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"brush-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Whether to enable animation",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable brush select functionality",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enableElements",paraId:11,tocIndex:4},{value:"Types of elements that can be selected",paraId:11,tocIndex:4},{value:"( ",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:" )[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"immediately",paraId:11,tocIndex:4},{value:"Whether to select immediately, only effective when ",paraId:11,tocIndex:4},{value:"selection mode",paraId:13,tocIndex:4},{value:" is ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"example",paraId:14,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"mode",paraId:11,tocIndex:4},{value:"Selection mode, ",paraId:11,tocIndex:4},{value:"example",paraId:15,tocIndex:4},{value:"union",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"intersect",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"diff",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"onSelect",paraId:11,tocIndex:4},{value:"Callback for selected element state",paraId:11,tocIndex:4},{value:"(states:Record<string,string|string[]>) =>Record<string,string|string[]>",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"Switch to this state when selected",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:"Specify the style of the selection box, ",paraId:11,tocIndex:4},{value:"configuration options",paraId:16,tocIndex:4},{value:"See below",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Press this shortcut key in combination with a mouse click to perform selection ",paraId:11,tocIndex:4},{value:"Key reference:",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:". If set to an ",paraId:11,tocIndex:4},{value:"empty array",paraId:11,tocIndex:4},{value:", it means selection can be performed with a mouse click without pressing other keys ",paraId:11,tocIndex:4},{value:" ⚠️ Note, setting ",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:" to ",paraId:11,tocIndex:4},{value:"['drag']",paraId:11,tocIndex:4},{value:" will cause the ",paraId:11,tocIndex:4},{value:"drag-canvas",paraId:11,tocIndex:4},{value:" behavior to fail. The two cannot be configured simultaneously.",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"shift",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"Whether to select immediately, only effective when selection mode is ",paraId:17,tocIndex:5},{value:"default",paraId:17,tocIndex:5},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      immediately: true, // Elements are immediately selected as the box encloses them\n      trigger: [], // No need to press other keys, just click and drag the mouse to select\n    },\n  ],\n});\n",paraId:18,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 100, y: 50 } },\n      { id: 'node-2', style: { x: 260, y: 50 } },\n      { id: 'node-3', style: { x: 280, y: 100 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      immediately: true, // Immediate selection\n      trigger: [],\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n});\n\ngraph.render();\n",paraId:19,tocIndex:5},{value:"Four selection modes are built-in:",paraId:20,tocIndex:6},{value:"union",paraId:21,tocIndex:6},{value:": Retain the current state of selected elements and add the specified state.",paraId:21,tocIndex:6},{value:"intersect",paraId:21,tocIndex:6},{value:": If the selected elements already have the specified state, retain it; otherwise, clear the state.",paraId:21,tocIndex:6},{value:"diff",paraId:21,tocIndex:6},{value:": Invert the specified state of the selected elements.",paraId:21,tocIndex:6},{value:"default",paraId:21,tocIndex:6},{value:": Clear the current state of selected elements and add the specified state.",paraId:21,tocIndex:6},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      mode: 'default', // Selection mode, default selection mode\n    },\n  ],\n});\n",paraId:22,tocIndex:6},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'brush-select',\n        key: 'brush-select',\n        trigger: [],\n        immediately: true,\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'brush-select',\n      type: 'brush-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      mode: 'default',\n      state: 'selected',\n    };\n    const optionFolder = gui.addFolder('BrushSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']);\n    // .onChange((e) => {\n    //   immediately.show(e === 'default');\n    // });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'brush-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:23,tocIndex:6},{value:"Attribute",paraId:24,tocIndex:7},{value:"Description",paraId:24,tocIndex:7},{value:"Type",paraId:24,tocIndex:7},{value:"Default",paraId:24,tocIndex:7},{value:"cursor",paraId:24,tocIndex:7},{value:"Mouse style",paraId:24,tocIndex:7},{value:"string",paraId:24,tocIndex:7},{value:"fill",paraId:24,tocIndex:7},{value:"Fill color",paraId:24,tocIndex:7},{value:"string | Pattern | null",paraId:24,tocIndex:7},{value:"#1677FF",paraId:24,tocIndex:7},{value:"fillOpacity",paraId:24,tocIndex:7},{value:"Fill opacity",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"0.1",paraId:24,tocIndex:7},{value:"isBillboard",paraId:24,tocIndex:7},{value:"Enable billboard mode",paraId:24,tocIndex:7},{value:"boolean",paraId:24,tocIndex:7},{value:"isSizeAttenuation",paraId:24,tocIndex:7},{value:"Enable size attenuation",paraId:24,tocIndex:7},{value:"boolean",paraId:24,tocIndex:7},{value:"lineCap",paraId:24,tocIndex:7},{value:"Line end style",paraId:24,tocIndex:7},{value:"butt",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"round",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"square",paraId:24,tocIndex:7},{value:"lineDash",paraId:24,tocIndex:7},{value:"Dash configuration",paraId:24,tocIndex:7},{value:"number | string | (string | number)[]",paraId:24,tocIndex:7},{value:"lineDashOffset",paraId:24,tocIndex:7},{value:"Dash offset",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"lineJoin",paraId:24,tocIndex:7},{value:"Line join style",paraId:24,tocIndex:7},{value:"miter",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"round",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"bevel",paraId:24,tocIndex:7},{value:"lineWidth",paraId:24,tocIndex:7},{value:"Line width",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"1",paraId:24,tocIndex:7},{value:"opacity",paraId:24,tocIndex:7},{value:"Overall opacity",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"radius",paraId:24,tocIndex:7},{value:"Rectangle corner radius",paraId:24,tocIndex:7},{value:"number | string | number[]",paraId:24,tocIndex:7},{value:"shadowBlur",paraId:24,tocIndex:7},{value:"Shadow blur degree",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"shadowColor",paraId:24,tocIndex:7},{value:"Shadow color",paraId:24,tocIndex:7},{value:"string",paraId:24,tocIndex:7},{value:"shadowOffsetX",paraId:24,tocIndex:7},{value:"Shadow X direction offset",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"shadowOffsetY",paraId:24,tocIndex:7},{value:"Shadow Y direction offset",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"stroke",paraId:24,tocIndex:7},{value:"Stroke color",paraId:24,tocIndex:7},{value:"string | Pattern | null",paraId:24,tocIndex:7},{value:"#1677FF",paraId:24,tocIndex:7},{value:"strokeOpacity",paraId:24,tocIndex:7},{value:"Stroke opacity",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"visibility",paraId:24,tocIndex:7},{value:"Visibility",paraId:24,tocIndex:7},{value:"visible",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"hidden",paraId:24,tocIndex:7},{value:"zIndex",paraId:24,tocIndex:7},{value:"Rendering level",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"2",paraId:24,tocIndex:7},{value:"Example",paraId:25,tocIndex:7},{value:"：",paraId:25,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // Dashed outline\n        // RGB super colorful box\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n});\n",paraId:26,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 200, y: 100 } },\n      { id: 'node-2', style: { x: 360, y: 100 } },\n      { id: 'node-3', style: { x: 280, y: 220 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      trigger: [],\n      immediately: true,\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // Dashed outline\n        // RGB super colorful box\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n  animation: true,\n});\n\ngraph.render();\n",paraId:27,tocIndex:7}]},32270:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(90417);const t=[{value:"When an element is clicked, it will be highlighted.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Focusing on elements",paraId:2,tocIndex:1},{value:"Viewing element details",paraId:2,tocIndex:1},{value:"Viewing element relationships",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 280, y: 60, fill: '#E4504D', labelText: 'degree: 0' } },\n        { id: 'node-2-1', style: { x: 330, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-2-2', style: { x: 230, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-3-1', style: { x: 380, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n        { id: 'node-3-2', style: { x: 180, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n\n        {\n          id: 'degree引导',\n          style: {\n            x: 525,\n            y: 110,\n            fill: null,\n            labelText: '这里可以修改degree ->',\n            labelFontWeight: 700,\n            labelFontSize: 10,\n          },\n        },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2-1' },\n        { source: 'node-1', target: 'node-2-2' },\n        { source: 'node-2-1', target: 'node-3-1' },\n        { source: 'node-2-2', target: 'node-3-2' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'click-select',\n        key: 'click-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'click-select',\n      type: 'click-select',\n      animation: true,\n      enable: true,\n      multiple: false,\n      trigger: 'shift+click',\n      state: 'selected',\n      unselectedState: undefined,\n      degree: 0,\n    };\n    const optionFolder = gui.addFolder('Click Select Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 2, 1);\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'unselectedState', [undefined, 'inactive']);\n    const trigger = optionFolder\n      .add(options, 'trigger', {\n        'shift+click': ['shift'],\n        'meta+click': ['Meta'],\n      })\n      .hide();\n    optionFolder.add(options, 'multiple').onChange((v) => trigger.show(v));\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'click-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['click-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'click-select',\n      key: 'click-select-1',\n      degree: 2, // Selection spread range\n      state: 'active', // Selected state\n      neighborState: 'neighborActive', // Neighbor node attached state\n      unselectedState: 'inactive', // Unselected node state\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name. This behavior is built-in, and you can use it with ",paraId:11,tocIndex:4},{value:"type: 'click-select'",paraId:11,tocIndex:4},{value:".",paraId:11,tocIndex:4},{value:"click-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"click-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Whether to enable animation effects when switching element states",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"degree",paraId:11,tocIndex:4},{value:"Controls the highlight spread range, ",paraId:11,tocIndex:4},{value:"example",paraId:12,tocIndex:4},{value:"number | (event:",paraId:11,tocIndex:4},{value:"Event",paraId:13,tocIndex:4},{value:") => number",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable the click element function, supports dynamic control through functions, ",paraId:11,tocIndex:4},{value:"example",paraId:14,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:15,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"multiple",paraId:11,tocIndex:4},{value:"Whether to allow multiple selections",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"The state applied when an element is selected",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"neighborState",paraId:11,tocIndex:4},{value:"The state applied to elements with n-degree relationships when an element is selected. The value of n is controlled by the degree attribute, for example, degree 1 means directly adjacent elements, ",paraId:11,tocIndex:4},{value:"example",paraId:16,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"unselectedState",paraId:11,tocIndex:4},{value:"The state applied to all other elements except the selected element and its affected neighbor elements when an element is selected, ",paraId:11,tocIndex:4},{value:"example",paraId:17,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"onClick",paraId:11,tocIndex:4},{value:"Callback when an element is clicked",paraId:11,tocIndex:4},{value:"(event: ",paraId:11,tocIndex:4},{value:"Event",paraId:18,tocIndex:4},{value:") => void",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Press this shortcut key in combination with a mouse click to perform multi-selection, key reference: ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"['shift']",paraId:11,tocIndex:4},{value:"Controls the highlight spread range",paraId:19,tocIndex:5},{value:"For nodes, ",paraId:20,tocIndex:5},{value:"0",paraId:20,tocIndex:5},{value:" means only the current node is selected, ",paraId:20,tocIndex:5},{value:"1",paraId:20,tocIndex:5},{value:" means the current node and its directly adjacent nodes and edges are selected, and so on.",paraId:20,tocIndex:5},{value:"For edges, ",paraId:20,tocIndex:5},{value:"0",paraId:20,tocIndex:5},{value:" means only the current edge is selected, ",paraId:20,tocIndex:5},{value:"1",paraId:20,tocIndex:5},{value:" means the current edge and its directly adjacent nodes are selected, and so on.",paraId:20,tocIndex:5},{value:"In the following example, when ",paraId:21,tocIndex:5},{value:"degree: 0",paraId:21,tocIndex:5},{value:" only the ",paraId:21,tocIndex:5},{value:"red",paraId:21,tocIndex:5},{value:" point is highlighted;\nWhen ",paraId:21,tocIndex:5},{value:"degree: 1",paraId:21,tocIndex:5},{value:" the ",paraId:21,tocIndex:5},{value:"red",paraId:21,tocIndex:5},{value:" and ",paraId:21,tocIndex:5},{value:"orange",paraId:21,tocIndex:5},{value:" points are highlighted.",paraId:21,tocIndex:5},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 280, y: 60, fill: '#E4504D', labelText: 'degree: 0' } },\n        { id: 'node-2-1', style: { x: 330, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-2-2', style: { x: 230, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-3-1', style: { x: 380, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n        { id: 'node-3-2', style: { x: 180, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n\n        {\n          id: 'degree引导',\n          style: {\n            x: 525,\n            y: 110,\n            fill: null,\n            labelText: '这里可以修改degree ->',\n            labelFontWeight: 700,\n            labelFontSize: 10,\n          },\n        },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2-1' },\n        { source: 'node-1', target: 'node-2-2' },\n        { source: 'node-2-1', target: 'node-3-1' },\n        { source: 'node-2-2', target: 'node-3-2' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'click-select',\n        key: 'click-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'click-select',\n      type: 'click-select',\n      animation: true,\n      enable: true,\n      multiple: false,\n      trigger: 'shift+click',\n      state: 'selected',\n      unselectedState: undefined,\n      degree: 0,\n    };\n    const optionFolder = gui.addFolder('Click Select Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 2, 1);\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'unselectedState', [undefined, 'inactive']);\n    const trigger = optionFolder\n      .add(options, 'trigger', {\n        'shift+click': ['shift'],\n        'meta+click': ['Meta'],\n      })\n      .hide();\n    optionFolder.add(options, 'multiple').onChange((v) => trigger.show(v));\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'click-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:22,tocIndex:5},{value:"Whether to enable the click element function",paraId:23,tocIndex:6},{value:"It can be dynamically controlled through functions, for example, only enabled when a node is selected.",paraId:24,tocIndex:6},{value:"{\n  //⚠️ Note, you need to set both the node and the canvas, otherwise the user will not listen to the event when clicking the canvas\n  enable: (event) => ['node', 'canvas'].includes(event.targetType);\n}\n",paraId:25,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 60 } },\n      { id: 'node2', style: { x: 200, y: 60 } },\n      { id: 'node3', style: { x: 300, y: 60 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      enable: (event) => ['node', 'canvas'].includes(event.targetType),\n    },\n  ],\n});\n\ngraph.render();\n",paraId:26,tocIndex:6},{value:"Similarly, if you only want edges to be selected:",paraId:27,tocIndex:6},{value:"{\n  enable: (event) => ['edge', 'canvas'].includes(event.targetType);\n}\n",paraId:28,tocIndex:6},{value:"The state applied to elements with n-degree relationships when an element is selected. The value of n is controlled by the degree attribute, for example, degree 1 means directly adjacent elements",paraId:29,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      // State attached to the directly clicked node\n      state: 'active',\n      // State attached to adjacent nodes\n      neighborState: 'neighborActive',\n    },\n  ],\n});\n",paraId:30,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n        halo: true,\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:31,tocIndex:7},{value:"When an element is selected, the state applied to all other elements except the selected element and the spread neighbor elements.",paraId:32,tocIndex:8},{value:"Built-in states: ",paraId:33,tocIndex:8},{value:"selected",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"active",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"inactive",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"disabled",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"highlight",paraId:33,tocIndex:8},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      unselectedState: 'inactive',\n    },\n  ],\n});\n",paraId:34,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      unselectedState: 'inactive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:35,tocIndex:8},{value:"Clicking a node",paraId:36,tocIndex:10},{value:" will switch from ",paraId:36,tocIndex:10},{value:"default state",paraId:36,tocIndex:10},{value:" to ",paraId:36,tocIndex:10},{value:"active",paraId:36,tocIndex:10},{value:"Adjacent nodes",paraId:36,tocIndex:10},{value:" will switch from ",paraId:36,tocIndex:10},{value:"default state",paraId:36,tocIndex:10},{value:" to ",paraId:36,tocIndex:10},{value:"neighborActive",paraId:36,tocIndex:10},{value:"const graph = new Graph({\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      // Selected node state\n      active: {\n        fill: '#0f0',\n      },\n      // Adjacent node state\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      // State attached to adjacent nodes\n      neighborState: 'neighborActive',\n      // Unselected node state\n      unselectedState: 'inactive',\n    },\n  ],\n});\n",paraId:37,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      unselectedState: 'inactive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:38,tocIndex:10}]},91025:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(13519);const t=[{value:"CollapseExpand is a built-in behavior in G6 used to implement the expand/collapse functionality for nodes or combos. Through double-click (default) or single-click actions, users can flexibly control the expand and collapse states of graph elements, effectively managing the visualization hierarchy of the graph structure and reducing visual complexity.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Managing large hierarchical graphs, enabling layered browsing of tree or network graphs",paraId:2,tocIndex:1},{value:"Simplifying the display of complex graphs, expanding areas of interest as needed",paraId:2,tocIndex:1},{value:"Hiding branch nodes that are temporarily not needed, focusing on important information",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'collapse-expand',\n        key: 'collapse-expand',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'collapse-expand',\n      type: 'collapse-expand',\n      animation: true,\n      enable: true,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'collapse-expand',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configurations and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: ['collapse-expand'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and allowing dynamic updates to the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      key: 'collapse-expand-1',\n      trigger: 'click', // Change the trigger method to single-click\n      animation: true, // Enable animation effects\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default Value",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name",paraId:11,tocIndex:4},{value:"collapse-expand",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"collapse-expand",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Enable expand/collapse animation effects",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Enable expand/collapse functionality",paraId:11,tocIndex:4},{value:"boolean | ((event: [/en/api/event#event-object-properties]) => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Trigger method, can be single-click or double-click",paraId:11,tocIndex:4},{value:"click",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"dblclick",paraId:11,tocIndex:4},{value:"dblclick",paraId:11,tocIndex:4},{value:"onCollapse",paraId:11,tocIndex:4},{value:"Callback function when collapse is completed",paraId:11,tocIndex:4},{value:"(id: string) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onExpand",paraId:11,tocIndex:4},{value:"Callback function when expand is completed",paraId:11,tocIndex:4},{value:"(id: string) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"align",paraId:11,tocIndex:4},{value:"Align with the target element to avoid view offset",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['collapse-expand'],\n  // other configurations...\n});\n",paraId:12,tocIndex:6},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      trigger: 'click', // Change the default double-click trigger to single-click\n    },\n  ],\n});\n",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      onCollapse: (id) => {\n        console.log(`Node ${id} has collapsed`);\n        // Execute custom logic\n      },\n      onExpand: (id) => {\n        console.log(`Node ${id} has expanded`);\n        // Execute custom logic\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      // Enable expand/collapse functionality only when the target is a node type\n      enable: (event) => event.targetType === 'node',\n    },\n  ],\n});\n",paraId:15,tocIndex:9},{value:"const graph = new Graph({\n  // other configurations...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      animation: false, // Disable expand/collapse animation effects\n    },\n  ],\n});\n",paraId:16,tocIndex:10},{value:"You can check the ",paraId:17,tocIndex:12},{value:"collapsed",paraId:17,tocIndex:12},{value:" property in the node data:",paraId:17,tocIndex:12},{value:"const isCollapsed = (nodeId) => {\n  const nodeData = graph.getNodeData(nodeId);\n  return nodeData?.style?.collapsed === true;\n};\n",paraId:18,tocIndex:12},{value:"In addition to being triggered by user interaction, you can also directly control using ",paraId:19,tocIndex:13},{value:"collapseElement",paraId:20,tocIndex:13},{value:" or ",paraId:19,tocIndex:13},{value:"expandElement",paraId:21,tocIndex:13},{value:":",paraId:19,tocIndex:13},{value:"// Collapse node\ngraph.collapseElement('nodeId', { animation: true });\n\n// Expand node\ngraph.expandElement('nodeId', { animation: true });\n",paraId:22,tocIndex:13}]},42011:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57064);const t=[{value:"CreateEdge is a built-in behavior in G6 for interactively creating edges on the canvas. After the user triggers the behavior (click or drag), the edge will follow the mouse movement and connect to the target node to complete the creation. If canceled, it will be automatically removed.",paraId:0,tocIndex:0},{value:"Additionally, this behavior supports customizing the style of the edge, such as color, line style, arrow, etc., to meet different visualization needs.",paraId:1,tocIndex:0},{value:"The elements that can be connected by this behavior are ",paraId:2,tocIndex:0},{value:"node",paraId:2,tocIndex:0},{value:" and ",paraId:2,tocIndex:0},{value:"combo",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"This behavior is mainly used for:",paraId:3,tocIndex:1},{value:"Visualization scenarios that require interactive creation of connections between nodes, such as flowcharts, knowledge graphs, etc.",paraId:4,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'create-edge',\n        key: 'create-edge',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'create-edge',\n      type: 'create-edge',\n      animation: true,\n      enable: true,\n      trigger: 'drag',\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'trigger', ['drag', 'click']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'create-edge',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:2},{value:"Add this behavior in the graph configuration",paraId:6,tocIndex:3},{value:"// Use default configuration\nconst graph = new Graph({\n  // Other configurations...\n  behaviors: ['create-edge'], // Directly add, use default configuration\n});\n\n// Or use custom configuration\nconst graph = new Graph({\n  // Other configurations\n  behaviors: [\n    {\n      type: 'create-edge',\n      trigger: 'click', // Behavior configuration, create edge by clicking\n      style: {}, // Custom edge style\n    },\n  ],\n});\n",paraId:7,tocIndex:3},{value:"Option",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"Type",paraId:8,tocIndex:4},{value:"Default",paraId:8,tocIndex:4},{value:"Required",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:"Behavior type name",paraId:8,tocIndex:4},{value:"string",paraId:8,tocIndex:4},{value:"create-edge",paraId:8,tocIndex:4},{value:"√",paraId:8,tocIndex:4},{value:"trigger",paraId:8,tocIndex:4},{value:"The way to trigger the creation of a new edge: ",paraId:8,tocIndex:4},{value:"click",paraId:8,tocIndex:4},{value:" means click to trigger; ",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:" means drag to trigger",paraId:8,tocIndex:4},{value:"click",paraId:8,tocIndex:4},{value:" | ",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:"enable",paraId:8,tocIndex:4},{value:"Whether to enable this behavior",paraId:8,tocIndex:4},{value:"boolean | ((event: ",paraId:8,tocIndex:4},{value:"Event",paraId:9,tocIndex:4},{value:") => boolean)",paraId:8,tocIndex:4},{value:"true",paraId:8,tocIndex:4},{value:"onCreate",paraId:8,tocIndex:4},{value:"Callback function for creating an edge, returns edge data",paraId:8,tocIndex:4},{value:"(edge: ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:10,tocIndex:4},{value:") => ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:11,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"onFinish",paraId:8,tocIndex:4},{value:"Callback function for successfully creating an edge",paraId:8,tocIndex:4},{value:"(edge: ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:12,tocIndex:4},{value:") => void",paraId:8,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"style",paraId:8,tocIndex:4},{value:"Style of the newly created edge, ",paraId:8,tocIndex:4},{value:"configuration options",paraId:13,tocIndex:4},{value:"See below",paraId:8,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"Configure the style of the newly created edge, for detailed configuration options, please refer to ",paraId:14,tocIndex:5},{value:"Element - Edge - General Edge Properties - Style",paraId:15,tocIndex:5},{value:'{\n  "style": {\n    "stroke": "red",\n    "lineWidth": 2\n  }\n}\n',paraId:16,tocIndex:5},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['create-edge'],\n});\n",paraId:17,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations,\n  behaviors: [\n    {\n      type: 'create-edge',\n      style: {\n        stroke: 'red',\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n",paraId:18,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations\n  behaviors: [\n    {\n      type: 'create-edge',\n      trigger: 'click',\n    },\n  ],\n});\n",paraId:19,tocIndex:9}]},65280:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(62039);const t=[{value:"DragCanvas is a built-in behavior in G6 for implementing canvas dragging functionality, supporting panning the entire canvas by dragging with a mouse or touching the screen. This is the most basic and commonly used navigation behavior in graph visualization, allowing users to freely explore graph content beyond the current viewport.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Navigating and browsing large charts to view content outside the current viewport",paraId:2,tocIndex:1},{value:"Adjusting the view focus to move areas of interest to the center of the viewport",paraId:2,tocIndex:1},{value:"Combining with zoom interactions to achieve a complete canvas navigation experience",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'drag-canvas',\n        key: 'drag-canvas',\n      },\n    ],\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'drag-canvas',\n      type: 'drag-canvas',\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use cursor by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use cursor by default': [],\n      'Shift+Arrow Key': {\n        up: ['Shift', 'ArrowUp'],\n        down: ['Shift', 'ArrowDown'],\n        left: ['Shift', 'ArrowLeft'],\n        right: ['Shift', 'ArrowRight'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'drag-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      key: 'drag-canvas-1',\n      direction: 'x', // Only allow horizontal dragging\n      key: 'drag-behavior', // Specify an identifier for the behavior for dynamic updates\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"drag-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable this behavior",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"KeyboardEvent",paraId:11,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"(event) => 'eventType' in event ? event.targetType === 'canvas': true",paraId:11,tocIndex:4},{value:"(Only enabled when clicking on the canvas)",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Drag animation configuration, only effective when using keyboard movement",paraId:11,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:13,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"Allowed drag direction, optional values are: ",paraId:11,tocIndex:4},{value:"- Set to ",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:" (default): Allow dragging in any direction ",paraId:11,tocIndex:4},{value:"- Set to ",paraId:11,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:": Only allow horizontal dragging ",paraId:11,tocIndex:4},{value:"- Set to ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:": Only allow vertical dragging",paraId:11,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:" (no direction restriction)",paraId:11,tocIndex:4},{value:"range",paraId:11,tocIndex:4},{value:"Draggable viewport range (in viewport size units), ",paraId:11,tocIndex:4},{value:"example",paraId:14,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"Infinity",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"Distance to trigger a single keyboard movement",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"10",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Keyboard keys to trigger dragging, ",paraId:11,tocIndex:4},{value:"example",paraId:15,tocIndex:4},{value:"object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"Callback function when dragging is completed",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"range",paraId:16,tocIndex:5},{value:" is used to control the draggable range of the canvas:",paraId:16,tocIndex:5},{value:"Set as a single number: Use the same value for all four directions",paraId:17,tocIndex:5},{value:"Set as an array: Specify the range for [top, right, bottom, left] directions respectively",paraId:17,tocIndex:5},{value:"For example:",paraId:18,tocIndex:5},{value:"range: 2; // Can drag 2 viewport distances in any direction\nrange: [1, 2, 1, 2]; // Can drag 1 viewport up and down, 2 viewports left and right\n",paraId:19,tocIndex:5},{value:"The value range for each direction is [0, Infinity], 0 means no dragging, Infinity means unlimited dragging.",paraId:20,tocIndex:5},{value:"trigger",paraId:21,tocIndex:6},{value:" allows you to configure keyboard keys to control canvas movement:",paraId:21,tocIndex:6},{value:"{\n  trigger: {\n    up: ['ArrowUp'],     // Shortcut key for moving up\n    down: ['ArrowDown'], // Shortcut key for moving down\n    left: ['ArrowLeft'], // Shortcut key for moving left\n    right: ['ArrowRight'] // Shortcut key for moving right\n  }\n}\n",paraId:22,tocIndex:6},{value:"You can also configure combination keys:",paraId:23,tocIndex:6},{value:"{\n  trigger: {\n    up: ['Control', 'ArrowUp'],     // Ctrl + Up Arrow\n    down: ['Control', 'ArrowDown'], // Ctrl + Down Arrow\n    left: ['Control', 'ArrowLeft'], // Ctrl + Left Arrow\n    right: ['Control', 'ArrowRight'] // Ctrl + Right Arrow\n  }\n}\n",paraId:24,tocIndex:6},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['drag-canvas'],\n});\n",paraId:25,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      direction: 'x', // Only allow horizontal dragging\n    },\n  ],\n});\n",paraId:26,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      range: 1.5, // Limit dragging range to 1.5 viewport sizes\n    },\n  ],\n});\n",paraId:27,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      trigger: {\n        up: ['ArrowUp'],\n        down: ['ArrowDown'],\n        left: ['ArrowLeft'],\n        right: ['ArrowRight'],\n      },\n      animation: {\n        duration: 100, // Add smooth animation effect\n      },\n    },\n  ],\n});\n",paraId:28,tocIndex:11},{value:"DragCanvas",paraId:29,tocIndex:13},{value:" is used for dragging the entire canvas view",paraId:29,tocIndex:13},{value:"DragElement",paraId:29,tocIndex:13},{value:" is used for dragging individual graph elements (nodes/edges/combinations)",paraId:29,tocIndex:13},{value:"ScrollCanvas",paraId:29,tocIndex:13},{value:" is used for scrolling the canvas with the mouse wheel without changing the zoom ratio",paraId:29,tocIndex:13}]},53670:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(56590);const t=[{value:"DragElement is a built-in behavior in G6 for implementing ",paraId:0,tocIndex:0},{value:"element dragging",paraId:0,tocIndex:0},{value:" functionality. It has the following core features:",paraId:0,tocIndex:0},{value:"Support for multiple element types",paraId:1,tocIndex:0},{value:": Supports dragging of both nodes and combos simultaneously",paraId:1,tocIndex:0},{value:"Intelligent multi-selection",paraId:1,tocIndex:0},{value:": Supports dragging multiple selected elements at the same time",paraId:1,tocIndex:0},{value:"Visual feedback",paraId:1,tocIndex:0},{value:": Provides various visual feedback mechanisms such as ghost nodes, edge visibility, mouse styles, etc.",paraId:1,tocIndex:0},{value:"Flexible drag effects",paraId:1,tocIndex:0},{value:": Supports various drag operation effects such as move, link, free drag, etc.",paraId:1,tocIndex:0},{value:"Parent-child relationship handling",paraId:1,tocIndex:0},{value:": Automatically handles element hierarchy during dragging, especially when dealing with combo structures",paraId:1,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'drag-element',\n        key: 'drag-element',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'drag-element',\n      type: 'drag-element',\n      animation: true,\n      enable: 'node,combo',\n      dropEffect: 'move',\n      state: 'selected',\n      hideEdge: 'none',\n      shadow: false,\n    };\n    const optionFolder = gui.addFolder('DragElement Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable', {\n      'node,combo': (event) => ['node', 'combo'].includes(event.targetType),\n      node: (event) => ['node'].includes(event.targetType),\n      combo: (event) => ['combo'].includes(event.targetType),\n      none: false,\n    });\n    optionFolder.add(options, 'dropEffect', ['link', 'move', 'none']);\n    optionFolder.add(options, 'hideEdge', ['none', 'all', 'in', 'out', 'both']);\n    optionFolder.add(options, 'shadow');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'drag-element',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:2,tocIndex:1},{value:"Add this behavior in the graph configuration:",paraId:3,tocIndex:2},{value:"1. Quick Configuration (Static)",paraId:4,tocIndex:2},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:5,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-element'],\n});\n",paraId:6,tocIndex:2},{value:"2. Object Configuration (Recommended)",paraId:7,tocIndex:2},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-element',\n      key: 'drag-element-1',\n      enableAnimation: true,\n      dropEffect: 'move',\n      shadow: true, // Enable ghost node\n    },\n  ],\n});\n",paraId:9,tocIndex:2},{value:"Option",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"Behavior type name",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"drag-element",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"key",paraId:10,tocIndex:3},{value:"Unique identifier for the behavior, used for subsequent operations",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"enable",paraId:10,tocIndex:3},{value:"Whether to enable the drag function, by default nodes and combos can be dragged",paraId:10,tocIndex:3},{value:"boolean | ((event: IElementDragEvent) => boolean)",paraId:10,tocIndex:3},{value:"['node', 'combo'].includes(event.targetType)",paraId:10,tocIndex:3},{value:"animation",paraId:10,tocIndex:3},{value:"Whether to enable drag animation",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"state",paraId:10,tocIndex:3},{value:"Identifier for the selected state of nodes, when multi-selection is enabled, it will find the selected nodes based on this state",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"selected",paraId:10,tocIndex:3},{value:"dropEffect",paraId:10,tocIndex:3},{value:"Defines the operation effect after dragging ends, optional values are: ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"link",paraId:10,tocIndex:3},{value:": Set the dragged element as a child of the target element ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:": Move the element and automatically update the size of the parent element (such as combo) ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:": Only update the position of the drag target without performing other operations",paraId:10,tocIndex:3},{value:"link",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:"hideEdge",paraId:10,tocIndex:3},{value:"Controls the display state of edges during dragging, optional values are: ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:": Do not hide any edges ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"out",paraId:10,tocIndex:3},{value:": Hide edges with the current node as the source node ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"in",paraId:10,tocIndex:3},{value:": Hide edges with the current node as the target node ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"both",paraId:10,tocIndex:3},{value:": Hide all edges related to the current node ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"all",paraId:10,tocIndex:3},{value:": Hide all edges in the graph ",paraId:10,tocIndex:3},{value:"⚠️ Note: When ",paraId:10,tocIndex:3},{value:"shadow",paraId:10,tocIndex:3},{value:" (ghost node) is enabled, the ",paraId:10,tocIndex:3},{value:"hideEdge",paraId:10,tocIndex:3},{value:" configuration will not take effect.",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"all",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"in",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"out",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"both",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:"shadow",paraId:10,tocIndex:3},{value:"Whether to enable ghost nodes, which use a shape to follow the mouse movement. ",paraId:10,tocIndex:3},{value:"Customize ghost node style",paraId:11,tocIndex:3},{value:" ⚠️Note: React nodes do not support enabling",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"cursor",paraId:10,tocIndex:3},{value:"Customize the mouse style during dragging, ",paraId:10,tocIndex:3},{value:"configuration options",paraId:12,tocIndex:3},{value:"{ default?: Cursor; grab: Cursor; grabbing: Cursor }",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"cursor",paraId:13,tocIndex:4},{value:" is used to customize the mouse pointer style during dragging:",paraId:13,tocIndex:4},{value:"default",paraId:14,tocIndex:4},{value:": Pointer style in default state",paraId:14,tocIndex:4},{value:"grab",paraId:14,tocIndex:4},{value:": Pointer style when hovering over a draggable element",paraId:14,tocIndex:4},{value:"grabbing",paraId:14,tocIndex:4},{value:": Pointer style when dragging",paraId:14,tocIndex:4},{value:"Optional values are: ",paraId:15,tocIndex:4},{value:"auto",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"default",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"none",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"context-menu",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"help",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"pointer",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"progress",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"wait",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"cell",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"crosshair",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"text",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"vertical-text",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"alias",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"copy",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"move",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"no-drop",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"not-allowed",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"grab",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"grabbing",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"all-scroll",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"col-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"row-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"n-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"e-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"s-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"w-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ne-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"se-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"sw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ew-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ns-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nesw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nwse-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"zoom-in",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"zoom-out",paraId:15,tocIndex:4},{value:"Example configuration:",paraId:16,tocIndex:4},{value:"cursor: {\n  default: 'default',    // Use normal pointer by default\n  grab: 'grab',         // Show grab pointer when draggable\n  grabbing: 'grabbing'  // Show grabbing pointer when dragging\n}\n",paraId:17,tocIndex:4},{value:"When ",paraId:18,tocIndex:5},{value:"shadow: true",paraId:18,tocIndex:5},{value:" is enabled, you can customize the style of the ghost node with the following properties:",paraId:18,tocIndex:5},{value:"Option",paraId:19,tocIndex:5},{value:"Description",paraId:19,tocIndex:5},{value:"Type",paraId:19,tocIndex:5},{value:"Default",paraId:19,tocIndex:5},{value:"shadowFill",paraId:19,tocIndex:5},{value:"Ghost node fill color",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"#F3F9FF",paraId:19,tocIndex:5},{value:"shadowFillOpacity",paraId:19,tocIndex:5},{value:"Ghost node fill color opacity",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"0.5",paraId:19,tocIndex:5},{value:"shadowStroke",paraId:19,tocIndex:5},{value:"Ghost node stroke color",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"#1890FF",paraId:19,tocIndex:5},{value:"shadowStrokeOpacity",paraId:19,tocIndex:5},{value:"Ghost node stroke opacity",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"0.9",paraId:19,tocIndex:5},{value:"shadowLineDash",paraId:19,tocIndex:5},{value:"Ghost node dash configuration",paraId:19,tocIndex:5},{value:"number[]",paraId:19,tocIndex:5},{value:"[5, 5]",paraId:19,tocIndex:5},{value:"shadowZIndex",paraId:19,tocIndex:5},{value:"Ghost node rendering level",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"100",paraId:19,tocIndex:5},{value:"shadowWidth",paraId:19,tocIndex:5},{value:"Ghost node width",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"Width of the target element's bounding box",paraId:19,tocIndex:5},{value:"shadowHeight",paraId:19,tocIndex:5},{value:"Ghost node height",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"Height of the target element's bounding box",paraId:19,tocIndex:5},{value:"shadowOpacity",paraId:19,tocIndex:5},{value:"Overall opacity of the ghost node",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowLineWidth",paraId:19,tocIndex:5},{value:"Ghost node line width",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowLineCap",paraId:19,tocIndex:5},{value:"Ghost node line cap style",paraId:19,tocIndex:5},{value:"'butt'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'round'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'square'",paraId:19,tocIndex:5},{value:"shadowLineJoin",paraId:19,tocIndex:5},{value:"Ghost node line join style",paraId:19,tocIndex:5},{value:"'miter'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'round'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'bevel'",paraId:19,tocIndex:5},{value:"shadowLineDashOffset",paraId:19,tocIndex:5},{value:"Ghost node dash offset",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowCursor",paraId:19,tocIndex:5},{value:"Ghost node mouse style",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"shadowVisibility",paraId:19,tocIndex:5},{value:"Ghost node visibility",paraId:19,tocIndex:5},{value:"'visible'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'hidden'",paraId:19,tocIndex:5},{value:"Example configuration:",paraId:20,tocIndex:5},{value:"{\n  type: 'drag-element',\n  shadow: true,\n  // Customize ghost node style\n  shadowFill: '#E8F3FF',\n  shadowFillOpacity: 0.4,\n  shadowStroke: '#1890FF',\n  shadowStrokeOpacity: 0.8,\n  shadowLineDash: [4, 4],\n  shadowZIndex: 99\n}\n",paraId:21,tocIndex:5},{value:"Note: The ghost node style inherits from ",paraId:22,tocIndex:5},{value:"BaseStyleProps",paraId:23,tocIndex:5},{value:", the above configuration items are obtained by adding the ",paraId:22,tocIndex:5},{value:"shadow",paraId:22,tocIndex:5},{value:" prefix to the property name.",paraId:22,tocIndex:5},{value:"Need to cooperate with the ",paraId:24,tocIndex:7},{value:"click-select",paraId:24,tocIndex:7},{value:" behavior to achieve multi-selection, and then associate the selected state through the ",paraId:24,tocIndex:7},{value:"state",paraId:24,tocIndex:7},{value:" parameter:",paraId:24,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      multiple: true,\n      state: 'selected',\n    },\n    {\n      type: 'drag-element',\n      state: 'selected', // All nodes in the selected state will be moved simultaneously during dragging\n    },\n  ],\n});\n",paraId:25,tocIndex:7}]},88459:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(7069);const t=[{value:"DragElementForce is a built-in behavior in G6 for implementing node dragging under ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"d3-force-3d",paraId:0,tocIndex:0},{value:" layouts. During dragging, the layout is ",paraId:0,tocIndex:0},{value:"recalculated in real-time",paraId:0,tocIndex:0},{value:", allowing the graph layout to dynamically adjust to accommodate the new position of the nodes.",paraId:0,tocIndex:0},{value:"Add this behavior in the graph configuration:",paraId:1,tocIndex:1},{value:"1. Quick Configuration (Static)",paraId:2,tocIndex:1},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:3,tocIndex:1},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-element-force'],\n});\n",paraId:4,tocIndex:1},{value:"2. Object Configuration (Recommended)",paraId:5,tocIndex:1},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:6,tocIndex:1},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'drag-element-force',\n      key: 'drag-element-force-1',\n      fixed: true, // Fix node position after dragging\n    },\n  ],\n});\n",paraId:7,tocIndex:1},{value:"Option",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"type",paraId:8,tocIndex:2},{value:"Behavior type name, set ",paraId:8,tocIndex:2},{value:"type: 'drag-element-force'",paraId:8,tocIndex:2},{value:" to enable this behavior",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"drag-element-force",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"key",paraId:8,tocIndex:2},{value:"Unique identifier for the behavior, used for subsequent operations",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fixed",paraId:8,tocIndex:2},{value:"Whether to keep the node position fixed after dragging ends, boolean values represent: ",paraId:8,tocIndex:2},{value:"- true: After dragging ends, the node's position will remain fixed and not be affected by the layout algorithm ",paraId:8,tocIndex:2},{value:"- false: After dragging ends, the node's position will continue to be affected by the layout algorithm",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"enable",paraId:8,tocIndex:2},{value:"Whether to enable the drag function, by default nodes and combos can be dragged",paraId:8,tocIndex:2},{value:"boolean | ((event: IElementDragEvent) => boolean)",paraId:8,tocIndex:2},{value:"['node', 'combo'].includes(event.targetType)",paraId:8,tocIndex:2},{value:"state",paraId:8,tocIndex:2},{value:"Identifier for the selected state of nodes, when multi-selection is enabled, it will find the selected nodes based on this state",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"selected",paraId:8,tocIndex:2},{value:"hideEdge",paraId:8,tocIndex:2},{value:"Controls the display state of edges during dragging, optional values are: ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:": Do not hide any edges ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"out",paraId:8,tocIndex:2},{value:": Hide edges with the current node as the source node ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"in",paraId:8,tocIndex:2},{value:": Hide edges with the current node as the target node ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"both",paraId:8,tocIndex:2},{value:": Hide all edges related to the current node ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"all",paraId:8,tocIndex:2},{value:": Hide all edges in the graph ",paraId:8,tocIndex:2},{value:"⚠️ Note: When ",paraId:8,tocIndex:2},{value:"shadow",paraId:8,tocIndex:2},{value:" (ghost node) is enabled, the ",paraId:8,tocIndex:2},{value:"hideEdge",paraId:8,tocIndex:2},{value:" configuration will not take effect.",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"all",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"in",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"out",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"both",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:"cursor",paraId:8,tocIndex:2},{value:"Customize the mouse style during dragging, ",paraId:8,tocIndex:2},{value:"example",paraId:9,tocIndex:2},{value:"{ default?: Cursor; grab: Cursor; grabbing: Cursor }",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"cursor",paraId:10,tocIndex:3},{value:" is used to customize the mouse pointer style during dragging:",paraId:10,tocIndex:3},{value:"default",paraId:11,tocIndex:3},{value:": Pointer style in default state",paraId:11,tocIndex:3},{value:"grab",paraId:11,tocIndex:3},{value:": Pointer style when hovering over a draggable element",paraId:11,tocIndex:3},{value:"grabbing",paraId:11,tocIndex:3},{value:": Pointer style when dragging",paraId:11,tocIndex:3},{value:"Optional values are: ",paraId:12,tocIndex:3},{value:"auto",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"default",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"none",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"context-menu",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"help",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"pointer",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"progress",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"wait",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"cell",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"crosshair",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"vertical-text",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"alias",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"copy",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"move",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"no-drop",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"not-allowed",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"grab",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"grabbing",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"all-scroll",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"col-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"row-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"n-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"e-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"s-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"w-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ne-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"se-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"sw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ew-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ns-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nesw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nwse-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"zoom-in",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"zoom-out",paraId:12,tocIndex:3},{value:"Example configuration:",paraId:13,tocIndex:3},{value:"cursor: {\n  default: 'default',    // Use normal pointer by default\n  grab: 'grab',         // Show grab pointer when draggable\n  grabbing: 'grabbing'  // Show grabbing pointer when dragging\n}\n",paraId:14,tocIndex:3},{value:"DragElementForce",paraId:15,tocIndex:5},{value:" is specifically used for ",paraId:15,tocIndex:5},{value:"d3-force",paraId:15,tocIndex:5},{value:" or ",paraId:15,tocIndex:5},{value:"d3-force-3d",paraId:15,tocIndex:5},{value:" layouts, and recalculates the layout in real-time during dragging",paraId:15,tocIndex:5},{value:"DragElement",paraId:15,tocIndex:5},{value:" is a general drag interaction and does not trigger layout recalculation",paraId:15,tocIndex:5},{value:"BaseStyleProps",paraId:16},{value:"An expression like icon{TextStyleProps} indicates that properties of the TextStyleProps type are prefixed with icon in camelCase format.",paraId:16},{value:"TextStyleProps includes the following properties:",paraId:17,tocIndex:10},{value:"fill",paraId:18,tocIndex:10},{value:"fontSize",paraId:18,tocIndex:10},{value:"fontWeight",paraId:18,tocIndex:10},{value:"...",paraId:18,tocIndex:10},{value:"icon{TextStyleProps} means you need to use the following property names:",paraId:19,tocIndex:10},{value:"iconFill",paraId:20,tocIndex:10},{value:"iconFontSize",paraId:20,tocIndex:10},{value:"iconFontWeight",paraId:20,tocIndex:10},{value:"...",paraId:20,tocIndex:10}]},94183:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83606);const t=[{value:"FixElementSize is a built-in interaction provided by G6, used to ",paraId:0,tocIndex:0},{value:"maintain the size of certain elements within nodes unchanged during the zooming process.",paraId:0,tocIndex:0},{value:' It enhances visual consistency and operability during zooming.\nBy listening to viewport changes, it automatically scales elements marked as "fixed size" to ensure they maintain a relatively constant display size at different zoom levels. It supports global enablement and also allows control over specific elements or nodes as needed.',paraId:0,tocIndex:0},{value:"This interaction is mainly used for:",paraId:1,tocIndex:1},{value:"Graphical elements or embedded components (buttons, labels, etc.) that need to maintain a fixed visual size",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', style: { x: 200, y: 100, labelText: 'node1' } },\n        { id: 'node2', style: { x: 360, y: 100, labelText: 'node2' } },\n        { id: 'node3', style: { x: 280, y: 220, labelText: 'node3' } },\n      ],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node2', target: 'node3' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'fix-element-size', type: 'fix-element-size' }],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 800, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'fix-element-size',\n      type: 'fix-element-size',\n      animation: true,\n      enable: true,\n      reset: true,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'reset');\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'fix-element-size',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this interaction in the graph configuration",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['fix-element-size'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'fix-element-size',\n      enable: true, // Enable this interaction\n      state: 'selected', // State of elements to fix size\n      reset: true, // Restore style when elements are redrawn\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Interaction type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"fix-element-size",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable this interaction, ",paraId:11,tocIndex:4},{value:"example",paraId:12,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:13,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"reset",paraId:11,tocIndex:4},{value:"Whether to restore style when elements are redrawn",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"Specify the state of elements to fix size",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:'""',paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:"Node configuration item, used to define which attributes maintain a fixed visual size. If not specified (i.e., undefined), the entire node will be fixed, ",paraId:11,tocIndex:4},{value:"example",paraId:14,tocIndex:4},{value:"FixShapeConfig",paraId:15,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"nodeFilter",paraId:11,tocIndex:4},{value:"Node filter, used to filter which nodes maintain a fixed size during zooming",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"NodeData",paraId:16,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"Edge configuration item, used to define which attributes maintain a fixed visual size. By default, the lineWidth and labelFontSize attributes are fixed, usage is the same as ",paraId:11,tocIndex:4},{value:"node configuration item",paraId:17,tocIndex:4},{value:"FixShapeConfig",paraId:18,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"[ shape: 'key', fields: ['lineWidth'] ,  shape: 'halo', fields: ['lineWidth'] ,  shape: 'label' ]",paraId:11,tocIndex:4},{value:"edgeFilter",paraId:11,tocIndex:4},{value:"Edge filter, used to filter which edges maintain a fixed size during zooming",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"EdgeData",paraId:19,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:"Combo configuration item, used to define which attributes maintain a fixed visual size. By default, the entire Combo will be fixed, usage is the same as ",paraId:11,tocIndex:4},{value:"node configuration item",paraId:20,tocIndex:4},{value:"FixShapeConfig",paraId:21,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"comboFilter",paraId:11,tocIndex:4},{value:"Combo filter, used to filter which Combos maintain a fixed size during zooming",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"ComboData",paraId:22,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"Whether to enable the fixed element size interaction. By default, it is enabled when zooming out the canvas",paraId:23,tocIndex:5},{value:"By default, it is enabled when zooming out the canvas, set ",paraId:24,tocIndex:5},{value:"enable: (event) => event.data.scale < 1",paraId:24,tocIndex:5},{value:"; if you want to enable it when zooming in, set ",paraId:24,tocIndex:5},{value:"enable: (event) => event.data.scale > 1",paraId:24,tocIndex:5},{value:"; if you want to enable it when both zooming in and out, set ",paraId:24,tocIndex:5},{value:"enable: true",paraId:24,tocIndex:5},{value:"Node configuration item, used to define which attributes maintain a fixed visual size. If not specified (i.e., undefined), the entire node will be fixed",paraId:25,tocIndex:6},{value:"Example",paraId:26,tocIndex:6},{value:"If you want to fix the lineWidth of the main shape of the node during zooming, you can configure it like this:",paraId:27,tocIndex:6},{value:"{\n  node: [{ shape: 'key', fields: ['lineWidth'] }];\n}\n",paraId:28,tocIndex:6},{value:"If you want to keep the size of the element label unchanged during zooming, you can configure it like this:",paraId:29,tocIndex:6},{value:"{\n  shape: 'label';\n}\n",paraId:30,tocIndex:6},{value:"Parameter",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Default",paraId:31,tocIndex:7},{value:"Required",paraId:31,tocIndex:7},{value:"shape",paraId:31,tocIndex:7},{value:"Specify the shape to fix size, it can be the class name of the shape, or a function that receives all shapes constituting the element and returns the target shape",paraId:31,tocIndex:7},{value:"string | ((shapes: DisplayObject[]) => DisplayObject)",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"✓",paraId:31,tocIndex:7},{value:"fields",paraId:31,tocIndex:7},{value:"Specify the fields of the shape to fix size. If not specified, the entire shape size is fixed by default",paraId:31,tocIndex:7},{value:"string[]",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"✘",paraId:31,tocIndex:7}]},78131:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(37648);const t=[{value:"FocusElement is a built-in behavior in G6 used to implement the element focusing feature, allowing elements to be focused to the center of the view by clicking on them. This behavior helps users quickly locate and focus on specific graph elements.",paraId:0,tocIndex:0},{value:"Quickly center the focused nodes or edges in the display",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'focus-element',\n        key: 'focus-element',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'focus-element',\n      type: 'focus-element',\n      animation: true,\n      enable: true,\n    };\n    const optionFolder = gui.addFolder('FocusElement Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'focus-element',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:3,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:4,tocIndex:3},{value:"Declare directly using a string form:",paraId:5,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['focus-element'],\n});\n",paraId:6,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:7,tocIndex:3},{value:"Configure using an object form, supporting custom parameters:",paraId:8,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'focus-element',\n      animation: {\n        duration: 500,\n        easing: 'ease-in',\n      },\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"Option",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Default",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"type",paraId:10,tocIndex:4},{value:"Behavior type name",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"focus-element",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"animation",paraId:10,tocIndex:4},{value:"Focus animation settings",paraId:10,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:11,tocIndex:4},{value:"{ duration: 500, easing: 'ease-in' }",paraId:10,tocIndex:4},{value:"enable",paraId:10,tocIndex:4},{value:"Whether to enable the focus feature",paraId:10,tocIndex:4},{value:"boolean | ((event: IElementEvent) => boolean)",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:"type ViewportAnimationEffectTiming =\n  | boolean // true to enable default animation, false to disable animation\n  | {\n      easing?: string; // Animation easing function: 'ease-in-out', 'ease-in', 'ease-out', 'linear'\n      duration?: number; // Animation duration (milliseconds)\n    };\n",paraId:12,tocIndex:5},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['focus-element'],\n});\n",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'focus-element',\n      animation: {\n        duration: 800,\n        easing: 'ease-in-out',\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'focus-element',\n      enable: (event) => {\n        // Enable focus only for nodes, not edges\n        return event.target.type === 'node';\n      },\n    },\n  ],\n});\n",paraId:15,tocIndex:9}]},49373:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6019);const t=[{value:"HoverActivate is a built-in behavior in G6 used to implement the hover activation effect on elements. When the mouse hovers over nodes or edges, it automatically triggers visual feedback such as highlighting and displaying. This behavior is an important means of enhancing data exploration in graph visualization, helping users quickly focus on target elements and obtain related information.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Quickly locating elements of interest in complex relationship graphs",paraId:2,tocIndex:1},{value:"Displaying additional information of nodes through hover",paraId:2,tocIndex:1},{value:"Highlighting connection paths by activating edges when analyzing relationships between nodes",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node0', size: 50, label: '0', style: { x: 326, y: 268 } },\n        { id: 'node1', size: 30, label: '1', style: { x: 280, y: 384 } },\n        { id: 'node2', size: 30, label: '2', style: { x: 234, y: 167 } },\n        { id: 'node3', size: 30, label: '3', style: { x: 391, y: 368 } },\n        { id: 'node4', size: 30, label: '4', style: { x: 444, y: 209 } },\n        { id: 'node5', size: 30, label: '5', style: { x: 378, y: 157 } },\n        { id: 'node6', size: 15, label: '6', style: { x: 229, y: 400 } },\n        { id: 'node7', size: 15, label: '7', style: { x: 281, y: 440 } },\n        { id: 'node8', size: 15, label: '8', style: { x: 188, y: 119 } },\n        { id: 'node9', size: 15, label: '9', style: { x: 287, y: 157 } },\n        { id: 'node10', size: 15, label: '10', style: { x: 185, y: 200 } },\n        { id: 'node11', size: 15, label: '11', style: { x: 238, y: 110 } },\n        { id: 'node12', size: 15, label: '12', style: { x: 239, y: 221 } },\n        { id: 'node13', size: 15, label: '13', style: { x: 176, y: 160 } },\n        { id: 'node14', size: 15, label: '14', style: { x: 389, y: 423 } },\n        { id: 'node15', size: 15, label: '15', style: { x: 441, y: 341 } },\n        { id: 'node16', size: 15, label: '16', style: { x: 442, y: 398 } },\n      ],\n      edges: [\n        { source: 'node0', target: 'node1', label: '0-1' },\n        { source: 'node0', target: 'node2', label: '0-2' },\n        { source: 'node0', target: 'node3', label: '0-3' },\n        { source: 'node0', target: 'node4', label: '0-4' },\n        { source: 'node0', target: 'node5', label: '0-5' },\n        { source: 'node1', target: 'node6', label: '1-6' },\n        { source: 'node1', target: 'node7', label: '1-7' },\n        { source: 'node2', target: 'node8', label: '2-8' },\n        { source: 'node2', target: 'node9', label: '2-9' },\n        { source: 'node2', target: 'node10', label: '2-10' },\n        { source: 'node2', target: 'node11', label: '2-11' },\n        { source: 'node2', target: 'node12', label: '2-12' },\n        { source: 'node2', target: 'node13', label: '2-13' },\n        { source: 'node3', target: 'node14', label: '3-14' },\n        { source: 'node3', target: 'node15', label: '3-15' },\n        { source: 'node3', target: 'node16', label: '3-16' },\n      ],\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'hover-activate', type: 'hover-activate' }],\n    autoFit: 'center',\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'hover-activate',\n      type: 'hover-activate',\n      animation: true,\n      enable: true,\n      degree: 1,\n      direction: 'both',\n    };\n    const optionFolder = gui.addFolder('Hover Activate Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 10, 1);\n    optionFolder.add(options, 'direction', {\n      both: ['both'],\n      in: ['in'],\n      out: ['out'],\n    });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'hover-activate',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['hover-activate'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      key: 'hover-activate-1', // Specify an identifier for the behavior for dynamic updates\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"hover-activate",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Whether to enable animation",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable hover feature",paraId:11,tocIndex:4},{value:"boolean | ((event: IPointerEvent) => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"degree",paraId:11,tocIndex:4},{value:"Degree of relationship to activate elements",paraId:11,tocIndex:4},{value:"number | ((event: IPointerEvent) => number);",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"Specify edge direction",paraId:11,tocIndex:4},{value:"both",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"in",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"out",paraId:11,tocIndex:4},{value:"both",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"State of activated elements",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"inactiveState",paraId:11,tocIndex:4},{value:"State of inactive elements",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onHover",paraId:11,tocIndex:4},{value:"Callback when element is hovered",paraId:11,tocIndex:4},{value:"(event: IPointerEvent) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onHoverEnd",paraId:11,tocIndex:4},{value:"Callback when hover ends",paraId:11,tocIndex:4},{value:"(event: IPointerEvent) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"enable",paraId:12,tocIndex:5},{value:" is used to control whether to enable hover highlighting of elements, and can receive a function for dynamic control",paraId:12,tocIndex:5},{value:"For example: Enable hover highlighting only for nodes",paraId:13,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['hover-activate'],\n});\n",paraId:15,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:16,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      degree: 1,\n      direction: 'out',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:17,tocIndex:9}]},13099:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(40116);const t=[{value:"Click and drag the mouse to draw an ",paraId:0,tocIndex:0},{value:"irregular",paraId:0,tocIndex:0},{value:" box to enclose elements, and the elements within the selected range will be selected.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Quickly selecting a batch of elements, making it easier to avoid elements you don't want to select",paraId:2,tocIndex:1},{value:"Quickly deselecting a batch of elements, making it easier to avoid elements you want to keep",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'lasso-select',\n        key: 'lasso-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'lasso-select',\n      type: 'lasso-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      immediately: false,\n      mode: 'default',\n      state: 'selected',\n      trigger: 'shift+drag',\n    };\n    const optionFolder = gui.addFolder('LassoSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'enableElements', [\n      ['node', 'edge', 'combo'],\n      ['node', 'edge'],\n      ['node', 'combo'],\n      ['combo', 'edge'],\n      ['node'],\n      ['edge'],\n      ['combo'],\n    ]);\n    optionFolder.add(options, 'trigger', {\n      'shift+drag': ['shift'],\n      drag: [],\n    });\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']).onChange((e) => {\n      immediately.show(e === 'default');\n    });\n    const immediately = optionFolder.add(options, 'immediately');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'lasso-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['lasso-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // Elements are immediately selected when the box encloses them\n      trigger: ['shift', 'alt', 'control'], // Use multiple keys for selection\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name. This plugin is built-in, you can use it by ",paraId:11,tocIndex:4},{value:"type: 'lasso-select'",paraId:11,tocIndex:4},{value:".",paraId:11,tocIndex:4},{value:"lasso-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"lasso-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Whether to enable animation",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable lasso selection",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enableElements",paraId:11,tocIndex:4},{value:"Types of elements that can be selected",paraId:11,tocIndex:4},{value:"( ",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:" )[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"immediately",paraId:13,tocIndex:4},{value:"Whether to select immediately, only effective when ",paraId:11,tocIndex:4},{value:"selection mode",paraId:14,tocIndex:4},{value:" is ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"mode",paraId:15,tocIndex:4},{value:"Selection mode",paraId:11,tocIndex:4},{value:"union",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"intersect",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"diff",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"onSelect",paraId:11,tocIndex:4},{value:"Callback for selected element state",paraId:11,tocIndex:4},{value:"(states:Record<string,string|string[]>) =>Record<string,string|string[]>",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"State to switch to when selected",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:"Style of the box during selection",paraId:11,tocIndex:4},{value:"RectStyleProps extends BaseStyleProps",paraId:11,tocIndex:4},{value:"Default",paraId:17,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Press this shortcut key along with mouse click to select ",paraId:11,tocIndex:4},{value:"Key reference:",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"shift",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"Whether to select immediately, only effective when selection mode is ",paraId:18,tocIndex:5},{value:"default",paraId:18,tocIndex:5},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // Elements are immediately selected when the box encloses them\n      trigger: [], // No need for other keys, just click and drag the mouse to select\n    },\n  ],\n});\n",paraId:19,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 100, y: 50 } },\n      { id: 'node-2', style: { x: 260, y: 50 } },\n      { id: 'node-3', style: { x: 280, y: 100 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // Immediate selection\n      trigger: [],\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n});\n\ngraph.render();\n",paraId:20,tocIndex:5},{value:"Selection mode",paraId:21,tocIndex:6},{value:"union",paraId:22,tocIndex:6},{value:": Keep the current state of selected elements and add the specified state.",paraId:22,tocIndex:6},{value:"intersect",paraId:22,tocIndex:6},{value:": Retain the specified state if the selected elements already have it; otherwise, clear the state.",paraId:22,tocIndex:6},{value:"diff",paraId:22,tocIndex:6},{value:": Toggle the specified state of the selected elements.",paraId:22,tocIndex:6},{value:"default",paraId:22,tocIndex:6},{value:": Clear the current state of selected elements and add the specified state.",paraId:22,tocIndex:6},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      mode: 'default', // Selection mode, default selection mode\n    },\n  ],\n});\n",paraId:23,tocIndex:6},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'lasso-select',\n        key: 'lasso-select',\n        trigger: [],\n        immediately: true,\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'lasso-select',\n      type: 'lasso-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      mode: 'default',\n      state: 'selected',\n    };\n    const optionFolder = gui.addFolder('lassoSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']);\n    // .onChange((e) => {\n    //   immediately.show(e === 'default');\n    // });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'lasso-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:24,tocIndex:6},{value:"Property",paraId:25,tocIndex:7},{value:"Description",paraId:25,tocIndex:7},{value:"Type",paraId:25,tocIndex:7},{value:"Default",paraId:25,tocIndex:7},{value:"cursor",paraId:25,tocIndex:7},{value:"Mouse style",paraId:25,tocIndex:7},{value:"string",paraId:25,tocIndex:7},{value:"fill",paraId:25,tocIndex:7},{value:"Fill color",paraId:25,tocIndex:7},{value:"string | Pattern | null",paraId:25,tocIndex:7},{value:"#1677FF",paraId:25,tocIndex:7},{value:"fillOpacity",paraId:25,tocIndex:7},{value:"Fill opacity",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"0.1",paraId:25,tocIndex:7},{value:"isBillboard",paraId:25,tocIndex:7},{value:"Billboard mode",paraId:25,tocIndex:7},{value:"boolean",paraId:25,tocIndex:7},{value:"isSizeAttenuation",paraId:25,tocIndex:7},{value:"Size attenuation",paraId:25,tocIndex:7},{value:"boolean",paraId:25,tocIndex:7},{value:"lineCap",paraId:25,tocIndex:7},{value:"Line cap style",paraId:25,tocIndex:7},{value:"butt",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"round",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"square",paraId:25,tocIndex:7},{value:"lineDash",paraId:25,tocIndex:7},{value:"Dash line config",paraId:25,tocIndex:7},{value:"number | string | (string | number)[]",paraId:25,tocIndex:7},{value:"lineDashOffset",paraId:25,tocIndex:7},{value:"Dash line offset",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"lineJoin",paraId:25,tocIndex:7},{value:"Line join style",paraId:25,tocIndex:7},{value:"miter",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"round",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"bevel",paraId:25,tocIndex:7},{value:"lineWidth",paraId:25,tocIndex:7},{value:"Line width",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"1",paraId:25,tocIndex:7},{value:"opacity",paraId:25,tocIndex:7},{value:"Overall opacity",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"radius",paraId:25,tocIndex:7},{value:"Rectangle corner radius",paraId:25,tocIndex:7},{value:"number | string | number[]",paraId:25,tocIndex:7},{value:"shadowBlur",paraId:25,tocIndex:7},{value:"Shadow blur level",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"shadowColor",paraId:25,tocIndex:7},{value:"Shadow color",paraId:25,tocIndex:7},{value:"string",paraId:25,tocIndex:7},{value:"shadowOffsetX",paraId:25,tocIndex:7},{value:"Shadow X offset",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"shadowOffsetY",paraId:25,tocIndex:7},{value:"Shadow Y offset",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"stroke",paraId:25,tocIndex:7},{value:"Stroke color",paraId:25,tocIndex:7},{value:"string | Pattern | null",paraId:25,tocIndex:7},{value:"#1677FF",paraId:25,tocIndex:7},{value:"strokeOpacity",paraId:25,tocIndex:7},{value:"Stroke opacity",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"visibility",paraId:25,tocIndex:7},{value:"Visibility",paraId:25,tocIndex:7},{value:"visible",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"hidden",paraId:25,tocIndex:7},{value:"zIndex",paraId:25,tocIndex:7},{value:"Rendering level",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"2",paraId:25,tocIndex:7},{value:"Example",paraId:26,tocIndex:7},{value:":",paraId:26,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // Dashed outline\n        // RGB super colorful box\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n});\n",paraId:27,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 200, y: 100 } },\n      { id: 'node-2', style: { x: 360, y: 100 } },\n      { id: 'node-3', style: { x: 280, y: 220 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      trigger: [],\n      immediately: true,\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // Dashed outline\n        // RGB super colorful box\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n  animation: true,\n});\n\ngraph.render();\n",paraId:28,tocIndex:7},{value:"Press this shortcut key along with mouse click to select, if set to an ",paraId:29,tocIndex:8},{value:"empty array",paraId:29,tocIndex:8},{value:", it means mouse click to select without needing to press other keys.",paraId:29,tocIndex:8},{value:"Note that setting ",paraId:30,tocIndex:8},{value:"trigger",paraId:30,tocIndex:8},{value:" to ",paraId:30,tocIndex:8},{value:"['drag']",paraId:30,tocIndex:8},{value:" will cause the ",paraId:30,tocIndex:8},{value:"drag-canvas",paraId:30,tocIndex:8},{value:" behavior to be disabled. They cannot be configured simultaneously.",paraId:30,tocIndex:8}]},68879:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(88625);const t=[{value:"OptimizeViewportTransform is a built-in behavior in G6 used to enhance the performance of large-scale graph behaviors.",paraId:0,tocIndex:0},{value:"This behavior implements a ",paraId:1,tocIndex:0},{value:"selective rendering strategy",paraId:1,tocIndex:0},{value:", temporarily hiding non-critical visual elements during viewport transformations (such as dragging, zooming, scrolling, etc.) to significantly reduce rendering computation load, improve frame rate, and response speed. After the viewport transformation operation ends, the system automatically restores the visibility of all elements after a set delay to ensure complete visual presentation.",paraId:1,tocIndex:0},{value:"This behavior is implemented based on the ",paraId:2,tocIndex:0},{value:"event system",paraId:3,tocIndex:0},{value:" by listening to the ",paraId:2,tocIndex:0},{value:"GraphEvent.BEFORE_TRANSFORM",paraId:2,tocIndex:0},{value:" and ",paraId:2,tocIndex:0},{value:"GraphEvent.AFTER_TRANSFORM",paraId:2,tocIndex:0},{value:" events, precisely capturing the start and end timing of viewport transformations, and dynamically controlling element visibility. Therefore, it must be used in conjunction with viewport operation behaviors (such as ",paraId:2,tocIndex:0},{value:"drag-canvas",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"zoom-canvas",paraId:2,tocIndex:0},{value:", or ",paraId:2,tocIndex:0},{value:"scroll-canvas",paraId:2,tocIndex:0},{value:") to be effective.",paraId:2,tocIndex:0},{value:"This behavior is mainly used for:",paraId:4,tocIndex:1},{value:"Smooth behavior of large-scale graphs (thousands of nodes/edges)",paraId:5,tocIndex:1},{value:"Performance-sensitive application scenarios",paraId:5,tocIndex:1},{value:"Add this behavior in the graph configuration:",paraId:6,tocIndex:2},{value:"1. Quick Configuration (Static)",paraId:7,tocIndex:2},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['optimize-viewport-transform'],\n});\n",paraId:9,tocIndex:2},{value:"2. Object Configuration (Recommended)",paraId:10,tocIndex:2},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:11,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'optimize-viewport-transform',\n      key: 'optimize-viewport-transform-1', // Specify an identifier for the behavior for dynamic updates\n      debounce: 300, // Set a longer debounce time\n    },\n  ],\n});\n",paraId:12,tocIndex:2},{value:"Option",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default",paraId:13,tocIndex:3},{value:"Required",paraId:13,tocIndex:3},{value:"type",paraId:13,tocIndex:3},{value:"Behavior type name",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:"optimize-viewport-transform",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"enable",paraId:13,tocIndex:3},{value:"Whether to enable this behavior",paraId:13,tocIndex:3},{value:"boolean | ((event: Event) => boolean)",paraId:13,tocIndex:3},{value:"true",paraId:13,tocIndex:3},{value:"debounce",paraId:13,tocIndex:3},{value:"How long after the operation ends to restore the visibility of all elements (milliseconds)",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"200",paraId:13,tocIndex:3},{value:"shapes",paraId:13,tocIndex:3},{value:"Specify the graphical elements that should remain visible during canvas operations, ",paraId:13,tocIndex:3},{value:"configuration options",paraId:14,tocIndex:3},{value:"function",paraId:13,tocIndex:3},{value:"(type) => type === 'node'",paraId:13,tocIndex:3},{value:"shapes",paraId:15,tocIndex:4},{value:" is used to specify the graphical elements that need to remain visible during canvas operations. By default, nodes are always visible, while edges and combos are temporarily hidden during canvas operations to improve performance.",paraId:15,tocIndex:4},{value:"{\n  shapes: (type, shape) => {\n    // Dynamically decide whether to remain visible based on element type and graphical object\n    if (type === 'node') return true; // All nodes remain visible\n    if (type === 'edge' && shape.get('importante')) return true; // Important edges remain visible\n    return false; // Other graphics are hidden\n  };\n}\n",paraId:16,tocIndex:4},{value:"Example",paraId:17},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['drag-canvas', 'zoom-canvas', 'optimize-viewport-transform'],\n});\n",paraId:18,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      debounce: 500, // Set a longer debounce time, restoring visibility of all elements 0.5 seconds after the operation stops\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  node: {\n    style: {\n      labelText: 'Drag Canvas!',\n    },\n  },\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      shapes: (type, shape) => {\n        if (type === 'node' && shape.className === 'key') return true;\n        return false;\n      },\n    },\n  ],\n});\n",paraId:20,tocIndex:8},{value:"👇 Try dragging the canvas to see the effect",paraId:21,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  },\n  node: {\n    style: {\n      labelText: 'Drag Canvas!',\n    },\n  },\n  behaviors: [\n    'drag-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      shapes: (type, shape) => {\n        if (type === 'node' && shape.className === 'key') return true;\n        return false;\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:8},{value:"You can dynamically decide whether to enable optimization based on the number of graph elements:",paraId:23,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    function () {\n      // Enable optimization when exceeding 500 elements\n      const enable = graph.getNodeData().length + graph.getEdgeData().length > 500;\n      return {\n        type: 'optimize-viewport-transform',\n        key: 'optimize-behavior',\n        enable,\n      };\n    },\n  ],\n});\n",paraId:24,tocIndex:9},{value:"When the graph contains a large number of nodes and edges (usually more than 500 elements), using this behavior can significantly improve operational smoothness. It is especially useful in environments with high performance requirements or limited hardware performance.",paraId:25,tocIndex:11}]},41142:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(47968);const t=[{value:"ScrollCanvas is a built-in behavior in G6 used to implement the canvas scrolling feature, supporting panning the canvas using the mouse wheel or keyboard arrow keys. This interaction is particularly useful for browsing larger charts, allowing users to explore different areas of the chart without changing the zoom level.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Browsing large chart content that exceeds the visible area",paraId:2,tocIndex:1},{value:"Exploring different parts of the graph while maintaining the current zoom level",paraId:2,tocIndex:1},{value:"Precisely adjusting the view position, especially when precise scrolling is needed in one-dimensional directions",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'scroll-canvas',\n        key: 'scroll-canvas',\n      },\n    ],\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'scroll-canvas',\n      type: 'scroll-canvas',\n      direction: 'No limit',\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use wheel by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'direction', {\n      'No limit': '',\n      'Only allow horizontal scrolling': 'x',\n      'Only allow vertical scrolling': 'y',\n    });\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use wheel by default': [],\n      'Shift+Arrow Key': {\n        up: ['Shift', 'ArrowUp'],\n        down: ['Shift', 'ArrowDown'],\n        left: ['Shift', 'ArrowLeft'],\n        right: ['Shift', 'ArrowRight'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'scroll-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['scroll-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      key: 'scroll-canvas-1', // Specify an identifier for the behavior for dynamic updates\n      sensitivity: 1.5, // Set sensitivity\n      direction: 'y', // Allow only vertical scrolling\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"scroll-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable this behavior",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"WheelEvent",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"KeyboardEvent",paraId:11,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"Allowed scrolling direction, ",paraId:11,tocIndex:4},{value:"configuration options",paraId:12,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"undefined",paraId:11,tocIndex:4},{value:"undefined",paraId:11,tocIndex:4},{value:" (no direction limit)",paraId:11,tocIndex:4},{value:"range",paraId:11,tocIndex:4},{value:"Scrollable viewport range (in viewport size units), ",paraId:11,tocIndex:4},{value:"configuration options",paraId:13,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"Scrolling sensitivity, the larger the value, the faster the scrolling",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"Keyboard shortcuts to trigger scrolling, ",paraId:11,tocIndex:4},{value:"configuration options",paraId:14,tocIndex:4},{value:"object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"Callback function when scrolling is finished",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"preventDefault",paraId:11,tocIndex:4},{value:"Whether to prevent the browser's default event",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"direction",paraId:15,tocIndex:5},{value:" is used to limit the scrolling direction:",paraId:15,tocIndex:5},{value:"Not set or set to ",paraId:16,tocIndex:5},{value:"undefined",paraId:16,tocIndex:5},{value:": Allow scrolling in any direction",paraId:16,tocIndex:5},{value:"Set to ",paraId:16,tocIndex:5},{value:"'x'",paraId:16,tocIndex:5},{value:": Allow only horizontal scrolling",paraId:16,tocIndex:5},{value:"Set to ",paraId:16,tocIndex:5},{value:"'y'",paraId:16,tocIndex:5},{value:": Allow only vertical scrolling",paraId:16,tocIndex:5},{value:"This is useful in specific visualization scenarios, such as in timeline charts where only horizontal scrolling may be needed.",paraId:17,tocIndex:5},{value:"range",paraId:18,tocIndex:6},{value:" is used to control the scrollable range of the canvas:",paraId:18,tocIndex:6},{value:"Set to a single number: Use the same value for all four directions",paraId:19,tocIndex:6},{value:"Set to an array: Specify the range for [top, right, bottom, left] directions respectively",paraId:19,tocIndex:6},{value:"For example:",paraId:20,tocIndex:6},{value:"range: 2; // Can scroll 2 viewport distances in any direction\nrange: [1, 2, 1, 2]; // Can scroll 1 viewport up and down, 2 viewports left and right\n",paraId:21,tocIndex:6},{value:"The value range for each direction is [0, Infinity], where 0 means no scrolling, and Infinity means unlimited scrolling.",paraId:22,tocIndex:6},{value:"trigger",paraId:23,tocIndex:7},{value:" allows you to configure keyboard arrow keys to control canvas scrolling:",paraId:23,tocIndex:7},{value:"{\n  trigger: {\n    up: ['ArrowUp'],     // Shortcut key for scrolling up\n    down: ['ArrowDown'], // Shortcut key for scrolling down\n    left: ['ArrowLeft'], // Shortcut key for scrolling left\n    right: ['ArrowRight'] // Shortcut key for scrolling right\n  }\n}\n",paraId:24,tocIndex:7},{value:"You can also configure combination keys:",paraId:25,tocIndex:7},{value:"{\n  trigger: {\n    up: ['Control', 'ArrowUp'],     // Ctrl + Up Arrow\n    down: ['Control', 'ArrowDown'], // Ctrl + Down Arrow\n    left: ['Control', 'ArrowLeft'], // Ctrl + Left Arrow\n    right: ['Control', 'ArrowRight'] // Ctrl + Right Arrow\n  }\n}\n",paraId:26,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['scroll-canvas'],\n});\n",paraId:27,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      direction: 'x', // Allow only horizontal scrolling\n    },\n  ],\n});\n",paraId:28,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      sensitivity: 1.8, // Increase scrolling sensitivity\n      range: [0.5, 2, 0.5, 2], // Smaller limits up and down, larger limits left and right\n    },\n  ],\n});\n",paraId:29,tocIndex:11},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      trigger: {\n        up: ['ArrowUp'],\n        down: ['ArrowDown'],\n        left: ['ArrowLeft'],\n        right: ['ArrowRight'],\n      },\n    },\n  ],\n});\n",paraId:30,tocIndex:12},{value:"ScrollCanvas",paraId:31,tocIndex:14},{value:" is used to pan the canvas without changing the zoom level",paraId:31,tocIndex:14},{value:"ZoomCanvas",paraId:31,tocIndex:14},{value:" is used to zoom the canvas, changing the view's zoom level",paraId:31,tocIndex:14},{value:"They are often used together to provide complete canvas navigation functionality:",paraId:32,tocIndex:14},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-canvas', 'zoom-canvas', 'scroll-canvas'],\n});\n",paraId:33,tocIndex:14}]},6188:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75184);const t=[{value:"ZoomCanvas is a built-in behavior in G6 used to implement the canvas zooming feature, supporting zooming in and out of the canvas using the mouse wheel or keyboard shortcuts. This is one of the most commonly used interactions in graph visualization, helping users view both the overall structure and local details of the graph.",paraId:0,tocIndex:0},{value:"This behavior is mainly used for:",paraId:1,tocIndex:1},{value:"Browsing large-scale graph data, freely switching between the whole and details",paraId:2,tocIndex:1},{value:"Focusing on specific areas for detailed analysis",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'zoom-canvas',\n        key: 'zoom-canvas',\n      },\n    ],\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'zoom-canvas',\n      type: 'zoom-canvas',\n      animation: true,\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use wheel by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use wheel by default': [],\n      'Control+Wheel': ['Control'],\n      'zoomIn:Ctrl+1 zoomOut:Ctrl+2 reset:Ctrl+0': {\n        zoomIn: ['Control', '1'],\n        zoomOut: ['Control', '2'],\n        reset: ['Control', '0'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'zoom-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"Add this behavior in the graph configuration:",paraId:4,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:5,tocIndex:3},{value:"Declare directly using a string form. This method is simple but only supports default configuration and cannot be dynamically modified after configuration:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['zoom-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:8,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and can dynamically update the configuration at runtime:",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      key: 'zoom-canvas-1', // Specify an identifier for the behavior for dynamic updates\n      sensitivity: 1.5, // Set sensitivity\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"Option",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:"Type",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"Behavior type name",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"zoom-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"Zoom animation effect settings",paraId:11,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:12,tocIndex:4},{value:"{ duration: 200 }",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"Whether to enable this behavior",paraId:11,tocIndex:4},{value:"boolean | ((event: Event) => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"origin",paraId:11,tocIndex:4},{value:"Zoom center point (viewport coordinates)",paraId:11,tocIndex:4},{value:"Point",paraId:13,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"Callback function when zooming is finished",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"preventDefault",paraId:11,tocIndex:4},{value:"Whether to prevent the browser's default event",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"Zoom sensitivity, the larger the value, the faster the zoom",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"How to trigger zooming, supports mouse wheel and keyboard shortcuts, ",paraId:11,tocIndex:4},{value:"configuration options",paraId:14,tocIndex:4},{value:"string[] | object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"trigger",paraId:15,tocIndex:5},{value:" has two usage methods, suitable for different scenarios:",paraId:15,tocIndex:5},{value:"If you want to trigger zooming only when certain keys are pressed while scrolling the mouse wheel, you can configure it like this:",paraId:16,tocIndex:6},{value:"{\n  trigger: ['Control']; // Hold down the Control key and scroll the mouse wheel to zoom\n}\n",paraId:17,tocIndex:6},{value:"Common modifier keys include:",paraId:18,tocIndex:6},{value:"Control",paraId:19,tocIndex:6},{value:"Shift",paraId:19,tocIndex:6},{value:"Alt",paraId:19,tocIndex:6},{value:"Not sure what value corresponds to a keyboard key? Refer to ",paraId:20,tocIndex:6},{value:"MDN Key Values",paraId:20,tocIndex:6},{value:".",paraId:20,tocIndex:6},{value:"If you want to control zooming entirely using the keyboard, you can set up key combinations:",paraId:21,tocIndex:7},{value:"{\n  trigger: {\n    zoomIn: ['Control', '+'],  // Zoom in shortcut\n    zoomOut: ['Control', '-'], // Zoom out shortcut\n    reset: ['Control', '0']    // Reset zoom ratio shortcut\n  }\n}\n",paraId:22,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['zoom-canvas'],\n});\n",paraId:23,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    function () {\n      return {\n        type: 'zoom-canvas',\n        origin: this.getCanvasCenter(), // Zoom with the viewport center as the origin\n      };\n    },\n  ],\n});\n",paraId:24,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      sensitivity: 0.8, // Lower sensitivity for smoother zoom changes\n    },\n  ],\n});\n",paraId:25,tocIndex:11},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      trigger: ['Shift'], // Hold down the Shift key and scroll to zoom\n    },\n  ],\n});\n",paraId:26,tocIndex:12},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      trigger: {\n        zoomIn: ['Control', '='], // Ctrl + = to zoom in\n        zoomOut: ['Control', '-'], // Ctrl + - to zoom out\n        reset: ['Control', '0'], // Ctrl + 0 to reset\n      },\n    },\n  ],\n});\n",paraId:27,tocIndex:13},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      // Other configurations for the PC side...\n    },\n    function () {\n      return {\n        type: 'zoom-canvas',\n        trigger: ['pinch'],\n        sensitivity: 0.8, // Lower sensitivity for smoother zoom changes\n        origin: this.getCanvasCenter(), // Zoom with the viewport center as the origin\n      };\n    },\n  ],\n});\n",paraId:28,tocIndex:14},{value:"To avoid excessive zooming in or out, you can set zoom limits:",paraId:29,tocIndex:16},{value:"const graph = new Graph({\n  // Other configurations...\n  zoomRange: [0.5, 3], // Allow zooming out to 50% and zooming in to 300%\n  behaviors: ['zoom-canvas'],\n});\n",paraId:30,tocIndex:16},{value:"Zooming and dragging are common combinations for a complete navigation experience:",paraId:31,tocIndex:17},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n",paraId:32,tocIndex:17}]},22255:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(43250);const t=[{value:"Custom behavior allows users to define one or more related interaction behaviors as a complete interaction based on the comprehensive ",paraId:0,tocIndex:0},{value:"event mechanism",paraId:1,tocIndex:0},{value:" provided by G6, thereby achieving interaction logic that fits business scenarios.",paraId:0,tocIndex:0},{value:"Typically:",paraId:2,tocIndex:1},{value:"Listen for user interaction events",paraId:3,tocIndex:1},{value:"Update the canvas or perform other operations based on the events",paraId:4,tocIndex:1},{value:"For example, the ",paraId:5,tocIndex:1},{value:"DragCanvas",paraId:5,tocIndex:1},{value:" behavior listens for pointer drag events and updates the camera position based on the drag distance.",paraId:5,tocIndex:1},{value:"Both behavior and plugin base classes are derived from the ",paraId:6,tocIndex:2},{value:"BaseExtension",paraId:6,tocIndex:2},{value:" base class within G6, so the implementation methods for behavior and plugin are basically the same.",paraId:6,tocIndex:2},{value:"However, based on the concept of visualization, behavior is usually used to handle user interaction events, while plugins are usually used to handle canvas rendering logic, additional component rendering, etc.",paraId:6,tocIndex:2},{value:"Due to conceptual distinctions, behavior instances cannot be obtained, while plugin instances can be obtained (",paraId:7},{value:"getPluginInstance",paraId:8},{value:").",paraId:7},{value:"Purpose",paraId:9,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"When users need to implement interaction logic that fits business scenarios, we usually need to cooperate with G6's event system to respond to related events and execute the required interaction logic.",paraId:10,tocIndex:3},{value:"Without Custom Behavior",paraId:11,tocIndex:3},{value:":",paraId:11,tocIndex:3},{value:"If custom behavior is not used, users need to perform a series of event listening and response processing through ",paraId:12,tocIndex:3},{value:"graph.on",paraId:12,tocIndex:3},{value:" after creating a Graph instance, making code logic processing and orchestration extremely difficult.",paraId:12,tocIndex:3},{value:"Advantages of Behavior",paraId:13,tocIndex:3},{value:":",paraId:13,tocIndex:3},{value:"Each behavior is an independent code module, and the existence of the behavior system facilitates users to decouple business logic, avoid code bloat, and facilitate subsequent maintenance.",paraId:14,tocIndex:3},{value:"Conclusion",paraId:15,tocIndex:3},{value:":",paraId:15,tocIndex:3},{value:"When users need to implement any interaction logic, they should first consider custom behavior.",paraId:16,tocIndex:3},{value:"When built-in behavior cannot fully meet business needs, users can also adjust and modify through custom behavior (inheriting built-in behavior).",paraId:16,tocIndex:3},{value:"(If the features supported by built-in behavior are more general, or if there are bugs in built-in behavior, you are welcome to submit issues or PRs on ",paraId:17,tocIndex:3},{value:"Github",paraId:17,tocIndex:3},{value:")",paraId:17,tocIndex:3},{value:"The implementation of a behavior is quite flexible, and you can implement your behavior in your preferred style.",paraId:18,tocIndex:4},{value:"Below is a simple custom behavior implementation. When the user clicks on the canvas, a node is added to the canvas (the fill color of the added node can be defined through behavior configuration):",paraId:19,tocIndex:4},{value:"import type { BaseBehaviorOptions, RuntimeContext, IPointerEvent } from '@antv/g6';\nimport { BaseBehavior, CanvasEvent } from '@antv/g6';\n\ninterface ClickAddNodeOptions extends BaseBehaviorOptions {\n  fill: string;\n}\n\nexport class ClickAddNode extends BaseBehavior<ClickAddNodeOptions> {\n  static defaultOptions: Partial<ClickAddNodeOptions> = {\n    fill: 'red',\n  };\n  constructor(context: RuntimeContext, options: ClickAddNodeOptions) {\n    super(context, Object.assign({}, ClickAddNode.defaultOptions, options));\n    this.bindEvents();\n  }\n  private bindEvents() {\n    const { graph } = this.context;\n    graph.on(CanvasEvent.CLICK, this.addNode);\n  }\n  private addNode = (event: IPointerEvent) => {\n    const { graph } = this.context;\n    const { layerX, layerY } = event.nativeEvent as PointerEvent;\n    graph.addNodeData([\n      {\n        id: 'node-' + Date.now(),\n        style: { x: layerX, y: layerY, fill: this.options.fill },\n      },\n    ]);\n    graph.draw();\n  };\n  private unbindEvents() {\n    const { graph } = this.context;\n    graph.off(CanvasEvent.CLICK, this.addNode);\n  }\n  public destroy() {\n    // Unbind events when destroyed\n    this.unbindEvents();\n    super.destroy();\n  }\n}\n",paraId:20,tocIndex:4},{value:"In the example code, we implemented a ",paraId:21,tocIndex:4},{value:"ClickAddNode",paraId:21,tocIndex:4},{value:" behavior, which adds an event listener to the Graph in the constructor. When the user clicks on the canvas, a node is added at the click position, and the fill color of the added node can be configured.",paraId:21,tocIndex:4},{value:"BaseBehavior",paraId:21,tocIndex:4},{value:" is the base class for all behaviors, and each custom behavior needs to inherit this base class.",paraId:21,tocIndex:4},{value:"Click on the blank area of the canvas below to add a node, and switch the right panel to configure the node color.",paraId:22,tocIndex:4},{value:"(async () => {\n  const { BaseBehavior, CanvasEvent, register, ExtensionCategory, Graph } = window.g6;\n\n  class ClickAddNode extends BaseBehavior {\n    constructor(context, options) {\n      super(context, options);\n\n      const { graph } = this.context;\n      graph.on(CanvasEvent.CLICK, (event) => {\n        const { layerX, layerY } = event.nativeEvent;\n        graph.addNodeData([\n          {\n            id: 'node-' + Date.now(),\n            style: { x: layerX, y: layerY, fill: options.fill },\n          },\n        ]);\n        graph.draw();\n      });\n    }\n  }\n\n  register(ExtensionCategory.BEHAVIOR, 'click-add-node', ClickAddNode);\n\n  const wrapEl = await createGraph(\n    {\n      data: {\n        nodes: [],\n      },\n      behaviors: [\n        {\n          type: 'click-add-node',\n          key: 'click-add-node',\n          fill: 'red',\n        },\n      ],\n    },\n    { width: 600, height: 300 },\n    (gui, graph) => {\n      const options = {\n        key: 'click-add-node',\n        type: 'click-add-node',\n        fill: 'red',\n      };\n      const optionFolder = gui.addFolder('ClickAddNode Options');\n      optionFolder.add(options, 'fill', ['red', 'black', 'blue', 'green', 'yellow', 'purple']);\n\n      optionFolder.onChange(({ property, value }) => {\n        graph.updateBehavior({\n          key: 'click-add-node',\n          [property]: value,\n        });\n        graph.render();\n      });\n    },\n  );\n\n  return wrapEl;\n})();\n",paraId:23,tocIndex:4},{value:"The above example is the simplest behavior implementation. In actual development, you may also need to handle logic such as enabling and disabling behaviors.",paraId:24},{value:"In addition, there may be event conflicts between multiple behaviors, and you need to handle these conflicts carefully.",paraId:25},{value:"Register through the register method provided by G6",paraId:26,tocIndex:5},{value:"import { ExtensionCategory, register } from '@antv/g6';\nimport { ClickAddNode } from 'your-custom-behavior-path';\n\nregister(ExtensionCategory.BEHAVIOR, 'click-add-node', ClickAddNode);\n",paraId:27,tocIndex:5},{value:"You can pass in the behavior type name or configuration parameter object in ",paraId:28,tocIndex:6},{value:"behaviors",paraId:28,tocIndex:6},{value:", such as the above ClickAddNode. See ",paraId:28,tocIndex:6},{value:"Configuring Behavior",paraId:29,tocIndex:6},{value:" for details.",paraId:28,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations\n  behaviors: [\n    {\n      type: 'click-add-node',\n      fill: 'blue',\n    },\n  ],\n});\n",paraId:30,tocIndex:6}]},11999:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(64826);const t=[{value:"Behavior refers to the interactive operations between users and chart elements, such as dragging the canvas, selecting nodes, zooming the view, etc. Good behavior design allows users to explore and understand graph data more intuitively. ",paraId:0,tocIndex:0},{value:"Proper configuration of behaviors is a key step in building efficient and usable charts",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:'G6 5.0 removed the concept of "Behavior Mode" (Mode), and directly lists the required behavior behaviors in ',paraId:1,tocIndex:1},{value:"behaviors",paraId:1,tocIndex:1},{value:", simplifying the configuration. This makes behavior configuration more intuitive and easier to get started with.",paraId:1,tocIndex:1},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  behaviors: ['drag-canvas', 'zoom-canvas', 'click-select'],\n});\n",paraId:2,tocIndex:1},{value:"G6 provides a variety of built-in behaviors that are ",paraId:3,tocIndex:2},{value:"ready to use without registration",paraId:3,tocIndex:2},{value:":",paraId:3,tocIndex:2},{value:"Category",paraId:4,tocIndex:2},{value:"Behavior Name",paraId:4,tocIndex:2},{value:"Registration Type",paraId:4,tocIndex:2},{value:"Function Description",paraId:4,tocIndex:2},{value:"Navigation",paraId:4,tocIndex:2},{value:"Drag Canvas",paraId:5,tocIndex:2},{value:"drag-canvas",paraId:4,tocIndex:2},{value:"Drag the entire canvas view",paraId:4,tocIndex:2},{value:"Zoom Canvas",paraId:6,tocIndex:2},{value:"zoom-canvas",paraId:4,tocIndex:2},{value:"Zoom the canvas view",paraId:4,tocIndex:2},{value:"Scroll Canvas",paraId:7,tocIndex:2},{value:"scroll-canvas",paraId:4,tocIndex:2},{value:"Scroll the canvas using the wheel",paraId:4,tocIndex:2},{value:"Optimize Viewport Transform",paraId:8,tocIndex:2},{value:"optimize-viewport-transform",paraId:4,tocIndex:2},{value:"Optimize view transform performance",paraId:4,tocIndex:2},{value:"Selection",paraId:4,tocIndex:2},{value:"Click Select",paraId:9,tocIndex:2},{value:"click-select",paraId:4,tocIndex:2},{value:"Click to select graph elements",paraId:4,tocIndex:2},{value:"Brush Select",paraId:10,tocIndex:2},{value:"brush-select",paraId:4,tocIndex:2},{value:"Select elements by dragging a rectangular area",paraId:4,tocIndex:2},{value:"Lasso Select",paraId:11,tocIndex:2},{value:"lasso-select",paraId:4,tocIndex:2},{value:"Freely draw an area to select elements",paraId:4,tocIndex:2},{value:"Editing",paraId:4,tocIndex:2},{value:"Create Edge",paraId:12,tocIndex:2},{value:"create-edge",paraId:4,tocIndex:2},{value:"Interactively create new edges",paraId:4,tocIndex:2},{value:"Drag Element",paraId:13,tocIndex:2},{value:"drag-element",paraId:4,tocIndex:2},{value:"Drag nodes or combos",paraId:4,tocIndex:2},{value:"Force-directed Drag",paraId:14,tocIndex:2},{value:"drag-element-force",paraId:4,tocIndex:2},{value:"Drag nodes in force-directed layout",paraId:4,tocIndex:2},{value:"Data Exploration",paraId:4,tocIndex:2},{value:"Collapse/Expand",paraId:15,tocIndex:2},{value:"collapse-expand",paraId:4,tocIndex:2},{value:"Expand or collapse subtree nodes",paraId:4,tocIndex:2},{value:"Focus Element",paraId:16,tocIndex:2},{value:"focus-element",paraId:4,tocIndex:2},{value:"Focus on specific elements and automatically adjust the view",paraId:4,tocIndex:2},{value:"Hover Activate",paraId:17,tocIndex:2},{value:"hover-activate",paraId:4,tocIndex:2},{value:"Highlight elements when hovering",paraId:4,tocIndex:2},{value:"Visual Optimization",paraId:4,tocIndex:2},{value:"Fix Element Size",paraId:18,tocIndex:2},{value:"fix-element-size",paraId:4,tocIndex:2},{value:"Fix the element size to a specified value",paraId:4,tocIndex:2},{value:"Auto-adapt Label",paraId:19,tocIndex:2},{value:"auto-adapt-label",paraId:4,tocIndex:2},{value:"Automatically adjust label position",paraId:4,tocIndex:2},{value:"For detailed configuration of each behavior, refer to the ",paraId:20,tocIndex:2},{value:"Built-in Behavior Documentation",paraId:21,tocIndex:2},{value:".",paraId:20,tocIndex:2},{value:"Some behaviors may overlap in triggering mechanisms, such as ",paraId:22},{value:"brush-select",paraId:22},{value:" and ",paraId:22},{value:"drag-canvas",paraId:22},{value:" both using mouse dragging. In such cases, you can avoid conflicts by modifying the trigger key (e.g., hold ",paraId:22},{value:"Shift",paraId:22},{value:" to drag and select).",paraId:22},{value:"When built-in behaviors cannot meet the requirements, G6 provides powerful customization capabilities:",paraId:23,tocIndex:3},{value:"Extend by inheriting built-in behaviors",paraId:24,tocIndex:3},{value:"Create entirely new behavior behaviors",paraId:24,tocIndex:3},{value:"Unlike built-in behaviors, ",paraId:25,tocIndex:3},{value:"custom behaviors need to be registered before use",paraId:25,tocIndex:3},{value:". For detailed tutorials, refer to the ",paraId:25,tocIndex:3},{value:"Custom Behavior",paraId:26,tocIndex:3},{value:" documentation.",paraId:25,tocIndex:3},{value:"The simplest way is to directly specify the required behaviors through the ",paraId:27,tocIndex:5},{value:"behaviors",paraId:27,tocIndex:5},{value:" array when initializing the graph instance:",paraId:27,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-canvas', 'zoom-canvas', 'click-select'],\n});\n",paraId:28,tocIndex:5},{value:"For behaviors that require custom parameters, you can configure properties using the ",paraId:29,tocIndex:6},{value:"object",paraId:29,tocIndex:6},{value:" form:",paraId:29,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: [\n    'drag-canvas',\n    {\n      type: 'zoom-canvas',\n      sensitivity: 1.5, // Configure sensitivity\n      key: 'zoom-behavior', // Specify a key for the behavior for subsequent updates\n    },\n  ],\n});\n",paraId:30,tocIndex:6},{value:"G6 supports dynamically managing behavior behaviors during the runtime of the graph instance to meet complex behavior needs:",paraId:31,tocIndex:7},{value:"You can adjust behaviors using the ",paraId:32,tocIndex:7},{value:"setBehaviors",paraId:33,tocIndex:7},{value:" method:",paraId:32,tocIndex:7},{value:"// Add new behavior\ngraph.setBehaviors((behaviors) => [...behaviors, 'lasso-select']);\n\n// Remove behavior\ngraph.setBehaviors((behaviors) => behaviors.filter((b) => b !== 'click-select'));\n",paraId:34,tocIndex:7},{value:"You can update the configuration of behaviors using the ",paraId:35,tocIndex:7},{value:"updateBehavior",paraId:36,tocIndex:7},{value:" method:",paraId:35,tocIndex:7},{value:"// Update a single behavior\ngraph.updateBehavior({\n  key: 'zoom-behavior',\n  sensitivity: 2,\n  enable: false, // Disable the behavior\n});\n",paraId:37,tocIndex:7},{value:"When using the ",paraId:38},{value:"updateBehavior",paraId:38},{value:" method, you need to specify a unique ",paraId:38},{value:"key",paraId:38},{value:" for the behavior during initialization.",paraId:38},{value:"You can also uninstall behaviors using the ",paraId:39,tocIndex:8},{value:"setBehaviors",paraId:40,tocIndex:8},{value:" method by setting the behavior configuration list to empty:",paraId:39,tocIndex:8},{value:"graph.setBehaviors([]);\n",paraId:41,tocIndex:8},{value:"For more behavior-related APIs, refer to the ",paraId:42,tocIndex:8},{value:"Behavior API Documentation",paraId:43,tocIndex:8},{value:".",paraId:42,tocIndex:8},{value:"Behaviors are essentially implemented through event listening and response. Although built-in behaviors have encapsulated common behavior behaviors, you can also directly implement custom behavior logic through the event API.",paraId:44,tocIndex:9},{value:"// Use event constants (recommended)\nimport { NodeEvent, EdgeEvent } from '@antv/g6';\n\n// Listen for node clicks\ngraph.on(NodeEvent.CLICK, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'selected');\n});\n\n// Listen for edge hover\ngraph.on(EdgeEvent.POINTER_OVER, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'highlight');\n});\n",paraId:45,tocIndex:10},{value:"The event system is the foundation for implementing behaviors. Mastering the event API is crucial for understanding and extending behavior behaviors. For more event-related information, refer to the ",paraId:46,tocIndex:10},{value:"Event Documentation",paraId:47,tocIndex:10},{value:".",paraId:46,tocIndex:10}]},82902:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(85881);const t=[{value:"To contribute, you need to understand G6's code structure and development workflow. The code repository for G6 is located at: ",paraId:0},{value:"https://github.com/antvis/G6",paraId:0},{value:"If you want to fix a bug or add a new feature, you need to first fork a copy of the code to your repository, then make modifications in your repository, and finally submit a Pull Request (PR) to the G6 repository.",paraId:1},{value:"\n  ",paraId:2},{value:"\n    ",paraId:3},{value:"\n      packages\n      ",paraId:3},{value:"\n        ",paraId:4},{value:"\n          g6\n          ",paraId:4},{value:"G6 Core Implementation",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:5},{value:"\n              __tests__\n              ",paraId:5},{value:"Testing and Development Environment",paraId:5},{value:"\n              ",paraId:5},{value:"\n                ",paraId:6},{value:"\n                  assets\n                  ",paraId:6},{value:"Test Static Resources",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  bugs\n                  ",paraId:6},{value:"Bugfix Test Case",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  dataset\n                  ",paraId:6},{value:"Test Dataset",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  demos\n                  ",paraId:6},{value:"Development Demos",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  snapshots\n                  ",paraId:6},{value:"Test Snapshots",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  perf\n                  ",paraId:6},{value:"Performance Test Case",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  perf-report\n                  ",paraId:6},{value:"Performance Test Reports",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  unit\n                  ",paraId:6},{value:"Test Cases",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  utils\n                  ",paraId:6},{value:"Test Utility Functions",paraId:6},{value:"\n                ",paraId:6},{value:"\n              ",paraId:6},{value:"\n            ",paraId:5},{value:"\n            ",paraId:5},{value:"\n              src\n              ",paraId:5},{value:"\n                ",paraId:7},{value:"\n                  animations\n                  ",paraId:7},{value:"Animation Executors and Built-in Animations",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  behaviors\n                  ",paraId:7},{value:"Built-in Interactions",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  constants\n                  ",paraId:7},{value:"Constants and Enumeration Values",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  elements\n                  ",paraId:7},{value:"Built-in Elements",paraId:7},{value:"\n                  ",paraId:7},{value:"\n                    ",paraId:8},{value:"\n                      combos\n                      ",paraId:8},{value:"Built-in Combos",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      edges\n                      ",paraId:8},{value:"Built-in Edges",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      nodes\n                      ",paraId:8},{value:"Built-in Nodes",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      shapes\n                      ",paraId:8},{value:"Composite Shapes",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                  ",paraId:8},{value:"\n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  layouts\n                  ",paraId:7},{value:"Layout References and Encapsulation",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  palettes\n                  ",paraId:7},{value:"Built-in Palettes",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  plugins\n                  ",paraId:7},{value:"Built-in Plugins",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  registry\n                  ",paraId:7},{value:"Registry Module",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  runtime\n                  ",paraId:7},{value:"Graph and Core Controller",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  spec\n                  ",paraId:7},{value:"Specification Type Definitions",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  themes\n                  ",paraId:7},{value:"Built-in Themes",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  transforms\n                  ",paraId:7},{value:"Built-in Data Transformations",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  types\n                  ",paraId:7},{value:"Type Definitions",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  utils\n                  ",paraId:7},{value:"Utility Functions",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  exports.ts\n                  ",paraId:7},{value:"Export Items",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  preset.ts\n                  ",paraId:7},{value:"Pre-operations",paraId:7},{value:"\n                ",paraId:7},{value:"\n              ",paraId:7},{value:"\n            ",paraId:5},{value:"\n            ",paraId:5},{value:"\n              vite.config.js\n              ",paraId:5},{value:"Development Environment Vite Configuration",paraId:5},{value:"\n            ",paraId:5},{value:"\n          ",paraId:5},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          g6-extension-3d/src\n          ",paraId:4},{value:"3D Extension",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:9},{value:"\n              behaviors\n              ",paraId:9},{value:"3D Behaviors",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              elements\n              ",paraId:9},{value:"3D Elements",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              plugins\n              ",paraId:9},{value:"3D Plugins",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              renderer.ts\n              ",paraId:9},{value:"3D Renderer",paraId:9},{value:"\n            ",paraId:9},{value:"\n          ",paraId:9},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          g6-extension-react/src\n          ",paraId:4},{value:"React Node Extension",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:10},{value:"\n              elements\n              ",paraId:10},{value:"React Elements",paraId:10},{value:"\n            ",paraId:10},{value:"\n            ",paraId:10},{value:"\n              graph\n              ",paraId:10},{value:"React Graph Encapsulation",paraId:10},{value:"\n            ",paraId:10},{value:"\n          ",paraId:10},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          site\n          ",paraId:4},{value:"Official Website and Documentation",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:11},{value:"\n              docs\n              ",paraId:11},{value:"Tutorials and API",paraId:11},{value:"\n            ",paraId:11},{value:"\n            ",paraId:11},{value:"\n              examples\n              ",paraId:11},{value:"Graph Examples",paraId:11},{value:"\n            ",paraId:11},{value:"\n            ",paraId:11},{value:"\n              .dumirc.ts\n              ",paraId:11},{value:"Configuration File",paraId:11},{value:"\n            ",paraId:11},{value:"\n          ",paraId:11},{value:"\n        ",paraId:4},{value:"\n      ",paraId:4},{value:"\n    ",paraId:3},{value:"\n  ",paraId:3},{value:"Fork and Pull the Code",paraId:12,tocIndex:1},{value:"Fork the G6 repository on Github to your account, then clone it locally.",paraId:13,tocIndex:1},{value:"# Navigate to your workspace\ncd /path/to/your/workspace\n\n# Navigate to the G6 directory\ngit clone git@github.com:[your username]/G6.git\n",paraId:14,tocIndex:1},{value:"Install Dependencies",paraId:15,tocIndex:1},{value:"Please ensure your local environment meets the following requirements:",paraId:16},{value:"Node.js",paraId:17},{value:" version >= 18",paraId:17},{value:"pnpm",paraId:17},{value:" version >= 8",paraId:17},{value:"# Enter the G6 code directory\ncd G6\n\n# Install Dependencies\npnpm install\n",paraId:18},{value:"Start the Development Environment",paraId:19},{value:"# Enter the g6 code directory.\ncd ./packages/g6\n\n# Start the development environment\npnpm dev\n",paraId:20},{value:"At this point, you can access G6's development environment and preview the examples by visiting ",paraId:21},{value:"http://127.0.0.1:8080",paraId:21},{value:" in your web browser.",paraId:21},{value:"Develop New Features or Fix Bugs",paraId:22},{value:"Switch to a development branch:",paraId:23},{value:"git checkout -b [branch name]\n",paraId:24},{value:"Make code modifications according to your needs and test locally.",paraId:25},{value:"Write Test Cases",paraId:26},{value:"In the ",paraId:27},{value:"packages/g6/__tests__/unit",paraId:27},{value:" directory, write test cases to ensure your code behaves as expected.",paraId:27},{value:"Validate Your Code with Tests：",paraId:28},{value:"pnpm test\n",paraId:29},{value:"Submit a Pull Request (PR)",paraId:30},{value:'# Stage changes\ngit add .\n\n# Commit Changes\ngit commit -m "[commit type]: commit message"\n\n# Push to Your Repository\ngit push\n',paraId:31},{value:"Submit a Pull Request (PR) to the G6 repository on GitHub.",paraId:32},{value:"G6 utilizes Jest for conducting unit tests, with the test cases situated in the ",paraId:33,tocIndex:2},{value:"packages/g6/__tests__/unit",paraId:33,tocIndex:2},{value:" directory.",paraId:33,tocIndex:2},{value:"We require that all code submissions must pass tests to ensure code quality.",paraId:34,tocIndex:2},{value:"The coverage rate for the current PR (Pull Request) submission is advised not to fall below the coverage rate of the existing codebase, and it is ",paraId:35,tocIndex:2},{value:"not to fall below 90%",paraId:35,tocIndex:2},{value:".",paraId:35,tocIndex:2},{value:"G6 extends Jest tests and provides the ",paraId:36,tocIndex:3},{value:"toMatchSnapshot",paraId:36,tocIndex:3},{value:" assertion for generating and comparing snapshots.",paraId:36,tocIndex:3},{value:"If the current possible modification affects the generation of some screenshots, it is necessary to check whether there are failed test cases by executing ",paraId:37,tocIndex:3},{value:"pnpm test",paraId:37,tocIndex:3},{value:".",paraId:37,tocIndex:3},{value:"When a failed test case is found, the console will print the path of the failed test, as well as the path information of the benchmark screenshot and the current screenshot. You can hold the ",paraId:38,tocIndex:3},{value:"Ctrl",paraId:38,tocIndex:3},{value:" or ",paraId:38,tocIndex:3},{value:"Command",paraId:38,tocIndex:3},{value:" key and click the path to view the specific test case or screenshot.",paraId:38,tocIndex:3},{value:"If it is confirmed that this modification is correct, then please manually delete the corresponding benchmark screenshots and regenerate the screenshots:",paraId:39,tocIndex:3},{value:"Regenerate all screenshots",paraId:40,tocIndex:3},{value:":",paraId:40,tocIndex:3},{value:"Delete all files in the ",paraId:41,tocIndex:3},{value:"packages/g6/__tests__/unit/snapshots",paraId:41,tocIndex:3},{value:" directory",paraId:41,tocIndex:3},{value:"Execute ",paraId:41,tocIndex:3},{value:"pnpm test",paraId:41,tocIndex:3},{value:"Regenerate a single screenshot",paraId:42,tocIndex:3},{value:":",paraId:42,tocIndex:3},{value:"Delete the corresponding file in the ",paraId:43,tocIndex:3},{value:"packages/g6/__tests__/snapshots",paraId:43,tocIndex:3},{value:" directory (test cases in the ",paraId:43,tocIndex:3},{value:"unit",paraId:43,tocIndex:3},{value:" directory will generate the corresponding directory under ",paraId:43,tocIndex:3},{value:"snapshots",paraId:43,tocIndex:3},{value:")",paraId:43,tocIndex:3},{value:"Execute ",paraId:43,tocIndex:3},{value:"npx jest __tests__/unit/xx/xxx.spec.ts",paraId:43,tocIndex:3},{value:"The G6 code adheres to the following standards:",paraId:44,tocIndex:4},{value:"eslint:recommended",paraId:45,tocIndex:4},{value:"@typescript-eslint/recommended",paraId:45,tocIndex:4},{value:"jsdoc/recommended-error",paraId:45,tocIndex:4},{value:"G6 adopts the ",paraId:46,tocIndex:5},{value:"Conventional Commits",paraId:46,tocIndex:5},{value:" specification, and the commit message format is as follows:",paraId:46,tocIndex:5},{value:"<type>[optional scope]: <description>\n",paraId:47,tocIndex:5},{value:"The type field can be one of the following:",paraId:48,tocIndex:5},{value:"feat: A new feature",paraId:49,tocIndex:5},{value:"fix: A bug fix",paraId:49,tocIndex:5},{value:"docs: Documentation update",paraId:49,tocIndex:5},{value:"style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)",paraId:49,tocIndex:5},{value:"refactor: Code change that neither fixes a bug nor adds a feature",paraId:49,tocIndex:5},{value:"perf: A code change that improves performance",paraId:49,tocIndex:5},{value:"test: Adding missing or correcting existing tests",paraId:49,tocIndex:5},{value:"build: Changes that affect the build system or external dependencies",paraId:49,tocIndex:5},{value:"ci: Changes to our CI configuration files and scripts",paraId:49,tocIndex:5},{value:"chore: Other changes that don't modify src or test files",paraId:49,tocIndex:5},{value:"revert: Reverts a previous commit",paraId:49,tocIndex:5},{value:"For example:",paraId:50,tocIndex:5},{value:"feat: add new feature\nrefactor(behavior): refactor drag-canvas behavior\n",paraId:51,tocIndex:5},{value:"Please ensure that your commit messages conform to the standards, and try to use English descriptions whenever possible. This helps us better manage the code.",paraId:52,tocIndex:5},{value:"After completing the above steps, you can submit a PR to the G6 repository. Please ensure that your PR adheres to the following standards:",paraId:53,tocIndex:6},{value:"A single PR should address only one issue.",paraId:54,tocIndex:6},{value:"The title of the PR should be concise and clear.",paraId:54,tocIndex:6},{value:"The description of the PR should be clear and detailed. If the changes involve the user interface, please include screenshots.",paraId:54,tocIndex:6},{value:"The PR must pass CI (Continuous Integration) checks.",paraId:54,tocIndex:6},{value:"After your PR is submitted, we will review your code. Please be patient and await the results of the review. If there are any areas that require modification, we will point them out within the PR.",paraId:55,tocIndex:7},{value:"We regularly release new versions. If your PR is for a non-urgent bug fix, it will be included in the next release. If your PR addresses an urgent bug fix, we will release a new version as soon as possible.",paraId:56,tocIndex:8},{value:"This project uses changeset to manage version release, and the specific release process is as follows:",paraId:57,tocIndex:8},{value:"Complete related development work",paraId:58,tocIndex:8},{value:"Create a branch from v5 (any name you want)",paraId:58,tocIndex:8},{value:"Run ",paraId:58,tocIndex:8},{value:"npm run version",paraId:58,tocIndex:8},{value:" command, fill in the information according to the prompt, and the version number will be updated automatically",paraId:58,tocIndex:8},{value:"Commit the changes to the remote repository",paraId:58,tocIndex:8},{value:"Create a PR on GitHub, add the ",paraId:58,tocIndex:8},{value:"publish",paraId:58,tocIndex:8},{value:" label, and merge the branch to v5",paraId:58,tocIndex:8},{value:"After the branch is merged, GitHub Actions will be triggered automatically, and the package will be published to npm",paraId:58,tocIndex:8},{value:'After the release, the Release note needs to be updated. Execute "pnpm tag" in the packages/g6',paraId:58,tocIndex:8},{value:"Fill in the tag information on the newly opened Github link. First, select the previous tag, and then select the current tag to obtain the changes. After confirming that there are no issues, release it.",paraId:58,tocIndex:8}]},78035:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(29267);const t=[{value:"G6 is a data-driven charting library, where data is one of the most important concepts. In G6, data is the core of the chart, and both display and interaction are based on data.",paraId:0,tocIndex:0},{value:"Common graph data formats include:CSV, ",paraId:1,tocIndex:0},{value:"DOT",paraId:1,tocIndex:0},{value:", GDF, GML, ",paraId:1,tocIndex:0},{value:"GraphML",paraId:1,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"GEXF",paraId:1,tocIndex:0},{value:" etc。",paraId:1,tocIndex:0},{value:"G6 uses JSON format to describe the graph structure, which includes information about nodes and edges. Here is a simple JSON data example:",paraId:2,tocIndex:0},{value:'{\n  "nodes": [{ "id": "node1" }, { "id": "node2" }],\n  "edges": [{ "source": "node1", "target": "node2" }]\n}\n',paraId:3,tocIndex:0},{value:"Compared to the other formats mentioned above, the JSON format has a more intuitive and understandable data structure. It is also more flexible, allowing for easy expansion of node and edge attributes.",paraId:4,tocIndex:0},{value:"It is a data exchange format widely supported by computers, so you do not have to worry about data format compatibility issues.",paraId:5,tocIndex:0},{value:"In G6, graph data consists of three parts: ",paraId:6,tocIndex:1},{value:"nodes",paraId:6,tocIndex:1},{value:" (node data), ",paraId:6,tocIndex:1},{value:"edges",paraId:6,tocIndex:1},{value:" (edge data), and ",paraId:6,tocIndex:1},{value:"combos",paraId:6,tocIndex:1},{value:" (combo data). Each part corresponds to different elements in the graph, and their types and data determine how the graph is displayed.",paraId:6,tocIndex:1},{value:"interface GraphData {\n  nodes: NodeData[]; // Node data\n  edges?: EdgeData[]; // Edge data (optional)\n  combos?: ComboData[]; // Combo data (optional)\n}\n",paraId:7,tocIndex:1},{value:"A node is the basic building block of a graph and represents an entity within the graph. Each node has a unique ",paraId:8,tocIndex:2},{value:"id",paraId:8,tocIndex:2},{value:" used to identify it, and nodes can also have data, styles, and states.",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:" id",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"Unique identifier for the node, used to distinguish different nodes",paraId:9,tocIndex:2},{value:"type",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"Node type. It can be the type of built-in Node, or the custom Node",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:"Object",paraId:9,tocIndex:2},{value:"Custom data for the node, such as name, description, etc. Can be accessed in style mappings via callback functions",paraId:9,tocIndex:2},{value:"style",paraId:9,tocIndex:2},{value:"Object",paraId:9,tocIndex:2},{value:"Node style, including position, size, color, and other visual properties",paraId:9,tocIndex:2},{value:"states",paraId:9,tocIndex:2},{value:"string[]",paraId:9,tocIndex:2},{value:"Initial states for the node, such as selected, active, hover, etc.",paraId:9,tocIndex:2},{value:"combo",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"null",paraId:9,tocIndex:2},{value:"ID of the combo the node belongs to. Used to organize hierarchical relationships. If none, it is null",paraId:9,tocIndex:2},{value:"children",paraId:9,tocIndex:2},{value:"string[]",paraId:9,tocIndex:2},{value:"Collection of child node IDs, used only in tree diagrams",paraId:9,tocIndex:2},{value:"Example:",paraId:11,tocIndex:2},{value:'{\n  "id": "node-1",\n  "type": "circle",\n  "data": { "name": "alice", "role": "Admin" },\n  "style": { "x": 100, "y": 200, "size": 32, "fill": "violet" },\n  "states": ["selected"],\n  "combo": null\n}\n',paraId:12,tocIndex:2},{value:"An edge connects nodes and represents the relationship between them. Each edge is associated with two nodes (source and target), and edges themselves can have data, styles, and states. Edge data is often used to represent logical relationships, such as user connections in social networks or step flows in flowcharts.",paraId:13,tocIndex:3},{value:"Attribute",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:" source",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"Source node ID",paraId:14,tocIndex:3},{value:"Required",paraId:16,tocIndex:3},{value:" target",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"Target node ID",paraId:14,tocIndex:3},{value:"id",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"Unique identifier for the edge. If not specified, ",paraId:14,tocIndex:3},{value:"id",paraId:14,tocIndex:3},{value:" is automatically generated with the format ",paraId:14,tocIndex:3},{value:"${source}-${target}",paraId:14,tocIndex:3},{value:"type",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"Edge type.It can be the type of built-in Edge, or the custom Edge",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"Custom data for the edge, accessible in style mappings via callback functions",paraId:14,tocIndex:3},{value:"style",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"Edge style, including stroke color, line width, arrowhead, etc.",paraId:14,tocIndex:3},{value:"states",paraId:14,tocIndex:3},{value:"string[]",paraId:14,tocIndex:3},{value:"Initial states for the edge",paraId:14,tocIndex:3},{value:"Example:",paraId:17,tocIndex:3},{value:'{\n  "source": "alice",\n  "target": "bob",\n  "type": "line",\n  "data": { "relationship": "friend", "strength": 5 },\n  "style": { "stroke": "green", "lineWidth": 2 },\n  "states": ["hover"]\n}\n',paraId:18,tocIndex:3},{value:"Combos allow you to create a logical unit for multiple nodes, used for layering, grouping, or other structural purposes. A combo can contain child nodes or other combos, forming a nested structure.",paraId:19,tocIndex:4},{value:"Attribute",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"Required",paraId:21,tocIndex:4},{value:" id",paraId:20,tocIndex:4},{value:"string",paraId:20,tocIndex:4},{value:"Unique identifier for the combo",paraId:20,tocIndex:4},{value:"type",paraId:20,tocIndex:4},{value:"string",paraId:20,tocIndex:4},{value:"Combo type.It can be the type of built-in Combo, or the custom Combo",paraId:20,tocIndex:4},{value:"data",paraId:20,tocIndex:4},{value:"Object",paraId:20,tocIndex:4},{value:"Custom data for the combo, accessible in style mappings via callback functions",paraId:20,tocIndex:4},{value:"style",paraId:20,tocIndex:4},{value:"Object",paraId:20,tocIndex:4},{value:"Combo style",paraId:20,tocIndex:4},{value:"states",paraId:20,tocIndex:4},{value:"string[]",paraId:20,tocIndex:4},{value:"Initial states for the combo",paraId:20,tocIndex:4},{value:"combo",paraId:20,tocIndex:4},{value:"string",paraId:20,tocIndex:4},{value:" | ",paraId:20,tocIndex:4},{value:"null",paraId:20,tocIndex:4},{value:"Parent combo ID. If there is no parent combo, it is null",paraId:20,tocIndex:4},{value:"Example:",paraId:22,tocIndex:4},{value:'{\n  "id": "combo1",\n  "type": "circle",\n  "data": { "groupName": "Group A" },\n  "style": { "fill": "lightblue", "stroke": "blue", "collapsed": true },\n  "states": [],\n  "combo": null\n}\n',paraId:23,tocIndex:4},{value:"To ensure correct rendering and interaction of the graph, it is recommended to organize the data according to G6's standard data structure. Each element (node, edge, combo) should contain a ",paraId:24,tocIndex:5},{value:"data",paraId:24,tocIndex:5},{value:" field to store business data and custom properties.",paraId:24,tocIndex:5},{value:"Avoid using identifiers that conflict with internal G6 field names",paraId:25,tocIndex:5},{value:", such as ",paraId:25,tocIndex:5},{value:"id",paraId:25,tocIndex:5},{value:", ",paraId:25,tocIndex:5},{value:"type",paraId:25,tocIndex:5},{value:", ",paraId:25,tocIndex:5},{value:"style",paraId:25,tocIndex:5},{value:", etc., to prevent naming conflicts.",paraId:25,tocIndex:5},{value:"Store business data (such as user information, social network relationships, etc.) in the ",paraId:25,tocIndex:5},{value:"data",paraId:25,tocIndex:5},{value:" field. This ensures flexibility and scalability of the data.",paraId:25,tocIndex:5},{value:"Example:",paraId:26,tocIndex:5},{value:'{\n  "nodes": [\n    {\n      "id": "node1",\n      "data": { "name": "Alice", "role": "Admin" }\n    },\n    {\n      "id": "node2",\n      "data": { "name": "Bob", "role": "User" }\n    }\n  ],\n  "edges": [\n    {\n      "source": "node1",\n      "target": "node2",\n      "data": { "relationship": "friend" }\n    }\n  ]\n}\n',paraId:27,tocIndex:5},{value:"G6 provides a series of APIs to access and manipulate data, including:",paraId:28,tocIndex:6},{value:"getData",paraId:29,tocIndex:6},{value:"setData",paraId:30,tocIndex:6},{value:"getNodeData",paraId:31,tocIndex:6},{value:"getEdgeData",paraId:32,tocIndex:6},{value:"getComboData",paraId:33,tocIndex:6},{value:"addData",paraId:34,tocIndex:6},{value:"addNodeData",paraId:35,tocIndex:6},{value:"addEdgeData",paraId:36,tocIndex:6},{value:"addComboData",paraId:37,tocIndex:6},{value:"updateData",paraId:38,tocIndex:6},{value:"updateNodeData",paraId:39,tocIndex:6},{value:"updateEdgeData",paraId:40,tocIndex:6},{value:"updateComboData",paraId:41,tocIndex:6},{value:"removeData",paraId:42,tocIndex:6},{value:"removeNodeData",paraId:43,tocIndex:6},{value:"removeEdgeData",paraId:44,tocIndex:6},{value:"removeComboData",paraId:45,tocIndex:6},{value:"Through different APIs, you can conveniently access and manipulate graph data, performing operations such as adding, deleting, modifying, and querying the graph.",paraId:46,tocIndex:6},{value:"G6 does not provide functionality for data retrieval and parsing. For local JSON data, you can directly import and use it as follows:",paraId:47,tocIndex:7},{value:"import data from './path/to/data.json' assert { type: 'json' };\n",paraId:48,tocIndex:7},{value:"For remote data, you can use ",paraId:49,tocIndex:7},{value:"fetch",paraId:49,tocIndex:7},{value:" or other networking libraries to retrieve the data:",paraId:49,tocIndex:7},{value:"fetch('https://path/to/data.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // Use data\n  });\n",paraId:50,tocIndex:7}]},57285:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92783);const t=[{value:"This document introduces combo attribute configuration, with configuration locations as follows:",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // Other configurations...\n  combo: {\n    type: 'circle', // Combo type\n    style: {}, // Combo style\n    state: {}, // State style\n    palette: {}, // Palette configuration\n    animation: {}, // Animation configuration\n  },\n});\n",paraId:1},{value:"Attribute",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"Combo type, name of built-in combo type or custom combo name",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"circle",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"Combo style, including color, size, etc.",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"Defines the style of the combo in different states",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"Defines the palette of the combo, used to map colors based on different data",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"Defines the animation effects of the combo",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Specifies the combo type, name of built-in combo type or custom combo name. The default is ",paraId:8,tocIndex:1},{value:"circle",paraId:8,tocIndex:1},{value:" (circular combo).",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    type: 'circle',\n  },\n});\n",paraId:9,tocIndex:1},{value:"Optional values are:",paraId:10,tocIndex:1},{value:"circle",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Circular Combo",paraId:12,tocIndex:1},{value:"rect",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Rectangular Combo",paraId:13,tocIndex:1},{value:"Define the style of the combo here, including color, size, etc.",paraId:14,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {},\n  },\n});\n",paraId:15,tocIndex:2},{value:"key",paraId:16,tocIndex:2},{value:": The main graphic of the combo, representing the main shape of the combo, such as a circle, rectangle, etc.",paraId:16,tocIndex:2},{value:"halo",paraId:16,tocIndex:2},{value:": A graphic that displays a halo effect around the main graphic.",paraId:16,tocIndex:2},{value:"label",paraId:16,tocIndex:2},{value:": Text label, usually used to display the name or description of the combo.",paraId:16,tocIndex:2},{value:"The following style configurations will be explained in sequence according to atomic graphics:",paraId:17,tocIndex:2},{value:"Main graphic style when the combo is expanded",paraId:18,tocIndex:3},{value:"Attribute",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Default",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"collapsed",paraId:19,tocIndex:3},{value:"Whether the combo is currently collapsed",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"cursor",paraId:19,tocIndex:3},{value:"Combo mouse hover style, ",paraId:19,tocIndex:3},{value:"configuration item",paraId:20,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"default",paraId:19,tocIndex:3},{value:"fill",paraId:19,tocIndex:3},{value:"Combo fill color",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"#99ADD1",paraId:19,tocIndex:3},{value:"fillOpacity",paraId:19,tocIndex:3},{value:"Combo fill color opacity",paraId:19,tocIndex:3},{value:"number  string",paraId:19,tocIndex:3},{value:"0.04",paraId:19,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:19,tocIndex:3},{value:'When lineWidth is small, the interactive area also becomes smaller. Sometimes we want to enlarge this area to make "thin lines" easier to pick up',paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"lineCap",paraId:19,tocIndex:3},{value:"Combo stroke end style",paraId:19,tocIndex:3},{value:"round",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"square",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"butt",paraId:19,tocIndex:3},{value:"butt",paraId:19,tocIndex:3},{value:"lineDash",paraId:19,tocIndex:3},{value:"Combo stroke dash style",paraId:19,tocIndex:3},{value:"number[]",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"lineDashOffset",paraId:19,tocIndex:3},{value:"Combo stroke dash offset",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"lineJoin",paraId:19,tocIndex:3},{value:"Combo stroke join style",paraId:19,tocIndex:3},{value:"round",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"bevel",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"miter",paraId:19,tocIndex:3},{value:"miter",paraId:19,tocIndex:3},{value:"lineWidth",paraId:19,tocIndex:3},{value:"Combo stroke width",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"opacity",paraId:19,tocIndex:3},{value:"Combo opacity",paraId:19,tocIndex:3},{value:"number  string",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"shadowBlur",paraId:19,tocIndex:3},{value:"Combo shadow blur",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowColor",paraId:19,tocIndex:3},{value:"Combo shadow color",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowOffsetX",paraId:19,tocIndex:3},{value:"Combo shadow offset in the x-axis direction",paraId:19,tocIndex:3},{value:"number  string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowOffsetY",paraId:19,tocIndex:3},{value:"Combo shadow offset in the y-axis direction",paraId:19,tocIndex:3},{value:"number  string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowType",paraId:19,tocIndex:3},{value:"Combo shadow type",paraId:19,tocIndex:3},{value:"inner",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"outer",paraId:19,tocIndex:3},{value:"outer",paraId:19,tocIndex:3},{value:"stroke",paraId:19,tocIndex:3},{value:"Combo stroke color",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"#99add1",paraId:19,tocIndex:3},{value:"strokeOpacity",paraId:19,tocIndex:3},{value:"Combo stroke color opacity",paraId:19,tocIndex:3},{value:"number  string",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"visibility",paraId:19,tocIndex:3},{value:"Whether the combo is visible",paraId:19,tocIndex:3},{value:"visible",paraId:19,tocIndex:3},{value:"  ",paraId:19,tocIndex:3},{value:"hidden",paraId:19,tocIndex:3},{value:"visible",paraId:19,tocIndex:3},{value:"x",paraId:19,tocIndex:3},{value:"Combo x coordinate",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"y",paraId:19,tocIndex:3},{value:"Combo y coordinate",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"z",paraId:19,tocIndex:3},{value:"Combo z coordinate",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"zIndex",paraId:19,tocIndex:3},{value:"Combo rendering level",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"{styleProps}",paraId:19,tocIndex:3},{value:"More graphic configurations, refer to ",paraId:19,tocIndex:3},{value:"BaseStyleProps",paraId:19,tocIndex:3},{value:" configuration items",paraId:19,tocIndex:3},{value:"BaseStyleProps",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"Optional values are: ",paraId:21,tocIndex:4},{value:"auto",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"default",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"none",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"context-menu",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"help",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"pointer",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"progress",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"wait",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"cell",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"crosshair",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"text",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"vertical-text",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"alias",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"copy",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"move",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"no-drop",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"not-allowed",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"grab",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"grabbing",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"all-scroll",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"col-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"row-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"n-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"e-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"s-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"w-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ne-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"se-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"sw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ew-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ns-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nesw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nwse-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"zoom-in",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"zoom-out",paraId:21,tocIndex:4},{value:"Example:",paraId:22,tocIndex:4},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      fill: '#1783FF', // Fill color\n      stroke: '#000', // Stroke color\n      lineWidth: 2, // Stroke width\n    },\n  },\n});\n",paraId:23,tocIndex:4},{value:"The effect is as follows:",paraId:24,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: { fill: '#1783FF', stroke: '#000', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:4},{value:"Effective when ",paraId:26,tocIndex:5},{value:"collapsed",paraId:26,tocIndex:5},{value:" is ",paraId:26,tocIndex:5},{value:"true",paraId:26,tocIndex:5},{value:"Attribute",paraId:27,tocIndex:5},{value:"Description",paraId:27,tocIndex:5},{value:"Type",paraId:27,tocIndex:5},{value:"Default",paraId:27,tocIndex:5},{value:"Required",paraId:27,tocIndex:5},{value:"collapsedCursor",paraId:27,tocIndex:5},{value:"Mouse hover style when the combo is collapsed, ",paraId:27,tocIndex:5},{value:"configuration item",paraId:28,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"Same as the cursor when expanded",paraId:27,tocIndex:5},{value:"collapsedFill",paraId:27,tocIndex:5},{value:"Fill color when the combo is collapsed",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"Same as the fill when expanded",paraId:27,tocIndex:5},{value:"collapsedFillOpacity",paraId:27,tocIndex:5},{value:"Fill color opacity when the combo is collapsed",paraId:27,tocIndex:5},{value:"number  string",paraId:27,tocIndex:5},{value:"1",paraId:27,tocIndex:5},{value:"collapsedIncreasedLineWidthForHitTesting",paraId:27,tocIndex:5},{value:'When the combo is collapsed, if lineWidth is small, the interactive area also becomes smaller. Sometimes we want to enlarge this area to make "thin lines" easier to pick up',paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"0",paraId:27,tocIndex:5},{value:"collapsedLineCap",paraId:27,tocIndex:5},{value:"Stroke end style when the combo is collapsed",paraId:27,tocIndex:5},{value:"round",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"square",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"butt",paraId:27,tocIndex:5},{value:"Same as the lineCap when expanded",paraId:27,tocIndex:5},{value:"collapsedLineDash",paraId:27,tocIndex:5},{value:"Stroke dash style when the combo is collapsed",paraId:27,tocIndex:5},{value:"number[]",paraId:27,tocIndex:5},{value:"Same as the lineDash when expanded",paraId:27,tocIndex:5},{value:"collapsedLineDashOffset",paraId:27,tocIndex:5},{value:"Stroke dash offset when the combo is collapsed",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"Same as the lineDashOffset when expanded",paraId:27,tocIndex:5},{value:"collapsedLineJoin",paraId:27,tocIndex:5},{value:"Stroke join style when the combo is collapsed",paraId:27,tocIndex:5},{value:"round",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"bevel",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"miter",paraId:27,tocIndex:5},{value:"Same as the lineJoin when expanded",paraId:27,tocIndex:5},{value:"collapsedLineWidth",paraId:27,tocIndex:5},{value:"Stroke width when the combo is collapsed",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"Same as the lineWidth when expanded",paraId:27,tocIndex:5},{value:"collapsedMarker",paraId:27,tocIndex:5},{value:"Whether to display the marker when the combo is collapsed, ",paraId:27,tocIndex:5},{value:"configuration item",paraId:29,tocIndex:5},{value:"boolean",paraId:27,tocIndex:5},{value:"true",paraId:27,tocIndex:5},{value:"collapsedOpacity",paraId:27,tocIndex:5},{value:"Opacity when the combo is collapsed",paraId:27,tocIndex:5},{value:"number  string",paraId:27,tocIndex:5},{value:"Same as the opacity when expanded",paraId:27,tocIndex:5},{value:"collapsedShadowBlur",paraId:27,tocIndex:5},{value:"Shadow blur when the combo is collapsed",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"Same as the shadowBlur when expanded",paraId:27,tocIndex:5},{value:"collapsedShadowColor",paraId:27,tocIndex:5},{value:"Shadow color when the combo is collapsed",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"Same as the shadowColor when expanded",paraId:27,tocIndex:5},{value:"collapsedShadowOffsetX",paraId:27,tocIndex:5},{value:"Shadow offset in the x-axis direction when the combo is collapsed",paraId:27,tocIndex:5},{value:"number  string",paraId:27,tocIndex:5},{value:"Same as the shadowOffsetX when expanded",paraId:27,tocIndex:5},{value:"collapsedShadowOffsetY",paraId:27,tocIndex:5},{value:"Shadow offset in the y-axis direction when the combo is collapsed",paraId:27,tocIndex:5},{value:"number  string",paraId:27,tocIndex:5},{value:"Same as the shadowOffsetY when expanded",paraId:27,tocIndex:5},{value:"collapsedShadowType",paraId:27,tocIndex:5},{value:"Shadow type when the combo is collapsed",paraId:27,tocIndex:5},{value:"inner",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"outer",paraId:27,tocIndex:5},{value:"Same as the shadowType when expanded",paraId:27,tocIndex:5},{value:"collapsedSize",paraId:27,tocIndex:5},{value:"Size when the combo is collapsed",paraId:27,tocIndex:5},{value:"number | [number, number] | [number, number, number]",paraId:27,tocIndex:5},{value:"32",paraId:27,tocIndex:5},{value:"collapsedStroke",paraId:27,tocIndex:5},{value:"Stroke color when the combo is collapsed",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"Same as the stroke when expanded",paraId:27,tocIndex:5},{value:"collapsedStrokeOpacity",paraId:27,tocIndex:5},{value:"Stroke color opacity when the combo is collapsed",paraId:27,tocIndex:5},{value:"number  string",paraId:27,tocIndex:5},{value:"Same as the strokeOpacity when expanded",paraId:27,tocIndex:5},{value:"collapsedVisibility",paraId:27,tocIndex:5},{value:"Whether the combo is visible when collapsed",paraId:27,tocIndex:5},{value:"visible",paraId:27,tocIndex:5},{value:"  ",paraId:27,tocIndex:5},{value:"hidden",paraId:27,tocIndex:5},{value:"Same as the visibility when expanded",paraId:27,tocIndex:5},{value:"collapsed{styleProps}",paraId:27,tocIndex:5},{value:"More graphic configurations, refer to ",paraId:27,tocIndex:5},{value:"BaseStyleProps",paraId:27,tocIndex:5},{value:" configuration items",paraId:27,tocIndex:5},{value:"BaseStyleProps",paraId:27,tocIndex:5},{value:"-",paraId:27,tocIndex:5},{value:"Example:",paraId:30,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      collapsedFill: '#1783FF', // Fill color\n      collapsedStroke: '#000', // Stroke color\n      collapsedLineWidth: 2, // Stroke width\n    },\n  },\n});\n",paraId:31,tocIndex:5},{value:"The effect is as follows:",paraId:32,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1', style: { collapsed: true } }],\n  },\n  combo: {\n    style: { collapsedFill: '#1783FF', collapsedStroke: '#000', collapsedLineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:33,tocIndex:5},{value:"Effective when ",paraId:34,tocIndex:6},{value:"collapsedMarker",paraId:34,tocIndex:6},{value:" is ",paraId:34,tocIndex:6},{value:"true",paraId:34,tocIndex:6},{value:"Attribute",paraId:35,tocIndex:6},{value:"Description",paraId:35,tocIndex:6},{value:"Type",paraId:35,tocIndex:6},{value:"Default",paraId:35,tocIndex:6},{value:"Required",paraId:35,tocIndex:6},{value:"collapsedMarkerType",paraId:35,tocIndex:6},{value:"Marker type displayed when the combo is collapsed ",paraId:35,tocIndex:6},{value:" - ",paraId:35,tocIndex:6},{value:"'child-count'",paraId:35,tocIndex:6},{value:": Number of child elements (including Node and Combo) ",paraId:35,tocIndex:6},{value:"- ",paraId:35,tocIndex:6},{value:"'descendant-count'",paraId:35,tocIndex:6},{value:": Number of descendant elements (including Node and Combo) ",paraId:35,tocIndex:6},{value:"- ",paraId:35,tocIndex:6},{value:"'node-count'",paraId:35,tocIndex:6},{value:": Number of descendant elements (only including Node) ",paraId:35,tocIndex:6},{value:" - ",paraId:35,tocIndex:6},{value:"(children: NodeLikeData[]) => string",paraId:35,tocIndex:6},{value:": Custom processing logic",paraId:35,tocIndex:6},{value:"child-count",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"descendant-count",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"node-count",paraId:35,tocIndex:6},{value:" | ((children: NodeData | ComboData[]) => string)",paraId:35,tocIndex:6},{value:"child-count",paraId:35,tocIndex:6},{value:"collapsedMarkerFill",paraId:35,tocIndex:6},{value:"Icon text color",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"#fff",paraId:35,tocIndex:6},{value:"collapsedMarkerFillOpacity",paraId:35,tocIndex:6},{value:"Icon text color opacity",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"1",paraId:35,tocIndex:6},{value:"collapsedMarkerFontSize",paraId:35,tocIndex:6},{value:"Icon font size",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"12",paraId:35,tocIndex:6},{value:"collapsedMarkerFontWeight",paraId:35,tocIndex:6},{value:"Icon font weight",paraId:35,tocIndex:6},{value:"number | string",paraId:35,tocIndex:6},{value:"normal",paraId:35,tocIndex:6},{value:"collapsedMarkerRadius",paraId:35,tocIndex:6},{value:"Icon corner radius",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"0",paraId:35,tocIndex:6},{value:"collapsedMarkerSrc",paraId:35,tocIndex:6},{value:"Image source. Its priority is higher than ",paraId:35,tocIndex:6},{value:"collapsedMarkerText",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerText",paraId:35,tocIndex:6},{value:"Icon text",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerTextAlign",paraId:35,tocIndex:6},{value:"Icon text horizontal alignment",paraId:35,tocIndex:6},{value:"center",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"end",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"left",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"right",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"start",paraId:35,tocIndex:6},{value:"center",paraId:35,tocIndex:6},{value:"collapsedMarkerTextBaseline",paraId:35,tocIndex:6},{value:"Icon text alignment baseline",paraId:35,tocIndex:6},{value:"alphabetic",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"bottom",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"hanging",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"ideographic",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"middle",paraId:35,tocIndex:6},{value:"  ",paraId:35,tocIndex:6},{value:"top",paraId:35,tocIndex:6},{value:"middle",paraId:35,tocIndex:6},{value:"collapsedMarkerWidth",paraId:35,tocIndex:6},{value:"Icon width",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerHeight",paraId:35,tocIndex:6},{value:"Icon height",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerZIndex",paraId:35,tocIndex:6},{value:"Icon rendering level",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"1",paraId:35,tocIndex:6},{value:"collapsedMarker{StyleProps}",paraId:35,tocIndex:6},{value:"More icon style configurations, refer to ",paraId:35,tocIndex:6},{value:"TextStyleProps",paraId:35,tocIndex:6},{value:", ",paraId:35,tocIndex:6},{value:"ImageStyleProps",paraId:35,tocIndex:6},{value:" configuration items. For example, collapsedMarkerFontSize represents the font size of the text icon",paraId:35,tocIndex:6},{value:"TextStyleProps",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"ImageStyleProps",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"Example:",paraId:36,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      collapsedMarkerFill: '#1783FF', // Fill color\n      collapsedMarkerFontSize: 30, // Icon font size\n    },\n  },\n});\n",paraId:37,tocIndex:6},{value:"The effect is as follows:",paraId:38,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo1' },\n      { id: 'node2', combo: 'combo1' },\n    ],\n    combos: [{ id: 'combo1', style: { collapsed: true } }],\n  },\n  combo: {\n    style: {\n      collapsedMarkerFill: '#1783FF',\n      collapsedMarkerFontSize: 30,\n    },\n  },\n});\n\ngraph.render();\n",paraId:39,tocIndex:6},{value:"Labels are used to display the text information of the combo:",paraId:40,tocIndex:7},{value:"Attribute",paraId:41,tocIndex:7},{value:"Description",paraId:41,tocIndex:7},{value:"Type",paraId:41,tocIndex:7},{value:"Default",paraId:41,tocIndex:7},{value:"Required",paraId:41,tocIndex:7},{value:"label",paraId:41,tocIndex:7},{value:"Whether to display the combo label",paraId:41,tocIndex:7},{value:"boolean",paraId:41,tocIndex:7},{value:"true",paraId:41,tocIndex:7},{value:"labelCursor",paraId:41,tocIndex:7},{value:"Mouse hover style when hovering over the combo label, ",paraId:41,tocIndex:7},{value:"configuration item",paraId:42,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"default",paraId:41,tocIndex:7},{value:"labelFill",paraId:41,tocIndex:7},{value:"Combo label text color",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"#000",paraId:41,tocIndex:7},{value:"labelFillOpacity",paraId:41,tocIndex:7},{value:"Combo label text color opacity",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"1",paraId:41,tocIndex:7},{value:"labelFontFamily",paraId:41,tocIndex:7},{value:"Combo label font family",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontSize",paraId:41,tocIndex:7},{value:"Combo label font size",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"12",paraId:41,tocIndex:7},{value:"labelFontStyle",paraId:41,tocIndex:7},{value:"Combo label font style",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"italic",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"oblique",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontVariant",paraId:41,tocIndex:7},{value:"Combo label font variant",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"small-caps",paraId:41,tocIndex:7},{value:"  string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontWeight",paraId:41,tocIndex:7},{value:"Combo label font weight",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"bold",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"bolder",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"lighter",paraId:41,tocIndex:7},{value:"  number",paraId:41,tocIndex:7},{value:"400",paraId:41,tocIndex:7},{value:"labelLeading",paraId:41,tocIndex:7},{value:"Line spacing",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelLetterSpacing",paraId:41,tocIndex:7},{value:"Combo label letter spacing",paraId:41,tocIndex:7},{value:"number  string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelLineHeight",paraId:41,tocIndex:7},{value:"Combo label line height",paraId:41,tocIndex:7},{value:"number  string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelMaxLines",paraId:41,tocIndex:7},{value:"Maximum number of lines for the combo label",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"1",paraId:41,tocIndex:7},{value:"labelMaxWidth",paraId:41,tocIndex:7},{value:"Maximum width of the combo label, ",paraId:41,tocIndex:7},{value:"configuration item",paraId:43,tocIndex:7},{value:"number  string",paraId:41,tocIndex:7},{value:"200%",paraId:41,tocIndex:7},{value:"labelOffsetX",paraId:41,tocIndex:7},{value:"Offset of the combo label in the x-axis direction",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelOffsetY",paraId:41,tocIndex:7},{value:"Offset of the combo label in the y-axis direction",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelPadding",paraId:41,tocIndex:7},{value:"Combo label padding",paraId:41,tocIndex:7},{value:"number  number[]",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelPlacement",paraId:41,tocIndex:7},{value:"Position of the combo label relative to the main graphic of the combo, ",paraId:41,tocIndex:7},{value:"configuration item",paraId:44,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"bottom",paraId:41,tocIndex:7},{value:"labelText",paraId:41,tocIndex:7},{value:"Combo label text content",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextAlign",paraId:41,tocIndex:7},{value:"Combo label text horizontal alignment",paraId:41,tocIndex:7},{value:"start",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"center",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"middle",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"end",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"left",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"right'                ",paraId:41,tocIndex:7},{value:"left`",paraId:41,tocIndex:7},{value:"labelTextBaseline",paraId:41,tocIndex:7},{value:"Combo label text baseline",paraId:41,tocIndex:7},{value:"top",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"hanging",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"middle",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"alphabetic",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"ideographic",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"bottom",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationColor",paraId:41,tocIndex:7},{value:"Combo label text decoration line color",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationLine",paraId:41,tocIndex:7},{value:"Combo label text decoration line",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationStyle",paraId:41,tocIndex:7},{value:"Combo label text decoration line style",paraId:41,tocIndex:7},{value:"solid",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"double",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"dotted",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"dashed",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"wavy",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextOverflow",paraId:41,tocIndex:7},{value:"Combo label text overflow handling",paraId:41,tocIndex:7},{value:"clip",paraId:41,tocIndex:7},{value:"  ",paraId:41,tocIndex:7},{value:"ellipsis",paraId:41,tocIndex:7},{value:"  string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextPath",paraId:41,tocIndex:7},{value:"Combo label text path",paraId:41,tocIndex:7},{value:"Path",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelWordWrap",paraId:41,tocIndex:7},{value:"Whether the combo label enables automatic line wrapping. After enabling labelWordWrap, the part that exceeds labelMaxWidth will automatically wrap",paraId:41,tocIndex:7},{value:"boolean",paraId:41,tocIndex:7},{value:"false",paraId:41,tocIndex:7},{value:"labelZIndex",paraId:41,tocIndex:7},{value:"Combo label rendering level",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"label{StyleProps}",paraId:41,tocIndex:7},{value:"More label style configurations, refer to ",paraId:41,tocIndex:7},{value:"TextStyleProps",paraId:41,tocIndex:7},{value:" attribute values. For example, labelOpacity represents label opacity",paraId:41,tocIndex:7},{value:"TextStyleProps",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"Optional values are: ",paraId:45,tocIndex:8},{value:"left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"left-top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"left-bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right-top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right-bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top-left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top-right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom-left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom-right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"center",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom",paraId:45,tocIndex:8},{value:"After enabling automatic line wrapping ",paraId:46,tocIndex:9},{value:"labelWordWrap",paraId:46,tocIndex:9},{value:", it will wrap if it exceeds this width:",paraId:46,tocIndex:9},{value:"string: Indicates the maximum width defined as a percentage of the combo element width. For example, ",paraId:47,tocIndex:9},{value:"50%",paraId:47,tocIndex:9},{value:" means the label width does not exceed half of the combo width",paraId:47,tocIndex:9},{value:"number: Indicates the maximum width defined in pixels. For example, 100 means the maximum width of the label is 100 pixels",paraId:47,tocIndex:9},{value:"For example, set multi-line label text:",paraId:48,tocIndex:9},{value:'{\n  "labelWordWrap": true,\n  "labelMaxWidth": 200,\n  "labelMaxLines": 3\n}\n',paraId:49,tocIndex:9},{value:"Example:",paraId:50,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations\n  combo: {\n    style: {\n      label: true, // Whether to display the combo label\n      labelText: 'Combo Name', // Label text content\n      labelFill: '#000', // Label text color\n      labelFontSize: 12, // Label font size\n      labelFontWeight: 'normal', // Label font weight\n      labelPlacement: 'bottom', // Position of the label relative to the main graphic of the combo\n    },\n  },\n});\n",paraId:51,tocIndex:9},{value:"The effect is as follows:",paraId:52,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [\n      {\n        id: 'combo1',\n        style: {\n          label: true,\n          labelText: 'Combo Name',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:53,tocIndex:9},{value:"Label background is used to display the background of the combo label:",paraId:54,tocIndex:10},{value:"Attribute",paraId:55,tocIndex:10},{value:"Description",paraId:55,tocIndex:10},{value:"Type",paraId:55,tocIndex:10},{value:"Default",paraId:55,tocIndex:10},{value:"labelBackground",paraId:55,tocIndex:10},{value:"Whether to display the combo label background",paraId:55,tocIndex:10},{value:"boolean",paraId:55,tocIndex:10},{value:"false",paraId:55,tocIndex:10},{value:"labelBackgroundCursor",paraId:55,tocIndex:10},{value:"Mouse hover style for the combo label background, ",paraId:55,tocIndex:10},{value:"configuration item",paraId:56,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"default",paraId:55,tocIndex:10},{value:"labelBackgroundFill",paraId:55,tocIndex:10},{value:"Combo label background fill color",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"#000",paraId:55,tocIndex:10},{value:"labelBackgroundFillOpacity",paraId:55,tocIndex:10},{value:"Combo label background opacity",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"0.75",paraId:55,tocIndex:10},{value:"labelBackgroundHeight",paraId:55,tocIndex:10},{value:"Combo label background height",paraId:55,tocIndex:10},{value:"string  number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineDash",paraId:55,tocIndex:10},{value:"Combo label background dash configuration",paraId:55,tocIndex:10},{value:"number  string (number  string )[]",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineDashOffset",paraId:55,tocIndex:10},{value:"Combo label background dash offset",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineWidth",paraId:55,tocIndex:10},{value:"Combo label background stroke width",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundPadding",paraId:55,tocIndex:10},{value:"Combo label background padding",paraId:55,tocIndex:10},{value:"number  number[]",paraId:55,tocIndex:10},{value:"[2, 4, 2, 4]",paraId:55,tocIndex:10},{value:"labelBackgroundRadius",paraId:55,tocIndex:10},{value:"Combo label background corner radius ",paraId:55,tocIndex:10},{value:" - number: Uniformly set the four corner radii ",paraId:55,tocIndex:10},{value:" - number[]: Set the four corner radii separately, automatically fill in if insufficient",paraId:55,tocIndex:10},{value:"number  number[]",paraId:55,tocIndex:10},{value:"0",paraId:55,tocIndex:10},{value:"labelBackgroundShadowBlur",paraId:55,tocIndex:10},{value:"Combo label background shadow blur",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowColor",paraId:55,tocIndex:10},{value:"Combo label background shadow color",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowOffsetX",paraId:55,tocIndex:10},{value:"Combo label background shadow X direction offset",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowOffsetY",paraId:55,tocIndex:10},{value:"Combo label background shadow Y direction offset",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundStroke",paraId:55,tocIndex:10},{value:"Combo label background stroke color",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundStrokeOpacity",paraId:55,tocIndex:10},{value:"Combo label background stroke opacity",paraId:55,tocIndex:10},{value:"number  string",paraId:55,tocIndex:10},{value:"1",paraId:55,tocIndex:10},{value:"labelBackgroundVisibility",paraId:55,tocIndex:10},{value:"Whether the combo label background is visible",paraId:55,tocIndex:10},{value:"visible",paraId:55,tocIndex:10},{value:"  ",paraId:55,tocIndex:10},{value:"hidden",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundZIndex",paraId:55,tocIndex:10},{value:"Combo label background rendering level",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"1",paraId:55,tocIndex:10},{value:"labelBackground{StyleProps}",paraId:55,tocIndex:10},{value:"More label background style configurations, refer to ",paraId:55,tocIndex:10},{value:"RectStyleProps",paraId:55,tocIndex:10},{value:" attribute values. For example, labelBackgroundOpacity represents label background opacity",paraId:55,tocIndex:10},{value:"RectStyleProps",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"Example:",paraId:57,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      labelBackground: true, // Whether to display the combo label background\n      labelBackgroundFill: '#000', // Label background fill\n      labelBackgroundRadius: 10, // Label background corner radius\n      labelBackgroundFillOpacity: 0.5, // Label background fill color opacity\n    },\n  },\n});\n",paraId:58,tocIndex:10},{value:"The effect is as follows:",paraId:59,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [\n      {\n        id: 'combo1',\n        style: {\n          label: true,\n          labelText: 'Combo Name',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n          labelBackground: true,\n          labelBackgroundFill: '#000',\n          labelBackgroundRadius: 10,\n          labelBackgroundFillOpacity: 0.5,\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:60,tocIndex:10},{value:"Attribute",paraId:61,tocIndex:11},{value:"Description",paraId:61,tocIndex:11},{value:"Type",paraId:61,tocIndex:11},{value:"Default",paraId:61,tocIndex:11},{value:"Required",paraId:61,tocIndex:11},{value:"halo",paraId:61,tocIndex:11},{value:"Whether to display the combo halo",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"false",paraId:61,tocIndex:11},{value:"haloCursor",paraId:61,tocIndex:11},{value:"Mouse hover style for the combo halo, ",paraId:61,tocIndex:11},{value:"configuration item",paraId:62,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"default",paraId:61,tocIndex:11},{value:"haloDraggable",paraId:61,tocIndex:11},{value:"Whether the combo halo is draggable",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"true",paraId:61,tocIndex:11},{value:"haloDroppable",paraId:61,tocIndex:11},{value:"Whether the combo halo can receive dragged elements",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"false",paraId:61,tocIndex:11},{value:"haloFill",paraId:61,tocIndex:11},{value:"Halo fill color",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"Same as the fill color of the main graphic ",paraId:61,tocIndex:11},{value:"fill",paraId:61,tocIndex:11},{value:"haloFillRule",paraId:61,tocIndex:11},{value:"Combo halo fill rule",paraId:61,tocIndex:11},{value:"nonzero",paraId:61,tocIndex:11},{value:"  ",paraId:61,tocIndex:11},{value:"evenodd",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"haloFilter",paraId:61,tocIndex:11},{value:"Combo halo filter",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"haloLineWidth",paraId:61,tocIndex:11},{value:"Combo halo stroke width",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"12",paraId:61,tocIndex:11},{value:"haloPointerEvents",paraId:61,tocIndex:11},{value:"Whether the combo halo effect responds to pointer events, ",paraId:61,tocIndex:11},{value:"configuration item",paraId:63,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"none",paraId:61,tocIndex:11},{value:"haloStroke",paraId:61,tocIndex:11},{value:"Combo halo stroke color, ",paraId:61,tocIndex:11},{value:"this attribute is used to set the color of the halo around the combo to help highlight the combo",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"#99add1",paraId:61,tocIndex:11},{value:"haloStrokeOpacity",paraId:61,tocIndex:11},{value:"Combo halo stroke color opacity",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"0.25",paraId:61,tocIndex:11},{value:"haloVisibility",paraId:61,tocIndex:11},{value:"Combo halo visibility",paraId:61,tocIndex:11},{value:"visible",paraId:61,tocIndex:11},{value:"  ",paraId:61,tocIndex:11},{value:"hidden",paraId:61,tocIndex:11},{value:"visible",paraId:61,tocIndex:11},{value:"haloZIndex",paraId:61,tocIndex:11},{value:"Combo halo rendering level",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"-1",paraId:61,tocIndex:11},{value:"halo{StyleProps}",paraId:61,tocIndex:11},{value:"More halo style configurations, refer to ",paraId:61,tocIndex:11},{value:"DisplayObject",paraId:61,tocIndex:11},{value:" configuration items. For example, haloFillOpacity represents halo fill color opacity",paraId:61,tocIndex:11},{value:"DisplayObject",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"Optional values are:\n",paraId:64,tocIndex:12},{value:"visible",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblepainted",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblestroke",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"non-transparent-pixel",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblefill",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visible",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"painted",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"fill",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"stroke",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"all",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"none",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"auto",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"inherit",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"initial",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"unset",paraId:64,tocIndex:12},{value:"Example:",paraId:65,tocIndex:12},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      halo: true, // Whether to display the combo halo\n      haloStroke: '#FF0000', // Combo halo stroke color\n      haloLineWidth: 10, // Combo halo stroke width\n    },\n  },\n});\n",paraId:66,tocIndex:12},{value:"The effect is as follows:",paraId:67,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: {\n      halo: true,\n      haloStroke: '#FF0000',\n      haloLineWidth: 10,\n    },\n  },\n});\n\ngraph.render();\n",paraId:68,tocIndex:12},{value:"Attribute",paraId:69,tocIndex:13},{value:"Description",paraId:69,tocIndex:13},{value:"Type",paraId:69,tocIndex:13},{value:"Default",paraId:69,tocIndex:13},{value:"icon",paraId:69,tocIndex:13},{value:"Whether to display the combo icon",paraId:69,tocIndex:13},{value:"boolean",paraId:69,tocIndex:13},{value:"true",paraId:69,tocIndex:13},{value:"iconFill",paraId:69,tocIndex:13},{value:"Combo icon text color",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconFontFamily",paraId:69,tocIndex:13},{value:"Combo icon font family",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconFontSize",paraId:69,tocIndex:13},{value:"Combo icon font size",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"16",paraId:69,tocIndex:13},{value:"iconFontStyle",paraId:69,tocIndex:13},{value:"Combo icon font style",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"italic",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"oblique",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconFontVariant",paraId:69,tocIndex:13},{value:"Combo icon font variant",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"small-caps",paraId:69,tocIndex:13},{value:"  string",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconFontWeight",paraId:69,tocIndex:13},{value:"Combo icon font weight",paraId:69,tocIndex:13},{value:"number  string",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconHeight",paraId:69,tocIndex:13},{value:"Combo icon height",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"Half the height of the main graphic",paraId:69,tocIndex:13},{value:"iconLetterSpacing",paraId:69,tocIndex:13},{value:"Combo icon text letter spacing",paraId:69,tocIndex:13},{value:"number  string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconLineHeight",paraId:69,tocIndex:13},{value:"Combo icon text line height",paraId:69,tocIndex:13},{value:"number  string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconMaxLines",paraId:69,tocIndex:13},{value:"Maximum number of lines for the combo icon text",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"1",paraId:69,tocIndex:13},{value:"iconRadius",paraId:69,tocIndex:13},{value:"Combo icon corner radius",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"0",paraId:69,tocIndex:13},{value:"iconSrc",paraId:69,tocIndex:13},{value:"Combo image source. Its priority is higher than iconText",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconText",paraId:69,tocIndex:13},{value:"Combo icon text",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextAlign",paraId:69,tocIndex:13},{value:"Combo icon text horizontal alignment",paraId:69,tocIndex:13},{value:"start",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"center",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"middle",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"end",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"left",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"right",paraId:69,tocIndex:13},{value:"left",paraId:69,tocIndex:13},{value:"iconTextBaseline",paraId:69,tocIndex:13},{value:"Combo icon text baseline",paraId:69,tocIndex:13},{value:"top",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"hanging",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"middle",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"alphabetic",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"ideographic",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"bottom",paraId:69,tocIndex:13},{value:"alphabetic",paraId:69,tocIndex:13},{value:"iconTextDecorationColor",paraId:69,tocIndex:13},{value:"Combo icon text decoration line color",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextDecorationLine",paraId:69,tocIndex:13},{value:"Combo icon text decoration line",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextDecorationStyle",paraId:69,tocIndex:13},{value:"Combo icon text decoration line style",paraId:69,tocIndex:13},{value:"solid",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"double",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"dotted",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"dashed",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"wavy",paraId:69,tocIndex:13},{value:"solid",paraId:69,tocIndex:13},{value:"iconTextOverflow",paraId:69,tocIndex:13},{value:"Combo icon text overflow handling",paraId:69,tocIndex:13},{value:"clip",paraId:69,tocIndex:13},{value:"  ",paraId:69,tocIndex:13},{value:"ellipsis",paraId:69,tocIndex:13},{value:"  string",paraId:69,tocIndex:13},{value:"clip",paraId:69,tocIndex:13},{value:"iconWidth",paraId:69,tocIndex:13},{value:"Combo icon width",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"Half the width of the main graphic",paraId:69,tocIndex:13},{value:"iconWordWrap",paraId:69,tocIndex:13},{value:"Whether the combo icon text automatically wraps",paraId:69,tocIndex:13},{value:"boolean",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"Example:",paraId:70,tocIndex:13},{value:"const graph = new Graph({\n  // Other configurations...\n  combo: {\n    style: {\n      iconText: 'Text', // Icon text\n      iconFill: '#FF0000', // Icon text color\n      iconFontSize: 14, // Icon text size\n      iconFontWeight: 'bold', // Icon text weight\n      iconFontStyle: 'italic', // Icon text style\n    },\n  },\n});\n",paraId:71,tocIndex:13},{value:"The effect is as follows:",paraId:72,tocIndex:13},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: {\n      iconText: 'Text',\n      iconFill: '#FF0000',\n      iconFontSize: 14,\n      iconFontWeight: 'bold',\n      iconFontStyle: 'italic',\n    },\n  },\n});\n\ngraph.render();\n",paraId:73,tocIndex:13},{value:"In some interactive behaviors, such as clicking to select a combo or hovering to activate an edge, it is merely marking certain states on the element. To reflect these states in the visual space seen by the end user, we need to set different graphic element styles for different states to respond to changes in the element's state.",paraId:74,tocIndex:14},{value:"G6 provides several built-in states, including selected, highlight, active, inactive, and disabled. In addition, it also supports custom states to meet more specific needs. For each state, developers can define a set of style rules that will override the default styles of the element.",paraId:75,tocIndex:14},{value:"The data structure is as follows:",paraId:76,tocIndex:14},{value:"type ComboState = {\n  [state: string]: ComboStyle;\n};\n",paraId:77,tocIndex:14},{value:"For example, when the combo is in the ",paraId:78,tocIndex:14},{value:"focus",paraId:78,tocIndex:14},{value:" state, you can add a stroke with a width of 3 and a color of orange.",paraId:78,tocIndex:14},{value:"const graph = new Graph({\n  combo: {\n    state: {\n      focus: {\n        lineWidth: 3, // Stroke width\n        stroke: 'orange', // Stroke color\n      },\n    },\n  },\n});\n",paraId:79,tocIndex:14},{value:"The effect is as follows:",paraId:80,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1', states: ['focus'] }],\n  },\n  combo: {\n    state: {\n      focus: {\n        lineWidth: 3,\n        stroke: 'orange',\n        fill: 'orange',\n        fillOpacity: 0.2,\n      },\n    },\n  },\n});\n\ngraph.render();\n",paraId:81,tocIndex:14},{value:"Defines the animation effects of the combo, supporting the following two configuration methods:",paraId:82,tocIndex:15},{value:"Turn off all animations for the combo",paraId:83,tocIndex:15},{value:'{\n  "combo": {\n    "animation": false\n  }\n}\n',paraId:84,tocIndex:15},{value:"Configure stage animations",paraId:85,tocIndex:15},{value:"Stage animations refer to the animation effects of the combo when entering the canvas, updating, and leaving the canvas. The currently supported stages include:",paraId:86,tocIndex:15},{value:"enter",paraId:87,tocIndex:15},{value:": Animation when the combo enters the canvas",paraId:87,tocIndex:15},{value:"update",paraId:87,tocIndex:15},{value:": Animation when the combo is updated",paraId:87,tocIndex:15},{value:"exit",paraId:87,tocIndex:15},{value:": Animation when the combo leaves the canvas",paraId:87,tocIndex:15},{value:"show",paraId:87,tocIndex:15},{value:": Animation when the combo is displayed from a hidden state",paraId:87,tocIndex:15},{value:"hide",paraId:87,tocIndex:15},{value:": Animation when the combo is hidden",paraId:87,tocIndex:15},{value:"collapse",paraId:87,tocIndex:15},{value:": Animation when the combo is collapsed",paraId:87,tocIndex:15},{value:"expand",paraId:87,tocIndex:15},{value:": Animation when the combo is expanded",paraId:87,tocIndex:15},{value:"You can refer to ",paraId:88,tocIndex:15},{value:"Animation Paradigm",paraId:89,tocIndex:15},{value:" to use animation syntax to configure the combo, such as:",paraId:88,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["x", "y"], // Only animate the x and y attributes during update\n          "duration": 1000, // Animation duration\n          "easing": "linear" // Easing function\n        }\n      ],\n  }\n}\n',paraId:90,tocIndex:15},{value:"You can also use built-in animation effects:",paraId:91,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "enter": "fade", // Use fade animation\n      "update": "translate", // Use translate animation\n      "exit": "fade" // Use fade animation\n    }\n  }\n}\n',paraId:92,tocIndex:15},{value:"You can pass in false to turn off animations for specific stages:",paraId:93,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "enter": false // Turn off combo entrance animation\n    }\n  }\n}\n',paraId:94,tocIndex:15},{value:"Defines the palette of the combo, which is a predefined pool of combo colors, and assigns colors based on rules, mapping colors to the ",paraId:95,tocIndex:16},{value:"fill",paraId:95,tocIndex:16},{value:" attribute.",paraId:95,tocIndex:16},{value:"For the definition of the palette, please refer to ",paraId:96,tocIndex:16},{value:"Palette",paraId:97,tocIndex:16},{value:".",paraId:96,tocIndex:16},{value:"Attribute",paraId:98,tocIndex:16},{value:"Description",paraId:98,tocIndex:16},{value:"Type",paraId:98,tocIndex:16},{value:"Default",paraId:98,tocIndex:16},{value:"type",paraId:98,tocIndex:16},{value:"Specifies the current palette type. ",paraId:98,tocIndex:16},{value:" - ",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:": Discrete palette ",paraId:98,tocIndex:16},{value:" - ",paraId:98,tocIndex:16},{value:"value",paraId:98,tocIndex:16},{value:": Continuous palette",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:" | ",paraId:98,tocIndex:16},{value:"value",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:"field",paraId:98,tocIndex:16},{value:"Specifies the grouping field in the element data. If not specified, the id is used as the grouping field by default",paraId:98,tocIndex:16},{value:"string | ((datum) => string)",paraId:98,tocIndex:16},{value:"id",paraId:98,tocIndex:16},{value:"color",paraId:98,tocIndex:16},{value:"Palette color. If the palette is registered, you can directly specify its registered name, and it also accepts a color array",paraId:98,tocIndex:16},{value:"string | string[]",paraId:98,tocIndex:16},{value:"-",paraId:98,tocIndex:16},{value:"invert",paraId:98,tocIndex:16},{value:"Whether to invert the palette",paraId:98,tocIndex:16},{value:"boolean",paraId:98,tocIndex:16},{value:"false",paraId:98,tocIndex:16},{value:"For example, assign combo colors to a set of data based on the ",paraId:99,tocIndex:16},{value:"category",paraId:99,tocIndex:16},{value:" field, so that combos of the same category have the same color:",paraId:99,tocIndex:16},{value:'{\n  "combo": {\n    "palette": {\n      "type": "group",\n      "field": "category",\n      "color": ["#1783FF", "#F08F56", "#D580FF", "#00C9C9", "#7863FF"]\n    }\n  }\n}\n',paraId:100,tocIndex:16},{value:"The effect is as follows:",paraId:101,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    combos: new Array(8)\n      .fill(0)\n      .map((_, i) => ({ id: `combo-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 8 },\n  combo: {\n    style: { fillOpacity: 0.4 },\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#1783FF', '#F08F56', '#D580FF', '#00C9C9', '#7863FF'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:102,tocIndex:16},{value:"You can also use the default configuration:",paraId:103,tocIndex:16},{value:'{\n  "combo": {\n    "palette": "tableau" // tableau is the palette name, and colors are assigned based on ID by default\n  }\n}\n',paraId:104,tocIndex:16},{value:"The effect is as follows:",paraId:105,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    combos: new Array(8)\n      .fill(0)\n      .map((_, i) => ({ id: `combo-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 8 },\n  combo: {\n    style: { fillOpacity: 0.4 },\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:106,tocIndex:16}]},94757:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(46412);const t=[{value:"The circular combo wraps child nodes or child combos with a circular boundary, suitable for representing equal or non-hierarchical group relationships.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Suitable for representing node groups without a clear hierarchical relationship. The circular combo can reflect the equality of members, such as user groups in social networks or decentralized team structures (highlighting collaboration).",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    behaviors: ['drag-element', 'collapse-expand'],\n    plugins: ['grid-line'],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'circle' }, 'type').disable();\n  },\n);\n",paraId:3,tocIndex:1},{value:"设置 ",paraId:4,tocIndex:1},{value:"combo.type",paraId:4,tocIndex:1},{value:" 为 ",paraId:4,tocIndex:1},{value:"circle",paraId:4,tocIndex:1},{value:" 以使用圆形组合。",paraId:4,tocIndex:1},{value:"If the element has its specific attributes, we will list them below. For all general style attributes, see ",paraId:5,tocIndex:2},{value:"BaseCombo",paraId:6,tocIndex:2},{value:"The following example shows the distribution of interest group members:",paraId:7,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 600,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo2', style: { x: 150, y: 150 } },\n      { id: 'node2', combo: 'combo2', style: { x: 200, y: 150 } },\n      { id: 'node3', combo: 'combo3', style: { x: 300, y: 150 } },\n      { id: 'node4', combo: 'combo3', style: { x: 350, y: 150 } },\n      { id: 'node5', combo: 'combo4', style: { x: 230, y: 300 } },\n      { id: 'node6', combo: 'combo4', style: { x: 280, y: 300 } },\n    ],\n    combos: [\n      { id: 'combo1', style: { labelText: '兴趣小组' } },\n      { id: 'combo2', combo: 'combo1', style: { labelText: '书法' } },\n      { id: 'combo3', combo: 'combo1', style: { labelText: '影视' } },\n      { id: 'combo4', combo: 'combo1', style: { labelText: '游戏' } },\n    ],\n  },\n  node: {\n    style: {\n      labelText: (d) => d.id,\n    },\n  },\n  behaviors: ['drag-element', 'collapse-expand'],\n  animation: true,\n});\n\ngraph.render();\n",paraId:8,tocIndex:3}]},587:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35558);const t=[{value:"The rectangular combo organizes content with right-angle boundaries, supporting strict hierarchical structures.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"System Architecture Diagrams",paraId:2,tocIndex:0},{value:": Such as service layering within system architecture, and subdivisions within each layer.",paraId:2,tocIndex:0},{value:"Geographical Area Division",paraId:2,tocIndex:0},{value:": Such as cities containing multiple areas, where the rectangular combo can intuitively display administrative boundaries or functional divisions.",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    combo: { type: 'rect' },\n    behaviors: ['collapse-expand'],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'rect' }, 'type').disable();\n  },\n);\n",paraId:3,tocIndex:1},{value:"设置 ",paraId:4,tocIndex:1},{value:"combo.type",paraId:4,tocIndex:1},{value:" 为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:" 以使用矩形组合。",paraId:4,tocIndex:1},{value:"If the element has its specific attributes, we will list them below. For all general style attributes, see ",paraId:5,tocIndex:2},{value:"BaseCombo",paraId:6,tocIndex:2},{value:"The following example is a simple microservice architecture service layer:",paraId:7,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo2', style: { x: 100, y: 100, labelText: '微服务1' } },\n      { id: 'node2', combo: 'combo2', style: { x: 200, y: 100, labelText: '微服务2' } },\n      { id: 'node3', combo: 'combo2', style: { x: 100, y: 200, labelText: '微服务3' } },\n      { id: 'node4', combo: 'combo2', style: { x: 200, y: 200, labelText: '微服务4' } },\n      { id: 'node5', combo: 'combo3', style: { x: 300, y: 100, labelText: '第三方登录' } },\n      { id: 'node6', combo: 'combo3', style: { x: 300, y: 150, labelText: '任务调度' } },\n      { id: 'node7', combo: 'combo3', style: { x: 300, y: 200, labelText: '消息服务' } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node1', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n    ],\n    combos: [\n      { id: 'combo1', style: { labelText: '服务层' } },\n      { id: 'combo2', combo: 'combo1', style: { labelText: '业务微服务' } },\n      { id: 'combo3', combo: 'combo1', style: { labelText: '集成模块' } },\n    ],\n  },\n  node: {\n    type: 'rect',\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  combo: {\n    type: 'rect',\n    style: {\n      padding: 16,\n    },\n  },\n  behaviors: ['drag-element', 'collapse-expand'],\n  animation: true,\n});\n\ngraph.render();\n",paraId:8,tocIndex:3}]},79922:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75142);const t=[{value:"G6 provides two types of ",paraId:0},{value:"built-in combos",paraId:1},{value:": circular combos and rectangular combos. However, in complex business scenarios, you may need to create custom combos with specific styles, interactive effects, or behavior logic.",paraId:0},{value:"In G6, a complete combo typically consists of the following parts:",paraId:2,tocIndex:0},{value:"key",paraId:3,tocIndex:0},{value:": The main graphic of the combo, representing the main shape of the combo, such as a circle, rectangle, etc.",paraId:3,tocIndex:0},{value:"label",paraId:3,tocIndex:0},{value:": Text label, usually used to display the name or description of the combo.",paraId:3,tocIndex:0},{value:"halo",paraId:3,tocIndex:0},{value:": A graphic that displays a halo effect around the main graphic.",paraId:3,tocIndex:0},{value:"Combos differ from ordinary nodes and have the following characteristics:",paraId:4,tocIndex:1},{value:"Containment",paraId:5,tocIndex:1},{value:": Combos can contain nodes and other combos, forming a hierarchical structure.",paraId:5,tocIndex:1},{value:"Two States",paraId:5,tocIndex:1},{value:": Expanded and Collapsed states.",paraId:5,tocIndex:1},{value:"Adaptive Size",paraId:5,tocIndex:1},{value:": Automatically adjusts size based on internal elements.",paraId:5,tocIndex:1},{value:"Drag Behavior",paraId:5,tocIndex:1},{value:": Supports overall dragging and dragging elements in/out.",paraId:5,tocIndex:1},{value:"Choose the Right Way",paraId:6,tocIndex:1},{value:"There are two ways to create custom combos:",paraId:7,tocIndex:2},{value:"Recommended",paraId:8,tocIndex:2},{value:"This is the most common way, and you can choose to inherit one of the following types:",paraId:9,tocIndex:3},{value:"BaseCombo",paraId:10,tocIndex:3},{value:" - The most basic combo class, providing core functionality for combos.",paraId:10,tocIndex:3},{value:"Circle",paraId:10,tocIndex:3},{value:" - Circular combo.",paraId:10,tocIndex:3},{value:"Rect",paraId:10,tocIndex:3},{value:" - Rectangular combo.",paraId:10,tocIndex:3},{value:"Why choose this way?",paraId:11,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"Less Code",paraId:12,tocIndex:3},{value:": Reuse existing combo properties and methods, focusing only on new features.",paraId:12,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"Fast Development",paraId:12,tocIndex:3},{value:": Suitable for most project needs, quickly achieving business goals.",paraId:12,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"Easy Maintenance",paraId:12,tocIndex:3},{value:": Clear code structure and clear inheritance relationships.",paraId:12,tocIndex:3},{value:"Advanced Usage",paraId:13,tocIndex:3},{value:"If existing combo types do not meet your needs, you can create combos from scratch based on the underlying graphics system of G.",paraId:14,tocIndex:4},{value:"Why choose this way?",paraId:15,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"Maximum Freedom",paraId:16,tocIndex:4},{value:": Full control over every detail of the combo, achieving any complex effect.",paraId:16,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"Special Needs",paraId:16,tocIndex:4},{value:": Highly customized scenarios that existing combo types cannot meet.",paraId:16,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"Performance Optimization",paraId:16,tocIndex:4},{value:": Performance optimization for specific scenarios.",paraId:16,tocIndex:4},{value:"Developing custom combos from scratch requires handling all details yourself, including graphic drawing, event response, state changes, expand/collapse logic, etc., which is quite challenging. You can directly refer to the ",paraId:17},{value:"source code",paraId:17},{value:" for implementation.",paraId:17},{value:"Let's start by inheriting ",paraId:18,tocIndex:5},{value:"BaseCombo",paraId:18,tocIndex:5},{value:" to implement a custom hexagon combo:",paraId:18,tocIndex:5},{value:"import { Graph, register, BaseCombo, ExtensionCategory } from '@antv/g6';\n\n// Define the path for the collapsed state button\nconst collapse = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x + r - 4, y],\n  ];\n};\n\n// Define the path for the expanded state button\nconst expand = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n    ['M', x - r + r, y - r + 4],\n    ['L', x, y + r - 4],\n  ];\n};\n\nclass HexagonCombo extends BaseCombo {\n  // Get the path of the hexagon\n  getKeyPath(attributes) {\n    const [width, height] = this.getKeySize(attributes);\n    const padding = 10;\n    const size = Math.min(width, height) + padding;\n\n    // Calculate the vertices of the hexagon\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n      const angle = (Math.PI / 3) * i;\n      const x = (size / 2) * Math.cos(angle);\n      const y = (size / 2) * Math.sin(angle);\n      points.push([x, y]);\n    }\n\n    // Construct the SVG path\n    const path = [['M', points[0][0], points[0][1]]];\n    for (let i = 1; i < 6; i++) {\n      path.push(['L', points[i][0], points[i][1]]);\n    }\n    path.push(['Z']);\n\n    return path;\n  }\n\n  // Get the style of the main graphic\n  getKeyStyle(attributes) {\n    const style = super.getKeyStyle(attributes);\n\n    return {\n      ...style,\n      d: this.getKeyPath(attributes),\n      fill: attributes.collapsed ? '#FF9900' : '#F04864',\n      fillOpacity: attributes.collapsed ? 0.5 : 0.2,\n      stroke: '#54BECC',\n      lineWidth: 2,\n    };\n  }\n\n  // Draw the main graphic\n  drawKeyShape(attributes, container) {\n    return this.upsert('key', 'path', this.getKeyStyle(attributes), container);\n  }\n\n  // Draw the expand/collapse button, using paths for finer control\n  drawCollapseButton(attributes) {\n    const { collapsed } = attributes;\n    const [width] = this.getKeySize(attributes);\n    const btnR = 8;\n    const x = width / 2 + btnR;\n    const d = collapsed ? expand(x, 0, btnR) : collapse(x, 0, btnR);\n\n    // Create the clickable area and button graphic\n    const hitArea = this.upsert('hit-area', 'circle', { cx: x, r: 8, fill: '#fff', cursor: 'pointer' }, this);\n    this.upsert('button', 'path', { stroke: '#54BECC', d, cursor: 'pointer', lineWidth: 1.4 }, hitArea);\n  }\n\n  // Override the render method to add more custom graphics\n  render(attributes, container) {\n    super.render(attributes, container);\n    this.drawCollapseButton(attributes, container);\n  }\n\n  // Use lifecycle hooks to add event listeners\n  onCreate() {\n    this.shapeMap['hit-area'].addEventListener('click', () => {\n      const id = this.id;\n      const collapsed = !this.attributes.collapsed;\n      const { graph } = this.context;\n      if (collapsed) graph.collapseElement(id);\n      else graph.expandElement(id);\n    });\n  }\n}\n\n// Register the custom combo\nregister(ExtensionCategory.COMBO, 'hexagon-combo', HexagonCombo);\n\n// Create a graph instance and use the custom combo\nconst graph = new Graph({\n  container: 'container',\n  height: 250,\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo1', style: { x: 100, y: 100 } },\n      { id: 'node2', combo: 'combo1', style: { x: 150, y: 150 } },\n      { id: 'node3', combo: 'combo2', style: { x: 300, y: 100 } },\n      { id: 'node4', combo: 'combo2', style: { x: 350, y: 150 } },\n    ],\n    combos: [\n      { id: 'combo1', data: { label: 'Hexagon 1' } },\n      { id: 'combo2', data: { label: 'Hexagon 2' }, style: { collapsed: true } },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#91d5ff',\n      stroke: '#1890ff',\n      lineWidth: 1,\n    },\n  },\n  combo: {\n    type: 'hexagon-combo',\n    style: {\n      padding: 20,\n      showCollapseButton: true,\n      labelText: (d) => d.data?.label,\n      labelPlacement: 'top',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:19,tocIndex:5},{value:"import { BaseCombo } from '@antv/g6';\nimport type { BaseComboStyleProps } from '@antv/g6';\n\n// Define button path generation functions\nconst collapse = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x + r - 4, y],\n  ];\n};\n\nconst expand = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n    ['M', x - r + r, y - r + 4],\n    ['L', x, y + r - 4],\n  ];\n};\n\nclass HexagonCombo extends BaseCombo {\n  // Get the path of the hexagon\n  protected getKeyPath(attributes: Required<BaseComboStyleProps>) {\n    const [width, height] = this.getKeySize(attributes);\n    const padding = 10;\n    const size = Math.min(width, height) + padding;\n\n    // Calculate the vertices of the hexagon\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n      const angle = (Math.PI / 3) * i;\n      const x = (size / 2) * Math.cos(angle);\n      const y = (size / 2) * Math.sin(angle);\n      points.push([x, y]);\n    }\n\n    // Construct the SVG path\n    const path = [['M', points[0][0], points[0][1]]];\n    for (let i = 1; i < 6; i++) {\n      path.push(['L', points[i][0], points[i][1]]);\n    }\n    path.push(['Z']);\n\n    return path;\n  }\n\n  // Get the style of the main graphic, directly using path data\n  protected getKeyStyle(attributes: Required<BaseComboStyleProps>) {\n    const style = super.getKeyStyle(attributes);\n\n    return {\n      ...style,\n      d: this.getKeyPath(attributes),\n      fill: attributes.collapsed ? '#FF9900' : '#F04864',\n      fillOpacity: attributes.collapsed ? 0.5 : 0.2,\n      stroke: '#54BECC',\n      lineWidth: 2,\n    };\n  }\n\n  // Draw the main graphic, using path type to directly pass in style objects\n  protected drawKeyShape(attributes: Required<BaseComboStyleProps>, container: Group) {\n    return this.upsert('key', 'path', this.getKeyStyle(attributes), container);\n  }\n\n  // Draw the collapse/expand button, using SVG paths for finer control\n  protected drawCollapseButton(attributes: Required<BaseComboStyleProps>) {\n    const { collapsed } = attributes;\n    const [width] = this.getKeySize(attributes);\n    const btnR = 8;\n    const x = width / 2 + btnR;\n    const d = collapsed ? expand(x, 0, btnR) : collapse(x, 0, btnR);\n\n    // Create the clickable area and button graphic\n    const hitArea = this.upsert('hit-area', 'circle', { cx: x, r: 8, fill: '#fff', cursor: 'pointer' }, this);\n    this.upsert('button', 'path', { stroke: '#54BECC', d, cursor: 'pointer', lineWidth: 1.4 }, hitArea);\n  }\n\n  // Use lifecycle hook methods to bind events\n  onCreate() {\n    this.shapeMap['hit-area'].addEventListener('click', () => {\n      const id = this.id;\n      const collapsed = !this.attributes.collapsed;\n      const { graph } = this.context;\n      if (collapsed) graph.collapseElement(id);\n      else graph.expandElement(id);\n    });\n  }\n}\n",paraId:20,tocIndex:6},{value:"import { ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.COMBO, 'hexagon-combo', HexagonCombo);\n",paraId:21,tocIndex:7},{value:"const graph = new Graph({\n  // ...other configurations\n  combo: {\n    type: 'hexagon-combo', // Use the name registered\n    style: {\n      padding: 20,\n      showCollapseButton: true,\n      labelText: (d) => d.data?.label,\n      labelPlacement: 'top',\n    },\n  },\n  // Since we implemented the collapse/expand feature ourselves, only drag behavior is needed here\n  behaviors: ['drag-element'],\n});\n",paraId:22,tocIndex:8},{value:"🎉 Congratulations! You have created your first custom combo.",paraId:23,tocIndex:8},{value:"Although Combos inherit from ",paraId:24,tocIndex:10},{value:"BaseNode",paraId:24,tocIndex:10},{value:", there are some key differences:",paraId:24,tocIndex:10},{value:"Adaptive Size",paraId:25,tocIndex:10},{value:": Combos automatically calculate the appropriate size based on internal elements.",paraId:25,tocIndex:10},{value:"Expand/Collapse States",paraId:25,tocIndex:10},{value:": Combos have two display states and need to handle state transitions.",paraId:25,tocIndex:10},{value:"Hierarchical Structure",paraId:25,tocIndex:10},{value:": Combos can be nested, forming hierarchical relationships.",paraId:25,tocIndex:10},{value:"Internal Element Management",paraId:25,tocIndex:10},{value:": Combos need to manage the nodes and sub-combos they contain.",paraId:25,tocIndex:10},{value:"G6's Combos are drawn using atomic graphic units provided by the ",paraId:26,tocIndex:11},{value:"G Graphics System",paraId:26,tocIndex:11},{value:". For an introduction to atomic graphics, please refer to the ",paraId:26,tocIndex:11},{value:"Element - Shape (Optional)",paraId:27,tocIndex:11},{value:" documentation.",paraId:26,tocIndex:11},{value:"All these graphics can be dynamically created or updated using ",paraId:28,tocIndex:11},{value:"upsert()",paraId:28,tocIndex:11},{value:" and automatically manage graphic states and lifecycles.",paraId:28,tocIndex:11},{value:"Before customizing Combos, you need to understand some important properties and methods in the G6 element base class:",paraId:29,tocIndex:12},{value:"Property",paraId:30,tocIndex:13},{value:"Type",paraId:30,tocIndex:13},{value:"Description",paraId:30,tocIndex:13},{value:"shapeMap",paraId:30,tocIndex:13},{value:"Record<string, DisplayObject>",paraId:30,tocIndex:13},{value:"Mapping table of all graphics under the current element",paraId:30,tocIndex:13},{value:"animateMap",paraId:30,tocIndex:13},{value:"Record<string, IAnimation>",paraId:30,tocIndex:13},{value:"Mapping table of all animations under the current element",paraId:30,tocIndex:13},{value:"upsert(name, Ctor, style, container, hooks)",paraId:31},{value:"When creating custom Combos, you will frequently use the ",paraId:32,tocIndex:15},{value:"upsert",paraId:32,tocIndex:15},{value:' method. It is short for "update or insert" and is responsible for adding or updating graphics in the element:',paraId:32,tocIndex:15},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:33,tocIndex:15},{value:"Parameter",paraId:34,tocIndex:15},{value:"Type",paraId:34,tocIndex:15},{value:"Description",paraId:34,tocIndex:15},{value:"key",paraId:34,tocIndex:15},{value:"string",paraId:34,tocIndex:15},{value:"Key of the graphic, corresponding to the key in ",paraId:34,tocIndex:15},{value:"shapeMap",paraId:34,tocIndex:15},{value:". Built-in keys include ",paraId:34,tocIndex:15},{value:"'key'",paraId:34,tocIndex:15},{value:", ",paraId:34,tocIndex:15},{value:"'label'",paraId:34,tocIndex:15},{value:", ",paraId:34,tocIndex:15},{value:"'halo'",paraId:34,tocIndex:15},{value:", ",paraId:34,tocIndex:15},{value:"'icon'",paraId:34,tocIndex:15},{value:", ",paraId:34,tocIndex:15},{value:"'port'",paraId:34,tocIndex:15},{value:", ",paraId:34,tocIndex:15},{value:"'badge'",paraId:34,tocIndex:15},{value:" Keys should not use special symbols, and will be converted to camel case to call ",paraId:34,tocIndex:15},{value:"getXxxStyle",paraId:34,tocIndex:15},{value:" and ",paraId:34,tocIndex:15},{value:"drawXxxShape",paraId:34,tocIndex:15},{value:" methods (see ",paraId:34,tocIndex:15},{value:"Element Conventions",paraId:35,tocIndex:15},{value:")",paraId:34,tocIndex:15},{value:"Ctor",paraId:34,tocIndex:15},{value:"{ new (...args: any[]): DisplayObject }",paraId:34,tocIndex:15},{value:"Graphic class",paraId:34,tocIndex:15},{value:"style",paraId:34,tocIndex:15},{value:"Record<string, any>",paraId:34,tocIndex:15},{value:"Graphic style",paraId:34,tocIndex:15},{value:"container",paraId:34,tocIndex:15},{value:"DisplayObject",paraId:34,tocIndex:15},{value:"Container to mount the graphic",paraId:34,tocIndex:15},{value:"For example, insert a fixed-position purple circle:",paraId:36,tocIndex:15},{value:"this.upsert(\n  'element-key', // Unique identifier of the element\n  'circle', // Graphic type, such as 'rect', 'circle', etc.\n  { x: 100, y: 100, fill: '#a975f3' }, // Style configuration object\n  container, // Parent container\n);\n",paraId:37,tocIndex:15},{value:"Why use ",paraId:38,tocIndex:15},{value:"upsert",paraId:38,tocIndex:15},{value:" instead of directly creating graphics with ",paraId:38,tocIndex:15},{value:"container.appendChild()",paraId:38,tocIndex:15},{value:"? Because:",paraId:38,tocIndex:15},{value:"Better Performance",paraId:39,tocIndex:15},{value:": When state changes or data updates, it intelligently reuses existing graphics instead of deleting and recreating them, greatly improving rendering performance.",paraId:39,tocIndex:15},{value:"Simpler Code",paraId:39,tocIndex:15},{value:": No need to manually check if elements exist.",paraId:39,tocIndex:15},{value:"Easy Management",paraId:39,tocIndex:15},{value:": All graphics created through ",paraId:39,tocIndex:15},{value:"upsert",paraId:39,tocIndex:15},{value:" are recorded in the node's ",paraId:39,tocIndex:15},{value:"shapeMap",paraId:39,tocIndex:15},{value:", and you can easily access them with ",paraId:39,tocIndex:15},{value:"this.getShape(key)",paraId:39,tocIndex:15},{value:".",paraId:39,tocIndex:15},{value:"render(attributes, container)",paraId:31},{value:"Every custom combo class must implement the ",paraId:40,tocIndex:16},{value:"render(attributes, container)",paraId:40,tocIndex:16},{value:' method, which defines how the combo is "drawn". You can use various atomic graphics here to create the structure you want.',paraId:40,tocIndex:16},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:41,tocIndex:16},{value:"Parameter",paraId:42,tocIndex:16},{value:"Type",paraId:42,tocIndex:16},{value:"Description",paraId:42,tocIndex:16},{value:"style",paraId:42,tocIndex:16},{value:"Record<string, any>",paraId:42,tocIndex:16},{value:"Element style",paraId:42,tocIndex:16},{value:"container",paraId:42,tocIndex:16},{value:"Group",paraId:42,tocIndex:16},{value:"Container",paraId:42,tocIndex:16},{value:"getShape(name)",paraId:31},{value:"Sometimes, you need to modify the properties of a sub-graphic after creation or have interactions between sub-graphics. In this case, the ",paraId:43,tocIndex:17},{value:"getShape",paraId:43,tocIndex:17},{value:" method can help you access any graphics previously created with ",paraId:43,tocIndex:17},{value:"upsert",paraId:43,tocIndex:17},{value:":",paraId:43,tocIndex:17},{value:"⚠️ Note",paraId:44,tocIndex:17},{value:": The order of graphics is important. If graphic B depends on the position of graphic A, make sure A is created first.",paraId:44,tocIndex:17},{value:"Use Convention Properties",paraId:45,tocIndex:18},{value:"The convention properties in combos include:",paraId:46,tocIndex:18},{value:"Use ",paraId:47,tocIndex:18},{value:"this.getKeySize(attributes)",paraId:47,tocIndex:18},{value:" to get the size of the combo, considering the collapsed state and sub-elements.",paraId:47,tocIndex:18},{value:"Use ",paraId:48,tocIndex:18},{value:"this.getContentBBox(attributes)",paraId:48,tocIndex:18},{value:" to get the bounding box of the content area.",paraId:48,tocIndex:18},{value:"Use ",paraId:49,tocIndex:18},{value:"this.getComboPosition(attributes)",paraId:49,tocIndex:18},{value:" to get the current position of the combo, based on state and sub-elements.",paraId:49,tocIndex:18},{value:"Use ",paraId:50,tocIndex:18},{value:"getXxxStyle",paraId:50,tocIndex:18},{value:" and ",paraId:50,tocIndex:18},{value:"drawXxxShape",paraId:50,tocIndex:18},{value:" Pairing for Graphic Drawing",paraId:50,tocIndex:18},{value:"getXxxStyle",paraId:51,tocIndex:18},{value:" is used to get the graphic style, and ",paraId:51,tocIndex:18},{value:"drawXxxShape",paraId:51,tocIndex:18},{value:" is used to draw the graphic. Graphics created this way support automatic animation execution.",paraId:51,tocIndex:18},{value:"Xxx",paraId:52,tocIndex:18},{value:" is the camel case form of the key passed to the ",paraId:52,tocIndex:18},{value:"upsert",paraId:53,tocIndex:18},{value:" method.",paraId:52,tocIndex:18},{value:"Access Graph Context via ",paraId:54,tocIndex:18},{value:"this.context",paraId:54,tocIndex:18},{value:"The following lifecycle hook functions are provided, and you can override these methods in custom combos to execute specific logic at key moments:",paraId:55,tocIndex:19},{value:"Hook Function",paraId:56,tocIndex:19},{value:"Trigger Timing",paraId:56,tocIndex:19},{value:"Typical Use Cases",paraId:56,tocIndex:19},{value:"onCreate",paraId:56,tocIndex:19},{value:"After the combo is created and the entrance animation is completed",paraId:56,tocIndex:19},{value:"Bind interactive events, initialize combo state, add external listeners",paraId:56,tocIndex:19},{value:"onUpdate",paraId:56,tocIndex:19},{value:"After the combo is updated and the update animation is completed",paraId:56,tocIndex:19},{value:"Update dependent data, adjust related elements, trigger linkage effects",paraId:56,tocIndex:19},{value:"onDestroy",paraId:56,tocIndex:19},{value:"After the combo is destroyed and the exit animation is completed",paraId:56,tocIndex:19},{value:"Clean up resources, remove external listeners, execute destruction notifications",paraId:56,tocIndex:19},{value:"One of the most powerful aspects of G6 element design is the ability to separate ",paraId:57,tocIndex:20},{value:'"state response"',paraId:57,tocIndex:20},{value:" from ",paraId:57,tocIndex:20},{value:'"drawing logic"',paraId:57,tocIndex:20},{value:".",paraId:57,tocIndex:20},{value:"You can define styles for each state in the combo configuration:",paraId:58,tocIndex:20},{value:"combo: {\n  type: 'custom-combo',\n  style: {\n    fill: '#f0f2f5',\n    stroke: '#d9d9d9'\n  },\n  state: {\n    selected: {\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    },\n    hover: {\n      fill: '#e6f7ff',\n    },\n  },\n}\n",paraId:59,tocIndex:20},{value:"Method to switch states:",paraId:60,tocIndex:20},{value:"graph.setElementState(comboId, ['selected']);\n",paraId:61,tocIndex:20},{value:"This state will be passed into the ",paraId:62,tocIndex:20},{value:"render()",paraId:62,tocIndex:20},{value:" method's ",paraId:62,tocIndex:20},{value:"attributes",paraId:62,tocIndex:20},{value:" and automatically applied to the graphics as a result of the internal system merging.",paraId:62,tocIndex:20},{value:"You can also customize rendering logic based on the state:",paraId:63,tocIndex:20},{value:"protected getKeyStyle(attributes: Required<BaseComboStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // Adjust style based on state\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:64,tocIndex:20}]},67620:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(16731);const t=[{value:'A Combo, short for Combination, is a special type of graph element in G6 that can contain nodes and sub-combos, similar to the concept of "groups" or "containers." It is typically used to represent set relationships, such as a department containing multiple employees or a city containing multiple regions.',paraId:0,tocIndex:0},{value:"It is not recommended to use Combos in ",paraId:1},{value:"tree graphs",paraId:1},{value:". The layout mechanism of tree graphs is incompatible with that of Combos, which can lead to node misalignment or style confusion.",paraId:1},{value:"G6 has built-in Combos including ",paraId:2},{value:"circle",paraId:2},{value:" (circular combo) and ",paraId:2},{value:"rect",paraId:2},{value:" (rectangular combo), as shown in the images below:",paraId:2},{value:"When defining a Combo, you need to add a ",paraId:3,tocIndex:1},{value:"combos",paraId:3,tocIndex:1},{value:" field to the graph's data object. Each Combo is an object with the following structure:",paraId:3,tocIndex:1},{value:"Attribute",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"id",paraId:4,tocIndex:1},{value:"Unique identifier of the combo",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"type",paraId:4,tocIndex:1},{value:"Combo type, name of built-in combo type or custom combo name, such as ",paraId:4,tocIndex:1},{value:"circle",paraId:4,tocIndex:1},{value:" or ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"data",paraId:4,tocIndex:1},{value:"Combo data, used to store custom data of the combo, accessible via callback functions in style mapping",paraId:4,tocIndex:1},{value:"object",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Combo style",paraId:4,tocIndex:1},{value:"object",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"states",paraId:4,tocIndex:1},{value:"Initial states of the combo",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"combo",paraId:4,tocIndex:1},{value:"Parent combo ID. If there is no parent combo, it is null",paraId:4,tocIndex:1},{value:"string | null",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"An example of a data item in the ",paraId:5,tocIndex:1},{value:"combos",paraId:5,tocIndex:1},{value:" array:",paraId:5,tocIndex:1},{value:'{\n  "id": "combo1",\n  "type": "circle",\n  "data": { "groupName": "Group A" },\n  "style": { "fill": "lightblue", "stroke": "blue", "collapsed": true },\n  "states": [],\n  "combo": null\n}\n',paraId:6,tocIndex:1},{value:"To assign a node to a Combo, you can add a ",paraId:7,tocIndex:1},{value:"combo",paraId:7,tocIndex:1},{value:" field to the node data:",paraId:7,tocIndex:1},{value:'{\n  "nodes": [{ "id": "node1", "combo": "comboA" }], // node1 belongs to comboA\n  "combos": [{ "id": "comboA" }] // define comboA\n}\n',paraId:8,tocIndex:1},{value:"There are three ways to configure Combos, listed in order of priority from highest to lowest:",paraId:9,tocIndex:2},{value:"Use ",paraId:10,tocIndex:2},{value:"graph.setCombo()",paraId:10,tocIndex:2},{value:" for dynamic configuration",paraId:10,tocIndex:2},{value:"Global configuration during graph instantiation",paraId:10,tocIndex:2},{value:"Dynamic properties in data",paraId:10,tocIndex:2},{value:"These configuration methods can be used simultaneously. When there are identical configuration items, the method with higher priority will override the one with lower priority.",paraId:11,tocIndex:2},{value:"graph.setCombo()",paraId:12},{value:"You can dynamically set the style mapping logic of Combos using ",paraId:13,tocIndex:3},{value:"graph.setCombo()",paraId:13,tocIndex:3},{value:" after the graph instance is created.",paraId:13,tocIndex:3},{value:"This method must be called before ",paraId:14,tocIndex:3},{value:"graph.render()",paraId:14,tocIndex:3},{value:" to take effect and has the highest priority.",paraId:14,tocIndex:3},{value:"graph.setCombo({\n  style: {\n    type: 'circle',\n    style: { fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:15,tocIndex:3},{value:"You can configure Combo style mapping globally during graph instantiation. This configuration will apply to all Combos.",paraId:16,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // Specify combo type and combo style type in the combo configuration\n  combo: {\n    type: 'circle',\n    style: { fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:17,tocIndex:4},{value:"If you need different configurations for different Combos, you can write the configuration into the Combo data. This configuration method can be directly written into the data in the form of the following code:",paraId:18,tocIndex:5},{value:"// Specify combo type and combo style type in the data\nconst data = {\n  combos: [\n    {\n      id: 'combo-1',\n      type: 'circle',\n      style: { size: 100, stroke: 'orange' },\n    },\n  ],\n};\n",paraId:19,tocIndex:5},{value:"If you want the configuration in the data to have a higher priority than the global configuration, you can take the following approach:",paraId:20,tocIndex:6},{value:"const data = {\n  combos: [\n    {\n      id: 'combo-1',\n      type: 'circle',\n      style: { size: 100, stroke: 'orange' },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  combo: {\n    type: (d) => d.type || 'rect',\n    style: {\n      stroke: (d) => d.style.stroke || 'blue',\n    },\n  },\n});\n",paraId:21,tocIndex:6},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    {\n      id: 'node1',\n      combo: 'combo1',\n      style: { x: 245, y: 200 },\n    },\n    {\n      id: 'node2',\n      combo: 'combo1',\n      style: { x: 210, y: 250 },\n    },\n    {\n      id: 'node3',\n      combo: 'combo1',\n      style: { x: 280, y: 245 },\n    },\n    {\n      id: 'node4',\n      combo: 'combo2',\n      style: { x: 400, y: 165 },\n    },\n    {\n      id: 'node5',\n      combo: 'combo2',\n      style: { x: 450, y: 162 },\n    },\n    {\n      id: 'node6',\n      combo: 'combo3',\n      style: { x: 425, y: 300 },\n    },\n    {\n      id: 'node7',\n      combo: 'combo3',\n      style: { x: 360, y: 332 },\n    },\n  ],\n  edges: [],\n  combos: [\n    {\n      id: 'combo1',\n      combo: 'combo3',\n      data: { label: 'Combo A' },\n    },\n    {\n      id: 'combo2',\n      combo: 'combo3',\n      data: { label: 'Combo B' },\n    },\n    {\n      id: 'combo3',\n      data: { label: 'Combo C' },\n    },\n    {\n      id: 'combo4',\n      data: { label: 'Combo D' },\n      style: { x: 58, y: 248 },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  height: 450,\n  data,\n  node: {\n    style: {\n      labelText: (d) => d.id,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n      labelFontSize: 10,\n    },\n  },\n  combo: {\n    type: 'circle',\n    style: {\n      padding: 2,\n      labelText: (d) => d.data.label,\n      labelPlacement: 'top',\n    },\n  },\n  behaviors: [\n    'collapse-expand',\n    {\n      type: 'drag-element',\n      dropEffect: 'link',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:7},{value:"Simply rendering a Combo does not provide much practical value; it is only when a series of interactive operations are supported that the value of Combos can be maximized.",paraId:23,tocIndex:8},{value:"In G6, we have built-in interactions such as ",paraId:24,tocIndex:8},{value:"drag-element",paraId:24,tocIndex:8},{value:" and ",paraId:24,tocIndex:8},{value:"collapse-expand",paraId:24,tocIndex:8},{value:".",paraId:24,tocIndex:8},{value:"Supports dragging nodes and Combos. During the dragging of a Combo, the positions of nodes and edges within the Combo will dynamically change. After dragging is complete, the relative positions of the Combo and nodes remain unchanged. You can also change the affiliation of the Combo during dragging by setting ",paraId:25,tocIndex:9},{value:"dropEffect: 'link'",paraId:25,tocIndex:9},{value:".",paraId:25,tocIndex:9},{value:"Supports double-clicking a Combo to collapse and expand it. After collapsing a Combo, all nodes within the Combo are hidden. If there are connections between external nodes and nodes within the Combo, all connections will connect to the Combo.",paraId:26,tocIndex:10},{value:"When built-in Combos cannot meet your needs, G6 provides powerful customization capabilities:",paraId:27,tocIndex:11},{value:"Extend built-in Combos",paraId:28,tocIndex:11},{value:"Create new Combo types",paraId:28,tocIndex:11},{value:"Unlike Combos, custom Combos need to be registered before use. For detailed tutorials, please refer to the ",paraId:29,tocIndex:11},{value:"Custom Combo",paraId:30,tocIndex:11},{value:" documentation.",paraId:29,tocIndex:11}]},40763:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(39100);const t=[{value:"This article introduces edge property configuration, with configuration locations as follows:",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  edge: {\n    type: 'line', // Edge type configuration\n    style: {}, // Edge style configuration\n    state: {}, // Edge state style\n    palette: {}, // Edge palette configuration\n    animation: {}, // Edge animation configuration\n  },\n});\n",paraId:1},{value:"Attribute",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"Edge type, name of built-in edge type or custom edge",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"line",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"Edge style, including color, size, etc.",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"Define styles of edges in different states",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"Define the palette of edges, used to map colors based on different data",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"Define the animation effects of edges",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Specify the edge type, name of built-in edge type or custom edge. The default is ",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:" (straight edge).",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  edge: {\n    type: 'polyline', // Edge type configuration\n  },\n});\n",paraId:9,tocIndex:1},{value:"Optional values are:",paraId:10,tocIndex:1},{value:"cubic-horizontal",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Horizontal Cubic Bezier Curve",paraId:12,tocIndex:1},{value:"cubic-vertical",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Vertical Cubic Bezier Curve",paraId:13,tocIndex:1},{value:"cubic",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Cubic Bezier Curve",paraId:14,tocIndex:1},{value:"line",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Straight Line",paraId:15,tocIndex:1},{value:"polyline",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Polyline",paraId:16,tocIndex:1},{value:"quadratic",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Quadratic Bezier Curve",paraId:17,tocIndex:1},{value:"Define the style of the edge, including color, size, etc.",paraId:18,tocIndex:2},{value:"const graph = new Graph({\n  edge: {\n    style: {},\n  },\n});\n",paraId:19,tocIndex:2},{value:"A complete edge consists of the following parts:",paraId:20,tocIndex:2},{value:"To understand the composition of edges, please read ",paraId:21,tocIndex:2},{value:"Element - Edge",paraId:22,tocIndex:2},{value:".",paraId:21,tocIndex:2},{value:"The following style configurations will be explained in sequence according to atomic graphics:",paraId:23,tocIndex:2},{value:"Attribute",paraId:24,tocIndex:3},{value:"Description",paraId:24,tocIndex:3},{value:"Default",paraId:24,tocIndex:3},{value:"Type",paraId:24,tocIndex:3},{value:"class",paraId:24,tocIndex:3},{value:"Edge className",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"cursor",paraId:24,tocIndex:3},{value:"Edge mouse hover style, ",paraId:24,tocIndex:3},{value:"configuration item",paraId:25,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"default",paraId:24,tocIndex:3},{value:"fill",paraId:24,tocIndex:3},{value:"Edge area fill color",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"fillRule",paraId:24,tocIndex:3},{value:"Edge internal fill rule",paraId:24,tocIndex:3},{value:"nonzero",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"evenodd",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"filter",paraId:24,tocIndex:3},{value:"Edge shadow filter effect",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:24,tocIndex:3},{value:"When the edge width is too small, it can be used to enlarge the interaction area",paraId:24,tocIndex:3},{value:"string | number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"isBillboard",paraId:24,tocIndex:3},{value:"Effective in 3D scenes, always facing the screen, so the line width is not affected by perspective projection",paraId:24,tocIndex:3},{value:"true",paraId:24,tocIndex:3},{value:"boolean",paraId:24,tocIndex:3},{value:"lineDash",paraId:24,tocIndex:3},{value:"Edge dashed line style",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"lineDashOffset",paraId:24,tocIndex:3},{value:"Edge dashed line offset",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"lineWidth",paraId:24,tocIndex:3},{value:"Edge width",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"opacity",paraId:24,tocIndex:3},{value:"Overall opacity of the edge",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"pointerEvents",paraId:24,tocIndex:3},{value:"Whether the edge responds to pointer events, ",paraId:24,tocIndex:3},{value:"configuration item",paraId:26,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowBlur",paraId:24,tocIndex:3},{value:"Edge shadow blur effect",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowColor",paraId:24,tocIndex:3},{value:"Edge shadow color",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowOffsetX",paraId:24,tocIndex:3},{value:"Edge shadow X-axis offset",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowOffsetY",paraId:24,tocIndex:3},{value:"Edge shadow Y-axis offset",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowType",paraId:24,tocIndex:3},{value:"Edge shadow type",paraId:24,tocIndex:3},{value:"inner",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"outer",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"both",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"sourcePort",paraId:24,tocIndex:3},{value:"Source port of the edge connection",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"stroke",paraId:24,tocIndex:3},{value:"Edge color",paraId:24,tocIndex:3},{value:"#000",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"strokeOpacity",paraId:24,tocIndex:3},{value:"Edge color opacity",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"targetPort",paraId:24,tocIndex:3},{value:"Target port of the edge connection",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"transform",paraId:24,tocIndex:3},{value:"The transform attribute allows you to rotate, scale, skew, or translate the given edge",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"transformOrigin",paraId:24,tocIndex:3},{value:"Rotation and scaling center, also known as the transformation center",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"visibility",paraId:24,tocIndex:3},{value:"Whether the edge is visible",paraId:24,tocIndex:3},{value:"visible",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"hidden",paraId:24,tocIndex:3},{value:"visible",paraId:24,tocIndex:3},{value:"zIndex",paraId:24,tocIndex:3},{value:"Edge rendering level",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"Optional values are:\n",paraId:27,tocIndex:4},{value:"visible",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblepainted",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblestroke",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"non-transparent-pixel",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblefill",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visible",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"painted",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"fill",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"stroke",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"all",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"none",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"auto",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"inherit",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"initial",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"unset",paraId:27,tocIndex:4},{value:"Optional values are: ",paraId:28,tocIndex:5},{value:"auto",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"default",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"none",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"context-menu",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"help",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"pointer",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"progress",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"wait",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"cell",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"crosshair",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"text",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"vertical-text",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"alias",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"copy",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"move",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"no-drop",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"not-allowed",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"grab",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"grabbing",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"all-scroll",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"col-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"row-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"n-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"e-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"s-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"w-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ne-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"se-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"sw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ew-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ns-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nesw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nwse-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"zoom-in",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"zoom-out",paraId:28,tocIndex:5},{value:"Example:",paraId:29,tocIndex:5},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n    },\n  },\n});\n",paraId:30,tocIndex:5},{value:"The effect is as follows:",paraId:31,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n    },\n  },\n});\n\ngraph.render();\n",paraId:32,tocIndex:5},{value:"Attribute",paraId:33,tocIndex:6},{value:"Description",paraId:33,tocIndex:6},{value:"Type",paraId:33,tocIndex:6},{value:"Default",paraId:33,tocIndex:6},{value:"label",paraId:33,tocIndex:6},{value:"Whether the edge label is displayed",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"true",paraId:33,tocIndex:6},{value:"labelAutoRotate",paraId:33,tocIndex:6},{value:"Whether the edge label auto-rotates to keep consistent with the edge direction",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"true",paraId:33,tocIndex:6},{value:"labelBackground",paraId:33,tocIndex:6},{value:"Whether the edge label displays a background",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"false",paraId:33,tocIndex:6},{value:"labelBackgroundClass",paraId:33,tocIndex:6},{value:"Edge label background className",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundCursor",paraId:33,tocIndex:6},{value:"Edge label background mouse hover style, ",paraId:33,tocIndex:6},{value:"configuration item",paraId:34,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"default",paraId:33,tocIndex:6},{value:"labelBackgroundFill",paraId:33,tocIndex:6},{value:"Edge label background fill color",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundFillOpacity",paraId:33,tocIndex:6},{value:"Edge label background opacity",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelBackgroundHeight",paraId:33,tocIndex:6},{value:"Edge label background height",paraId:33,tocIndex:6},{value:"string | number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineDash",paraId:33,tocIndex:6},{value:"Edge label background dashed line configuration",paraId:33,tocIndex:6},{value:"number | string |(number | string )[]",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineDashOffset",paraId:33,tocIndex:6},{value:"Edge label background dashed line offset",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineWidth",paraId:33,tocIndex:6},{value:"Edge label background stroke width",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundRadius",paraId:33,tocIndex:6},{value:"Edge label background corner radius ",paraId:33,tocIndex:6},{value:" - number: Set four corner radii uniformly ",paraId:33,tocIndex:6},{value:" - number[]: Set four corner radii separately, automatically supplementing missing parts",paraId:33,tocIndex:6},{value:"number | number[]",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelBackgroundShadowBlur",paraId:33,tocIndex:6},{value:"Edge label background shadow blur degree",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowColor",paraId:33,tocIndex:6},{value:"Edge label background shadow color",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowOffsetX",paraId:33,tocIndex:6},{value:"Edge label background shadow X direction offset",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowOffsetY",paraId:33,tocIndex:6},{value:"Edge label background shadow Y direction offset",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundStroke",paraId:33,tocIndex:6},{value:"Edge label background stroke color",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundStrokeOpacity",paraId:33,tocIndex:6},{value:"Edge label background stroke opacity",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelBackgroundVisibility",paraId:33,tocIndex:6},{value:"Whether the edge label background is visible",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hidden",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundZIndex",paraId:33,tocIndex:6},{value:"Edge label background rendering level",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelClass",paraId:33,tocIndex:6},{value:"Edge label className",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelCursor",paraId:33,tocIndex:6},{value:"Edge label mouse hover style, ",paraId:33,tocIndex:6},{value:"configuration item",paraId:35,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"default",paraId:33,tocIndex:6},{value:"labelFill",paraId:33,tocIndex:6},{value:"Edge label text color",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFillOpacity",paraId:33,tocIndex:6},{value:"Edge label text color opacity",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelFillRule",paraId:33,tocIndex:6},{value:"Edge label text fill rule",paraId:33,tocIndex:6},{value:"nonzero",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"evenodd",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFilter",paraId:33,tocIndex:6},{value:"Edge label text filter",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontFamily",paraId:33,tocIndex:6},{value:"Edge label text font family",paraId:33,tocIndex:6},{value:"system-ui, sans-serif",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontSize",paraId:33,tocIndex:6},{value:"Edge label font size",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"12",paraId:33,tocIndex:6},{value:"labelFontStyle",paraId:33,tocIndex:6},{value:"Edge label text font style",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"italic",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"oblique",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontVariant",paraId:33,tocIndex:6},{value:"Edge label text font variant",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"small-caps",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontWeight",paraId:33,tocIndex:6},{value:"Edge label font weight",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:"labelLeading",paraId:33,tocIndex:6},{value:"Edge label text line spacing",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelLetterSpacing",paraId:33,tocIndex:6},{value:"Edge label text letter spacing",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelMaxLines",paraId:33,tocIndex:6},{value:"Edge label text maximum number of lines",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelMaxWidth",paraId:33,tocIndex:6},{value:"Edge label maximum width. When auto-wrapping is enabled, it will wrap if it exceeds this width ",paraId:33,tocIndex:6},{value:" - string: Define the maximum width as a percentage of the edge width. For example, ",paraId:33,tocIndex:6},{value:"50%",paraId:33,tocIndex:6},{value:" means the label width does not exceed half of the edge width ",paraId:33,tocIndex:6},{value:" - number: Define the maximum width in pixels. For example, 100 means the maximum width of the label is 100 pixels",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"80%",paraId:33,tocIndex:6},{value:"labelOffsetX",paraId:33,tocIndex:6},{value:"Label offset in the x-axis direction",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"4",paraId:33,tocIndex:6},{value:"labelOffsetY",paraId:33,tocIndex:6},{value:"Edge label offset in the y-axis direction",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelOpacity",paraId:33,tocIndex:6},{value:"Overall opacity of the edge label",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelPadding",paraId:33,tocIndex:6},{value:"Edge label padding",paraId:33,tocIndex:6},{value:"number | number[]",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelPlacement",paraId:33,tocIndex:6},{value:"Position of the edge label relative to the edge. The value range is ",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:", ",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:", ",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:", or a specific ratio (number 0-1)",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:" | number",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:"labelText",paraId:33,tocIndex:6},{value:"Edge label text content",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextAlign",paraId:33,tocIndex:6},{value:"Edge label text alignment",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"left",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"right",paraId:33,tocIndex:6},{value:"left",paraId:33,tocIndex:6},{value:"labelTextBaseLine",paraId:33,tocIndex:6},{value:"Edge label text baseline",paraId:33,tocIndex:6},{value:"top",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hanging",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"alphabetic",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"ideographic",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:"labelTextDecorationColor",paraId:33,tocIndex:6},{value:"Edge label text decoration line color",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextDecorationLine",paraId:33,tocIndex:6},{value:"Edge label text decoration line",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextDecorationStyle",paraId:33,tocIndex:6},{value:"Edge label text decoration line style",paraId:33,tocIndex:6},{value:"solid",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"double",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"dotted",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"dashed",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"wavy",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextOverflow",paraId:33,tocIndex:6},{value:"Edge label text overflow handling method",paraId:33,tocIndex:6},{value:"clip",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"ellipsis",paraId:33,tocIndex:6},{value:" | string",paraId:33,tocIndex:6},{value:"ellipsis",paraId:33,tocIndex:6},{value:"labelVisibility",paraId:33,tocIndex:6},{value:"Whether the edge label is visible",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hidden",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:"labelWordWrap",paraId:33,tocIndex:6},{value:"Whether the edge label enables auto-wrapping. When labelWordWrap is enabled, it will wrap if it exceeds labelMaxWidth",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"false",paraId:33,tocIndex:6},{value:"labelZIndex",paraId:33,tocIndex:6},{value:"Edge label rendering level",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"Example:",paraId:36,tocIndex:6},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n    },\n  },\n});\n",paraId:37,tocIndex:6},{value:"The effect is as follows:",paraId:38,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n    },\n  },\n});\n\ngraph.render();\n",paraId:39,tocIndex:6},{value:"Attribute",paraId:40,tocIndex:7},{value:"Description",paraId:40,tocIndex:7},{value:"Type",paraId:40,tocIndex:7},{value:"Default",paraId:40,tocIndex:7},{value:"halo",paraId:40,tocIndex:7},{value:"Whether the edge halo is displayed",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:"haloClass",paraId:40,tocIndex:7},{value:"Edge halo className",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloCursor",paraId:40,tocIndex:7},{value:"Edge halo mouse hover style, ",paraId:40,tocIndex:7},{value:"configuration item",paraId:41,tocIndex:7},{value:"strig",paraId:40,tocIndex:7},{value:"default",paraId:40,tocIndex:7},{value:"haloDraggable",paraId:40,tocIndex:7},{value:"Whether the edge halo is draggable",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloDroppable",paraId:40,tocIndex:7},{value:"Whether the edge halo can receive dragged elements",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:"haloFillRule",paraId:40,tocIndex:7},{value:"Edge halo fill rule",paraId:40,tocIndex:7},{value:"nonzero",paraId:40,tocIndex:7},{value:" | ",paraId:40,tocIndex:7},{value:"evenodd",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloFilter",paraId:40,tocIndex:7},{value:"Edge halo filter",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloLineDash",paraId:40,tocIndex:7},{value:"Edge halo stroke dashed line style",paraId:40,tocIndex:7},{value:"number | string | (number | string)[]",paraId:40,tocIndex:7},{value:"0",paraId:40,tocIndex:7},{value:"haloLineWidth",paraId:40,tocIndex:7},{value:"Edge halo stroke width",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"3",paraId:40,tocIndex:7},{value:"haloPointerEvents",paraId:40,tocIndex:7},{value:"Whether the edge halo effect responds to pointer events, ",paraId:40,tocIndex:7},{value:"configuration item",paraId:42,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"none",paraId:40,tocIndex:7},{value:"haloStroke",paraId:40,tocIndex:7},{value:"Edge halo stroke color",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"Consistent with the fill color of the main graphic",paraId:40,tocIndex:7},{value:"haloStrokeOpacity",paraId:40,tocIndex:7},{value:"Edge halo stroke color opacity",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"0.25",paraId:40,tocIndex:7},{value:"haloVisibility",paraId:40,tocIndex:7},{value:"Edge halo visibility",paraId:40,tocIndex:7},{value:"visible",paraId:40,tocIndex:7},{value:" | ",paraId:40,tocIndex:7},{value:"hidden",paraId:40,tocIndex:7},{value:"visible",paraId:40,tocIndex:7},{value:"haloZIndex",paraId:40,tocIndex:7},{value:"Edge halo rendering level",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"-1",paraId:40,tocIndex:7},{value:"Example:",paraId:43,tocIndex:7},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n    },\n  },\n});\n",paraId:44,tocIndex:7},{value:"The effect is as follows:",paraId:45,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n    },\n  },\n});\n\ngraph.render();\n",paraId:46,tocIndex:7},{value:"Attribute",paraId:47,tocIndex:8},{value:"Description",paraId:47,tocIndex:8},{value:"Type",paraId:47,tocIndex:8},{value:"Default",paraId:47,tocIndex:8},{value:"badge",paraId:47,tocIndex:8},{value:"Whether the edge badge is displayed",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"true",paraId:47,tocIndex:8},{value:"badgeBackground",paraId:47,tocIndex:8},{value:"Whether the edge badge displays a background",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"true",paraId:47,tocIndex:8},{value:"badgeBackgroundClass",paraId:47,tocIndex:8},{value:"Edge badge background className",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundCursor",paraId:47,tocIndex:8},{value:"Edge badge background mouse hover style, ",paraId:47,tocIndex:8},{value:"configuration item",paraId:48,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"default",paraId:47,tocIndex:8},{value:"badgeBackgroundFill",paraId:47,tocIndex:8},{value:"Edge badge background fill color. If not specified, badgePalette is preferred to be assigned in order",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundFillOpacity",paraId:47,tocIndex:8},{value:"Edge badge background fill opacity",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundFilter",paraId:47,tocIndex:8},{value:"Edge badge background filter",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundHeight",paraId:47,tocIndex:8},{value:"Edge badge background height",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineDash",paraId:47,tocIndex:8},{value:"Edge badge background dashed line configuration",paraId:47,tocIndex:8},{value:"number | string |(number | string )[]",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineDashOffset",paraId:47,tocIndex:8},{value:"Edge badge background dashed line offset",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineWidth",paraId:47,tocIndex:8},{value:"Edge badge background stroke width",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundOpacity",paraId:47,tocIndex:8},{value:"Edge badge background opacity",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundRadius",paraId:47,tocIndex:8},{value:"Edge badge background corner radius ",paraId:47,tocIndex:8},{value:" - number: Set four corner radii uniformly ",paraId:47,tocIndex:8},{value:" - number[]: Set four corner radii separately, supplementing missing parts ",paraId:47,tocIndex:8},{value:" - string: Similar to the ",paraId:47,tocIndex:8},{value:"CSS padding",paraId:47,tocIndex:8},{value:" property, using spaces to separate",paraId:47,tocIndex:8},{value:"number | number[] | string",paraId:47,tocIndex:8},{value:"50%",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowBlur",paraId:47,tocIndex:8},{value:"Edge badge background shadow blur degree",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowColor",paraId:47,tocIndex:8},{value:"Edge badge background shadow color",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowOffsetX",paraId:47,tocIndex:8},{value:"Edge badge background shadow X direction offset",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowOffsetY",paraId:47,tocIndex:8},{value:"Edge badge background shadow Y direction offset",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundStroke",paraId:47,tocIndex:8},{value:"Edge badge background stroke color",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundStrokeOpacity",paraId:47,tocIndex:8},{value:"Edge badge background stroke opacity",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundVisibility",paraId:47,tocIndex:8},{value:"Whether the edge badge background is visible",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hidden",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:"badgeBackgroundZIndex",paraId:47,tocIndex:8},{value:"Edge badge background rendering level",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeFill",paraId:47,tocIndex:8},{value:"Edge badge text color",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeFontSize",paraId:47,tocIndex:8},{value:"Edge badge font size",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"10",paraId:47,tocIndex:8},{value:"badgeFontVariant",paraId:47,tocIndex:8},{value:"Edge badge font variant",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"small-caps",paraId:47,tocIndex:8},{value:" | string",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:"badgeFontWeight",paraId:47,tocIndex:8},{value:"Edge badge font weight",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:"badgeLineHeight",paraId:47,tocIndex:8},{value:"Edge badge line height",paraId:47,tocIndex:8},{value:"string | number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeLineWidth",paraId:47,tocIndex:8},{value:"Edge badge line width",paraId:47,tocIndex:8},{value:"string | number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeMaxLines",paraId:47,tocIndex:8},{value:"Edge badge text maximum number of lines",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeOffsetX",paraId:47,tocIndex:8},{value:"Edge badge offset in the x-axis direction",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"0",paraId:47,tocIndex:8},{value:"badgeOffsetY",paraId:47,tocIndex:8},{value:"Edge badge offset in the y-axis direction",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"0",paraId:47,tocIndex:8},{value:"badgePadding",paraId:47,tocIndex:8},{value:"Edge badge padding",paraId:47,tocIndex:8},{value:"number | number[]",paraId:47,tocIndex:8},{value:"[2, 4, 2, 4]",paraId:47,tocIndex:8},{value:"badgePlacement",paraId:47,tocIndex:8},{value:"Position of the edge badge relative to the main graphic of the edge",paraId:47,tocIndex:8},{value:"prefix",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"suffix",paraId:47,tocIndex:8},{value:"suffix",paraId:47,tocIndex:8},{value:"badgeText",paraId:47,tocIndex:8},{value:"Edge badge text content",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextAlign",paraId:47,tocIndex:8},{value:"Edge badge text horizontal alignment",paraId:47,tocIndex:8},{value:"start",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"center",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"middle",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"end",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"left",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"right",paraId:47,tocIndex:8},{value:"left",paraId:47,tocIndex:8},{value:"badgeTextBaseline",paraId:47,tocIndex:8},{value:"Edge badge text baseline",paraId:47,tocIndex:8},{value:"top",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hanging",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"middle",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"alphabetic",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"ideographic",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"bottom",paraId:47,tocIndex:8},{value:"alphabetic",paraId:47,tocIndex:8},{value:"badgeTextDecorationColor",paraId:47,tocIndex:8},{value:"Edge badge text decoration line color",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextDecorationLine",paraId:47,tocIndex:8},{value:"Edge badge text decoration line",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextDecorationStyle",paraId:47,tocIndex:8},{value:"Edge badge text decoration line style",paraId:47,tocIndex:8},{value:"solid",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"double",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"dotted",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"dashed",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"wavy",paraId:47,tocIndex:8},{value:"solid",paraId:47,tocIndex:8},{value:"badgeTextOverflow",paraId:47,tocIndex:8},{value:"Edge badge text overflow handling method",paraId:47,tocIndex:8},{value:"clip",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"ellipsis",paraId:47,tocIndex:8},{value:" | string",paraId:47,tocIndex:8},{value:"clip",paraId:47,tocIndex:8},{value:"badgeVisibility",paraId:47,tocIndex:8},{value:"Whether the edge badge is visible",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hidden",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeWordWrap",paraId:47,tocIndex:8},{value:"Whether the edge badge text automatically wraps, it will wrap if it exceeds badgeWordWrapWidth",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeWordWrapWidth",paraId:47,tocIndex:8},{value:"Edge badge text wrap width",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeZIndex",paraId:47,tocIndex:8},{value:"Edge badge rendering level",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"Example:",paraId:49,tocIndex:8},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: -20, // Edge badge offset in the x-axis direction\n      badgeBackground: true, // Enable edge badge background\n    },\n  },\n});\n",paraId:50,tocIndex:8},{value:"The effect is as follows:",paraId:51,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: -20, // Edge badge offset in the x-axis direction\n      badgeBackground: true, // Enable edge badge background\n    },\n  },\n});\n\ngraph.render();\n",paraId:52,tocIndex:8},{value:"Attribute",paraId:53,tocIndex:9},{value:"Description",paraId:53,tocIndex:9},{value:"Type",paraId:53,tocIndex:9},{value:"Default",paraId:53,tocIndex:9},{value:"startArrow",paraId:53,tocIndex:9},{value:"Whether the edge start arrow is displayed",paraId:53,tocIndex:9},{value:"boolean",paraId:53,tocIndex:9},{value:"false",paraId:53,tocIndex:9},{value:"startArrowClass",paraId:53,tocIndex:9},{value:"Edge start arrow className",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowCursor",paraId:53,tocIndex:9},{value:"Edge start arrow mouse hover style, ",paraId:53,tocIndex:9},{value:"configuration item",paraId:54,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"default",paraId:53,tocIndex:9},{value:"startArrowFill",paraId:53,tocIndex:9},{value:"Edge start arrow fill color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"Consistent with the edge color by default",paraId:53,tocIndex:9},{value:"startArrowFillOpacity",paraId:53,tocIndex:9},{value:"Overall opacity of the edge start arrow",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowFillRule",paraId:53,tocIndex:9},{value:"Edge start arrow fill rule",paraId:53,tocIndex:9},{value:"nonzero",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"evenodd",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowFilter",paraId:53,tocIndex:9},{value:"Edge start arrow filter",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowIncreasedLineWidthForHitTesting",paraId:53,tocIndex:9},{value:"When the edge start arrow size is small, the interaction area also becomes smaller, we can enlarge this area to make the arrow easier to pick up",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineDash",paraId:53,tocIndex:9},{value:"Edge start arrow stroke dashed line configuration",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineDashOffset",paraId:53,tocIndex:9},{value:"Edge start arrow stroke dashed line offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineJoin",paraId:53,tocIndex:9},{value:"Edge start arrow stroke join style",paraId:53,tocIndex:9},{value:"round",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"bevel",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"miter",paraId:53,tocIndex:9},{value:"round",paraId:53,tocIndex:9},{value:"startArrowOffset",paraId:53,tocIndex:9},{value:"Edge start arrow offset",paraId:53,tocIndex:9},{value:"number ｜0 ｜",paraId:53,tocIndex:9},{value:"startArrowOpacity",paraId:53,tocIndex:9},{value:"Edge start arrow opacity",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowShadowBlur",paraId:53,tocIndex:9},{value:"Edge start arrow shadow blur degree",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowShadowColor",paraId:53,tocIndex:9},{value:"Edge start arrow shadow color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowShadowOffsetX",paraId:53,tocIndex:9},{value:"Edge start arrow shadow X-axis offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowShadowOffsetY",paraId:53,tocIndex:9},{value:"Edge start arrow shadow Y-axis offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowSize",paraId:53,tocIndex:9},{value:"Edge start arrow size",paraId:53,tocIndex:9},{value:"number | [number, number]",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowSrc",paraId:53,tocIndex:9},{value:"Edge start arrow image address (passing in the image address can replace the arrow with an image)",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowStroke",paraId:53,tocIndex:9},{value:"Edge start arrow stroke color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"Consistent with the edge color by default",paraId:53,tocIndex:9},{value:"startArrowStrokeOpacity",paraId:53,tocIndex:9},{value:"Edge start arrow stroke opacity",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowTransform",paraId:53,tocIndex:9},{value:"Edge start arrow rotation, scaling, skewing, or translation configuration",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowTransformOrigin",paraId:53,tocIndex:9},{value:"Edge start arrow rotation and scaling center, also known as the transformation center",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"center",paraId:53,tocIndex:9},{value:"startArrowType",paraId:53,tocIndex:9},{value:"Edge start arrow type",paraId:53,tocIndex:9},{value:"triangle",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"circle",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"diamond",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"vee",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"rect",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"triangleRect",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"simple",paraId:53,tocIndex:9},{value:" | ((width: number, height: number) => PathArray)",paraId:53,tocIndex:9},{value:"vee",paraId:53,tocIndex:9},{value:"startArrowZIndex",paraId:53,tocIndex:9},{value:"Edge start arrow rendering level",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"Example:",paraId:55,tocIndex:9},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: -20, // Edge badge offset in the x-axis direction\n      badgeBackground: true, // Enable edge badge background\n      startArrow: true, // Enable edge start arrow\n      startArrowFill: 'yellow', // Edge start arrow fill color\n    },\n  },\n});\n",paraId:56,tocIndex:9},{value:"The effect is as follows:",paraId:57,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: -20, // Edge badge offset in the x-axis direction\n      badgeBackground: true, // Enable edge badge background\n      startArrow: true, // Enable edge start arrow\n      startArrowFill: 'yellow', // Edge start arrow fill color\n    },\n  },\n});\n\ngraph.render();\n",paraId:58,tocIndex:9},{value:"Attribute",paraId:59,tocIndex:10},{value:"Description",paraId:59,tocIndex:10},{value:"Type",paraId:59,tocIndex:10},{value:"Default",paraId:59,tocIndex:10},{value:"endArrow",paraId:59,tocIndex:10},{value:"Whether the edge end arrow is displayed",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"false",paraId:59,tocIndex:10},{value:"endArrowClass",paraId:59,tocIndex:10},{value:"Edge end arrow className",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowCursor",paraId:59,tocIndex:10},{value:"Edge end arrow mouse hover style, ",paraId:59,tocIndex:10},{value:"configuration item",paraId:60,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"default",paraId:59,tocIndex:10},{value:"endArrowFill",paraId:59,tocIndex:10},{value:"Edge end arrow fill color",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"Consistent with the edge color by default",paraId:59,tocIndex:10},{value:"endArrowFillOpacity",paraId:59,tocIndex:10},{value:"Overall opacity of the edge end arrow",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowFillRule",paraId:59,tocIndex:10},{value:"Edge end arrow fill rule",paraId:59,tocIndex:10},{value:"nonzero",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"evenodd",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowFilter",paraId:59,tocIndex:10},{value:"Edge end arrow filter",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowIncreasedLineWidthForHitTesting",paraId:59,tocIndex:10},{value:"When the edge end arrow size is small, the interaction area also becomes smaller, we can enlarge this area to make the arrow easier to pick up",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineDash",paraId:59,tocIndex:10},{value:"Edge end arrow stroke dashed line configuration",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineDashOffset",paraId:59,tocIndex:10},{value:"Edge end arrow stroke dashed line offset",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineJoin",paraId:59,tocIndex:10},{value:"Edge end arrow stroke join style",paraId:59,tocIndex:10},{value:"round",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"bevel",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"miter",paraId:59,tocIndex:10},{value:"round",paraId:59,tocIndex:10},{value:"endArrowOffset",paraId:59,tocIndex:10},{value:"Edge end arrow offset",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowOpacity",paraId:59,tocIndex:10},{value:"Edge end arrow opacity",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowShadowBlur",paraId:59,tocIndex:10},{value:"Edge end arrow shadow blur degree",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowShadowColor",paraId:59,tocIndex:10},{value:"Edge end arrow shadow color",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowShadowOffsetX",paraId:59,tocIndex:10},{value:"Edge end arrow shadow X-axis offset",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowShadowOffsetY",paraId:59,tocIndex:10},{value:"Edge end arrow shadow Y-axis offset",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowSize",paraId:59,tocIndex:10},{value:"Edge end arrow size",paraId:59,tocIndex:10},{value:"number | [number, number]",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowSrc",paraId:59,tocIndex:10},{value:"Edge end arrow image address (passing in the image address can replace the arrow with an image)",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowStroke",paraId:59,tocIndex:10},{value:"Edge end arrow stroke color",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"Consistent with the edge color by default",paraId:59,tocIndex:10},{value:"endArrowStrokeOpacity",paraId:59,tocIndex:10},{value:"Edge end arrow stroke opacity",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowTransform",paraId:59,tocIndex:10},{value:"Edge end arrow rotation, scaling, skewing, or translation configuration",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowTransformOrigin",paraId:59,tocIndex:10},{value:"Edge end arrow rotation and scaling center, also known as the transformation center",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"center",paraId:59,tocIndex:10},{value:"endArrowType",paraId:59,tocIndex:10},{value:"Edge end arrow type",paraId:59,tocIndex:10},{value:"triangle",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"circle",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"diamond",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"vee",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"rect",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"triangleRect",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"simple",paraId:59,tocIndex:10},{value:" | ((width: number, height: number) => PathArray)",paraId:59,tocIndex:10},{value:"vee",paraId:59,tocIndex:10},{value:"endArrowZIndex",paraId:59,tocIndex:10},{value:"Edge end arrow rendering level",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"Example:",paraId:61,tocIndex:10},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: 20, // Edge badge offset in the x-axis direction\n      badgePlacement: 'prefix', // Position of the edge badge relative to the edge\n      badgeBackground: true, // Enable edge badge background\n      endArrow: true, // Enable edge end arrow\n      endArrowFill: 'yellow', // Edge end arrow fill color\n    },\n  },\n});\n",paraId:62,tocIndex:10},{value:"The effect is as follows:",paraId:63,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // Edge color\n      lineWidth: 2, // Edge width\n      label: true, // Enable edge label display\n      labelText: 'labelText', // Edge label text\n      labelPlacement: 'center', // Position of the edge label relative to the edge\n      labelFill: '#FF0000', // Edge label text color\n      labelOffsetY: 20, // Edge label offset in the y-axis direction\n      halo: true, // Enable edge halo\n      haloStroke: '#000', // Edge halo color\n      haloStrokeOpacity: 0.2, // Edge halo opacity\n      badgeText: 'badge', // Edge badge text\n      badgeFill: 'green', // Edge badge text color\n      badgeOffsetX: 20, // Edge badge offset in the x-axis direction\n      badgePlacement: 'prefix', // Position of the edge badge relative to the edge\n      badgeBackground: true, // Enable edge badge background\n      endArrow: true, // Enable edge end arrow\n      endArrowFill: 'yellow', // Edge end arrow fill color\n    },\n  },\n});\n\ngraph.render();\n",paraId:64,tocIndex:10},{value:"Attribute",paraId:65,tocIndex:11},{value:"Description",paraId:65,tocIndex:11},{value:"Type",paraId:65,tocIndex:11},{value:"Default",paraId:65,tocIndex:11},{value:"loop",paraId:65,tocIndex:11},{value:"Whether to enable loop edges",paraId:65,tocIndex:11},{value:"boolean",paraId:65,tocIndex:11},{value:"true",paraId:65,tocIndex:11},{value:"loopClockwise",paraId:65,tocIndex:11},{value:"Specify whether to draw the loop clockwise",paraId:65,tocIndex:11},{value:"boolean",paraId:65,tocIndex:11},{value:"true",paraId:65,tocIndex:11},{value:"loopDist",paraId:65,tocIndex:11},{value:"Distance from the node keyShape edge to the top of the loop, used to specify the curvature of the loop",paraId:65,tocIndex:11},{value:"number",paraId:65,tocIndex:11},{value:"The maximum value of width or height by default",paraId:65,tocIndex:11},{value:"loopPlacement",paraId:65,tocIndex:11},{value:"Position of the edge",paraId:65,tocIndex:11},{value:"'left' | 'right' | 'top' | 'bottom' | 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'",paraId:65,tocIndex:11},{value:"'top'",paraId:65,tocIndex:11},{value:"Example:",paraId:66,tocIndex:11},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node1', id: 'left' },\n      { source: 'node2', target: 'node2', id: 'right' },\n    ],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      loopPlacement: (d) => d.id, // Set the position of the loop based on the edge configuration\n      endArrow: true, // Enable edge end arrow\n    },\n  },\n});\n",paraId:67,tocIndex:11},{value:"The effect is as follows:",paraId:68,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node1', id: 'left' },\n      { source: 'node2', target: 'node2', id: 'right' },\n    ],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      loopPlacement: (d) => d.id, // Set the position of the loop based on the edge configuration\n      endArrow: true, // Enable edge end arrow\n    },\n  },\n});\n\ngraph.render();\n",paraId:69,tocIndex:11},{value:"In some interactive behaviors, such as clicking to select an edge or hovering to activate an edge, it is merely marking certain states on the element. To reflect these states in the visual space seen by the end user, we need to set different graphic element styles for different states to respond to the changes in the element's state.",paraId:70,tocIndex:12},{value:"G6 provides several built-in states, including selected, highlight, active, inactive, and disabled. Additionally, it supports custom states to meet more specific needs. For each state, developers can define a set of style rules that will override the default styles of the element.",paraId:71,tocIndex:12},{value:"The data structure is as follows:",paraId:72,tocIndex:12},{value:"type EdgeState = {\n  [state: string]: EdgeStyle;\n};\n",paraId:73,tocIndex:12},{value:"For example, when an edge is in the ",paraId:74,tocIndex:12},{value:"focus",paraId:74,tocIndex:12},{value:" state, you can add a halo with a width of 6 and a color of yellow.",paraId:74,tocIndex:12},{value:"const graph = new Graph({\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }],\n    edges: [{ source: 'node1', target: 'node2', states: ['focus'] }],\n  },\n  edge: {\n    state: {\n      focus: {\n        halo: true,\n        haloLineWidth: 6,\n        haloStroke: 'yellow',\n      },\n    },\n  },\n  layout: {\n    type: 'grid',\n    cols: 2,\n  },\n});\n",paraId:75,tocIndex:12},{value:"The effect is as shown below:",paraId:76,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 100,\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }],\n    edges: [{ source: 'node1', target: 'node2', states: ['focus'] }],\n  },\n  edge: {\n    state: {\n      focus: {\n        halo: true,\n        haloLineWidth: 6,\n        haloStroke: 'yellow',\n      },\n    },\n  },\n  layout: {\n    type: 'grid',\n    cols: 2,\n  },\n});\n\ngraph.render();\n",paraId:77,tocIndex:12},{value:"Define the animation effects of edges, supporting the following two configuration methods:",paraId:78,tocIndex:13},{value:"Turn off all edge animations",paraId:79,tocIndex:13},{value:'{\n  "edge": {\n    "animation": false\n  }\n}\n',paraId:80,tocIndex:13},{value:"Configure stage animations",paraId:81,tocIndex:13},{value:"Stage animations refer to the animation effects of edges when entering the canvas, updating, and leaving the canvas. The currently supported stages include:",paraId:82,tocIndex:13},{value:"enter",paraId:83,tocIndex:13},{value:": Animation when the edge enters the canvas",paraId:83,tocIndex:13},{value:"update",paraId:83,tocIndex:13},{value:": Animation when the edge is updated",paraId:83,tocIndex:13},{value:"exit",paraId:83,tocIndex:13},{value:": Animation when the edge leaves the canvas",paraId:83,tocIndex:13},{value:"show",paraId:83,tocIndex:13},{value:": Animation when the edge is displayed from a hidden state",paraId:83,tocIndex:13},{value:"hide",paraId:83,tocIndex:13},{value:": Animation when the edge is hidden",paraId:83,tocIndex:13},{value:"collapse",paraId:83,tocIndex:13},{value:": Animation when the edge is collapsed",paraId:83,tocIndex:13},{value:"expand",paraId:83,tocIndex:13},{value:": Animation when the edge is expanded",paraId:83,tocIndex:13},{value:"You can refer to ",paraId:84,tocIndex:13},{value:"Animation Paradigm",paraId:85,tocIndex:13},{value:" to use animation syntax to configure edges, such as:",paraId:84,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["stroke"], // Only animate the stroke attribute during update\n          "duration": 1000, // Animation duration\n          "easing": "linear" // Easing function\n        }\n      ],\n  }\n}\n',paraId:86,tocIndex:13},{value:"You can also use built-in animation effects:",paraId:87,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "enter": "fade", // Use fade animation\n      "exit": "fade" // Use fade animation\n    }\n  }\n}\n',paraId:88,tocIndex:13},{value:"You can pass in false to turn off animations for specific stages:",paraId:89,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "enter": false // Turn off edge entrance animation\n    }\n  }\n}\n',paraId:90,tocIndex:13},{value:"Define the palette of edges, which is a predefined color pool, and assign colors to the ",paraId:91,tocIndex:14},{value:"stroke",paraId:91,tocIndex:14},{value:" attribute according to rules.",paraId:91,tocIndex:14},{value:"For the definition of palettes, please refer to ",paraId:92,tocIndex:14},{value:"Palette",paraId:93,tocIndex:14},{value:".",paraId:92,tocIndex:14},{value:"Attribute",paraId:94,tocIndex:14},{value:"Description",paraId:94,tocIndex:14},{value:"Type",paraId:94,tocIndex:14},{value:"Default",paraId:94,tocIndex:14},{value:"type",paraId:94,tocIndex:14},{value:"Specify the current palette type. ",paraId:94,tocIndex:14},{value:" - ",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:": Discrete palette ",paraId:94,tocIndex:14},{value:" - ",paraId:94,tocIndex:14},{value:"value",paraId:94,tocIndex:14},{value:": Continuous palette",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:" | ",paraId:94,tocIndex:14},{value:"value",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:"field",paraId:94,tocIndex:14},{value:"Specify the grouping field in the element data. If not specified, the id is used as the grouping field by default",paraId:94,tocIndex:14},{value:"string | ((datum) => string)",paraId:94,tocIndex:14},{value:"id",paraId:94,tocIndex:14},{value:"color",paraId:94,tocIndex:14},{value:"Palette color. If the palette is registered, you can directly specify its registration name, and it also accepts a color array",paraId:94,tocIndex:14},{value:"string | string[]",paraId:94,tocIndex:14},{value:"-",paraId:94,tocIndex:14},{value:"invert",paraId:94,tocIndex:14},{value:"Whether to invert the palette",paraId:94,tocIndex:14},{value:"boolean",paraId:94,tocIndex:14},{value:"false",paraId:94,tocIndex:14},{value:"For example, assign node colors according to the ",paraId:95,tocIndex:14},{value:"direction",paraId:95,tocIndex:14},{value:" field of a set of data, so that nodes of the same category have the same color:",paraId:95,tocIndex:14},{value:"const graph = new Graph({\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: {\n      type: 'group',\n      field: 'direction',\n      color: ['#F08F56', '#00C9C9'],\n    },\n  },\n});\n",paraId:96,tocIndex:14},{value:"The effect is as shown below:",paraId:97,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: {\n      type: 'group',\n      field: 'direction',\n      color: ['#F08F56', '#00C9C9'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:98,tocIndex:14},{value:"You can also use the default configuration:",paraId:99,tocIndex:14},{value:'{\n  "edge": {\n    "palette": "tableau" // tableau is the palette name, colors are assigned based on ID by default\n  }\n}\n',paraId:100,tocIndex:14},{value:"The effect is as shown below:",paraId:101,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:102,tocIndex:14}]},13705:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(71745);const t=[{value:"A cubic Bezier curve is a versatile smooth curve with control points that can be freely distributed, suitable for connecting nodes in any direction.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for graphs with any layout, such as network graphs and relationship graphs.",paraId:2,tocIndex:0},{value:"Use when smooth node connections are needed without specific directional requirements.",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'cubic' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'cubic',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic.style');\n    optionFolder.add(options, 'curveOffset', 0, 100, 1);\n    optionFolder.add(options, 'curvePosition', 0, 1, 0.1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"cubic",paraId:5,tocIndex:1},{value:" 以使用三次贝塞尔曲线。",paraId:5,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"Attribute",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"Array of control points used to define the shape of the curve. If not specified, control points will be calculated using ",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:" and ",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"[",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:", ",paraId:8,tocIndex:2},{value:"Point",paraId:10,tocIndex:2},{value:"]",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:"Relative position of the control point on the line connecting the two endpoints, ranging from ",paraId:8,tocIndex:2},{value:"0-1",paraId:8,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"number | number[]",paraId:8,tocIndex:2},{value:"0.5",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:"Distance of the control point from the line connecting the two endpoints, understood as the degree of curve bending.",paraId:8,tocIndex:2},{value:"number | number[]",paraId:8,tocIndex:2},{value:"20",paraId:8,tocIndex:2},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:11,tocIndex:3}]},9867:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52852);const t=[{value:"The horizontal cubic Bezier curve is a smooth curve with control points primarily distributed along the horizontal direction, suitable for connecting nodes horizontally.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for horizontally laid-out graphs, such as flowcharts and hierarchical diagrams.",paraId:2,tocIndex:0},{value:"Use when emphasizing horizontal connections is needed.",paraId:3,tocIndex:0},{value:"Note: When calculating control points, the distance on the x-axis is primarily considered, ignoring changes on the y-axis.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }, { id: 'node6' }],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node1', target: 'node4', text: 'cubic-horizontal' },\n        { source: 'node1', target: 'node5' },\n        { source: 'node1', target: 'node6' },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n        port: true,\n        ports: [{ placement: 'left' }, { placement: 'right' }],\n      },\n    },\n    edge: {\n      type: 'cubic-horizontal',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: {\n      type: 'antv-dagre',\n      rankdir: 'LR',\n      nodesep: 15,\n      ranksep: 100,\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic-horizontal' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic-horizontal.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData((prev) => prev.map((edge) => ({ ...edge, style: { [property]: value } })));\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"edge.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"cubic-horizontal",paraId:6,tocIndex:1},{value:" 以使用水平方向的三次贝塞尔曲线。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"curvePosition",paraId:9,tocIndex:2},{value:"Relative position of the control point on the line connecting the two endpoints, ranging from ",paraId:9,tocIndex:2},{value:"0-1",paraId:9,tocIndex:2},{value:".",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0.5,0.5]",paraId:9,tocIndex:2},{value:"curveOffset",paraId:9,tocIndex:2},{value:"Distance of the control point from the line connecting the two endpoints, understood as the degree of curve bending.",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0,0]",paraId:9,tocIndex:2}]},64024:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(20031);const t=[{value:"The vertical cubic Bezier curve is a smooth curve with control points primarily distributed along the vertical direction, suitable for connecting nodes vertically.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for vertically laid-out graphs, such as organizational charts and tree diagrams.",paraId:2,tocIndex:0},{value:"Use when emphasizing vertical connections is needed.",paraId:3,tocIndex:0},{value:"Note: When calculating control points, the distance on the y-axis is primarily considered, ignoring changes on the x-axis.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }, { id: 'node6' }],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node1', target: 'node4', text: 'cubic-vertical' },\n        { source: 'node1', target: 'node5' },\n        { source: 'node1', target: 'node6' },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n        port: true,\n        ports: [{ placement: 'top' }, { placement: 'bottom' }],\n      },\n    },\n    edge: {\n      type: 'cubic-vertical',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: {\n      type: 'antv-dagre',\n      rankdir: 'TB',\n      nodesep: 25,\n      ranksep: 80,\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic-vertical' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic-vertical.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData((prev) => prev.map((edge) => ({ ...edge, style: { [property]: value } })));\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"edge.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"cubic-vertical",paraId:6,tocIndex:1},{value:" 以使用垂直方向的三次贝塞尔曲线。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"curvePosition",paraId:9,tocIndex:2},{value:"Relative position of the control point on the line connecting the two endpoints, ranging from ",paraId:9,tocIndex:2},{value:"0-1",paraId:9,tocIndex:2},{value:".",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0.5,0.5]",paraId:9,tocIndex:2},{value:"curveOffset",paraId:9,tocIndex:2},{value:"Distance of the control point from the line connecting the two endpoints, understood as the degree of curve bending.",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0,0]",paraId:9,tocIndex:2}]},17408:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(17227);const t=[{value:"A line is the simplest type of edge, directly connecting two nodes without any curvature.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for simple graphs, such as topology diagrams and flowcharts.",paraId:2,tocIndex:0},{value:"Use when quick drawing is needed without complex visual effects.",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'line' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'line' }, 'type').disable();\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:" 以使用直线。",paraId:5,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2}]},13135:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(99937);const t=[{value:"A polyline is an edge composed of multiple straight line segments, suitable for connecting nodes by bypassing obstacles in complex layouts.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for graphs with complex layouts, such as circuit diagrams and pipeline diagrams.",paraId:2,tocIndex:0},{value:"Use when you need to bypass other nodes or obstacles.",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: { x: 150, y: 150 },\n        },\n        {\n          id: 'node2',\n          style: {\n            x: 400,\n            y: 150,\n            labelText: 'Drag Me!',\n            labelPadding: [1, 5],\n            labelBackground: true,\n            labelBackgroundRadius: 10,\n            labelBackgroundFill: '#99add1',\n          },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge1',\n          source: 'node1',\n          target: 'node2',\n          text: 'polyline',\n        },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'polyline',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n        router: { type: 'orth' },\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'polyline' }, 'type').disable();\n\n    let index = 3;\n    const options = {\n      radius: 0,\n      router: {\n        type: 'orth',\n      },\n      random: () => {\n        const x = Math.floor(Math.random() * 600);\n        const y = Math.floor(Math.random() * 300);\n        graph.addNodeData([\n          {\n            id: `node-${index}`,\n            style: {\n              size: 5,\n              fill: '#7e3feb',\n              x,\n              y,\n            },\n          },\n        ]);\n        index++;\n        graph.updateEdgeData((prev) => {\n          const targetEdgeData = prev.find((edge) => edge.id === 'edge1');\n          const controlPoints = [...(targetEdgeData.style.controlPoints || [])];\n          controlPoints.push([x, y]);\n          return [{ ...targetEdgeData, style: { ...targetEdgeData.style, controlPoints } }];\n        });\n        graph.render();\n      },\n    };\n    const optionFolder = gui.addFolder('polyline.style');\n    optionFolder.add(options, 'radius', 0, 100, 1);\n    optionFolder.add(options, 'router');\n    optionFolder.add(options, 'random').name('Add random node as control points');\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property === 'random') return;\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"polyline",paraId:5,tocIndex:1},{value:" 以使用折线。",paraId:5,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"Attribute",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"Array of control points used to define the turning points of the polyline.",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:"[]",paraId:8,tocIndex:2},{value:"[]",paraId:8,tocIndex:2},{value:"radius",paraId:8,tocIndex:2},{value:"Corner radius of the turning points.",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"router",paraId:8,tocIndex:2},{value:"Whether to enable routing.",paraId:8,tocIndex:2},{value:"false | ",paraId:8,tocIndex:2},{value:"OrthRouter",paraId:10,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"ShortestPathRouter",paraId:11,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"Attribute",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Default",paraId:12,tocIndex:3},{value:"type",paraId:12,tocIndex:3},{value:"Orthogonal routing, adding extra control points on the path to keep each segment horizontal or vertical.",paraId:12,tocIndex:3},{value:"'orth'",paraId:12,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"padding",paraId:12,tocIndex:3},{value:"Minimum distance between the node connection point and the corner.",paraId:12,tocIndex:3},{value:"Padding",paraId:13,tocIndex:3},{value:"0",paraId:12,tocIndex:3},{value:"Attribute",paraId:14,tocIndex:4},{value:"Description",paraId:14,tocIndex:4},{value:"Type",paraId:14,tocIndex:4},{value:"Default",paraId:14,tocIndex:4},{value:"type",paraId:14,tocIndex:4},{value:"Shortest path routing, an intelligent version of orthogonal routing ",paraId:14,tocIndex:4},{value:"'orth'",paraId:14,tocIndex:4},{value:". This routing consists of horizontal or vertical orthogonal segments. It uses the A* algorithm to calculate the shortest path and supports automatic avoidance of other nodes (obstacles) on the path.",paraId:14,tocIndex:4},{value:"'shortest-path'",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"offset",paraId:14,tocIndex:4},{value:"Minimum distance between the node anchor point and the corner.",paraId:14,tocIndex:4},{value:"Padding",paraId:15,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"gridSize",paraId:14,tocIndex:4},{value:"Grid cell size.",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"maxAllowedDirectionChange",paraId:14,tocIndex:4},{value:"Maximum allowed rotation angle (radians).",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"startDirections",paraId:14,tocIndex:4},{value:"Possible starting directions of the node.",paraId:14,tocIndex:4},{value:"Direction",paraId:16,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"endDirections",paraId:14,tocIndex:4},{value:"Possible ending directions of the node.",paraId:14,tocIndex:4},{value:"Direction",paraId:17,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"directionMap",paraId:14,tocIndex:4},{value:"Specifies the movable directions.",paraId:14,tocIndex:4},{value:"{ [key in ",paraId:14,tocIndex:4},{value:"Direction",paraId:18,tocIndex:4},{value:"]: { stepX: number; stepY: number } }",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"penalties",paraId:14,tocIndex:4},{value:"Represents additional costs for certain paths during path searching. The key is the radian value, and the value is the cost.",paraId:14,tocIndex:4},{value:"{ [key: string]: number }",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"distFunc",paraId:14,tocIndex:4},{value:"Specifies the function to calculate the distance between two points.",paraId:14,tocIndex:4},{value:"(p1: ",paraId:14,tocIndex:4},{value:"Point",paraId:19,tocIndex:4},{value:", p2: ",paraId:14,tocIndex:4},{value:"Point",paraId:20,tocIndex:4},{value:") => number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"maximumLoops",paraId:14,tocIndex:4},{value:"Maximum number of iterations.",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"enableObstacleAvoidance",paraId:14,tocIndex:4},{value:"Whether to enable obstacle avoidance.",paraId:14,tocIndex:4},{value:"boolean",paraId:14,tocIndex:4},{value:"false",paraId:14,tocIndex:4},{value:"type Direction = 'left' | 'right' | 'top' | 'bottom';\n",paraId:21,tocIndex:5},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:22,tocIndex:6},{value:"type Padding = number | [number, number] | [number, number, number, number];\n",paraId:23,tocIndex:7}]},13468:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(29184);const t=[{value:"A quadratic Bezier curve is a smooth curve whose shape is determined by a start point, an end point, and a control point.",paraId:0,tocIndex:0},{value:"Use cases:",paraId:1,tocIndex:0},{value:"Suitable for moderately complex graphs, such as relationship graphs and network graphs.",paraId:2,tocIndex:0},{value:"Use when smooth node connections are needed with limited computational resources.",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'quadratic' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'quadratic',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'quadratic' }, 'type').disable();\n\n    const options = {\n      curveOffset: 30,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('quadratic.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"quadratic",paraId:5,tocIndex:1},{value:" 以使用曲线。",paraId:5,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"Attribute",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"Array of control points used to define the shape of the curve. If not specified, control points will be calculated using ",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:" and ",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:"Relative position of the control point on the line connecting the two endpoints, ranging from ",paraId:8,tocIndex:2},{value:"0-1",paraId:8,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0.5",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:"Distance of the control point from the line connecting the two endpoints, understood as the degree of curve bending.",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"30",paraId:8,tocIndex:2},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:10,tocIndex:3}]},21413:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(7403);const t=[{value:"G6 provides various ",paraId:0},{value:"built-in edge",paraId:1},{value:" types, such as straight edges, polyline edges, Bezier curve edges, etc. However, in actual projects, you may need to create custom edges with specific styles or interactive effects.",paraId:0},{value:"In G6, a complete edge usually consists of the following parts:",paraId:2,tocIndex:0},{value:"key",paraId:3,tocIndex:0},{value:": The main graphic of the edge, representing the main shape of the edge, such as a straight line, polyline, etc.",paraId:3,tocIndex:0},{value:"label",paraId:3,tocIndex:0},{value:": Text label, usually used to display the name or description of the edge.",paraId:3,tocIndex:0},{value:"arrow",paraId:3,tocIndex:0},{value:": Arrow, used to indicate the direction of the edge.",paraId:3,tocIndex:0},{value:"halo",paraId:3,tocIndex:0},{value:": A graphic that displays a halo effect around the main graphic.",paraId:3,tocIndex:0},{value:"Choose the Right Way",paraId:4,tocIndex:0},{value:"Creating custom edges is similar to customizing nodes, and there are mainly two ways:",paraId:5,tocIndex:1},{value:"Recommended",paraId:6,tocIndex:1},{value:"This is the most common way, and you can choose to inherit one of the following types:",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:" - The most basic edge class, providing core functions of edges",paraId:8,tocIndex:2},{value:"Line",paraId:8,tocIndex:2},{value:" - Straight line edge",paraId:8,tocIndex:2},{value:"Polyline",paraId:8,tocIndex:2},{value:" - Polyline edge",paraId:8,tocIndex:2},{value:"Quadratic",paraId:8,tocIndex:2},{value:" - Quadratic Bezier curve edge",paraId:8,tocIndex:2},{value:"Cubic",paraId:8,tocIndex:2},{value:" - Cubic Bezier curve edge",paraId:8,tocIndex:2},{value:"CubicVertical",paraId:8,tocIndex:2},{value:" - Vertical cubic Bezier curve edge",paraId:8,tocIndex:2},{value:"CubicHorizontal",paraId:8,tocIndex:2},{value:" - Horizontal cubic Bezier curve edge",paraId:8,tocIndex:2},{value:"Why choose this way?",paraId:9,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"Less code",paraId:10,tocIndex:2},{value:": Reuse existing node properties and methods, only focus on new features",paraId:10,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"Fast development",paraId:10,tocIndex:2},{value:": Suitable for most project needs, quickly achieve business goals",paraId:10,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"Easy maintenance",paraId:10,tocIndex:2},{value:": Clear code structure, clear inheritance relationship",paraId:10,tocIndex:2},{value:"Advanced Usage",paraId:11,tocIndex:2},{value:"If none of the existing edge types meet your needs, you can create edges from scratch based on the underlying graphics system of G.",paraId:12,tocIndex:3},{value:"Why choose this way?",paraId:13,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"Maximum freedom",paraId:14,tocIndex:3},{value:": Fully control every detail of the edge, achieve any complex effect",paraId:14,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"Special needs",paraId:14,tocIndex:3},{value:": Highly customized scenarios that existing edge types cannot meet",paraId:14,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"Performance optimization",paraId:14,tocIndex:3},{value:": Performance optimization for specific scenarios",paraId:14,tocIndex:3},{value:"Custom edges developed from scratch need to handle all details by themselves, including graphic drawing, event response, state changes, etc., which is more difficult to develop. You can directly refer to the ",paraId:15},{value:"source code",paraId:15},{value:" for implementation.",paraId:15},{value:"Let's start with the most basic ",paraId:16,tocIndex:4},{value:"BaseEdge",paraId:16,tocIndex:4},{value:" to implement a custom straight edge:",paraId:16,tocIndex:4},{value:"import { Graph, register, BaseEdge, ExtensionCategory } from '@antv/g6';\n\nclass MyLineEdge extends BaseEdge {\n  getKeyStyle(attributes) {\n    return { ...super.getKeyStyle(attributes), lineWidth: 2, stroke: '#A4D3EE' };\n  }\n\n  getKeyPath(attributes) {\n    const { sourceNode, targetNode } = this;\n    const [x1, y1] = sourceNode.getPosition();\n    const [x2, y2] = targetNode.getPosition();\n\n    return [\n      ['M', x1, y1],\n      ['L', x2, y2],\n    ];\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'my-line-edge', MyLineEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 50 } },\n      { id: 'node2', style: { x: 300, y: 120 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n  edge: {\n    type: 'my-line-edge',\n    style: {\n      zIndex: 3,\n    },\n  },\n});\n\ngraph.render();\n",paraId:17,tocIndex:4},{value:"import { BaseEdge } from '@antv/g6';\nimport type { BaseEdgeStyleProps } from '@antv/g6';\n\nclass MyLineEdge extends BaseEdge {\n  // Define the style of the edge, you can add or override the default style\n  protected getKeyStyle(attributes: Required<BaseEdgeStyleProps>) {\n    // Call the parent class method to get the basic style, then add custom style\n    return { ...super.getKeyStyle(attributes), lineWidth: 2, stroke: '#A4D3EE' };\n  }\n\n  // Implement abstract method: define the path of the edge\n  // This is an abstract method of BaseEdge, all subclasses must implement it\n  protected getKeyPath(attributes) {\n    // Get the source node and target node\n    const { sourceNode, targetNode } = this;\n\n    // Get the position coordinates of the nodes\n    const [x1, y1] = sourceNode.getPosition();\n    const [x2, y2] = targetNode.getPosition();\n\n    // Return an SVG path array, defining a straight line from the start point to the end point\n    return [\n      ['M', x1, y1],\n      ['L', x2, y2],\n    ];\n  }\n}\n",paraId:18,tocIndex:5},{value:"getKeyStyle",paraId:19},{value:": Define the basic style of the edge, such as line width, color, etc.",paraId:19},{value:"getKeyPath",paraId:19},{value:": An abstract method in ",paraId:19},{value:"BaseEdge",paraId:19},{value:", ",paraId:19},{value:"must be implemented",paraId:19},{value:", it defines the path shape of the edge",paraId:19},{value:"Use the ",paraId:20,tocIndex:6},{value:"register",paraId:20,tocIndex:6},{value:" method to register the edge type so that G6 can recognize your custom edge:",paraId:20,tocIndex:6},{value:"import { ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.EDGE, 'my-line-edge', MyLineEdge);\n",paraId:21,tocIndex:6},{value:"The ",paraId:22,tocIndex:6},{value:"register",paraId:22,tocIndex:6},{value:" method requires three parameters:",paraId:22,tocIndex:6},{value:"Extension category: ",paraId:23,tocIndex:6},{value:"ExtensionCategory.EDGE",paraId:23,tocIndex:6},{value:" indicates that this is an edge type",paraId:23,tocIndex:6},{value:"Type name: ",paraId:23,tocIndex:6},{value:"my-line-edge",paraId:23,tocIndex:6},{value:" is the name we give to this custom edge, which will be used in the configuration later",paraId:23,tocIndex:6},{value:"Class definition: ",paraId:23,tocIndex:6},{value:"MyLineEdge",paraId:23,tocIndex:6},{value:" is the edge class we just created",paraId:23,tocIndex:6},{value:"In the graph configuration, use ",paraId:24,tocIndex:7},{value:"edge.type",paraId:24,tocIndex:7},{value:" to use our custom edge:",paraId:24,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 100 } },\n      { id: 'node2', style: { x: 300, y: 150 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n  edge: {\n    type: 'my-line-edge',\n    style: {\n      zIndex: 3,\n    },\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:7},{value:"🎉 Congratulations! You have created your first custom edge.",paraId:26,tocIndex:7},{value:"The nodes of G6 are drawn by the graphic atomic units provided by the ",paraId:27,tocIndex:9},{value:"G Graphics System",paraId:27,tocIndex:9},{value:". The following are common graphic elements and their uses:",paraId:27,tocIndex:9},{value:"Graphic Element",paraId:28,tocIndex:9},{value:"Type",paraId:28,tocIndex:9},{value:"Description",paraId:28,tocIndex:9},{value:"Circle",paraId:28,tocIndex:9},{value:"circle",paraId:28,tocIndex:9},{value:"Suitable for representing states, avatars, circular buttons, etc. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Ellipse",paraId:28,tocIndex:9},{value:"ellipse",paraId:28,tocIndex:9},{value:"Similar to circle, but supports different horizontal and vertical axes. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Image",paraId:28,tocIndex:9},{value:"image",paraId:28,tocIndex:9},{value:"Used to display icons, user avatars, logos, etc. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Line",paraId:28,tocIndex:9},{value:"line",paraId:28,tocIndex:9},{value:"Used for decoration, auxiliary connection, etc. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Path",paraId:28,tocIndex:9},{value:"path",paraId:28,tocIndex:9},{value:"Supports complex graphics, such as arrows, arcs, curves, Bezier paths, etc. Paths contain a set of commands and parameters with different semantics, ",paraId:28,tocIndex:9},{value:"usage details",paraId:28,tocIndex:9},{value:"Polygon",paraId:28,tocIndex:9},{value:"polygon",paraId:28,tocIndex:9},{value:"Supports custom graphics, such as stars, arrows. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Polyline",paraId:28,tocIndex:9},{value:"polyline",paraId:28,tocIndex:9},{value:"Multi-point polyline, suitable for complex connection structures. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Rectangle",paraId:28,tocIndex:9},{value:"rect",paraId:28,tocIndex:9},{value:"The most commonly used graphic, suitable as a container, card, button, etc. Refer to the SVG ",paraId:28,tocIndex:9},{value:" element",paraId:28,tocIndex:9},{value:"Text",paraId:28,tocIndex:9},{value:"text",paraId:28,tocIndex:9},{value:"Displays names, descriptions, labels, etc. Provides simple single-line/multi-line text layout capabilities, single-line supports horizontal alignment, character spacing; multi-line supports explicit line breaks and automatic line breaks, vertical alignment",paraId:28,tocIndex:9},{value:"For more atomic graphics and detailed properties, please refer to ",paraId:29,tocIndex:9},{value:"Element - Graphics (Optional)",paraId:30,tocIndex:9},{value:"All these graphics can be dynamically created or updated through ",paraId:31,tocIndex:9},{value:"upsert()",paraId:31,tocIndex:9},{value:" and automatically manage graphic states and lifecycles.",paraId:31,tocIndex:9},{value:"Before customizing elements, you need to understand some important properties and methods in the G6 element base class:",paraId:32,tocIndex:10},{value:"Property",paraId:33,tocIndex:11},{value:"Type",paraId:33,tocIndex:11},{value:"Description",paraId:33,tocIndex:11},{value:"shapeMap",paraId:33,tocIndex:11},{value:"Record<string, DisplayObject>",paraId:33,tocIndex:11},{value:"Mapping table of all graphics under the current element",paraId:33,tocIndex:11},{value:"animateMap",paraId:33,tocIndex:11},{value:"Record<string, IAnimation>",paraId:33,tocIndex:11},{value:"Mapping table of all animations under the current element",paraId:33,tocIndex:11},{value:"upsert(name, Ctor, style, container, hooks)",paraId:34},{value:"When creating custom elements, you will frequently use the ",paraId:35,tocIndex:13},{value:"upsert",paraId:35,tocIndex:13},{value:' method. It is an abbreviation for "update or insert", responsible for adding or updating graphics in elements:',paraId:35,tocIndex:13},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:36,tocIndex:13},{value:"Parameter",paraId:37,tocIndex:13},{value:"Type",paraId:37,tocIndex:13},{value:"Description",paraId:37,tocIndex:13},{value:"key",paraId:37,tocIndex:13},{value:"string",paraId:37,tocIndex:13},{value:"The key of the graphic, i.e., the corresponding key in ",paraId:37,tocIndex:13},{value:"shapeMap",paraId:37,tocIndex:13},{value:". Built-in keys include ",paraId:37,tocIndex:13},{value:"'key'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'label'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'halo'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'icon'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'port'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'badge'",paraId:37,tocIndex:13},{value:" The key should not use special symbols, it will be converted to camel case to call ",paraId:37,tocIndex:13},{value:"getXxxStyle",paraId:37,tocIndex:13},{value:" and ",paraId:37,tocIndex:13},{value:"drawXxxShape",paraId:37,tocIndex:13},{value:" methods (see ",paraId:37,tocIndex:13},{value:"Element Convention",paraId:38,tocIndex:13},{value:")",paraId:37,tocIndex:13},{value:"Ctor",paraId:37,tocIndex:13},{value:"{ new (...args: any[]): DisplayObject }",paraId:37,tocIndex:13},{value:"Graphic class",paraId:37,tocIndex:13},{value:"style",paraId:37,tocIndex:13},{value:"Record<string, any>",paraId:37,tocIndex:13},{value:"Graphic style",paraId:37,tocIndex:13},{value:"container",paraId:37,tocIndex:13},{value:"DisplayObject",paraId:37,tocIndex:13},{value:"Container to mount the graphic",paraId:37,tocIndex:13},{value:"For example, insert a purple circle at a fixed position:",paraId:39,tocIndex:13},{value:"this.upsert(\n  'element-key', // Unique identifier of the element\n  'circle', // Graphic type, such as 'rect', 'circle', etc.\n  { x: 100, y: 100, fill: '#a975f3' }, // Style configuration object\n  container, // Parent container\n);\n",paraId:40,tocIndex:13},{value:"Why use ",paraId:41,tocIndex:13},{value:"upsert",paraId:41,tocIndex:13},{value:" instead of directly creating graphics through ",paraId:41,tocIndex:13},{value:"container.appendChild()",paraId:41,tocIndex:13},{value:"? Because:",paraId:41,tocIndex:13},{value:"Better performance",paraId:42,tocIndex:13},{value:": When the state changes or data updates, it will intelligently reuse existing graphics instead of deleting and recreating, greatly improving rendering performance",paraId:42,tocIndex:13},{value:"Simpler code",paraId:42,tocIndex:13},{value:": No need to manually determine whether the element exists",paraId:42,tocIndex:13},{value:"Easy management",paraId:42,tocIndex:13},{value:": All graphics created through ",paraId:42,tocIndex:13},{value:"upsert",paraId:42,tocIndex:13},{value:" will be recorded in the node's ",paraId:42,tocIndex:13},{value:"shapeMap",paraId:42,tocIndex:13},{value:", and you can easily get it through ",paraId:42,tocIndex:13},{value:"this.getShape(key)",paraId:42,tocIndex:13},{value:"render(attributes, container)",paraId:34},{value:"Each custom edge class must implement the ",paraId:43,tocIndex:14},{value:"render(attributes, container)",paraId:43,tocIndex:14},{value:' method, which defines how the edge is "drawn". You can use various atomic graphics here to compose the structure you want.',paraId:43,tocIndex:14},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:44,tocIndex:14},{value:"Parameter",paraId:45,tocIndex:14},{value:"Type",paraId:45,tocIndex:14},{value:"Description",paraId:45,tocIndex:14},{value:"style",paraId:45,tocIndex:14},{value:"Record<string, any>",paraId:45,tocIndex:14},{value:"Element style",paraId:45,tocIndex:14},{value:"container",paraId:45,tocIndex:14},{value:"Group",paraId:45,tocIndex:14},{value:"Container",paraId:45,tocIndex:14},{value:"getShape(name)",paraId:34},{value:"Sometimes, you need to modify the properties of a sub-graphic after creation, or make sub-graphics interact with each other. At this time, the ",paraId:46,tocIndex:15},{value:"getShape",paraId:46,tocIndex:15},{value:" method can help you get any graphics previously created through ",paraId:46,tocIndex:15},{value:"upsert",paraId:46,tocIndex:15},{value:":",paraId:46,tocIndex:15},{value:"⚠️ Note",paraId:47,tocIndex:15},{value:": The order of graphics is important. If graphic B depends on the position of graphic A, A must be created first",paraId:47,tocIndex:15},{value:"Use Convention Properties",paraId:48,tocIndex:16},{value:"Currently, the convention element properties include:",paraId:49,tocIndex:16},{value:"Get the size of the element through ",paraId:50,tocIndex:16},{value:"this.getSize()",paraId:50,tocIndex:16},{value:"Get the start and end points of the edge through ",paraId:51,tocIndex:16},{value:"const [sourcePoint, targetPoint] = this.getEndpoints(attributes, false)",paraId:51,tocIndex:16},{value:" (simple mode - does not consider node shape, directly returns the center point of the node or the center position of the nearest connection pile)",paraId:51,tocIndex:16},{value:"Get the start and end points of the edge through ",paraId:52,tocIndex:16},{value:"const [sourcePoint, targetPoint] = this.getEndpoints(attributes)",paraId:52,tocIndex:16},{value:" (optimized mode - default is true, considers node shape, returns the connection point on the node boundary)",paraId:52,tocIndex:16},{value:"Use the paired method of ",paraId:53,tocIndex:16},{value:"getXxxStyle",paraId:53,tocIndex:16},{value:" and ",paraId:53,tocIndex:16},{value:"drawXxxShape",paraId:53,tocIndex:16},{value:" for graphic drawing",paraId:53,tocIndex:16},{value:"getXxxStyle",paraId:54,tocIndex:16},{value:" is used to get the graphic style, and ",paraId:54,tocIndex:16},{value:"drawXxxShape",paraId:54,tocIndex:16},{value:" is used to draw the graphic. Graphics created in this way support automatic animation execution.",paraId:54,tocIndex:16},{value:"Among them, ",paraId:55,tocIndex:16},{value:"Xxx",paraId:55,tocIndex:16},{value:" is the camel case form of the key passed in when calling the ",paraId:55,tocIndex:16},{value:"upsert",paraId:56,tocIndex:16},{value:" method.",paraId:55,tocIndex:16},{value:"Access the Graph Context through ",paraId:57,tocIndex:16},{value:"this.context",paraId:57,tocIndex:16},{value:"The following lifecycle hook functions are provided, and you can override these methods in custom edges to execute specific logic at key moments:",paraId:58,tocIndex:17},{value:"Hook Function",paraId:59,tocIndex:17},{value:"Trigger Timing",paraId:59,tocIndex:17},{value:"Typical Use",paraId:59,tocIndex:17},{value:"onCreate",paraId:59,tocIndex:17},{value:"When the edge is created and the entrance animation is completed",paraId:59,tocIndex:17},{value:"Bind interactive events, initialize edge state, add external listeners",paraId:59,tocIndex:17},{value:"onUpdate",paraId:59,tocIndex:17},{value:"When the edge is updated and the update animation is completed",paraId:59,tocIndex:17},{value:"Update dependent data, adjust related elements, trigger linkage effects",paraId:59,tocIndex:17},{value:"onDestroy",paraId:59,tocIndex:17},{value:"When the edge is destroyed after the exit animation is completed",paraId:59,tocIndex:17},{value:"Clean up resources, remove external listeners, execute destruction notifications",paraId:59,tocIndex:17},{value:"The most powerful point in the design of G6 elements is that ",paraId:60,tocIndex:18},{value:'"state response"',paraId:60,tocIndex:18},{value:" can be separated from ",paraId:60,tocIndex:18},{value:'"drawing logic"',paraId:60,tocIndex:18},{value:".",paraId:60,tocIndex:18},{value:"You can define styles for each state in the edge configuration:",paraId:61,tocIndex:18},{value:"edge: {\n  type: 'custom-edge',\n  style: { stroke: '#eee' },\n  state: {\n    selected: {\n      stroke: '#f00',\n    },\n    hover: {\n      lineWidth: 3,\n      stroke: '#1890ff',\n    },\n  },\n}\n",paraId:62,tocIndex:18},{value:"Method to switch states:",paraId:63,tocIndex:18},{value:"graph.setElementState(edgeId, ['selected']);\n",paraId:64,tocIndex:18},{value:"This state will be passed into the ",paraId:65,tocIndex:18},{value:"render()",paraId:65,tocIndex:18},{value:" method's ",paraId:65,tocIndex:18},{value:"attributes",paraId:65,tocIndex:18},{value:", and the result merged by the internal system will be automatically applied to the graphics.",paraId:65,tocIndex:18},{value:"You can also customize the rendering logic based on the state:",paraId:66,tocIndex:18},{value:"protected getKeyStyle(attributes: Required<BaseEdgeStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // Adjust style based on state\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:67,tocIndex:18},{value:"import { Graph, register, BaseEdge, ExtensionCategory } from '@antv/g6';\n\nclass MyPolylineEdge extends BaseEdge {\n  getKeyPath(attributes) {\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n\n    return [\n      ['M', sourcePoint[0], sourcePoint[1]],\n      ['L', targetPoint[0] / 2 + (1 / 2) * sourcePoint[0], sourcePoint[1]],\n      ['L', targetPoint[0] / 2 + (1 / 2) * sourcePoint[0], targetPoint[1]],\n      ['L', targetPoint[0], targetPoint[1]],\n    ];\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'my-polyline-edge', MyPolylineEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-0', style: { x: 100, y: 50, ports: [{ key: 'right', placement: [1, 0.5] }] } },\n      { id: 'node-1', style: { x: 250, y: 150, ports: [{ key: 'left', placement: [0, 0.5] }] } },\n    ],\n    edges: [{ source: 'node-0', target: 'node-1' }],\n  },\n  edge: {\n    type: 'my-polyline-edge',\n    style: {\n      startArrow: true,\n      endArrow: true,\n      stroke: '#F6BD16',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:68,tocIndex:20},{value:"import { Graph, Line, register, BaseEdge, ExtensionCategory, subStyleProps } from '@antv/g6';\n\nclass LabelEdge extends Line {\n  render(attributes, container) {\n    super.render(attributes);\n    this.drawEndLabel(attributes, container, 'start');\n    this.drawEndLabel(attributes, container, 'end');\n  }\n\n  drawEndLabel(attributes, container, type) {\n    const key = type === 'start' ? 'startLabel' : 'endLabel';\n    const [x, y] = this.getEndpoints(attributes)[type === 'start' ? 0 : 1];\n\n    const fontStyle = {\n      x,\n      y,\n      dx: type === 'start' ? 15 : -15,\n      fontSize: 16,\n      fill: 'gray',\n      textBaseline: 'middle',\n      textAlign: type,\n    };\n    const style = subStyleProps(attributes, key);\n    const text = style.text;\n    this.upsert(`label-${type}`, 'text', text ? { ...fontStyle, ...style } : false, container);\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'extra-label-edge', LabelEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-0', style: { x: 100, y: 100 } },\n      { id: 'node-1', style: { x: 300, y: 100 } },\n    ],\n    edges: [{ source: 'node-0', target: 'node-1' }],\n  },\n  edge: {\n    type: 'extra-label-edge',\n    style: {\n      startArrow: true,\n      endArrow: true,\n      stroke: '#F6BD16',\n      startLabelText: 'start',\n      endLabelText: 'end',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:69,tocIndex:21}]},26053:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(9259);const t=[{value:"An edge is one of the basic elements in a graph, used to connect two nodes or combos, representing the relationship between them. In G6, edges are directional, pointing from ",paraId:0,tocIndex:0},{value:"source",paraId:0,tocIndex:0},{value:" to ",paraId:0,tocIndex:0},{value:"target",paraId:0,tocIndex:0},{value:", but you can configure them to hide the arrow to represent undirected connections.",paraId:0,tocIndex:0},{value:"You can create edges between any two nodes, combos, or between a node and a combo, and you can express different types of relationships by creating multiple edges.",paraId:1,tocIndex:0},{value:"G6 provides the following built-in edges:",paraId:2,tocIndex:0},{value:"line",paraId:3,tocIndex:0},{value:" Straight line edge",paraId:3,tocIndex:0},{value:"polyline",paraId:3,tocIndex:0},{value:" Polyline edge",paraId:3,tocIndex:0},{value:"quadratic",paraId:3,tocIndex:0},{value:" Quadratic Bezier curve edge",paraId:3,tocIndex:0},{value:"cubic",paraId:3,tocIndex:0},{value:" Cubic Bezier curve edge",paraId:3,tocIndex:0},{value:"cubicVertical",paraId:3,tocIndex:0},{value:" Vertical cubic Bezier curve edge",paraId:3,tocIndex:0},{value:"cubicHorizontal",paraId:3,tocIndex:0},{value:" Horizontal cubic Bezier curve edge",paraId:3,tocIndex:0},{value:"When defining an edge, you need to add an ",paraId:4,tocIndex:1},{value:"edges",paraId:4,tocIndex:1},{value:" field to the graph's data object. Each edge is an object with the following structure:",paraId:4,tocIndex:1},{value:"Attribute",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"source",paraId:5,tocIndex:1},{value:"ID of the starting node of the edge",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"target",paraId:5,tocIndex:1},{value:"ID of the target node of the edge",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"id",paraId:5,tocIndex:1},{value:"Unique identifier of the edge",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"type",paraId:5,tocIndex:1},{value:"Type of edge, name of built-in edge type or custom edge, such as ",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:" or ",paraId:5,tocIndex:1},{value:"polyline",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"Edge data, used to store custom data of the edge, can be accessed in style mapping through callback functions",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Edge style, including visual attributes like line color, width, arrow, etc.",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"states",paraId:5,tocIndex:1},{value:"Initial states of the edge",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"An example of a data item in the ",paraId:6,tocIndex:1},{value:"edges",paraId:6,tocIndex:1},{value:" array:",paraId:6,tocIndex:1},{value:'{\n  "source": "alice",\n  "target": "bob",\n  "type": "line",\n  "data": { "relationship": "friend", "strength": 5 },\n  "style": { "stroke": "green", "lineWidth": 2 },\n  "states": ["hover"]\n}\n',paraId:7,tocIndex:1},{value:"There are three ways to configure edges, listed in order of priority from high to low:",paraId:8,tocIndex:2},{value:"Use ",paraId:9,tocIndex:2},{value:"graph.setEdge()",paraId:9,tocIndex:2},{value:" for dynamic configuration",paraId:9,tocIndex:2},{value:"Global configuration when instantiating the graph",paraId:9,tocIndex:2},{value:"Dynamic attributes in data",paraId:9,tocIndex:2},{value:"These configuration methods can be used simultaneously. When there are the same configuration items, the method with higher priority will override the one with lower priority.",paraId:10,tocIndex:2},{value:"graph.setEdge()",paraId:11},{value:"You can dynamically set the style mapping logic of edges using ",paraId:12,tocIndex:3},{value:"graph.setEdge()",paraId:12,tocIndex:3},{value:" after the graph instance is created.",paraId:12,tocIndex:3},{value:"This method needs to be called before ",paraId:13,tocIndex:3},{value:"graph.render()",paraId:13,tocIndex:3},{value:" to take effect and has the highest priority.",paraId:13,tocIndex:3},{value:"graph.setEdge({\n  style: {\n    type: 'line',\n    style: { stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:14,tocIndex:3},{value:"You can configure edge style mapping globally when instantiating the graph, and this configuration will take effect on all edges.",paraId:15,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  edge: {\n    type: 'line',\n    style: { stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:16,tocIndex:4},{value:"If you need different configurations for different edges, you can write the configuration into the edge data. This configuration method can be directly written into the data in the form of the following code:",paraId:17,tocIndex:5},{value:"const data = {\n  edges: [\n    {\n      source: 'node-1',\n      target: 'node-2',\n      type: 'line',\n      style: { stroke: 'orange' },\n    },\n  ],\n};\n",paraId:18,tocIndex:5},{value:"If you want the configuration in the data to have a higher priority than the global configuration, you can take the following approach:",paraId:19,tocIndex:6},{value:"const data = {\n  edges: [\n    {\n      source: 'node-1',\n      target: 'node-2',\n      type: 'line',\n      style: { stroke: 'orange' },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  edge: {\n    type: 'line',\n    style: {\n      stroke: (d) => d.style.stroke || '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n});\n",paraId:20,tocIndex:6},{value:"When built-in edges cannot meet the requirements, G6 provides powerful customization capabilities:",paraId:21,tocIndex:7},{value:"Extend built-in edges",paraId:22,tocIndex:7},{value:"Create entirely new edge types",paraId:22,tocIndex:7},{value:"Unlike combos, custom edges need to be registered before use. For detailed tutorials, please refer to the ",paraId:23,tocIndex:7},{value:"Custom Edge",paraId:24,tocIndex:7},{value:" documentation.",paraId:23,tocIndex:7}]},36740:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(85743);const t=[{value:"This document introduces the common attribute configurations for built-in nodes.",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  node: {\n    type: 'circle', // Node type\n    style: {}, // Node style\n    state: {}, // State style\n    palette: {}, // Palette configuration\n    animation: {}, // Animation configuration\n  },\n});\n",paraId:1,tocIndex:0},{value:"Attribute",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"Node type, name of built-in or custom node",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"circle",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"Node style configuration, including color, size",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"Style configuration for different states",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"Defines the node's palette for color mapping",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"Defines the node's animation effects",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Specifies the node type, either a built-in node type name or a custom node name. The default is ",paraId:8,tocIndex:1},{value:"circle",paraId:8,tocIndex:1},{value:" (circle). ",paraId:8,tocIndex:1},{value:"⚠️ Note",paraId:8,tocIndex:1},{value:": This determines the shape of the main graphic.",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  node: {\n    type: 'circle',\n  },\n});\n",paraId:9,tocIndex:1},{value:"Available values include:",paraId:10,tocIndex:1},{value:"circle",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Circle Node",paraId:12,tocIndex:1},{value:"diamond",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Diamond Node",paraId:13,tocIndex:1},{value:"donut",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Donut Node",paraId:14,tocIndex:1},{value:"ellipse",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Ellipse Node",paraId:15,tocIndex:1},{value:"hexagon",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Hexagon Node",paraId:16,tocIndex:1},{value:"html",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"HTML Node",paraId:17,tocIndex:1},{value:"image",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Image Node",paraId:18,tocIndex:1},{value:"rect",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Rectangle Node",paraId:19,tocIndex:1},{value:"star",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Star Node",paraId:20,tocIndex:1},{value:"triangle",paraId:11,tocIndex:1},{value:": ",paraId:11,tocIndex:1},{value:"Triangle Node",paraId:21,tocIndex:1},{value:"Defines the node's style, including color, size, etc.",paraId:22,tocIndex:2},{value:"const graph = new Graph({\n  node: {\n    style: {},\n  },\n});\n",paraId:23,tocIndex:2},{value:"A complete node consists of the following parts:",paraId:24,tocIndex:2},{value:"key",paraId:25,tocIndex:2},{value:": The main graphic of the node, representing the primary shape, such as a rectangle or circle;",paraId:25,tocIndex:2},{value:"label",paraId:25,tocIndex:2},{value:": Text label, usually used to display the node's name or description;",paraId:25,tocIndex:2},{value:"icon",paraId:25,tocIndex:2},{value:": Icon graphic, usually used to display the node's icon, which can be an image or text icon;",paraId:25,tocIndex:2},{value:"badge",paraId:25,tocIndex:2},{value:": A badge located at the top right corner of the node by default;",paraId:25,tocIndex:2},{value:"halo",paraId:25,tocIndex:2},{value:": A halo effect graphic displayed around the main graphic;",paraId:25,tocIndex:2},{value:"port",paraId:25,tocIndex:2},{value:": Connection points on the node for connecting edges.",paraId:25,tocIndex:2},{value:"The following style configurations will be explained in sequence by atomic graphics:",paraId:26,tocIndex:2},{value:"The main graphic is the core part of the node, defining the basic shape and appearance of the node:",paraId:27,tocIndex:3},{value:"Attribute",paraId:28,tocIndex:3},{value:"Description",paraId:28,tocIndex:3},{value:"Type",paraId:28,tocIndex:3},{value:"Default",paraId:28,tocIndex:3},{value:"Required",paraId:28,tocIndex:3},{value:"collapsed",paraId:28,tocIndex:3},{value:"Whether the current node/group is collapsed",paraId:28,tocIndex:3},{value:"boolean",paraId:28,tocIndex:3},{value:"false",paraId:28,tocIndex:3},{value:"cursor",paraId:28,tocIndex:3},{value:"Node mouse hover style, ",paraId:28,tocIndex:3},{value:"configuration item",paraId:29,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"default",paraId:28,tocIndex:3},{value:"fill",paraId:28,tocIndex:3},{value:"Node fill color",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"#1783FF",paraId:28,tocIndex:3},{value:"fillOpacity",paraId:28,tocIndex:3},{value:"Node fill color opacity",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:28,tocIndex:3},{value:'When lineWidth is small, the interactive area also becomes smaller, sometimes we want to enlarge this area to make "thin lines" easier to pick up',paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"lineCap",paraId:28,tocIndex:3},{value:"Node stroke end style",paraId:28,tocIndex:3},{value:"round",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"square",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"butt",paraId:28,tocIndex:3},{value:"butt",paraId:28,tocIndex:3},{value:"lineDash",paraId:28,tocIndex:3},{value:"Node stroke dash style",paraId:28,tocIndex:3},{value:"number[]",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"lineDashOffset",paraId:28,tocIndex:3},{value:"Node stroke dash offset",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"lineJoin",paraId:28,tocIndex:3},{value:"Node stroke join style",paraId:28,tocIndex:3},{value:"round",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"bevel",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"miter",paraId:28,tocIndex:3},{value:"miter",paraId:28,tocIndex:3},{value:"lineWidth",paraId:28,tocIndex:3},{value:"Node stroke width",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"opacity",paraId:28,tocIndex:3},{value:"Node opacity",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"shadowBlur",paraId:28,tocIndex:3},{value:"Node shadow blur",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowColor",paraId:28,tocIndex:3},{value:"Node shadow color",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowOffsetX",paraId:28,tocIndex:3},{value:"Node shadow offset in the x-axis direction",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowOffsetY",paraId:28,tocIndex:3},{value:"Node shadow offset in the y-axis direction",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowType",paraId:28,tocIndex:3},{value:"Node shadow type",paraId:28,tocIndex:3},{value:"inner",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"outer",paraId:28,tocIndex:3},{value:"outer",paraId:28,tocIndex:3},{value:"size",paraId:28,tocIndex:3},{value:"Node size, quick setting of node width and height, ",paraId:28,tocIndex:3},{value:"configuration item",paraId:30,tocIndex:3},{value:"number | number[]",paraId:28,tocIndex:3},{value:"32",paraId:28,tocIndex:3},{value:"stroke",paraId:28,tocIndex:3},{value:"Node stroke color",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"#000",paraId:28,tocIndex:3},{value:"strokeOpacity",paraId:28,tocIndex:3},{value:"Node stroke color opacity",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"transform",paraId:28,tocIndex:3},{value:"The transform attribute allows you to rotate, scale, skew, or translate the given node",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"transformOrigin",paraId:28,tocIndex:3},{value:"Rotation and scaling center, also known as the transformation center",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"visibility",paraId:28,tocIndex:3},{value:"Whether the node is visible",paraId:28,tocIndex:3},{value:"visible",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"hidden",paraId:28,tocIndex:3},{value:"visible",paraId:28,tocIndex:3},{value:"x",paraId:28,tocIndex:3},{value:"Node x coordinate",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"y",paraId:28,tocIndex:3},{value:"Node y coordinate",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"z",paraId:28,tocIndex:3},{value:"Node z coordinate",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"zIndex",paraId:28,tocIndex:3},{value:"Node rendering level",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"Node size, quick setting of node width and height, supports three configuration methods:",paraId:31,tocIndex:4},{value:"number: Indicates that the node width and height are the same as the specified value",paraId:32,tocIndex:4},{value:"[number, number]: Indicates that the node width and height are represented by the array elements in order, representing the width and height of the node",paraId:32,tocIndex:4},{value:"[number, number, number]: Indicates that the node width and height are represented by the array elements in order, representing the width, height, and depth of the node",paraId:32,tocIndex:4},{value:"Available values: ",paraId:33,tocIndex:5},{value:"auto",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"default",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"none",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"context-menu",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"help",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"pointer",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"progress",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"wait",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"cell",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"crosshair",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"text",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"vertical-text",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"alias",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"copy",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"move",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"no-drop",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"not-allowed",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"grab",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"grabbing",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"all-scroll",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"col-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"row-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"n-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"e-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"s-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"w-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ne-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"se-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"sw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ew-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ns-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nesw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nwse-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"zoom-in",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"zoom-out",paraId:33,tocIndex:5},{value:"Example:",paraId:34,tocIndex:5},{value:"const graph = new Graph({\n  node: {\n    style: {\n      fill: '#1783FF', // Fill color\n      stroke: '#000', // Stroke color\n      lineWidth: 2, // Stroke width\n    },\n  },\n});\n",paraId:35,tocIndex:5},{value:"The effect is as follows:",paraId:36,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [{ id: 'node1', style: { x: 120, y: 40 } }],\n  },\n  node: {\n    style: { fill: '#1783FF', stroke: '#000', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:37,tocIndex:5},{value:"Labels are used to display the text information of the node:",paraId:38,tocIndex:6},{value:"Attribute",paraId:39,tocIndex:6},{value:"Description",paraId:39,tocIndex:6},{value:"Type",paraId:39,tocIndex:6},{value:"Default",paraId:39,tocIndex:6},{value:"Required",paraId:39,tocIndex:6},{value:"label",paraId:39,tocIndex:6},{value:"Whether to display the node label",paraId:39,tocIndex:6},{value:"boolean",paraId:39,tocIndex:6},{value:"true",paraId:39,tocIndex:6},{value:"labelCursor",paraId:39,tocIndex:6},{value:"Mouse hover style when hovering over the node label, ",paraId:39,tocIndex:6},{value:"configuration item",paraId:40,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"default",paraId:39,tocIndex:6},{value:"labelFill",paraId:39,tocIndex:6},{value:"Node label text color",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontFamily",paraId:39,tocIndex:6},{value:"Node label font family",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontSize",paraId:39,tocIndex:6},{value:"Node label font size",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"12",paraId:39,tocIndex:6},{value:"labelFontStyle",paraId:39,tocIndex:6},{value:"Node label font style",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"italic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"oblique",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontVariant",paraId:39,tocIndex:6},{value:"Node label font variant",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"small-caps",paraId:39,tocIndex:6},{value:" | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontWeight",paraId:39,tocIndex:6},{value:"Node label font weight",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bold",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bolder",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"lighter",paraId:39,tocIndex:6},{value:" | number",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelLeading",paraId:39,tocIndex:6},{value:"Line spacing",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelLetterSpacing",paraId:39,tocIndex:6},{value:"Node label letter spacing",paraId:39,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelLineHeight",paraId:39,tocIndex:6},{value:"Node label line height",paraId:39,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelMaxLines",paraId:39,tocIndex:6},{value:"Maximum number of lines for the node label",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"1",paraId:39,tocIndex:6},{value:"labelMaxWidth",paraId:39,tocIndex:6},{value:"Maximum width of the node label, ",paraId:39,tocIndex:6},{value:"configuration item",paraId:41,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"200%",paraId:39,tocIndex:6},{value:"labelOffsetX",paraId:39,tocIndex:6},{value:"Node label offset in the x-axis direction",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelOffsetY",paraId:39,tocIndex:6},{value:"Node label offset in the y-axis direction",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelPadding",paraId:39,tocIndex:6},{value:"Node label padding",paraId:39,tocIndex:6},{value:"number | number[]",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelPlacement",paraId:39,tocIndex:6},{value:"Node label position relative to the main graphic of the node, ",paraId:39,tocIndex:6},{value:"configuration item",paraId:42,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"bottom",paraId:39,tocIndex:6},{value:"labelText",paraId:39,tocIndex:6},{value:"Node label text content",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextAlign",paraId:39,tocIndex:6},{value:"Node label text horizontal alignment",paraId:39,tocIndex:6},{value:"start",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"center",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"middle",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"end",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"left",paraId:39,tocIndex:6},{value:" | `right'",paraId:39,tocIndex:6},{value:"left",paraId:39,tocIndex:6},{value:"labelTextBaseline",paraId:39,tocIndex:6},{value:"Node label text baseline",paraId:39,tocIndex:6},{value:"top",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"hanging",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"middle",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"alphabetic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"ideographic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bottom",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationColor",paraId:39,tocIndex:6},{value:"Node label text decoration line color",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationLine",paraId:39,tocIndex:6},{value:"Node label text decoration line",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationStyle",paraId:39,tocIndex:6},{value:"Node label text decoration line style",paraId:39,tocIndex:6},{value:"solid",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"double",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"dotted",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"dashed",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"wavy",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextOverflow",paraId:39,tocIndex:6},{value:"Node label text overflow handling",paraId:39,tocIndex:6},{value:"clip",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"ellipsis",paraId:39,tocIndex:6},{value:" | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextPath",paraId:39,tocIndex:6},{value:"Node label text path",paraId:39,tocIndex:6},{value:"Path",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelWordWrap",paraId:39,tocIndex:6},{value:"Whether the node label automatically wraps. When labelWordWrap is enabled, the part exceeding labelMaxWidth automatically wraps",paraId:39,tocIndex:6},{value:"boolean",paraId:39,tocIndex:6},{value:"false",paraId:39,tocIndex:6},{value:"labelZIndex",paraId:39,tocIndex:6},{value:"Node label rendering level",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"Available values: ",paraId:43,tocIndex:7},{value:"left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"left-top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"left-bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right-top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right-bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top-left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top-right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom-left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom-right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"center",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom",paraId:43,tocIndex:7},{value:"When automatic wrapping ",paraId:44,tocIndex:8},{value:"labelWordWrap",paraId:44,tocIndex:8},{value:" is enabled, it wraps when exceeding this width:",paraId:44,tocIndex:8},{value:"string: Defines the maximum width as a percentage of the node width. For example, ",paraId:45,tocIndex:8},{value:"50%",paraId:45,tocIndex:8},{value:" means the label width does not exceed half of the node width",paraId:45,tocIndex:8},{value:"number: Defines the maximum width in pixels. For example, 100 means the maximum width of the label is 100 pixels",paraId:45,tocIndex:8},{value:"For example, set multi-line label text:",paraId:46,tocIndex:8},{value:'{\n  "labelWordWrap": true,\n  "labelMaxWidth": 200,\n  "labelMaxLines": 3\n}\n',paraId:47,tocIndex:8},{value:"Example:",paraId:48,tocIndex:8},{value:"const graph = new Graph({\n  node: {\n    style: {\n      label: true, // Whether to display the node label\n      labelText: 'Node Name', // Label text content\n      labelFill: '#000', // Label text color\n      labelFontSize: 12, // Label font size\n      labelFontWeight: 'normal', // Label font weight\n      labelPlacement: 'bottom', // Label position relative to the main graphic of the node\n    },\n  },\n});\n",paraId:49,tocIndex:8},{value:"The effect is as follows:",paraId:50,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n          label: true,\n          labelText: 'Node Name',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:51,tocIndex:8},{value:"The label background is used to display the background of the node label:",paraId:52,tocIndex:9},{value:"Attribute",paraId:53,tocIndex:9},{value:"Description",paraId:53,tocIndex:9},{value:"Type",paraId:53,tocIndex:9},{value:"Default",paraId:53,tocIndex:9},{value:"labelBackground",paraId:53,tocIndex:9},{value:"Whether the node label background is displayed",paraId:53,tocIndex:9},{value:"boolean",paraId:53,tocIndex:9},{value:"false",paraId:53,tocIndex:9},{value:"labelBackgroundCursor",paraId:53,tocIndex:9},{value:"Node label background mouse hover style, ",paraId:53,tocIndex:9},{value:"configuration item",paraId:54,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"default",paraId:53,tocIndex:9},{value:"labelBackgroundFill",paraId:53,tocIndex:9},{value:"Node label background fill color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundFillOpacity",paraId:53,tocIndex:9},{value:"Node label background opacity",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"labelBackgroundHeight",paraId:53,tocIndex:9},{value:"Node label background height",paraId:53,tocIndex:9},{value:"string | number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineDash",paraId:53,tocIndex:9},{value:"Node label background dash configuration",paraId:53,tocIndex:9},{value:"number | string |(number | string )[]",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineDashOffset",paraId:53,tocIndex:9},{value:"Node label background dash offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineWidth",paraId:53,tocIndex:9},{value:"Node label background stroke width",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundRadius",paraId:53,tocIndex:9},{value:"Node label background corner radius ",paraId:53,tocIndex:9},{value:" - number: Uniformly set four corner radii ",paraId:53,tocIndex:9},{value:" - number[]: Set four corner radii separately, automatically supplement if insufficient",paraId:53,tocIndex:9},{value:"number | number[]",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"labelBackgroundShadowBlur",paraId:53,tocIndex:9},{value:"Node label background shadow blur",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowColor",paraId:53,tocIndex:9},{value:"Node label background shadow color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowOffsetX",paraId:53,tocIndex:9},{value:"Node label background shadow X direction offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowOffsetY",paraId:53,tocIndex:9},{value:"Node label background shadow Y direction offset",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundStroke",paraId:53,tocIndex:9},{value:"Node label background stroke color",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundStrokeOpacity",paraId:53,tocIndex:9},{value:"Node label background stroke opacity",paraId:53,tocIndex:9},{value:"number | string",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"labelBackgroundVisibility",paraId:53,tocIndex:9},{value:"Whether the node label background is visible",paraId:53,tocIndex:9},{value:"visible",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"hidden",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundZIndex",paraId:53,tocIndex:9},{value:"Node label background rendering level",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"Example:",paraId:55,tocIndex:9},{value:"const graph = new Graph({\n  node: {\n    style: {\n      labelBackground: true, // Whether to display the node label background\n      labelBackgroundFill: '#000', // Label background fill\n      labelBackgroundRadius: 10, // Label background corner radius\n      labelBackgroundFillOpacity: 0.5, // Label background opacity\n    },\n  },\n});\n",paraId:56,tocIndex:9},{value:"The effect is as follows:",paraId:57,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n          label: true,\n          labelText: 'Node Name',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n          labelBackground: true,\n          labelBackgroundFill: '#000',\n          labelBackgroundRadius: 10,\n          labelBackgroundFillOpacity: 0.5,\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:58,tocIndex:9},{value:"Attribute",paraId:59,tocIndex:10},{value:"Description",paraId:59,tocIndex:10},{value:"Type",paraId:59,tocIndex:10},{value:"Default",paraId:59,tocIndex:10},{value:"Required",paraId:59,tocIndex:10},{value:"halo",paraId:59,tocIndex:10},{value:"Whether the node halo is displayed",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"false",paraId:59,tocIndex:10},{value:"haloCursor",paraId:59,tocIndex:10},{value:"Node halo mouse hover style, ",paraId:59,tocIndex:10},{value:"configuration item",paraId:60,tocIndex:10},{value:"strig",paraId:59,tocIndex:10},{value:"default",paraId:59,tocIndex:10},{value:"haloDraggable",paraId:59,tocIndex:10},{value:"Whether the node halo is draggable",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"true",paraId:59,tocIndex:10},{value:"haloDroppable",paraId:59,tocIndex:10},{value:"Whether the node halo can receive dragged elements",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"true",paraId:59,tocIndex:10},{value:"haloFillRule",paraId:59,tocIndex:10},{value:"Node halo fill rule",paraId:59,tocIndex:10},{value:"nonzero",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"evenodd",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"haloFilter",paraId:59,tocIndex:10},{value:"Node halo filter",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"haloLineWidth",paraId:59,tocIndex:10},{value:"Node halo stroke width",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"3",paraId:59,tocIndex:10},{value:"haloPointerEvents",paraId:59,tocIndex:10},{value:"Whether the node halo effect responds to pointer events, ",paraId:59,tocIndex:10},{value:"configuration item",paraId:61,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"none",paraId:59,tocIndex:10},{value:"haloStroke",paraId:59,tocIndex:10},{value:"Node halo stroke color, ",paraId:59,tocIndex:10},{value:"this attribute is used to set the color of the halo around the node, helping to highlight the node",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"Same as the main graphic's fill ",paraId:59,tocIndex:10},{value:"fill",paraId:59,tocIndex:10},{value:"haloStrokeOpacity",paraId:59,tocIndex:10},{value:"Node halo stroke color opacity",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0.25",paraId:59,tocIndex:10},{value:"haloVisibility",paraId:59,tocIndex:10},{value:"Node halo visibility",paraId:59,tocIndex:10},{value:"visible",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"hidden",paraId:59,tocIndex:10},{value:"visible",paraId:59,tocIndex:10},{value:"haloZIndex",paraId:59,tocIndex:10},{value:"Node halo rendering level",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-1",paraId:59,tocIndex:10},{value:"Available values:\n",paraId:62,tocIndex:11},{value:"visible",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblepainted",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblestroke",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"non-transparent-pixel",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblefill",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visible",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"painted",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"fill",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"stroke",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"all",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"none",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"auto",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"inherit",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"initial",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"unset",paraId:62,tocIndex:11},{value:"Example:",paraId:63,tocIndex:11},{value:"const graph = new Graph({\n  node: {\n    style: {\n      halo: true, // Whether to display the node halo\n      haloStroke: '#FF0000', // Node halo stroke color\n      haloLineWidth: 10, // Node halo stroke width\n    },\n  },\n});\n",paraId:64,tocIndex:11},{value:"The effect is as follows:",paraId:65,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n        },\n      },\n    ],\n  },\n  node: {\n    style: {\n      halo: true,\n      haloStroke: '#FF0000',\n      haloLineWidth: 10,\n    },\n  },\n});\n\ngraph.render();\n",paraId:66,tocIndex:11},{value:"Attribute",paraId:67,tocIndex:12},{value:"Description",paraId:67,tocIndex:12},{value:"Type",paraId:67,tocIndex:12},{value:"Default",paraId:67,tocIndex:12},{value:"icon",paraId:67,tocIndex:12},{value:"Whether to display the node icon",paraId:67,tocIndex:12},{value:"boolean",paraId:67,tocIndex:12},{value:"true",paraId:67,tocIndex:12},{value:"iconFill",paraId:67,tocIndex:12},{value:"Node icon text color",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconFontFamily",paraId:67,tocIndex:12},{value:"Node icon font family",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconFontSize",paraId:67,tocIndex:12},{value:"Node icon font size",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"16",paraId:67,tocIndex:12},{value:"iconFontStyle",paraId:67,tocIndex:12},{value:"Node icon font style",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"italic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"oblique",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconFontVariant",paraId:67,tocIndex:12},{value:"Node icon font variant",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"small-caps",paraId:67,tocIndex:12},{value:" | string",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconFontWeight",paraId:67,tocIndex:12},{value:"Node icon font weight",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconHeight",paraId:67,tocIndex:12},{value:"Node icon height",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"Half of the main graphic height",paraId:67,tocIndex:12},{value:"iconLetterSpacing",paraId:67,tocIndex:12},{value:"Node icon text letter spacing",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconLineHeight",paraId:67,tocIndex:12},{value:"Node icon text line height",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconMaxLines",paraId:67,tocIndex:12},{value:"Maximum number of lines for the node icon text",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"1",paraId:67,tocIndex:12},{value:"iconRadius",paraId:67,tocIndex:12},{value:"Node icon corner radius",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"0",paraId:67,tocIndex:12},{value:"iconSrc",paraId:67,tocIndex:12},{value:"Node image source. It takes precedence over iconText",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconText",paraId:67,tocIndex:12},{value:"Node icon text",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextAlign",paraId:67,tocIndex:12},{value:"Node icon text horizontal alignment",paraId:67,tocIndex:12},{value:"start",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"center",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"middle",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"end",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"left",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"right",paraId:67,tocIndex:12},{value:"left",paraId:67,tocIndex:12},{value:"iconTextBaseline",paraId:67,tocIndex:12},{value:"Node icon text baseline",paraId:67,tocIndex:12},{value:"top",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"hanging",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"middle",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"alphabetic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"ideographic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"bottom",paraId:67,tocIndex:12},{value:"alphabetic",paraId:67,tocIndex:12},{value:"iconTextDecorationColor",paraId:67,tocIndex:12},{value:"Node icon text decoration line color",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextDecorationLine",paraId:67,tocIndex:12},{value:"Node icon text decoration line",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextDecorationStyle",paraId:67,tocIndex:12},{value:"Node icon text decoration line style",paraId:67,tocIndex:12},{value:"solid",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"double",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"dotted",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"dashed",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"wavy",paraId:67,tocIndex:12},{value:"solid",paraId:67,tocIndex:12},{value:"iconTextOverflow",paraId:67,tocIndex:12},{value:"Node icon text overflow handling",paraId:67,tocIndex:12},{value:"clip",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"ellipsis",paraId:67,tocIndex:12},{value:" | string",paraId:67,tocIndex:12},{value:"clip",paraId:67,tocIndex:12},{value:"iconWidth",paraId:67,tocIndex:12},{value:"Node icon width",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"Half of the main graphic width",paraId:67,tocIndex:12},{value:"iconWordWrap",paraId:67,tocIndex:12},{value:"Whether the node icon text automatically wraps",paraId:67,tocIndex:12},{value:"boolean",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"Example:",paraId:68,tocIndex:12},{value:"const graph = new Graph({\n  node: {\n    style: {\n      iconText: 'Text', // Icon text\n      iconFill: '#FF0000', // Icon text color\n      iconFontSize: 14, // Icon text size\n      iconFontWeight: 'bold', // Icon text weight\n      iconFontStyle: 'italic', // Icon text style\n    },\n  },\n});\n",paraId:69,tocIndex:12},{value:"The effect is as follows:",paraId:70,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n        },\n      },\n    ],\n  },\n  node: {\n    style: {\n      iconText: 'Text',\n      iconFill: '#FF0000',\n      iconFontSize: 14,\n      iconFontWeight: 'bold',\n      iconFontStyle: 'italic',\n    },\n  },\n});\n\ngraph.render();\n",paraId:71,tocIndex:12},{value:"Attribute",paraId:72,tocIndex:13},{value:"Description",paraId:72,tocIndex:13},{value:"Type",paraId:72,tocIndex:13},{value:"Default",paraId:72,tocIndex:13},{value:"badge",paraId:72,tocIndex:13},{value:"Whether the node displays a badge",paraId:72,tocIndex:13},{value:"boolean",paraId:72,tocIndex:13},{value:"true",paraId:72,tocIndex:13},{value:"badgePalette",paraId:72,tocIndex:13},{value:"Background color palette for the node badge",paraId:72,tocIndex:13},{value:"string[]",paraId:72,tocIndex:13},{value:"[",paraId:72,tocIndex:13},{value:"#7E92B5",paraId:72,tocIndex:13},{value:", ",paraId:72,tocIndex:13},{value:"#F4664A",paraId:72,tocIndex:13},{value:", ",paraId:72,tocIndex:13},{value:"#FFBE3A",paraId:72,tocIndex:13},{value:"]",paraId:72,tocIndex:13},{value:"badges",paraId:72,tocIndex:13},{value:"Node badge settings",paraId:72,tocIndex:13},{value:"BadgeStyleProps",paraId:73,tocIndex:13},{value:"[]",paraId:72,tocIndex:13},{value:"-",paraId:72,tocIndex:13},{value:"Attribute",paraId:74,tocIndex:14},{value:"Description",paraId:74,tocIndex:14},{value:"Type",paraId:74,tocIndex:14},{value:"Default",paraId:74,tocIndex:14},{value:"background",paraId:74,tocIndex:14},{value:"Whether the node badge displays a background",paraId:74,tocIndex:14},{value:"boolean",paraId:74,tocIndex:14},{value:"true",paraId:74,tocIndex:14},{value:"backgroundCursor",paraId:74,tocIndex:14},{value:"Node badge background mouse hover style, ",paraId:74,tocIndex:14},{value:"configuration item",paraId:75,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"default",paraId:74,tocIndex:14},{value:"backgroundFill",paraId:74,tocIndex:14},{value:"Node badge background fill color. If not specified, the badgePalette is assigned in order",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundFillOpacity",paraId:74,tocIndex:14},{value:"Node badge background fill opacity",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"backgroundFilter",paraId:74,tocIndex:14},{value:"Node badge background filter",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundHeight",paraId:74,tocIndex:14},{value:"Node badge background height",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineDash",paraId:74,tocIndex:14},{value:"Node badge background dash configuration",paraId:74,tocIndex:14},{value:"number | string |(number | string )[]",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineDashOffset",paraId:74,tocIndex:14},{value:"Node badge background dash offset",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineWidth",paraId:74,tocIndex:14},{value:"Node badge background stroke width",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundRadius",paraId:74,tocIndex:14},{value:"Node badge background corner radius ",paraId:74,tocIndex:14},{value:" - number: Uniformly set four corner radii ",paraId:74,tocIndex:14},{value:" - number[]: Set four corner radii separately, will supplement missing components ",paraId:74,tocIndex:14},{value:" - string: Similar to the ",paraId:74,tocIndex:14},{value:"CSS padding",paraId:74,tocIndex:14},{value:" attribute, using spaces to separate",paraId:74,tocIndex:14},{value:"number | number[] | string",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"backgroundShadowBlur",paraId:74,tocIndex:14},{value:"Node badge background shadow blur",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowColor",paraId:74,tocIndex:14},{value:"Node badge background shadow color",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowOffsetX",paraId:74,tocIndex:14},{value:"Node badge background shadow X direction offset",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowOffsetY",paraId:74,tocIndex:14},{value:"Node badge background shadow Y direction offset",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundStroke",paraId:74,tocIndex:14},{value:"Node badge background stroke color",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundStrokeOpacity",paraId:74,tocIndex:14},{value:"Node badge background stroke opacity",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"backgroundVisibility",paraId:74,tocIndex:14},{value:"Whether the node badge background is visible",paraId:74,tocIndex:14},{value:"visible",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hidden",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundZIndex",paraId:74,tocIndex:14},{value:"Node badge background rendering level",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fill",paraId:74,tocIndex:14},{value:"Node badge text color",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fontFamily",paraId:74,tocIndex:14},{value:"Node badge font family",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fontSize",paraId:74,tocIndex:14},{value:"Node badge font size",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"8",paraId:74,tocIndex:14},{value:"fontStyle",paraId:74,tocIndex:14},{value:"Node badge font style",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"italic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"oblique",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"fontVariant",paraId:74,tocIndex:14},{value:"Node badge font variant",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"small-caps",paraId:74,tocIndex:14},{value:" | string",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"fontWeight",paraId:74,tocIndex:14},{value:"Node badge font weight",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"lineHeight",paraId:74,tocIndex:14},{value:"Node badge line height",paraId:74,tocIndex:14},{value:"string | number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"lineWidth",paraId:74,tocIndex:14},{value:"Node badge line width",paraId:74,tocIndex:14},{value:"string | number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"maxLines",paraId:74,tocIndex:14},{value:"Maximum number of lines for the node badge text",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"offsetX",paraId:74,tocIndex:14},{value:"Node badge offset in the x-axis direction",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"offsetY",paraId:74,tocIndex:14},{value:"Node badge offset in the y-axis direction",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"padding",paraId:74,tocIndex:14},{value:"Node badge padding",paraId:74,tocIndex:14},{value:"number | number[]",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"placement",paraId:74,tocIndex:14},{value:"Node badge position relative to the main graphic of the node. If not specified, it defaults to clockwise from the top right corner",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left-top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left-bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right-top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right-bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top-left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top-right",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom-left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom-right",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"text",paraId:74,tocIndex:14},{value:"Node badge text content",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textAlign",paraId:74,tocIndex:14},{value:"Node badge text horizontal alignment",paraId:74,tocIndex:14},{value:"start",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"center",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"middle",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"end",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:"textBaseline",paraId:74,tocIndex:14},{value:"Node badge text baseline",paraId:74,tocIndex:14},{value:"top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hanging",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"middle",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"alphabetic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"ideographic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom",paraId:74,tocIndex:14},{value:"alphabetic",paraId:74,tocIndex:14},{value:"textDecorationColor",paraId:74,tocIndex:14},{value:"Node badge text decoration line color",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textDecorationLine",paraId:74,tocIndex:14},{value:"Node badge text decoration line",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textDecorationStyle",paraId:74,tocIndex:14},{value:"Node badge text decoration line style",paraId:74,tocIndex:14},{value:"solid",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"double",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"dotted",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"dashed",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"wavy",paraId:74,tocIndex:14},{value:"solid",paraId:74,tocIndex:14},{value:"textOverflow",paraId:74,tocIndex:14},{value:"Node badge text overflow handling",paraId:74,tocIndex:14},{value:"clip",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"ellipsis",paraId:74,tocIndex:14},{value:" | string",paraId:74,tocIndex:14},{value:"clip",paraId:74,tocIndex:14},{value:"visibility",paraId:74,tocIndex:14},{value:"Whether the node badge is visible",paraId:74,tocIndex:14},{value:"visible",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hidden",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"wordWrap",paraId:74,tocIndex:14},{value:"Whether the node badge text automatically wraps",paraId:74,tocIndex:14},{value:"boolean",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"zIndex",paraId:74,tocIndex:14},{value:"Node badge rendering level",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"3",paraId:74,tocIndex:14},{value:"For example, add three badges with different meanings to a node:",paraId:76,tocIndex:14},{value:"const graph = new Graph({\n  node: {\n    style: {\n      badge: true, // Whether to display the badge\n      badges: [\n        { text: 'A', placement: 'right-top' },\n        { text: 'Important', placement: 'right' },\n        { text: 'Notice', placement: 'right-bottom' },\n      ],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'], // Badge background color palette\n      badgeFontSize: 7, // Badge font size\n    },\n  },\n});\n",paraId:77,tocIndex:14},{value:"The effect is as follows:",paraId:78,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    style: {\n      badge: true,\n      badges: [\n        { text: 'A', placement: 'right-top' },\n        { text: 'Important', placement: 'right' },\n        { text: 'Notice', placement: 'right-bottom' },\n      ],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'],\n      badgeFontSize: 7,\n    },\n  },\n});\n\ngraph.render();\n",paraId:79,tocIndex:14},{value:"Attribute",paraId:80,tocIndex:15},{value:"Description",paraId:80,tocIndex:15},{value:"Type",paraId:80,tocIndex:15},{value:"Default",paraId:80,tocIndex:15},{value:"Required",paraId:80,tocIndex:15},{value:"port",paraId:80,tocIndex:15},{value:"Whether the node displays connection ports",paraId:80,tocIndex:15},{value:"boolean",paraId:80,tocIndex:15},{value:"true",paraId:80,tocIndex:15},{value:"ports",paraId:80,tocIndex:15},{value:"Node connection port configuration items, supports multiple connection ports",paraId:80,tocIndex:15},{value:"PortStyleProps",paraId:81,tocIndex:15},{value:"[]",paraId:80,tocIndex:15},{value:"Attribute",paraId:82,tocIndex:16},{value:"Description",paraId:82,tocIndex:16},{value:"Type",paraId:82,tocIndex:16},{value:"Default",paraId:82,tocIndex:16},{value:"Required",paraId:82,tocIndex:16},{value:"key",paraId:82,tocIndex:16},{value:"The key value of the node connection port, default is the index of the node connection port",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"placement",paraId:82,tocIndex:16},{value:"Node connection port position relative to the main graphic of the node",paraId:82,tocIndex:16},{value:"left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"center",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"left-top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"left-bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right-top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right-bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top-left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top-right",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom-left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom-right",paraId:82,tocIndex:16},{value:" | [number, number]",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"✓",paraId:82,tocIndex:16},{value:"r",paraId:82,tocIndex:16},{value:"Node connection port radius ",paraId:82,tocIndex:16},{value:" - If set to undefined, the connection port is considered a point, not displayed on the canvas but exists, and the edge will preferentially connect to the nearest connection port ",paraId:82,tocIndex:16},{value:" - If set to a number, the connection port is considered a circle, and the radius of the circle is specified here",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"linkToCenter",paraId:82,tocIndex:16},{value:"Whether the edge connects to the center of the node connection port ",paraId:82,tocIndex:16},{value:" - If true, the edge connects to the center of the node connection port ",paraId:82,tocIndex:16},{value:" - If false, the edge connects to the edge of the node connection port",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"false",paraId:82,tocIndex:16},{value:"cursor",paraId:82,tocIndex:16},{value:"Node connection port mouse hover style, ",paraId:82,tocIndex:16},{value:"configuration item",paraId:83,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"default",paraId:82,tocIndex:16},{value:"fill",paraId:82,tocIndex:16},{value:"Node connection port fill color",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"fillOpacity",paraId:82,tocIndex:16},{value:"Node connection port fill opacity",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"1",paraId:82,tocIndex:16},{value:"isBillboard",paraId:82,tocIndex:16},{value:"Whether the node connection port is a Billboard effect",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"isSizeAttenuation",paraId:82,tocIndex:16},{value:"Whether the node connection port enables size attenuation",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineDash",paraId:82,tocIndex:16},{value:"Node connection port stroke dash configuration",paraId:82,tocIndex:16},{value:"number | string |(number | string )[]",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineDashOffset",paraId:82,tocIndex:16},{value:"Node connection port stroke dash offset",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineWidth",paraId:82,tocIndex:16},{value:"Node connection port stroke width",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowBlur",paraId:82,tocIndex:16},{value:"Node connection port shadow blur",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowColor",paraId:82,tocIndex:16},{value:"Node connection port shadow color",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowOffsetX",paraId:82,tocIndex:16},{value:"Node connection port shadow X direction offset",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowOffsetY",paraId:82,tocIndex:16},{value:"Node connection port shadow Y direction offset",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"stroke",paraId:82,tocIndex:16},{value:"Node connection port stroke color",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"strokeOpacity",paraId:82,tocIndex:16},{value:"Node connection port stroke opacity",paraId:82,tocIndex:16},{value:"number | string",paraId:82,tocIndex:16},{value:"1",paraId:82,tocIndex:16},{value:"visibility",paraId:82,tocIndex:16},{value:"Whether the node connection port is visible",paraId:82,tocIndex:16},{value:"visible",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"hidden",paraId:82,tocIndex:16},{value:"visible",paraId:82,tocIndex:16},{value:"zIndex",paraId:82,tocIndex:16},{value:"Node connection port rendering level",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"2",paraId:82,tocIndex:16},{value:"For example, add four connection ports to a node:",paraId:84,tocIndex:16},{value:"const graph = new Graph({\n  node: {\n    style: {\n      port: true,\n      ports: [\n        { key: 'top', placement: 'top', fill: '#7E92B5' },\n        { key: 'right', placement: 'right', fill: '#F4664A' },\n        { key: 'bottom', placement: 'bottom', fill: '#FFBE3A' },\n        { key: 'left', placement: [0, 0.5], fill: '#D580FF' },\n      ],\n      portR: 3,\n      portLineWidth: 1,\n      portStroke: '#fff',\n    },\n  },\n});\n",paraId:85,tocIndex:16},{value:"The effect is as follows:",paraId:86,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    style: {\n      port: true,\n      ports: [\n        { key: 'top', placement: 'top', fill: '#7E92B5' },\n        { key: 'right', placement: 'right', fill: '#F4664A' },\n        { key: 'bottom', placement: 'bottom', fill: '#FFBE3A' },\n        { key: 'left', placement: [0, 0.5], fill: '#D580FF' },\n      ],\n      portR: 3,\n      portLineWidth: 1,\n      portStroke: '#fff',\n    },\n  },\n});\n\ngraph.render();\n",paraId:87,tocIndex:16},{value:"In some interactive behaviors, such as clicking to select a node or hovering to activate an edge, it is merely marking certain states on the element. To reflect these states in the visual space seen by the end user, we need to set different graphic element styles for different states to respond to the changes in the element's state.",paraId:88,tocIndex:17},{value:"G6 provides several built-in states, including selected, highlight, active, inactive, and disabled. Additionally, it supports custom states to meet more specific needs. For each state, developers can define a set of style rules that will override the default styles of the element.",paraId:89,tocIndex:17},{value:"The data structure is as follows:",paraId:90,tocIndex:17},{value:"type NodeState = {\n  [state: string]: NodeStyle;\n};\n",paraId:91,tocIndex:17},{value:"For example, when a node is in the ",paraId:92,tocIndex:17},{value:"focus",paraId:92,tocIndex:17},{value:" state, you can add a stroke with a width of 3 and a color of orange.",paraId:92,tocIndex:17},{value:"const graph = new Graph({\n  node: {\n    state: {\n      focus: {\n        lineWidth: 3, // Stroke width\n        stroke: 'orange', // Stroke color\n      },\n    },\n  },\n});\n",paraId:93,tocIndex:17},{value:"The effect is as follows:",paraId:94,tocIndex:17},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    state: {\n      focus: {\n        lineWidth: 3,\n        stroke: 'orange',\n      },\n    },\n  },\n});\n\ngraph.render();\n",paraId:95,tocIndex:17},{value:"Defines the node's animation effects, supporting the following two configuration methods:",paraId:96,tocIndex:18},{value:"Turn off all node animations",paraId:97,tocIndex:18},{value:'{\n  "node": {\n    "animation": false\n  }\n}\n',paraId:98,tocIndex:18},{value:"Configure stage animations",paraId:99,tocIndex:18},{value:"Stage animations refer to the animation effects of nodes when entering the canvas, updating, and leaving the canvas. The currently supported stages include:",paraId:100,tocIndex:18},{value:"enter",paraId:101,tocIndex:18},{value:": Animation when the node enters the canvas",paraId:101,tocIndex:18},{value:"update",paraId:101,tocIndex:18},{value:": Animation when the node updates",paraId:101,tocIndex:18},{value:"exit",paraId:101,tocIndex:18},{value:": Animation when the node leaves the canvas",paraId:101,tocIndex:18},{value:"show",paraId:101,tocIndex:18},{value:": Animation when the node is displayed from a hidden state",paraId:101,tocIndex:18},{value:"hide",paraId:101,tocIndex:18},{value:": Animation when the node is hidden",paraId:101,tocIndex:18},{value:"collapse",paraId:101,tocIndex:18},{value:": Animation when the node is collapsed",paraId:101,tocIndex:18},{value:"expand",paraId:101,tocIndex:18},{value:": Animation when the node is expanded",paraId:101,tocIndex:18},{value:"You can refer to ",paraId:102,tocIndex:18},{value:"Animation Paradigm",paraId:103,tocIndex:18},{value:" to use animation syntax to configure nodes, such as:",paraId:102,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["x", "y"], // Only animate the x and y attributes during updates\n          "duration": 1000, // Animation duration\n          "easing": "linear" // Easing function\n        }\n      ]\n    }\n  }\n}\n',paraId:104,tocIndex:18},{value:"You can also use built-in animation effects:",paraId:105,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "enter": "fade", // Use fade animation\n      "update": "translate", // Use translate animation\n      "exit": "fade" // Use fade animation\n    }\n  }\n}\n',paraId:106,tocIndex:18},{value:"You can pass in false to turn off animations for specific stages:",paraId:107,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "enter": false // Turn off node entrance animation\n    }\n  }\n}\n',paraId:108,tocIndex:18},{value:"Defines the node's palette, which is a predefined pool of node colors, and assigns colors to the ",paraId:109,tocIndex:19},{value:"fill",paraId:109,tocIndex:19},{value:" attribute based on rules.",paraId:109,tocIndex:19},{value:"For the definition of palettes, please refer to ",paraId:110,tocIndex:19},{value:"Palette",paraId:111,tocIndex:19},{value:".",paraId:110,tocIndex:19},{value:"Attribute",paraId:112,tocIndex:19},{value:"Description",paraId:112,tocIndex:19},{value:"Type",paraId:112,tocIndex:19},{value:"Default",paraId:112,tocIndex:19},{value:"color",paraId:112,tocIndex:19},{value:"Palette color. If the palette is registered, you can directly specify its registered name, or accept a color array",paraId:112,tocIndex:19},{value:"string | string[]",paraId:112,tocIndex:19},{value:"-",paraId:112,tocIndex:19},{value:"field",paraId:112,tocIndex:19},{value:"Specifies the grouping field in the element data. If not specified, the default is to take the id as the grouping field",paraId:112,tocIndex:19},{value:"string | ((datum) => string)",paraId:112,tocIndex:19},{value:"id",paraId:112,tocIndex:19},{value:"invert",paraId:112,tocIndex:19},{value:"Whether to invert the palette",paraId:112,tocIndex:19},{value:"boolean",paraId:112,tocIndex:19},{value:"false",paraId:112,tocIndex:19},{value:"type",paraId:112,tocIndex:19},{value:"Specifies the current palette type. ",paraId:112,tocIndex:19},{value:" - ",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:": Discrete palette ",paraId:112,tocIndex:19},{value:" - ",paraId:112,tocIndex:19},{value:"value",paraId:112,tocIndex:19},{value:": Continuous palette",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:" | ",paraId:112,tocIndex:19},{value:"value",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:"For example, assign node colors based on the ",paraId:113,tocIndex:19},{value:"category",paraId:113,tocIndex:19},{value:" field of a set of data, so that nodes of the same category have the same color:",paraId:113,tocIndex:19},{value:'{\n  "node": {\n    "palette": {\n      "type": "group",\n      "field": "category",\n      "color": ["#1783FF", "#F08F56", "#D580FF", "#00C9C9", "#7863FF"]\n    }\n  }\n}\n',paraId:114,tocIndex:19},{value:"The effect is as follows:",paraId:115,tocIndex:19},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    nodes: new Array(10)\n      .fill(0)\n      .map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 10 },\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#1783FF', '#F08F56', '#D580FF', '#00C9C9', '#7863FF'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:116,tocIndex:19},{value:"You can also use the default configuration:",paraId:117,tocIndex:19},{value:'{\n  "node": {\n    "palette": "tableau" // tableau is the palette name, default assigns colors based on ID\n  }\n}\n',paraId:118,tocIndex:19},{value:"The effect is as follows:",paraId:119,tocIndex:19},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    nodes: new Array(10)\n      .fill(0)\n      .map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 10 },\n  node: {\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:120,tocIndex:19}]},4055:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(79226);const t=[{value:"A circle is a symmetrical geometric shape with a uniform radius.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent the size or weight of a node (controlled by radius).",paraId:2,tocIndex:0},{value:"Suitable for representing non-directional relationships, such as user nodes in social networks.",paraId:2,tocIndex:0},{value:"Commonly used in flowcharts, network diagrams, topology diagrams, etc.",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }],\n    },\n    node: {\n      type: 'circle',\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'circle' }, 'type').disable();\n\n    const options = { size: 40 };\n    const optionFolder = gui.addFolder('circle.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:4,tocIndex:2},{value:"BaseNode",paraId:5,tocIndex:2},{value:")",paraId:4,tocIndex:2}]},73998:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(98415);const t=[{value:"A diamond is a geometric shape with four equal sides and diagonal symmetry.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent decision nodes, conditional judgments, or critical paths.",paraId:2,tocIndex:0},{value:"Suitable for representing decision nodes or key steps in flowcharts.",paraId:3,tocIndex:0},{value:"Commonly used in flowcharts, decision trees, network diagrams, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: [48, 24], fill: '#7e3feb' } }] },\n    node: { type: 'diamond' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'diamond' }, 'type').disable();\n\n    const options = { 'size[0]': 48, 'size[1]': 24 };\n\n    const optionFolder = gui.addFolder('diamond.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"diamond",paraId:6,tocIndex:1},{value:" 以使用菱形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},98520:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(10297);const t=[{value:"The donut node is a ring-shaped geometric figure composed of two concentric circles.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent proportional data, such as completion progress and ratio analysis.",paraId:2,tocIndex:0},{value:"Suitable for representing multi-layered data, such as nested ring charts.",paraId:3,tocIndex:0},{value:"Commonly used in data visualization, dashboards, progress charts, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            fill: 'transparent',\n            size: 60,\n            donuts: [30, 30, 20, 20],\n            donutPalette: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n          },\n        },\n      ],\n    },\n    node: { type: 'donut' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'donut' }, 'type').disable();\n\n    const options = {\n      size: 60,\n      innerR: 50,\n      donutPalette: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n    };\n    const optionFolder = gui.addFolder('donut.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerR', 0, 100, 1).name('innerR(%)');\n    optionFolder.add(options, 'donutPalette', ['spectral', 'tableau', ['#1783FF', '#00C9C9', '#F08F56', '#D580FF']]);\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property === 'innerR') value = value + '%';\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"donut",paraId:6,tocIndex:1},{value:" 以使用甜甜圈节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"donutFill",paraId:9,tocIndex:2},{value:"Fill color",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"#1783FF",paraId:9,tocIndex:2},{value:"donutFillOpacity",paraId:9,tocIndex:2},{value:"Fill color opacity",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutLineCap",paraId:9,tocIndex:2},{value:"Stroke end style",paraId:9,tocIndex:2},{value:"round",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"square",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"butt",paraId:9,tocIndex:2},{value:"butt",paraId:9,tocIndex:2},{value:"donutLineDash",paraId:9,tocIndex:2},{value:"Stroke dash style",paraId:9,tocIndex:2},{value:"number[]",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutLineDashOffset",paraId:9,tocIndex:2},{value:"Stroke dash offset",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutLineJoin",paraId:9,tocIndex:2},{value:"Stroke join style",paraId:9,tocIndex:2},{value:"round",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"bevel",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"miter",paraId:9,tocIndex:2},{value:"miter",paraId:9,tocIndex:2},{value:"donutLineWidth",paraId:9,tocIndex:2},{value:"Stroke width",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutOpacity",paraId:9,tocIndex:2},{value:"Opacity",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutPalette",paraId:9,tocIndex:2},{value:"Color or palette name",paraId:9,tocIndex:2},{value:"string | string[]",paraId:9,tocIndex:2},{value:"tableau",paraId:9,tocIndex:2},{value:"donuts",paraId:9,tocIndex:2},{value:"Donut data",paraId:9,tocIndex:2},{value:"number[] | ",paraId:9,tocIndex:2},{value:"DonutRound",paraId:10,tocIndex:2},{value:"[]",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowBlur",paraId:9,tocIndex:2},{value:"Shadow blur",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowColor",paraId:9,tocIndex:2},{value:"Shadow color",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowOffsetX",paraId:9,tocIndex:2},{value:"Shadow offset in x-axis direction",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowOffsetY",paraId:9,tocIndex:2},{value:"Shadow offset in y-axis direction",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowType",paraId:9,tocIndex:2},{value:"Shadow type",paraId:9,tocIndex:2},{value:"inner",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"outer",paraId:9,tocIndex:2},{value:"outer",paraId:9,tocIndex:2},{value:"donutStroke",paraId:9,tocIndex:2},{value:"Stroke color",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"#000",paraId:9,tocIndex:2},{value:"donutStrokeOpacity",paraId:9,tocIndex:2},{value:"Stroke color opacity",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutVisibility",paraId:9,tocIndex:2},{value:"Visibility of the shape",paraId:9,tocIndex:2},{value:"visible",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hidden",paraId:9,tocIndex:2},{value:"visible",paraId:9,tocIndex:2},{value:"innerR",paraId:9,tocIndex:2},{value:"Inner ring radius, percentage or px",paraId:9,tocIndex:2},{value:"string | number",paraId:9,tocIndex:2},{value:"50%",paraId:9,tocIndex:2},{value:"Attribute",paraId:11,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:"Default",paraId:11,tocIndex:3},{value:"Required",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:"Color",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"Fill color",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"#1783FF",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"Fill color opacity",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"lineCap",paraId:11,tocIndex:3},{value:"Stroke end style",paraId:11,tocIndex:3},{value:"round",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"square",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"butt",paraId:11,tocIndex:3},{value:"butt",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"Stroke dash style",paraId:11,tocIndex:3},{value:"number[]",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDashOffset",paraId:11,tocIndex:3},{value:"Stroke dash offset",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineJoin",paraId:11,tocIndex:3},{value:"Stroke join style",paraId:11,tocIndex:3},{value:"round",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"bevel",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"miter",paraId:11,tocIndex:3},{value:"miter",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"Stroke width",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"Opacity",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"Shadow blur",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"Shadow color",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"Shadow offset in x-axis direction",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"Shadow offset in y-axis direction",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowType",paraId:11,tocIndex:3},{value:"Shadow type",paraId:11,tocIndex:3},{value:"inner",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"outer",paraId:11,tocIndex:3},{value:"outer",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"Stroke color",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"#000",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"Stroke color opacity",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"value",paraId:11,tocIndex:3},{value:"Value for ratio calculation",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"✓",paraId:11,tocIndex:3},{value:"visibility",paraId:11,tocIndex:3},{value:"Visibility of the shape",paraId:11,tocIndex:3},{value:"visible",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"hidden",paraId:11,tocIndex:3},{value:"visible",paraId:11,tocIndex:3}]},61405:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(1452);const t=[{value:"An ellipse is a geometric shape with asymmetrical major and minor axes.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent dynamic nodes, asymmetric relationships, or special shapes.",paraId:2,tocIndex:0},{value:"Suitable for representing flowcharts, network diagrams, or topology diagrams.",paraId:3,tocIndex:0},{value:"Commonly used in flowcharts, network diagrams, topology diagrams, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'ellipse' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'ellipse' }, 'type').disable();\n\n    const options = { 'size[0]': 80, 'size[1]': 40 };\n\n    const optionFolder = gui.addFolder('ellipse.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"ellipse",paraId:6,tocIndex:1},{value:" 以使用椭圆形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},26684:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(71412);const t=[{value:"A hexagon is a geometric shape with six equal sides, featuring a honeycomb structure.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent honeycomb networks, molecular structures, or tightly packed nodes.",paraId:2,tocIndex:0},{value:"Suitable for representing network topology, molecular diagrams, or game maps.",paraId:3,tocIndex:0},{value:"Commonly used in network diagrams, topology diagrams, game design, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'hexagon' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'hexagon' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      outerR: 0,\n    };\n    const optionFolder = gui.addFolder('hexagon.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'outerR', 0, 100);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"hexagon",paraId:6,tocIndex:1},{value:" 以使用六边形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"outerR",paraId:9,tocIndex:2},{value:"Outer radius, the distance from the hexagon's center to any vertex",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Half of the minimum of width and height",paraId:9,tocIndex:2}]},63254:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(87547);const t=[{value:"The HTML node is a custom rectangular area used to display HTML content.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent complex custom nodes, such as tables, charts, or rich text.",paraId:2,tocIndex:0},{value:"Suitable for representing custom visual elements or interactive components.",paraId:3,tocIndex:0},{value:"Commonly used in custom charts, UI design, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            x: 300,\n            y: 110,\n            size: [120, 40],\n            innerHTML: `\n<div style=\"width: 100%; height: 100%; background: #7e3feb; display: flex; justify-content: center; align-items: center;\">\n  <span style=\"color: #fff; font-size: 12px;\">\n    HTML Node\n  </span>\n</div>`,\n          },\n        },\n      ],\n    },\n    node: { type: 'html' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'html' }, 'type').disable();\n\n    const options = {\n      size: 50,\n      innerHTML: `\n<div style=\"width: 100%; height: 100%; background: #7863FF; display: flex; justify-content: center; align-items: center;\">\n  <span style=\"color: #fff; font-size: 20px;\">\n    'HTML Node'\n  </span>\n</div>`,\n    };\n    const optionFolder = gui.addFolder('html.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerHTML');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"html",paraId:6,tocIndex:1},{value:" 以使用 HTML 节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"dx",paraId:9,tocIndex:2},{value:"Horizontal offset. The HTML container defaults to the top-left corner as the origin, and dx is used for horizontal offset",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"dy",paraId:9,tocIndex:2},{value:"Vertical offset. The HTML container defaults to the top-left corner as the origin, and dy is used for vertical offset",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"innerHTML",paraId:9,tocIndex:2},{value:"HTML content, can be a string or ",paraId:9,tocIndex:2},{value:"HTMLElement",paraId:9,tocIndex:2},{value:"string | ",paraId:9,tocIndex:2},{value:"HTMLElement",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2}]},75436:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(13088);const t=[{value:"The image node is a rectangular area used to display images.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent user avatars, product images, or icons.",paraId:2,tocIndex:0},{value:"Suitable for representing social networks, product catalogs, or icon collections.",paraId:3,tocIndex:0},{value:"Commonly used in social network graphs, product images, UI design, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            size: 60,\n            src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n          },\n        },\n      ],\n    },\n    node: { type: 'image' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'image' }, 'type').disable();\n\n    const options = {\n      size: 60,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    };\n    const optionFolder = gui.addFolder('image.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'src');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"image",paraId:6,tocIndex:1},{value:" 以使用图片节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"img",paraId:9,tocIndex:2},{value:"Alias for the img attribute",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:"Image source, i.e., image URL string",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2}]},73264:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(97099);const t=[{value:"A rectangle is a geometric shape with four equal sides and defined boundaries.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent modules, components, or containers.",paraId:2,tocIndex:0},{value:"Suitable for representing hierarchies, such as organizational charts, file directory trees.",paraId:3,tocIndex:0},{value:"Commonly used in flowcharts, architecture diagrams, UML diagrams, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'rect' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'rect' }, 'type').disable();\n\n    const options = { 'size[0]': 48, 'size[1]': 24 };\n\n    const optionFolder = gui.addFolder('rect.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"rect",paraId:6,tocIndex:1},{value:" 以使用矩形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},4712:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(49502);const t=[{value:"A star is a polygonal geometric shape with prominent points.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent important nodes, special markers, or decorative elements.",paraId:2,tocIndex:0},{value:"Suitable for representing flowcharts, network diagrams, or topology diagrams.",paraId:3,tocIndex:0},{value:"Commonly used in flowcharts, network diagrams, topology diagrams, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'star' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'star' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      innerR: 0,\n    };\n    const optionFolder = gui.addFolder('star.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerR', 0, 100);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"star",paraId:6,tocIndex:1},{value:" 以使用星形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"innerR",paraId:9,tocIndex:2},{value:"Inner radius, the distance from the star's center to the inner vertex",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Default is 3/8 of the outer radius",paraId:9,tocIndex:2},{value:"Structure Description:",paraId:10,tocIndex:2}]},72061:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21977);const t=[{value:"A triangle is a geometric shape with three sides, having a clear directionality.",paraId:0,tocIndex:0},{value:"Applicable scenarios:",paraId:1,tocIndex:0},{value:"Used to represent directional nodes, warnings, or prompts.",paraId:2,tocIndex:0},{value:"Suitable for indicating direction or hierarchy in flowcharts.",paraId:3,tocIndex:0},{value:"Commonly used in flowcharts, network diagrams, topology diagrams, etc.",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'triangle' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'triangle' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      direction: 'up',\n    };\n    const optionFolder = gui.addFolder('triangle.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'direction', ['up', 'left', 'right', 'down']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"triangle",paraId:6,tocIndex:1},{value:" 以使用三角形节点。",paraId:6,tocIndex:1},{value:"If the element has specific attributes, we will list them below. For all general style attributes, see ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"Attribute",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"direction",paraId:9,tocIndex:2},{value:"Direction of the triangle",paraId:9,tocIndex:2},{value:"up",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"left",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"right",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"down",paraId:9,tocIndex:2},{value:"up",paraId:9,tocIndex:2}]},86799:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(19862);const t=[{value:"G6 provides a series of ",paraId:0},{value:"built-in nodes",paraId:1},{value:", including ",paraId:0},{value:"circle",paraId:2},{value:", ",paraId:0},{value:"diamond",paraId:3},{value:", ",paraId:0},{value:"donut",paraId:4},{value:", ",paraId:0},{value:"ellipse",paraId:5},{value:", ",paraId:0},{value:"hexagon",paraId:6},{value:", ",paraId:0},{value:"html",paraId:7},{value:", ",paraId:0},{value:"image",paraId:8},{value:", ",paraId:0},{value:"rect",paraId:9},{value:", ",paraId:0},{value:"star",paraId:10},{value:", and ",paraId:0},{value:"triangle",paraId:11},{value:". These built-in nodes can meet most basic scene requirements.",paraId:0},{value:"However, in actual projects, you may encounter needs that these basic nodes cannot meet. In this case, you need to create custom nodes. Don't worry, it's simpler than you think!",paraId:12},{value:"In G6, a complete node is usually composed of multiple parts, like building blocks, these parts are combined to form a feature-rich node.",paraId:13,tocIndex:0},{value:"Main components:",paraId:14,tocIndex:0},{value:"key",paraId:15,tocIndex:0},{value:": The main shape of the node, such as basic shapes like rectangles and circles",paraId:15,tocIndex:0},{value:"label",paraId:15,tocIndex:0},{value:": Text label, usually used to display the name or description of the node",paraId:15,tocIndex:0},{value:"icon",paraId:15,tocIndex:0},{value:": Icon, showing the type or status of the node",paraId:15,tocIndex:0},{value:"badge",paraId:15,tocIndex:0},{value:": Badge, a small mark located at the corner of the node",paraId:15,tocIndex:0},{value:"halo",paraId:15,tocIndex:0},{value:": Halo effect displayed around the main shape of the node",paraId:15,tocIndex:0},{value:"port",paraId:15,tocIndex:0},{value:": Connection point, a point where edges can connect",paraId:15,tocIndex:0},{value:"Choose the Right Way",paraId:16,tocIndex:0},{value:"There are mainly two ways to create custom nodes:",paraId:17,tocIndex:1},{value:"Recommended",paraId:18,tocIndex:1},{value:"This is the most common way, you can choose to inherit one of the following types:",paraId:19,tocIndex:2},{value:"BaseNode",paraId:20,tocIndex:2},{value:" - The most basic node class, providing core functions of nodes",paraId:20,tocIndex:2},{value:"Circle",paraId:20,tocIndex:2},{value:" - Circle node",paraId:20,tocIndex:2},{value:"Rect",paraId:20,tocIndex:2},{value:" - Rectangle node",paraId:20,tocIndex:2},{value:"Ellipse",paraId:20,tocIndex:2},{value:" - Ellipse node",paraId:20,tocIndex:2},{value:"Diamond",paraId:20,tocIndex:2},{value:" - Diamond node",paraId:20,tocIndex:2},{value:"Triangle",paraId:20,tocIndex:2},{value:" - Triangle node",paraId:20,tocIndex:2},{value:"Star",paraId:20,tocIndex:2},{value:" - Star node",paraId:20,tocIndex:2},{value:"Image",paraId:20,tocIndex:2},{value:" - Image node",paraId:20,tocIndex:2},{value:"Donut",paraId:20,tocIndex:2},{value:" - Donut node",paraId:20,tocIndex:2},{value:"Hexagon",paraId:20,tocIndex:2},{value:" - Hexagon node",paraId:20,tocIndex:2},{value:"Why choose this way?",paraId:21,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"Less code",paraId:22,tocIndex:2},{value:": Reuse existing node properties and methods, just focus on adding new features",paraId:22,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"Fast development",paraId:22,tocIndex:2},{value:": Suitable for most project needs, quickly achieve business goals",paraId:22,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"Easy to maintain",paraId:22,tocIndex:2},{value:": Clear code structure, clear inheritance relationship",paraId:22,tocIndex:2},{value:"Advanced Usage",paraId:23,tocIndex:2},{value:"If existing node types do not meet the needs, you can create nodes from scratch based on the underlying graphics system of G.",paraId:24,tocIndex:3},{value:"Why choose this way?",paraId:25,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"Maximum freedom",paraId:26,tocIndex:3},{value:": Fully control every detail of the node, achieve any complex effect",paraId:26,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"Special needs",paraId:26,tocIndex:3},{value:": Highly customized scenarios that existing node types cannot meet",paraId:26,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"Performance optimization",paraId:26,tocIndex:3},{value:": Performance optimization for specific scenarios",paraId:26,tocIndex:3},{value:"Custom nodes developed from scratch need to handle all details by themselves, including graphic drawing, event response, state changes, etc., which is more difficult to develop. You can directly refer to the ",paraId:27},{value:"source code",paraId:27},{value:" for implementation.",paraId:27},{value:"Let's start with a simple example - create a ",paraId:28,tocIndex:4},{value:"rectangle node with a main and subtitle",paraId:28,tocIndex:4},{value:":",paraId:28,tocIndex:4},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\n// Step 1: Create a custom node class\nclass DualLabelNode extends Rect {\n  // Subtitle style\n  getSubtitleStyle(attributes) {\n    return {\n      x: 0,\n      y: 45, // Placed below the main title\n      text: attributes.subtitle || '',\n      fontSize: 12,\n      fill: '#666',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    };\n  }\n\n  // Draw subtitle\n  drawSubtitleShape(attributes, container) {\n    const subtitleStyle = this.getSubtitleStyle(attributes);\n    this.upsert('subtitle', 'text', subtitleStyle, container);\n  }\n\n  // Render method\n  render(attributes = this.parsedAttributes, container) {\n    // 1. Render the basic rectangle and main title\n    super.render(attributes, container);\n\n    // 2. Add subtitle\n    this.drawSubtitleShape(attributes, container);\n  }\n}\n\n// Step 2: Register custom node\nregister(ExtensionCategory.NODE, 'dual-label-node', DualLabelNode);\n\n// Step 3: Use custom node\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          title: 'Node A', // Main title\n          subtitle: 'Your first custom node', // Subtitle\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'dual-label-node',\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 5,\n      // Main title style\n      labelText: (d) => d.data.title,\n      labelFill: '#222',\n      labelFontSize: 14,\n      labelFontWeight: 500,\n      // Subtitle\n      subtitle: (d) => d.data.subtitle,\n    },\n  },\n});\n\ngraph.render();\n",paraId:29,tocIndex:4},{value:"Inherit G6's ",paraId:30,tocIndex:5},{value:"Rect",paraId:30,tocIndex:5},{value:" (rectangle node) and add a subtitle:",paraId:30,tocIndex:5},{value:"import { Rect, register, Graph, ExtensionCategory } from '@antv/g6';\n\n// Create custom node, inheriting from Rect\nclass DualLabelNode extends Rect {\n  // Subtitle style\n  getSubtitleStyle(attributes) {\n    return {\n      x: 0,\n      y: 45, // Placed below the main title\n      text: attributes.subtitle || '',\n      fontSize: 12,\n      fill: '#666',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    };\n  }\n\n  // Draw subtitle\n  drawSubtitleShape(attributes, container) {\n    const subtitleStyle = this.getSubtitleStyle(attributes);\n    this.upsert('subtitle', 'text', subtitleStyle, container);\n  }\n\n  // Render method\n  render(attributes = this.parsedAttributes, container) {\n    // 1. Render the basic rectangle and main title\n    super.render(attributes, container);\n\n    // 2. Add subtitle\n    this.drawSubtitleShape(attributes, container);\n  }\n}\n",paraId:31,tocIndex:5},{value:"Use the ",paraId:32,tocIndex:6},{value:"register",paraId:32,tocIndex:6},{value:" method to register the node type so that G6 can recognize your custom node:",paraId:32,tocIndex:6},{value:"register(ExtensionCategory.NODE, 'dual-label-node', DualLabelNode);\n",paraId:33,tocIndex:6},{value:"The ",paraId:34,tocIndex:6},{value:"register",paraId:34,tocIndex:6},{value:" method requires three parameters:",paraId:34,tocIndex:6},{value:"Extension category: ",paraId:35,tocIndex:6},{value:"ExtensionCategory.NODE",paraId:35,tocIndex:6},{value:" indicates this is a node type",paraId:35,tocIndex:6},{value:"Type name: ",paraId:35,tocIndex:6},{value:"dual-label-node",paraId:35,tocIndex:6},{value:" is the name we give to this custom node, which will be used in the configuration later",paraId:35,tocIndex:6},{value:"Class definition: ",paraId:35,tocIndex:6},{value:"DualLabelNode",paraId:35,tocIndex:6},{value:" is the node class we just created",paraId:35,tocIndex:6},{value:"Use the custom node in the graph configuration:",paraId:36,tocIndex:7},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          title: 'Node A', // Main title\n          subtitle: 'Your first custom node', // Subtitle\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'dual-label-node',\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 8,\n      // Main title style\n      labelText: (d) => d.data.title,\n      labelFill: '#222',\n      labelFontSize: 14,\n      labelFontWeight: 500,\n      // Subtitle\n      subtitle: (d) => d.data.subtitle,\n    },\n  },\n});\n\ngraph.render();\n",paraId:37,tocIndex:7},{value:"🎉 Congratulations! You have created your first custom node. It looks simple, but this process contains the core idea of custom nodes: ",paraId:38,tocIndex:7},{value:"inherit a basic node type",paraId:38,tocIndex:7},{value:", then ",paraId:38,tocIndex:7},{value:"override the ",paraId:38,tocIndex:7},{value:"render",paraId:38,tocIndex:7},{value:" method",paraId:38,tocIndex:7},{value:" to add custom content.",paraId:38,tocIndex:7},{value:'Creating custom nodes in G6 is essentially drawing various graphics on the Canvas. We use a series of "atomic graphics" as basic building blocks, like different shapes in Lego blocks.',paraId:39,tocIndex:8},{value:"G6 nodes are drawn using graphic atomic units provided by the ",paraId:40,tocIndex:9},{value:"G Graphics System",paraId:40,tocIndex:9},{value:". Here are common graphic elements and their uses:",paraId:40,tocIndex:9},{value:"Graphic Element",paraId:41,tocIndex:9},{value:"Type",paraId:41,tocIndex:9},{value:"Description",paraId:41,tocIndex:9},{value:"Circle",paraId:41,tocIndex:9},{value:"circle",paraId:41,tocIndex:9},{value:"Suitable for representing states, avatars, circular buttons, etc. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Ellipse",paraId:41,tocIndex:9},{value:"ellipse",paraId:41,tocIndex:9},{value:"Similar to circle, but supports different horizontal and vertical axes. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Image",paraId:41,tocIndex:9},{value:"image",paraId:41,tocIndex:9},{value:"Used to display icons, user avatars, logos, etc. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Line",paraId:41,tocIndex:9},{value:"line",paraId:41,tocIndex:9},{value:"Used for decoration, auxiliary connections, etc. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Path",paraId:41,tocIndex:9},{value:"path",paraId:41,tocIndex:9},{value:"Supports complex graphics such as arrows, arcs, curves, Bezier paths, etc. Paths contain a set of commands and parameters with different semantics, ",paraId:41,tocIndex:9},{value:"usage details",paraId:41,tocIndex:9},{value:"Polygon",paraId:41,tocIndex:9},{value:"polygon",paraId:41,tocIndex:9},{value:"Supports custom graphics such as stars, arrows. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Polyline",paraId:41,tocIndex:9},{value:"polyline",paraId:41,tocIndex:9},{value:"Multi-point polyline, suitable for complex connection structures. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Rectangle",paraId:41,tocIndex:9},{value:"rect",paraId:41,tocIndex:9},{value:"The most commonly used graphic, suitable as a container, card, button, etc. Refer to the SVG ",paraId:41,tocIndex:9},{value:" element",paraId:41,tocIndex:9},{value:"Text",paraId:41,tocIndex:9},{value:"text",paraId:41,tocIndex:9},{value:"Displays names, descriptions, labels, etc. Provides simple single-line/multi-line text layout capabilities, single-line supports horizontal alignment, character spacing; multi-line supports explicit line breaks and automatic line breaks, vertical alignment",paraId:41,tocIndex:9},{value:"For more atomic graphics and detailed properties, please refer to ",paraId:42,tocIndex:9},{value:"Element - Graphics (Optional)",paraId:43,tocIndex:9},{value:"All these graphics can be dynamically created or updated through ",paraId:44,tocIndex:9},{value:"upsert()",paraId:44,tocIndex:9},{value:" and automatically manage graphic states and lifecycles.",paraId:44,tocIndex:9},{value:"Before customizing elements, you need to understand some important properties and methods in the G6 element base class:",paraId:45,tocIndex:10},{value:"Property",paraId:46,tocIndex:11},{value:"Type",paraId:46,tocIndex:11},{value:"Description",paraId:46,tocIndex:11},{value:"shapeMap",paraId:46,tocIndex:11},{value:"Record<string, DisplayObject>",paraId:46,tocIndex:11},{value:"Mapping table of all graphics under the current element",paraId:46,tocIndex:11},{value:"animateMap",paraId:46,tocIndex:11},{value:"Record<string, IAnimation>",paraId:46,tocIndex:11},{value:"Mapping table of all animations under the current element",paraId:46,tocIndex:11},{value:"upsert(name, Ctor, style, container, hooks)",paraId:47},{value:"When creating custom elements, you will frequently use the ",paraId:48,tocIndex:13},{value:"upsert",paraId:48,tocIndex:13},{value:' method. It is an abbreviation for "update or insert", responsible for adding or updating graphics in elements:',paraId:48,tocIndex:13},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:49,tocIndex:13},{value:"Parameter",paraId:50,tocIndex:13},{value:"Type",paraId:50,tocIndex:13},{value:"Description",paraId:50,tocIndex:13},{value:"key",paraId:50,tocIndex:13},{value:"string",paraId:50,tocIndex:13},{value:"The key of the graphic, corresponding to the key in ",paraId:50,tocIndex:13},{value:"shapeMap",paraId:50,tocIndex:13},{value:". Built-in keys include ",paraId:50,tocIndex:13},{value:"'key'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'label'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'halo'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'icon'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'port'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'badge'",paraId:50,tocIndex:13},{value:" The key should not use special symbols, it will be converted to camel case to call ",paraId:50,tocIndex:13},{value:"getXxxStyle",paraId:50,tocIndex:13},{value:" and ",paraId:50,tocIndex:13},{value:"drawXxxShape",paraId:50,tocIndex:13},{value:" methods (see ",paraId:50,tocIndex:13},{value:"Element Conventions",paraId:51,tocIndex:13},{value:")",paraId:50,tocIndex:13},{value:"Ctor",paraId:50,tocIndex:13},{value:"{ new (...args: any[]): DisplayObject }",paraId:50,tocIndex:13},{value:"Graphic class",paraId:50,tocIndex:13},{value:"style",paraId:50,tocIndex:13},{value:"Record<string, any>",paraId:50,tocIndex:13},{value:"Graphic style",paraId:50,tocIndex:13},{value:"container",paraId:50,tocIndex:13},{value:"DisplayObject",paraId:50,tocIndex:13},{value:"Container to mount the graphic",paraId:50,tocIndex:13},{value:"For example, insert a fixed-position purple circle:",paraId:52,tocIndex:13},{value:"this.upsert(\n  'element-key', // Unique identifier of the element\n  'circle', // Graphic type, such as 'rect', 'circle', etc.\n  { x: 100, y: 100, fill: '#a975f3' }, // Style configuration object\n  container, // Parent container\n);\n",paraId:53,tocIndex:13},{value:"Why use ",paraId:54,tocIndex:13},{value:"upsert",paraId:54,tocIndex:13},{value:" instead of directly creating graphics through ",paraId:54,tocIndex:13},{value:"container.appendChild()",paraId:54,tocIndex:13},{value:"? Because:",paraId:54,tocIndex:13},{value:"Better performance",paraId:55,tocIndex:13},{value:": When node states change or data updates, it intelligently reuses existing graphics instead of deleting and recreating, greatly improving rendering performance",paraId:55,tocIndex:13},{value:"Simpler code",paraId:55,tocIndex:13},{value:": No need to manually determine whether the element exists",paraId:55,tocIndex:13},{value:"Easy to manage",paraId:55,tocIndex:13},{value:": All graphics created through ",paraId:55,tocIndex:13},{value:"upsert",paraId:55,tocIndex:13},{value:" will be recorded in the node's ",paraId:55,tocIndex:13},{value:"shapeMap",paraId:55,tocIndex:13},{value:", you can easily get it through ",paraId:55,tocIndex:13},{value:"this.getShape(key)",paraId:55,tocIndex:13},{value:"render(attributes, container)",paraId:47},{value:"Each custom node class must implement the ",paraId:56,tocIndex:14},{value:"render(attributes, container)",paraId:56,tocIndex:14},{value:' method, which defines how the node is "drawn". You can use various atomic graphics here to create the structure you want.',paraId:56,tocIndex:14},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:57,tocIndex:14},{value:"Parameter",paraId:58,tocIndex:14},{value:"Type",paraId:58,tocIndex:14},{value:"Description",paraId:58,tocIndex:14},{value:"style",paraId:58,tocIndex:14},{value:"Record<string, any>",paraId:58,tocIndex:14},{value:"Element style",paraId:58,tocIndex:14},{value:"container",paraId:58,tocIndex:14},{value:"Group",paraId:58,tocIndex:14},{value:"Container",paraId:58,tocIndex:14},{value:"getShape(name)",paraId:47},{value:"Sometimes, you need to modify the properties of a sub-graphic after creation, or have interactions between sub-graphics. At this time, the ",paraId:59,tocIndex:15},{value:"getShape",paraId:59,tocIndex:15},{value:" method can help you get any graphics previously created through ",paraId:59,tocIndex:15},{value:"upsert",paraId:59,tocIndex:15},{value:":",paraId:59,tocIndex:15},{value:"⚠️ Note",paraId:60,tocIndex:15},{value:": The order of graphics is important, if graphic B depends on the position of graphic A, A must be created first",paraId:60,tocIndex:15},{value:"Use Convention Properties",paraId:61,tocIndex:16},{value:"Currently, the convention element properties include:",paraId:62,tocIndex:16},{value:"Get the size of the element through ",paraId:63,tocIndex:16},{value:"this.getSize()",paraId:63,tocIndex:16},{value:"Use ",paraId:64,tocIndex:16},{value:"getXxxStyle",paraId:64,tocIndex:16},{value:" and ",paraId:64,tocIndex:16},{value:"drawXxxShape",paraId:64,tocIndex:16},{value:" pairing to draw graphics",paraId:64,tocIndex:16},{value:"getXxxStyle",paraId:65,tocIndex:16},{value:" is used to get the graphic style, and ",paraId:65,tocIndex:16},{value:"drawXxxShape",paraId:65,tocIndex:16},{value:" is used to draw the graphic. Graphics created in this way support automatic animation execution.",paraId:65,tocIndex:16},{value:"Where ",paraId:66,tocIndex:16},{value:"Xxx",paraId:66,tocIndex:16},{value:" is the camel case form of the key passed when calling the ",paraId:66,tocIndex:16},{value:"upsert",paraId:67,tocIndex:16},{value:" method.",paraId:66,tocIndex:16},{value:"Access Graph Context through ",paraId:68,tocIndex:16},{value:"this.context",paraId:68,tocIndex:16},{value:"The following lifecycle hook functions are provided, you can override these methods in custom nodes to execute specific logic at key moments:",paraId:69,tocIndex:17},{value:"Hook Function",paraId:70,tocIndex:17},{value:"Trigger Timing",paraId:70,tocIndex:17},{value:"Typical Use",paraId:70,tocIndex:17},{value:"onCreate",paraId:70,tocIndex:17},{value:"After the node is created and the entrance animation is completed",paraId:70,tocIndex:17},{value:"Bind interaction events, initialize node states, add external listeners",paraId:70,tocIndex:17},{value:"onUpdate",paraId:70,tocIndex:17},{value:"After the node is updated and the update animation is completed",paraId:70,tocIndex:17},{value:"Update dependent data, adjust related elements, trigger linkage effects",paraId:70,tocIndex:17},{value:"onDestroy",paraId:70,tocIndex:17},{value:"After the node is destroyed and the exit animation is completed",paraId:70,tocIndex:17},{value:"Clean up resources, remove external listeners, execute destruction notifications",paraId:70,tocIndex:17},{value:"The most powerful point in the design of G6 elements is the ability to separate ",paraId:71,tocIndex:18},{value:'"state response"',paraId:71,tocIndex:18},{value:" from ",paraId:71,tocIndex:18},{value:'"drawing logic"',paraId:71,tocIndex:18},{value:".",paraId:71,tocIndex:18},{value:"You can define styles for each state in the node configuration:",paraId:72,tocIndex:18},{value:"node: {\n  type: 'custom-node',\n  style: { fill: '#fff' },\n  state: {\n    selected: {\n      fill: '#f00',\n    },\n    hover: {\n      lineWidth: 3,\n      stroke: '#1890ff',\n    },\n  },\n}\n",paraId:73,tocIndex:18},{value:"Method to switch states:",paraId:74,tocIndex:18},{value:"graph.setElementState(nodeId, ['selected']);\n",paraId:75,tocIndex:18},{value:"This state will be passed into the ",paraId:76,tocIndex:18},{value:"render()",paraId:76,tocIndex:18},{value:" method's ",paraId:76,tocIndex:18},{value:"attributes",paraId:76,tocIndex:18},{value:", and the result merged by the internal system will be automatically applied to the graphics.",paraId:76,tocIndex:18},{value:"You can also customize the rendering logic based on the state:",paraId:77,tocIndex:18},{value:"protected getKeyStyle(attributes: Required<BaseNodeStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // Adjust style based on state\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:78,tocIndex:18},{value:"Let's gradually increase the complexity and functionality of nodes through practical examples.",paraId:79,tocIndex:19},{value:"Place an icon and label text in the upper left corner of the node.",paraId:80,tocIndex:20},{value:"👇 Step Description:",paraId:81,tocIndex:20},{value:"Inherit Rect node",paraId:82,tocIndex:20},{value:"Add icon (image)",paraId:82,tocIndex:20},{value:"Add label (text)",paraId:82,tocIndex:20},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nclass IconNode extends Rect {\n  get data() {\n    return this.context.graph.getNodeData(this.id).data;\n  }\n\n  getCustomIconStyle(attributes) {\n    const [width, height] = this.getSize(attributes);\n    const { icon } = this.data;\n    return {\n      x: -width / 2 + 4, // 15px from the left\n      y: -height / 2 + 4,\n      width: 20,\n      height: 20,\n      src: icon,\n    };\n  }\n\n  drawCustomIconShape(attributes, container) {\n    const iconStyle = this.getCustomIconStyle(attributes);\n\n    this.upsert('custom-icon', 'image', iconStyle, container);\n  }\n\n  getCustomLabelStyle(attributes) {\n    const [width, height] = this.getSize(attributes);\n    const { label } = this.data;\n    return {\n      x: -width / 2 + 26, // 10px to the right of the icon\n      y: -height / 2 + 14,\n      text: label || '',\n      fontSize: 10,\n      fill: '#333',\n      textAlign: 'left',\n      textBaseline: 'middle',\n    };\n  }\n\n  drawCustomLabelShape(attributes, container) {\n    const labelStyle = this.getCustomLabelStyle(attributes);\n\n    this.upsert('custom-label', 'text', labelStyle, container);\n  }\n\n  render(attributes, container) {\n    // Render basic rectangle\n    super.render(attributes, container);\n\n    // Add icon\n    this.drawCustomIconShape(attributes, container);\n\n    // Add label (to the right of the icon)\n    this.drawCustomLabelShape(attributes, container);\n  }\n}\n\nregister(ExtensionCategory.NODE, 'custom-icon-node', IconNode);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          icon: 'https://gw.alipayobjects.com/zos/antfincdn/FLrTNDvlna/antv.png',\n          label: 'AntV',\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'custom-icon-node',\n    style: {\n      size: [120, 60],\n      fill: '#fff',\n      stroke: '#873bf4',\n      lineWidth: 2,\n      radius: 2,\n      labelText: 'G6',\n      labelPlacement: 'middle',\n      labelFontSize: 16,\n      labelOffsetY: 6,\n    },\n  },\n});\n\ngraph.render();\n",paraId:83,tocIndex:20},{value:"Add a blue button to the node, which triggers an event (logs or executes a callback) when clicked.",paraId:84,tocIndex:21},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nclass ClickableNode extends Rect {\n  getButtonStyle(attributes) {\n    return {\n      x: 40,\n      y: -10,\n      width: 20,\n      height: 20,\n      radius: 10,\n      fill: '#1890ff',\n      cursor: 'pointer', // Mouse pointer becomes a hand\n    };\n  }\n\n  drawButtonShape(attributes, container) {\n    const btnStyle = this.getButtonStyle(attributes, container);\n    const btn = this.upsert('button', 'rect', btnStyle, container);\n\n    // Add click event to the button\n    if (!btn.__clickBound) {\n      btn.addEventListener('click', (e) => {\n        // Prevent event bubbling to avoid triggering the node's click event\n        e.stopPropagation();\n\n        // Execute business logic\n        console.log('Button clicked on node:', this.id);\n\n        // If there is a callback function in the data, call it\n        if (typeof attributes.onButtonClick === 'function') {\n          attributes.onButtonClick(this.id, this.data);\n        }\n      });\n      btn.__clickBound = true; // Mark event as bound to avoid duplicate binding\n    }\n  }\n\n  render(attributes, container) {\n    super.render(attributes, container);\n\n    // Add a button\n    this.drawButtonShape(attributes, container);\n  }\n}\n\nregister(ExtensionCategory.NODE, 'clickable-node', ClickableNode);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n      },\n    ],\n  },\n  node: {\n    type: 'clickable-node', // Specify using our custom node\n    style: {\n      size: [60, 30],\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 5,\n      onButtonClick: (id, data) => {},\n    },\n  },\n});\n\ngraph.render();\n",paraId:85,tocIndex:21},{value:"Common interactions require nodes and edges to provide feedback through style changes, such as moving the mouse over a node, clicking to select a node/edge, activating interactions on the edge, etc., all require changing the style of nodes and edges. There are two ways to achieve this effect:",paraId:86,tocIndex:22},{value:"Get the current state from ",paraId:87,tocIndex:22},{value:"data.states",paraId:87,tocIndex:22},{value:" and handle state changes in the custom node class;",paraId:87,tocIndex:22},{value:"Separate interaction states from the original data and drawing node logic, only updating the node.",paraId:87,tocIndex:22},{value:"We recommend users use the second method to achieve node state adjustment, which can be achieved in the following way:",paraId:88,tocIndex:22},{value:"Implement custom nodes;",paraId:89,tocIndex:22},{value:"Configure node state styles in the graph configuration;",paraId:89,tocIndex:22},{value:"Use the ",paraId:89,tocIndex:22},{value:"graph.setElementState()",paraId:89,tocIndex:22},{value:" method to set node states.",paraId:89,tocIndex:22},{value:"Extend a hole graphic based on rect, with a default fill color of white, which turns orange when clicked. The sample code to achieve this effect is as follows:",paraId:90,tocIndex:22},{value:"import { Rect, register, Graph, ExtensionCategory } from '@antv/g6';\n\n// 1. Define node class\nclass SelectableNode extends Rect {\n  getHoleStyle(attributes) {\n    return {\n      x: 20,\n      y: -10,\n      radius: 10,\n      width: 20,\n      height: 20,\n      fill: attributes.holeFill,\n    };\n  }\n\n  drawHoleShape(attributes, container) {\n    const holeStyle = this.getHoleStyle(attributes, container);\n\n    this.upsert('hole', 'rect', holeStyle, container);\n  }\n\n  render(attributes, container) {\n    super.render(attributes, container);\n\n    this.drawHoleShape(attributes, container);\n  }\n}\n\n// 2. Register node\nregister(ExtensionCategory.NODE, 'selectable-node', SelectableNode, true);\n\n// 3. Create graph instance\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  },\n  node: {\n    type: 'selectable-node',\n    style: {\n      size: [120, 60],\n      radius: 6,\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      holeFill: '#fff',\n    },\n    state: {\n      // Mouse selected state\n      selected: {\n        holeFill: 'orange',\n      },\n    },\n  },\n});\n\n// 4. Add node interaction\ngraph.on('node:click', (evt) => {\n  const nodeId = evt.target.id;\n\n  graph.setElementState(nodeId, ['selected']);\n});\n\ngraph.render();\n",paraId:91,tocIndex:22}]},98587:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(30411);const t=[{value:"A node is one of the basic elements in a graph, representing an entity or an abstract concept, such as a person, a place, an organization, etc. Nodes can contain attributes like ID, name, type, etc. In G6, nodes can have various shapes and styles, and support rich interactions and customization.",paraId:0,tocIndex:0},{value:"You can create any number of nodes in a graph and connect them with edges to represent relationships.",paraId:1,tocIndex:0},{value:"The G6 node system includes three main categories: built-in nodes, extended nodes, and custom nodes. ",paraId:2,tocIndex:1},{value:"In most cases, built-in nodes are sufficient.",paraId:2,tocIndex:1},{value:"G6 provides a variety of built-in node types, ",paraId:3,tocIndex:2},{value:"which can be used directly without registration",paraId:3,tocIndex:2},{value:":",paraId:3,tocIndex:2},{value:"Node Type",paraId:4,tocIndex:2},{value:"Registration Name",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Circle Node",paraId:4,tocIndex:2},{value:"circle",paraId:4,tocIndex:2},{value:"Commonly used for entities",paraId:4,tocIndex:2},{value:"Rectangle Node",paraId:4,tocIndex:2},{value:"rect",paraId:4,tocIndex:2},{value:"Suitable for more text and details",paraId:4,tocIndex:2},{value:"Ellipse Node",paraId:4,tocIndex:2},{value:"ellipse",paraId:4,tocIndex:2},{value:"A variant of the circle",paraId:4,tocIndex:2},{value:"Diamond Node",paraId:4,tocIndex:2},{value:"diamond",paraId:4,tocIndex:2},{value:"Often used for decision points or special nodes",paraId:4,tocIndex:2},{value:"Triangle Node",paraId:4,tocIndex:2},{value:"triangle",paraId:4,tocIndex:2},{value:"Can indicate direction or special marks",paraId:4,tocIndex:2},{value:"Hexagon Node",paraId:4,tocIndex:2},{value:"hexagon",paraId:4,tocIndex:2},{value:"Suitable for grid layouts and honeycomb charts",paraId:4,tocIndex:2},{value:"Star Node",paraId:4,tocIndex:2},{value:"star",paraId:4,tocIndex:2},{value:"Highlights important nodes",paraId:4,tocIndex:2},{value:"Donut Node",paraId:4,tocIndex:2},{value:"donut",paraId:4,tocIndex:2},{value:"Can display proportions or progress",paraId:4,tocIndex:2},{value:"Image Node",paraId:4,tocIndex:2},{value:"image",paraId:4,tocIndex:2},{value:"Uses an image as the node body",paraId:4,tocIndex:2},{value:"HTML Node",paraId:4,tocIndex:2},{value:"html",paraId:4,tocIndex:2},{value:"Supports custom HTML content",paraId:4,tocIndex:2},{value:"@antv/g6-extension-3d",paraId:5,tocIndex:3},{value:" provides 3D nodes:",paraId:5,tocIndex:3},{value:"Capsule",paraId:6,tocIndex:3},{value:" - Capsule-shaped node",paraId:6,tocIndex:3},{value:"Cone",paraId:6,tocIndex:3},{value:" - Cone-shaped node",paraId:6,tocIndex:3},{value:"Cube",paraId:6,tocIndex:3},{value:" - Cube-shaped node",paraId:6,tocIndex:3},{value:"Cylinder",paraId:6,tocIndex:3},{value:" - Cylinder-shaped node",paraId:6,tocIndex:3},{value:"Plane",paraId:6,tocIndex:3},{value:" - Plane node",paraId:6,tocIndex:3},{value:"Sphere",paraId:6,tocIndex:3},{value:" - Sphere node",paraId:6,tocIndex:3},{value:"Torus",paraId:6,tocIndex:3},{value:" - Torus node",paraId:6,tocIndex:3},{value:"@antv/g6-extension-react",paraId:7,tocIndex:4},{value:" provides React nodes, supporting the use of React components as the node body. For detailed tutorials, please refer to the ",paraId:7,tocIndex:4},{value:"Using React to Define Nodes",paraId:8,tocIndex:4},{value:" document.",paraId:7,tocIndex:4},{value:"When built-in and extended nodes cannot meet the requirements, G6 offers powerful customization capabilities:",paraId:9,tocIndex:5},{value:"Extend built-in nodes",paraId:10,tocIndex:5},{value:"Create entirely new node types",paraId:10,tocIndex:5},{value:"Unlike built-in nodes, ",paraId:11,tocIndex:5},{value:"custom nodes need to be registered before use",paraId:11,tocIndex:5},{value:". For detailed tutorials, please refer to the ",paraId:11,tocIndex:5},{value:"Custom Nodes",paraId:12,tocIndex:5},{value:" document.",paraId:11,tocIndex:5},{value:"When defining nodes, you need to add a ",paraId:13,tocIndex:6},{value:"nodes",paraId:13,tocIndex:6},{value:" field to the graph's data object. Each node is an object with the following structure:",paraId:13,tocIndex:6},{value:"Property",paraId:14,tocIndex:6},{value:"Description",paraId:14,tocIndex:6},{value:"Type",paraId:14,tocIndex:6},{value:"Default",paraId:14,tocIndex:6},{value:"Required",paraId:14,tocIndex:6},{value:"id",paraId:14,tocIndex:6},{value:"Unique identifier for the node, used to distinguish different nodes",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"type",paraId:14,tocIndex:6},{value:"Node type, either a built-in node type name or a custom node name",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"data",paraId:14,tocIndex:6},{value:"Node data, used to store custom data such as the node's name, description, etc. Can be accessed via callback functions in style mapping",paraId:14,tocIndex:6},{value:"object",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"style",paraId:14,tocIndex:6},{value:"Node style, including visual attributes like position, size, color, etc.",paraId:14,tocIndex:6},{value:"object",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"states",paraId:14,tocIndex:6},{value:"Initial states of the node, such as selected, active, hover, etc.",paraId:14,tocIndex:6},{value:"string[]",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"combo",paraId:14,tocIndex:6},{value:"The ID of the combo to which the node belongs, used to organize hierarchical relationships. If none, it is null",paraId:14,tocIndex:6},{value:"string | null",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"children",paraId:14,tocIndex:6},{value:"Collection of child node IDs, used only in tree graph scenarios",paraId:14,tocIndex:6},{value:"string[]",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"An example of a data item in the ",paraId:15,tocIndex:6},{value:"nodes",paraId:15,tocIndex:6},{value:" array:",paraId:15,tocIndex:6},{value:'{\n  "id": "node-1",\n  "type": "circle",\n  "data": { "name": "alice", "role": "Admin" },\n  "style": { "x": 100, "y": 200, "size": 32, "fill": "violet" },\n  "states": ["selected"],\n  "combo": null\n}\n',paraId:16,tocIndex:6},{value:"There are three ways to configure nodes, listed in order of priority from high to low:",paraId:17,tocIndex:7},{value:"Use ",paraId:18,tocIndex:7},{value:"graph.setNode()",paraId:18,tocIndex:7},{value:" for dynamic configuration",paraId:18,tocIndex:7},{value:"Global configuration during graph instantiation",paraId:18,tocIndex:7},{value:"Dynamic properties in data",paraId:18,tocIndex:7},{value:"These configuration methods can be used simultaneously. When there are identical configuration items, the method with higher priority will override the one with lower priority.",paraId:19,tocIndex:7},{value:"graph.setNode()",paraId:20},{value:"After creating the graph instance, you can use ",paraId:21,tocIndex:8},{value:"graph.setNode()",paraId:21,tocIndex:8},{value:" to dynamically set the node's style mapping logic.",paraId:21,tocIndex:8},{value:"This method must be called before ",paraId:22,tocIndex:8},{value:"graph.render()",paraId:22,tocIndex:8},{value:" to take effect and has the highest priority.",paraId:22,tocIndex:8},{value:"graph.setNode({\n  style: {\n    type: 'circle',\n    style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:23,tocIndex:8},{value:"When instantiating the graph, you can configure node style mapping through ",paraId:24,tocIndex:9},{value:"node",paraId:24,tocIndex:9},{value:", which is a global configuration and will apply to all nodes.",paraId:24,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  node: {\n    type: 'circle',\n    style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:25,tocIndex:9},{value:"If you need different configurations for different nodes, you can write the configuration into the node data. This configuration method can be directly written into the data in the following form:",paraId:26,tocIndex:10},{value:"const data = {\n  nodes: [\n    {\n      id: 'node-1',\n      type: 'circle',\n      style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n    },\n  ],\n};\n",paraId:27,tocIndex:10},{value:"If you want the configuration in the data to have a higher priority than the global configuration, you can do so as follows:",paraId:28,tocIndex:11},{value:"const data = {\n  nodes: [\n    {\n      id: 'node-1',\n      type: 'circle',\n      style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  node: {\n    type: 'circle',\n    style: {\n      stroke: (d) => d.style.stroke || '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n});\n",paraId:29,tocIndex:11},{value:"G6 supports dynamically updating the style and state of nodes at runtime:",paraId:30,tocIndex:12},{value:"// Update the style of a single node\ngraph.updateNodeData([\n  {\n    id: 'node-1',\n    style: {\n      fill: 'red',\n      size: 80,\n    },\n  },\n]);\ngraph.draw();\n\n// Set node state\ngraph.setElementState('node-1', ['selected']);\n",paraId:31,tocIndex:12},{value:"When updating nodes, only the specified attributes will be updated, and unspecified attributes will remain unchanged.",paraId:32},{value:"For more node-related APIs, please refer to ",paraId:33},{value:"API - Element Operations",paraId:34},{value:".",paraId:33},{value:"Nodes can have different states, such as selected, highlighted, disabled, etc. You can define the display effect of nodes in different states by configuring state styles:",paraId:35,tocIndex:13},{value:"const graph = new Graph({\n  node: {\n    style: {\n      // Default style\n      fill: '#C6E5FF',\n    },\n    // State styles\n    state: {\n      selected: {\n        fill: '#ffa940',\n        stroke: '#ff7a00',\n        haloStroke: '#ff7a00',\n      },\n      highlight: {\n        stroke: '#1890ff',\n        lineWidth: 3,\n      },\n    },\n  },\n});\n",paraId:36,tocIndex:13},{value:"The state system is the foundation for implementing node interaction effects. For more information on states, please refer to ",paraId:37,tocIndex:13},{value:"Element States",paraId:38,tocIndex:13},{value:".",paraId:37,tocIndex:13}]},61841:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83749);const t=[{value:"In G6, custom nodes typically require manipulating DOM or Canvas elements, but with the help of the ",paraId:0},{value:"@antv/g6-extension-react",paraId:0},{value:" ecosystem library, you can directly use React components as node content, enhancing development efficiency and maintainability.",paraId:0},{value:"✅ ",paraId:1,tocIndex:1},{value:"Recommended Scenarios:",paraId:1,tocIndex:1},{value:"Nodes are simple geometric shapes",paraId:2,tocIndex:1},{value:"Scenarios requiring efficient rendering of more than 2,000 nodes",paraId:2,tocIndex:1},{value:"Need to directly manipulate graphic instances for fine control",paraId:2,tocIndex:1},{value:"For detailed information on how to customize nodes using Canvas graphics, please refer to the ",paraId:3,tocIndex:1},{value:"Custom Node",paraId:4,tocIndex:1},{value:" documentation",paraId:3,tocIndex:1},{value:"✅ ",paraId:5,tocIndex:2},{value:"Recommended Scenarios:",paraId:5,tocIndex:2},{value:"Business systems that need to integrate UI libraries like Ant Design",paraId:6,tocIndex:2},{value:"Nodes contain interactive logic such as form input, state switching",paraId:6,tocIndex:2},{value:"Scenarios where an existing React design system needs to be reused",paraId:6,tocIndex:2},{value:"Before starting, please ensure you have:",paraId:7,tocIndex:4},{value:"Installed a React project",paraId:8,tocIndex:4},{value:": Ensure a React project is installed and created.",paraId:8,tocIndex:4},{value:"React version requirement",paraId:8,tocIndex:4},{value:": Ensure the React version used is >=16.8.0.",paraId:8,tocIndex:4},{value:"To use ",paraId:9,tocIndex:5},{value:"@antv/g6-extension-react",paraId:9,tocIndex:5},{value:", run the following command:",paraId:9,tocIndex:5},{value:"npm install @antv/g6-extension-react\n",paraId:10},{value:"yarn add @antv/g6-extension-react\n",paraId:11},{value:"pnpm add @antv/g6-extension-react\n",paraId:12},{value:"Register the React node type through the extension mechanism:",paraId:13,tocIndex:7},{value:"import { ExtensionCategory, register } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n",paraId:14,tocIndex:7},{value:"The ",paraId:15,tocIndex:7},{value:"register",paraId:15,tocIndex:7},{value:" method requires three parameters:",paraId:15,tocIndex:7},{value:"Extension category: ",paraId:16,tocIndex:7},{value:"ExtensionCategory.NODE",paraId:16,tocIndex:7},{value:" indicates this is a node type",paraId:16,tocIndex:7},{value:"Type name: ",paraId:16,tocIndex:7},{value:"react-node",paraId:16,tocIndex:7},{value:" is the name we give to this custom node, which will be used in the configuration later",paraId:16,tocIndex:7},{value:"Class definition: ReactNode is the implementation class exported by ",paraId:16,tocIndex:7},{value:"@antv/g6-extension-react",paraId:16,tocIndex:7},{value:"Define a simple React component as the content of the node:",paraId:17,tocIndex:8},{value:"const MyReactNode = () => {\n  return <div>node</div>;\n};\n",paraId:18,tocIndex:8},{value:"Use the custom React node in the graph configuration. Specify the node type and style in the graph configuration to use the custom React component.",paraId:19,tocIndex:9},{value:"type",paraId:20,tocIndex:9},{value:": Specify the node type as ",paraId:20,tocIndex:9},{value:"react-node",paraId:20,tocIndex:9},{value:" (use the name given during registration)",paraId:20,tocIndex:9},{value:"style.component",paraId:20,tocIndex:9},{value:": Define the React component content of the node",paraId:20,tocIndex:9},{value:"const graph = new Graph({\n  node: {\n    type: 'react-node',\n    style: {\n      component: () => <MyReactNode />,\n    },\n  },\n});\n\ngraph.render();\n",paraId:21,tocIndex:9},{value:"In complex graph visualization scenarios, nodes need to dynamically respond to interaction states. We provide two complementary state management solutions:",paraId:22,tocIndex:11},{value:"G6 provides built-in interaction state management states, such as ",paraId:23,tocIndex:12},{value:"hover-activate",paraId:23,tocIndex:12},{value:" and ",paraId:23,tocIndex:12},{value:"click-select",paraId:23,tocIndex:12},{value:". You can get the current node state through the ",paraId:23,tocIndex:12},{value:"data.states",paraId:23,tocIndex:12},{value:" field in the node data and adjust the node style based on the state.",paraId:23,tocIndex:12},{value:"Example",paraId:24,tocIndex:12},{value:": Change the background color when the node is hovered.",paraId:24,tocIndex:12},{value:"import { ExtensionCategory, register, Graph } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n\nconst StatefulNode = ({ data }) => {\n  const isActive = data.states?.includes('active');\n\n  return (\n    <div\n      style={{\n        width: 100,\n        padding: 5,\n        border: '1px solid #eee',\n        boxShadow: isActive ? '0 0 8px rgba(24,144,255,0.8)' : 'none',\n        transform: `scale(${isActive ? 1.05 : 1})`,\n      }}\n    >\n      {data.data.label}\n    </div>\n  );\n};\n\nconst graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 200 }, data: { label: 'node1' } },\n      { id: 'node2', style: { x: 300, y: 200 }, data: { label: 'node2' } },\n    ],\n  },\n  node: {\n    type: 'react-node',\n    style: {\n      component: (data) => <StatefulNode data={data} />,\n    },\n  },\n  behaviors: ['hover-activate'],\n});\n\ngraph.render();\n",paraId:25,tocIndex:12},{value:"When you need to manage business-related states (such as approval status, risk level), you can extend node data to achieve this:",paraId:26,tocIndex:13},{value:"Example",paraId:27,tocIndex:13},{value:": Add a ",paraId:27,tocIndex:13},{value:"selected",paraId:27,tocIndex:13},{value:" variable through data to achieve style changes for node selection and deselection.",paraId:27,tocIndex:13},{value:"import { ExtensionCategory, register, Graph } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n\nconst MyReactNode = ({ data, graph }) => {\n  const handleClick = () => {\n    graph.updateNodeData([{ id: data.id, data: { selected: !data.data.selected } }]);\n    graph.draw();\n  };\n\n  return (\n    <div\n      style={{\n        width: 200,\n        padding: 10,\n        border: '1px solid red',\n        borderColor: data.data.selected ? 'orange' : '#ddd', // Set border color based on selection state\n        cursor: 'pointer', // Add mouse pointer style\n      }}\n      onClick={handleClick}\n    >\n      Node\n    </div>\n  );\n};\n\nconst graph = new Graph({\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: { selected: true },\n      },\n    ],\n  },\n  node: {\n    type: 'react-node',\n    style: {\n      component: (data) => <MyReactNode data={data} graph={graph} />,\n    },\n  },\n});\n\ngraph.render();\n",paraId:28,tocIndex:13},{value:"Achieve two-way communication between nodes and graph instances, allowing nodes and graph instances to update each other.",paraId:29,tocIndex:14},{value:"Example",paraId:30,tocIndex:14},{value:": Operate graph data through custom nodes and re-render the graph.",paraId:30,tocIndex:14},{value:"const IDCardNode = ({ id, selected, graph }) => {\n  const handleSelect = () => {\n    graph.updateNodeData([{ id, data: { selected: true } }]);\n    graph.draw();\n  };\n\n  return <Select onChange={handleSelect} style={{ background: selected ? 'orange' : '#eee' }} />;\n};\n\nconst graph = new Graph({\n  node: {\n    type: 'react-node',\n    style: {\n      component: ({ id, data }) => <IDCardNode id={id} selected={data.selected} graph={graph} />,\n    },\n  },\n});\n",paraId:31,tocIndex:14}]},90855:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(49465);const t=[{value:"The core of G6 charts is composed of three basic elements: ",paraId:0,tocIndex:0},{value:"Node",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"Edge",paraId:0,tocIndex:0},{value:", and ",paraId:0,tocIndex:0},{value:"Combo",paraId:0,tocIndex:0},{value:". These elements are the fundamental units for building complex graphical networks.",paraId:0,tocIndex:0},{value:"Nodes",paraId:1,tocIndex:1},{value:" represent entities or concepts in the graph, such as people, places, objects, etc. G6 provides a rich set of built-in node types:",paraId:2,tocIndex:1},{value:"G6 also supports ",paraId:3,tocIndex:1},{value:"defining nodes using React",paraId:4,tocIndex:1},{value:" or ",paraId:3,tocIndex:1},{value:"custom nodes",paraId:5,tocIndex:1},{value:" to meet specific needs.",paraId:3,tocIndex:1},{value:"Edges",paraId:6,tocIndex:2},{value:" represent the connections between nodes, such as friendships, transactions, etc. G6 has multiple built-in edge types:",paraId:7,tocIndex:2},{value:"When built-in edges do not meet the requirements, complex connection expressions can be achieved through ",paraId:8,tocIndex:2},{value:"custom edges",paraId:9,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"Combos",paraId:10,tocIndex:3},{value:" are special elements that can contain nodes and other combos, used to represent collections, groups, or hierarchical relationships. G6 has two built-in combo types:",paraId:11,tocIndex:3},{value:"Circle Combo",paraId:12,tocIndex:3},{value:"(",paraId:12,tocIndex:3},{value:"circle",paraId:12,tocIndex:3},{value:"): Suitable for compact grouping",paraId:12,tocIndex:3},{value:"Rectangle Combo",paraId:12,tocIndex:3},{value:"(",paraId:12,tocIndex:3},{value:"rect",paraId:12,tocIndex:3},{value:"): Suitable for regular layout grouping",paraId:12,tocIndex:3},{value:"Combos support nesting, dragging, expanding/collapsing, and other interactions, and more complex container behaviors can be achieved through ",paraId:13,tocIndex:3},{value:"custom combos",paraId:14,tocIndex:3},{value:".",paraId:13,tocIndex:3},{value:"Each element is composed of one or more basic shapes. Shapes are the smallest graphical units in G6, including ",paraId:15,tocIndex:4},{value:"rectangle",paraId:16,tocIndex:4},{value:", ",paraId:15,tocIndex:4},{value:"circle",paraId:17,tocIndex:4},{value:", ",paraId:15,tocIndex:4},{value:"text",paraId:18,tocIndex:4},{value:", ",paraId:15,tocIndex:4},{value:"path",paraId:19,tocIndex:4},{value:", etc.",paraId:15,tocIndex:4},{value:"For example:",paraId:20,tocIndex:4},{value:"A node may consist of a background shape (such as a circle) and a text label",paraId:21,tocIndex:4},{value:"An edge may consist of a path, arrow, and text label",paraId:21,tocIndex:4},{value:"A combo may consist of a container shape, title text, and expand/collapse button",paraId:21,tocIndex:4},{value:"For more information about shapes, see ",paraId:22,tocIndex:4},{value:"Shape Overview",paraId:23,tocIndex:4},{value:" and ",paraId:22,tocIndex:4},{value:"Shape Style Properties",paraId:24,tocIndex:4},{value:".",paraId:22,tocIndex:4},{value:"Element State",paraId:25,tocIndex:5},{value:" is a powerful mechanism for displaying visual changes of elements in different interactions or business scenarios. G6 provides a complete state management system:",paraId:26,tocIndex:5},{value:"Preset States",paraId:27,tocIndex:5},{value:": ",paraId:27,tocIndex:5},{value:"selected",paraId:27,tocIndex:5},{value:", ",paraId:27,tocIndex:5},{value:"highlight",paraId:27,tocIndex:5},{value:", ",paraId:27,tocIndex:5},{value:"active",paraId:27,tocIndex:5},{value:", etc.",paraId:27,tocIndex:5},{value:"State Overlay",paraId:27,tocIndex:5},{value:": Elements can have multiple states simultaneously, with styles overlaying according to priority",paraId:27,tocIndex:5},{value:"Custom States",paraId:27,tocIndex:5},{value:": Any state can be defined according to business needs",paraId:27,tocIndex:5},{value:"G6 5.x adopts a flat configuration structure, where all element configurations are at the same level, making it easy to find and manage:",paraId:28,tocIndex:6},{value:"{\n  node: {\n    // Default node style\n    style: {\n      fill: 'orange',\n      labelText: 'node',\n    },\n    // Node styles in different states\n    state: {\n      selected: {\n        stroke: '#1890FF',\n        lineWidth: 2,\n      }\n    }\n  },\n  edge: {\n    // Default edge style\n    style: {\n      stroke: '#aaa',\n    },\n    // Edge styles in different states\n    state: {\n      highlight: {\n        stroke: 'red',\n      }\n    }\n  },\n  combo: {\n    // Default combo style\n    style: {\n      fill: 'lightblue',\n      stroke: 'blue',\n    }\n  }\n};\n",paraId:29,tocIndex:6},{value:"There are three configuration methods, in order of priority from high to low:",paraId:30,tocIndex:6},{value:"Dynamic configuration using instance methods",paraId:31,tocIndex:6},{value:": such as ",paraId:31,tocIndex:6},{value:"graph.setNode()",paraId:31,tocIndex:6},{value:", ",paraId:31,tocIndex:6},{value:"graph.setEdge()",paraId:31,tocIndex:6},{value:", ",paraId:31,tocIndex:6},{value:"graph.setCombo()",paraId:31,tocIndex:6},{value:"Global configuration when instantiating the graph",paraId:31,tocIndex:6},{value:": specify configuration items in ",paraId:31,tocIndex:6},{value:"new Graph()",paraId:31,tocIndex:6},{value:"Configuration in data",paraId:31,tocIndex:6},{value:": set in the data objects of nodes, edges, and combos",paraId:31,tocIndex:6},{value:"In editors like VSCode, you can see all configurable properties of elements and search based on keywords:",paraId:32,tocIndex:6},{value:"G6 provides powerful extension capabilities to meet various customization needs:",paraId:33,tocIndex:7},{value:"Custom Nodes",paraId:34,tocIndex:7},{value:": ",paraId:34,tocIndex:7},{value:"Custom Node Guide",paraId:35,tocIndex:7},{value:"Custom Edges",paraId:34,tocIndex:7},{value:": ",paraId:34,tocIndex:7},{value:"Custom Edge Guide",paraId:36,tocIndex:7},{value:"Custom Combos",paraId:34,tocIndex:7},{value:": ",paraId:34,tocIndex:7},{value:"Custom Combo Guide",paraId:37,tocIndex:7},{value:"React Nodes",paraId:34,tocIndex:7},{value:": ",paraId:34,tocIndex:7},{value:"Define Nodes Using React",paraId:38,tocIndex:7},{value:"3D Extension",paraId:34,tocIndex:7},{value:": Use 3D nodes through ",paraId:34,tocIndex:7},{value:"@antv/g6-extension-3d",paraId:34,tocIndex:7},{value:"Built-in Node Library",paraId:39,tocIndex:9},{value:"Built-in Edge Library",paraId:40,tocIndex:10},{value:"Built-in Combo Library",paraId:41,tocIndex:11}]},37072:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83873);const t=[{value:"G6 provides a flexible Shape mechanism, allowing developers to customize various graphics and efficiently reuse them in elements such as nodes, edges, and combos. This article uses Label as an example to explain how to customize a Shape and how to apply it in elements.",paraId:0},{value:"All Shapes inherit from ",paraId:1,tocIndex:1},{value:"BaseShape",paraId:1,tocIndex:1},{value:", which centrally manages the lifecycle (creation, update, destruction), property parsing, animation, event binding, etc. You only need to focus on implementing the ",paraId:1,tocIndex:1},{value:"render",paraId:1,tocIndex:1},{value:" method.",paraId:1,tocIndex:1},{value:"Core Abstraction:",paraId:2,tocIndex:1},{value:"import { CustomElement } from '@antv/g';\n\nabstract class BaseShape extends CustomElement {\n  // Lifecycle management, property parsing, animation, etc...\n  public abstract render(attributes, container): void;\n}\n",paraId:3,tocIndex:1},{value:"A node usually contains multiple child Shapes, for example:",paraId:4,tocIndex:2},{value:"Node\n├── keyShape (main shape)\n├── label (label, auxiliary information)\n│   ├── text\n│   └── rect\n├── icon\n│   ├── text\n│   └── image\n├── badge\n│   ├── text\n│   └── rect\n└── port\n│   ├── circle\n",paraId:5,tocIndex:2},{value:"Label is a typical composite Shape, consisting of text (Text) and an optional background (Rect). The implementation idea is as follows:",paraId:6,tocIndex:3},{value:"Property Separation",paraId:7,tocIndex:3},{value:": The style properties of Label are divided into text style and background style, which are passed to Text and Rect respectively.",paraId:7,tocIndex:3},{value:"Smart Layout",paraId:7,tocIndex:3},{value:": The background automatically adjusts its size and position based on the text content, padding, border radius, etc.",paraId:7,tocIndex:3},{value:"Reuse upsert",paraId:7,tocIndex:3},{value:": The ",paraId:7,tocIndex:3},{value:"upsert",paraId:7,tocIndex:3},{value:" method is used to automatically manage the creation, update, and destruction of child Shapes.",paraId:7,tocIndex:3},{value:"Main code snippet of Label:",paraId:8,tocIndex:3},{value:"import { Text, Rect } from '@antv/g'; // Import atomic graphics\n\nexport class Label extends BaseShape {\n  public render(attributes = this.parsedAttributes, container= this): void {\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n  }\n  // ... Omitted style extraction methods\n}\n",paraId:9,tocIndex:3},{value:"getTextStyle",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"getBackgroundStyle",paraId:10,tocIndex:3},{value:" extract the style properties for text and background respectively to avoid interference.",paraId:10,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"upsert",paraId:10,tocIndex:3},{value:" method ensures automatic CRUD of Shapes, greatly improving reusability and robustness.",paraId:10,tocIndex:3},{value:"Below is an example of customizing a label with special decoration, demonstrating the complete definition, registration, and usage of a Shape:",paraId:11,tocIndex:4},{value:"import { BaseShape, ExtensionCategory, Circle } from 'g6';\nimport { Text, Rect, Circle } from '@antv/g';\n\nclass FancyLabel extends BaseShape {\n  render(attributes = this.parsedAttributes, container = this) {\n    // Main text\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    // Background\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n    // Extra decoration: small dot on the left\n    this.upsert('dot', Circle, {\n      x: -8, y: 0, r: 3, fill: '#faad14',\n    }, container);\n  }\n  // ...implement getTextStyle/getBackgroundStyle\n}\n\n// Register custom Shape\nregister(ExtensionCategory.SHAPE, 'fancy-label-shape', FancyLabel);\n\n// Define custom node\nclass CustomCircle extends Circle {\n  public drawFancyLabelShape(attributes, container) {\n    this.upsert('fancy-label', 'fancy-label-shape', this.getFancyLabelStyle(attributes), container);\n  }\n\n  render(attributes = this.parsedAttributes, container) {\n    super.render(attributes, container);\n\n    this.drawFancyLabelShape(attributes, container);\n  }\n}\n\n// Register custom node\nregister(ExtensionCategory.Node, 'fancy-label-node', CustomCircle);\n",paraId:12,tocIndex:4},{value:"In G6, elements such as nodes, edges, and combos often contain multiple child Shapes (such as main shape, label, badge, port, etc.). To ensure that the style of each child Shape does not interfere with each other, G6 adopts a ",paraId:13,tocIndex:5},{value:"prefix separation",paraId:13,tocIndex:5},{value:" design for style properties.",paraId:13,tocIndex:5},{value:"Decoupling",paraId:14,tocIndex:6},{value:": Each child Shape only cares about its own style properties, avoiding style pollution.",paraId:14,tocIndex:6},{value:"Easy Expansion",paraId:14,tocIndex:6},{value:": Adding a new child Shape only requires defining a new prefix, without modifying the original logic.",paraId:14,tocIndex:6},{value:"Intuitive Configuration",paraId:14,tocIndex:6},{value:": When configuring nodes/edges/combos, users can clearly set the style of each part.",paraId:14,tocIndex:6},{value:"Take Label as an example:",paraId:15,tocIndex:7},{value:"import { RectStyleProps, TextStyleProps } from '@antv/g';\n\ntype PrefixKey<P extends string = string, K extends string = string> = `${P}${Capitalize<K>}`;\n\ntype Prefix<P extends string, T extends object> = {\n  [K in keyof T as K extends string ? PrefixKey<P, K> : never]?: T[K];\n};\n\ninterface LabelStyleProps extends TextStyleProps, Prefix<'background', RectStyleProps> {\n  background?: boolean;\n}\n",paraId:16,tocIndex:7},{value:"Prefix<'background', RectStyleProps>",paraId:17,tocIndex:7},{value:" means all properties starting with ",paraId:17,tocIndex:7},{value:"background",paraId:17,tocIndex:7},{value:" belong to the label background style.",paraId:17,tocIndex:7},{value:"During rendering, tools such as ",paraId:17,tocIndex:7},{value:"subStyleProps",paraId:17,tocIndex:7},{value:" and ",paraId:17,tocIndex:7},{value:"subObject",paraId:17,tocIndex:7},{value:" are used to automatically extract prefixed styles and pass them to the corresponding Shape.",paraId:17,tocIndex:7},{value:"Label background style extraction example",paraId:18,tocIndex:7},{value:"protected getBackgroundStyle(attributes: Required<LabelStyleProps>) {\n  if (attributes.background === false) return false;\n  const style = this.getGraphicStyle(attributes);\n  const backgroundStyle = subStyleProps<RectStyleProps>(style, 'background');\n// ...Omitted layout calculation\n  return backgroundStyle;\n}\n",paraId:19,tocIndex:7},{value:"Style configuration example",paraId:20,tocIndex:7},{value:'{\n  "text": "label",\n  "fontSize": 12,\n  "fontFamily": "system-ui, sans-serif",\n  "wordWrap": true,\n  "maxLines": 1,\n  "wordWrapWidth": 128,\n  "textOverflow": "...",\n  "textBaseline": "middle",\n  "background": true,\n  "backgroundOpacity": 0.75,\n  "backgroundZIndex": -1,\n  "backgroundLineWidth": 0\n}\n',paraId:21,tocIndex:7},{value:"keyShape",paraId:22,tocIndex:8},{value:" is the main shape of a node/edge/combo, determining interaction picking, bounding box, main style, etc.",paraId:22,tocIndex:8},{value:"Label",paraId:22,tocIndex:8},{value:", icon, badge, port, etc. usually exist as auxiliary Shapes and are not used as keyShape.",paraId:22,tocIndex:8},{value:"When customizing a node, you can specify the keyShape via ",paraId:22,tocIndex:8},{value:"drawKeyShape",paraId:22,tocIndex:8},{value:" or similar methods. Label is only responsible for displaying text information and does not affect the main interaction control of the node.",paraId:22,tocIndex:8},{value:"Take nodes as an example. The node base class ",paraId:23,tocIndex:9},{value:"BaseNode",paraId:23,tocIndex:9},{value:" has built-in support for multiple child Shapes (keyShape, label, icon, badge, port, halo, etc.). You only need to focus on drawing the keyShape, and other child Shapes can be automatically managed through configuration and style prefixing.",paraId:23,tocIndex:9},{value:"protected drawLabelShape(attributes: Required<S>, container: Group): void {\n  const style = this.getLabelStyle(attributes);\n  this.upsert('label', Label, style, container);\n}\n\npublic render(attributes = this.parsedAttributes, container: Group = this) {\n  // 1. Draw keyShape (main shape)\n  this._drawKeyShape(attributes, container);\n  if (!this.getShape('key')) return;\n\n  // 2. Draw halo\n  this.drawHaloShape(attributes, container);\n\n  // 3. Draw icon\n  this.drawIconShape(attributes, container);\n\n  // 4. Draw badges\n  this.drawBadgeShapes(attributes, container);\n\n  // 5. Draw label\n  this.drawLabelShape(attributes, container);\n\n  // 6. Draw ports\n  this.drawPortShapes(attributes, container);\n}\n",paraId:24,tocIndex:10},{value:"The style of each child Shape is automatically extracted by prefix separation and passed to the corresponding Shape instance.",paraId:25,tocIndex:10},{value:"You can flexibly control the display and style of each child Shape through configuration options.",paraId:25,tocIndex:10},{value:"Suppose you want to add a label with a background to a node, just configure the label-related properties in the node data:",paraId:26,tocIndex:11},{value:"{\n  label: true,\n  labelText: 'I am a label',\n  labelFill: '#333',\n  labelFontSize: 14,\n  labelBackground: true,\n  labelBackgroundFill: '#fffbe6',\n  labelBackgroundRadius: 6,\n  labelPadding: [4, 8],\n}\n",paraId:27,tocIndex:11},{value:"labelText",paraId:28,tocIndex:11},{value:", ",paraId:28,tocIndex:11},{value:"labelFill",paraId:28,tocIndex:11},{value:", ",paraId:28,tocIndex:11},{value:"labelFontSize",paraId:28,tocIndex:11},{value:", etc. will be automatically extracted and passed to the text part of the Label.",paraId:28,tocIndex:11},{value:"labelBackground",paraId:28,tocIndex:11},{value:", ",paraId:28,tocIndex:11},{value:"labelBackgroundFill",paraId:28,tocIndex:11},{value:", ",paraId:28,tocIndex:11},{value:"labelBackgroundRadius",paraId:28,tocIndex:11},{value:", ",paraId:28,tocIndex:11},{value:"labelPadding",paraId:28,tocIndex:11},{value:", etc. will be automatically extracted and passed to the background part of the Label.",paraId:28,tocIndex:11},{value:"You do not need to manually manage the creation, update, or destruction of the Label. G6 will handle it automatically.",paraId:29,tocIndex:11},{value:"Check whether the style property prefix is correct (such as ",paraId:30,tocIndex:13},{value:"labelFill",paraId:30,tocIndex:13},{value:", ",paraId:30,tocIndex:13},{value:"labelBackgroundFill",paraId:30,tocIndex:13},{value:").",paraId:30,tocIndex:13},{value:"Make sure the ",paraId:30,tocIndex:13},{value:"label",paraId:30,tocIndex:13},{value:" configuration of the node/edge/combo is ",paraId:30,tocIndex:13},{value:"true",paraId:30,tocIndex:13},{value:" and ",paraId:30,tocIndex:13},{value:"labelText",paraId:30,tocIndex:13},{value:" is set.",paraId:30,tocIndex:13},{value:"Check if it is overridden by other styles.",paraId:30,tocIndex:13},{value:"Use the browser console to view ",paraId:31,tocIndex:14},{value:"shapeMap",paraId:31,tocIndex:14},{value:" and confirm whether each child Shape is created correctly.",paraId:31,tocIndex:14},{value:"Directly set node state styles in the graph configuration (recommended)",paraId:32,tocIndex:15},{value:"const graph = new Graph({\n  node: {\n    style: {\n      label: false,\n    },\n    state: {\n      hover: {\n        label: true,\n        labelText: 'show when hovered',\n      },\n    },\n  },\n});\n",paraId:33,tocIndex:15},{value:"Or listen for state changes in the implementation of Label and dynamically adjust the style. You can get the current state value through data.",paraId:34,tocIndex:15},{value:"For more details, it is recommended to read the source code ",paraId:35,tocIndex:15},{value:"base-shape.ts",paraId:35,tocIndex:15},{value:", ",paraId:35,tocIndex:15},{value:"base-node.ts",paraId:35,tocIndex:15},{value:".",paraId:35,tocIndex:15}]},26035:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(9644);const t=[{value:"A Shape in G6 refers to a graphical element, such as a circle, rectangle, or path. Shapes are generally associated with nodes, edges, or combos in G6. ",paraId:0,tocIndex:0},{value:"💡 Every node/edge/combo in G6 is composed of one or more shapes. The style configuration of nodes, edges, and combos is reflected on their corresponding shapes.",paraId:0,tocIndex:0},{value:"For example, in the images below: the node on the left contains a single circular shape; the node in the middle contains a circle and a text shape; the node on the right contains five circles (the blue-green main circle and four anchor points at the top, bottom, left, and right) and a text shape. Each node/edge/combo has its unique key shape (keyShape). In the examples below, the keyShape for all three nodes is the blue-green circle. The keyShape is mainly used for interaction detection and automatic style updates with ",paraId:1,tocIndex:0},{value:"element states",paraId:2,tocIndex:0},{value:", see ",paraId:1,tocIndex:0},{value:"keyShape",paraId:3,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"(Left) A node with only one circular shape, whose keyShape is the circle. (Middle) A node with a circle and a text shape, whose keyShape is the circle. (Right) A node with a main circle, text, and four small circles at the top, bottom, left, and right, whose keyShape is the main circle.",paraId:4,tocIndex:0},{value:"G6 uses different combinations of shapes to design various built-in nodes/edges/combos. Built-in nodes include 'circle', 'rect', 'ellipse', ... (see ",paraId:5,tocIndex:0},{value:"Built-in Nodes",paraId:6,tocIndex:0},{value:"); built-in edges include 'line', 'polyline', 'cubic', ... (see ",paraId:5,tocIndex:0},{value:"Built-in Edges",paraId:7,tocIndex:0},{value:"); built-in combos include 'circle', 'rect', ... (see ",paraId:5,tocIndex:0},{value:"Built-in Combos",paraId:8,tocIndex:0},{value:").",paraId:5,tocIndex:0},{value:"In addition to using built-in nodes/edges/combos, G6 also allows users to customize nodes/edges/combos by combining shapes as needed. See ",paraId:9,tocIndex:0},{value:"Custom Node",paraId:10,tocIndex:0},{value:", ",paraId:9,tocIndex:0},{value:"Custom Edge",paraId:11,tocIndex:0},{value:", and ",paraId:9,tocIndex:0},{value:"Custom Combo",paraId:12,tocIndex:0},{value:" for details.",paraId:9,tocIndex:0},{value:'In G6, each node, edge, or combo consists of one or more shapes, but one of them is called the keyShape, which is the "key graphical element" of the item:',paraId:13,tocIndex:1},{value:"The key graphical element of the node is the colored area in the image above.",paraId:14,tocIndex:1},{value:"Determines the bounding box of a node/combo",paraId:15,tocIndex:2},{value:", which is used to calculate the connection point of related edges (the intersection with the edge). If the keyShape is different, the intersection calculation between the node and the edge will also differ.",paraId:15,tocIndex:2},{value:"In this example, a node consists of a rect shape and a circle shape with a gray stroke and transparent fill.",paraId:16,tocIndex:3},{value:"When the node's keyShape is the circle:",paraId:17,tocIndex:3},{value:"When the node's keyShape is the rect:",paraId:18,tocIndex:3},{value:"If you need to ",paraId:19,tocIndex:4},{value:"customize nodes",paraId:20,tocIndex:4},{value:", ",paraId:19,tocIndex:4},{value:"customize edges",paraId:21,tocIndex:4},{value:", or ",paraId:19,tocIndex:4},{value:"customize combos",paraId:22,tocIndex:4},{value:", you need to understand the lifecycle of shapes. If you use built-in nodes/edges/combos, you can skip this section.",paraId:19,tocIndex:4},{value:"The shape lifecycle includes:",paraId:23,tocIndex:4},{value:"Initial Rendering",paraId:24,tocIndex:4},{value:": Draws the shape for the first time based on data and style configuration.",paraId:24,tocIndex:4},{value:"Update",paraId:24,tocIndex:4},{value:": Automatically updates the appearance of the shape when data or style changes.",paraId:24,tocIndex:4},{value:"Operation",paraId:24,tocIndex:4},{value:": Responds to interaction states (such as selected, active, hover, etc.) and dynamically adjusts the style.",paraId:24,tocIndex:4},{value:"Destruction",paraId:24,tocIndex:4},{value:": Cleans up when the shape is removed (usually managed automatically by the Graph, so users don't need to worry).",paraId:24,tocIndex:4},{value:'When customizing shapes, the most common requirement is "how to efficiently manage the creation, update, and destruction of shapes." For this, G6 provides a very useful method in BaseShape:',paraId:25,tocIndex:4},{value:'upsert is a combination of "update" and "insert", meaning "update if exists, insert if not". Its function can be simply understood as:',paraId:26,tocIndex:5},{value:"Automatic Judgment",paraId:27,tocIndex:5},{value:": You only need to describe the desired appearance of the shape. ",paraId:27,tocIndex:5},{value:"upsert",paraId:27,tocIndex:5},{value:" will automatically determine whether the shape already exists. If not, it will create it; if it exists, it will update it; if it needs to be deleted, it will remove it automatically.",paraId:27,tocIndex:5},{value:"Simplified Logic",paraId:27,tocIndex:5},{value:": Developers do not need to manually manage the CRUD of shapes, avoiding duplicate code and state confusion.",paraId:27,tocIndex:5},{value:"Improved Robustness",paraId:27,tocIndex:5},{value:": Whether it's the initial rendering, data changes, or state switching, upsert ensures that the shape always stays in sync with the data and configuration.",paraId:27,tocIndex:5},{value:"Type Definition:",paraId:28,tocIndex:5},{value:"/**\n * Create, update, or delete a shape\n * @param className Shape name\n * @param Ctor Shape type\n * @param style Shape style. Pass false to delete the shape\n * @param container Container\n * @param hooks Hooks\n * @returns Shape instance\n */\nupsert<T extends DisplayObject>(\n  className: string,\n  Ctor: string | { new (...args: any[]): T },\n  style: T['attributes'] | false,\n  container: DisplayObject,\n  hooks?: UpsertHooks,\n): T | undefined {}\n",paraId:29,tocIndex:5},{value:'You only need to describe "what kind of shape you want now" without worrying about whether it is being created, updated, or deleted. upsert will handle it for you. This makes customizing and managing complex composite shapes very simple and safe.',paraId:30,tocIndex:5}]},82494:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(86486);const t=[{value:"Elements (nodes/edges) in G6 are composed of ",paraId:0},{value:"one or more ",paraId:0},{value:"shapes",paraId:1},{value:", mainly added via ",paraId:0},{value:"upsert",paraId:0},{value:" in the ",paraId:0},{value:"render",paraId:0},{value:" method when customizing nodes or edges. G6 supports the following shapes:",paraId:0},{value:"Circle",paraId:2},{value:"Ellipse",paraId:3},{value:"Rect",paraId:4},{value:"HTML Element",paraId:5},{value:"Image",paraId:6},{value:"Line",paraId:7},{value:"Path",paraId:8},{value:"Polygon",paraId:9},{value:"Polyline",paraId:10},{value:"Text",paraId:11},{value:"Property",paraId:12,tocIndex:1},{value:"Description",paraId:12,tocIndex:1},{value:"Type",paraId:12,tocIndex:1},{value:"Required",paraId:12,tocIndex:1},{value:"x",paraId:12,tocIndex:1},{value:"x coordinate",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"y",paraId:12,tocIndex:1},{value:"y coordinate",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"width",paraId:12,tocIndex:1},{value:"Width",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"height",paraId:12,tocIndex:1},{value:"Height",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"fill",paraId:12,tocIndex:1},{value:"Fill color",paraId:12,tocIndex:1},{value:"string | Pattern | null",paraId:12,tocIndex:1},{value:"stroke",paraId:12,tocIndex:1},{value:"Stroke color",paraId:12,tocIndex:1},{value:"string | Pattern | null",paraId:12,tocIndex:1},{value:"opacity",paraId:12,tocIndex:1},{value:"Overall opacity",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"fillOpacity",paraId:12,tocIndex:1},{value:"Fill opacity",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"strokeOpacity",paraId:12,tocIndex:1},{value:"Stroke opacity",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"lineWidth",paraId:12,tocIndex:1},{value:"Line width",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"lineCap",paraId:12,tocIndex:1},{value:"Line cap style",paraId:12,tocIndex:1},{value:"butt",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"round",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"square",paraId:12,tocIndex:1},{value:"lineJoin",paraId:12,tocIndex:1},{value:"Line join style",paraId:12,tocIndex:1},{value:"miter",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"round",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"bevel",paraId:12,tocIndex:1},{value:"lineDash",paraId:12,tocIndex:1},{value:"Dash array",paraId:12,tocIndex:1},{value:"number | string | (string | number)[]",paraId:12,tocIndex:1},{value:"lineDashOffset",paraId:12,tocIndex:1},{value:"Dash offset",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowBlur",paraId:12,tocIndex:1},{value:"Shadow blur",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowColor",paraId:12,tocIndex:1},{value:"Shadow color",paraId:12,tocIndex:1},{value:"string",paraId:12,tocIndex:1},{value:"shadowOffsetX",paraId:12,tocIndex:1},{value:"Shadow X offset",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowOffsetY",paraId:12,tocIndex:1},{value:"Shadow Y offset",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"cursor",paraId:12,tocIndex:1},{value:"Mouse cursor, supports all ",paraId:12,tocIndex:1},{value:"CSS cursor",paraId:12,tocIndex:1},{value:"string",paraId:12,tocIndex:1},{value:"zIndex",paraId:12,tocIndex:1},{value:"Render z-index",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"visibility",paraId:12,tocIndex:1},{value:"Visibility",paraId:12,tocIndex:1},{value:"visible",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"hidden",paraId:12,tocIndex:1},{value:"Example:",paraId:13,tocIndex:1},{value:"const shape = BaseShape.upsert(\n  // Specify the shape key, which must be unique within the same custom element type\n  'shape',\n  'circle',\n  {\n    cx: 100,\n    cy: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:14,tocIndex:1},{value:"Set or get the drawing attributes of the instance.",paraId:15,tocIndex:3},{value:"Get the value of an attribute.",paraId:16,tocIndex:4},{value:"const width = shape.attr('width');\n",paraId:17,tocIndex:4},{value:"Update a single drawing attribute.",paraId:18,tocIndex:5},{value:"Batch update drawing attributes.",paraId:19,tocIndex:6},{value:"shape.attr({\n  fill: '#999',\n  stroke: '#666',\n});\n",paraId:20,tocIndex:6},{value:"Property",paraId:21,tocIndex:8},{value:"Description",paraId:21,tocIndex:8},{value:"Type",paraId:21,tocIndex:8},{value:"Required",paraId:21,tocIndex:8},{value:"cx",paraId:21,tocIndex:8},{value:"Center x coordinate",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"cy",paraId:21,tocIndex:8},{value:"Center y coordinate",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"cz",paraId:21,tocIndex:8},{value:"Center z coordinate",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"r",paraId:21,tocIndex:8},{value:"Radius",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"isBillboard",paraId:21,tocIndex:8},{value:"Billboard mode (always faces camera)",paraId:21,tocIndex:8},{value:"boolean",paraId:21,tocIndex:8},{value:"isSizeAttenuation",paraId:21,tocIndex:8},{value:"Size attenuation (size changes with view)",paraId:21,tocIndex:8},{value:"boolean",paraId:21,tocIndex:8},{value:"Example:",paraId:22,tocIndex:8},{value:"BaseShape.upsert(\n  'shape',\n  'circle',\n  {\n    cx: 100,\n    cy: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:23,tocIndex:8},{value:"Property",paraId:24,tocIndex:10},{value:"Description",paraId:24,tocIndex:10},{value:"Type",paraId:24,tocIndex:10},{value:"Required",paraId:24,tocIndex:10},{value:"x",paraId:24,tocIndex:10},{value:"Rect x coordinate",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"y",paraId:24,tocIndex:10},{value:"Rect y coordinate",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"z",paraId:24,tocIndex:10},{value:"Rect z coordinate",paraId:24,tocIndex:10},{value:"number",paraId:24,tocIndex:10},{value:"width",paraId:24,tocIndex:10},{value:"Rect width",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"✓",paraId:24,tocIndex:10},{value:"height",paraId:24,tocIndex:10},{value:"Rect height",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"✓",paraId:24,tocIndex:10},{value:"isBillboard",paraId:24,tocIndex:10},{value:"Billboard mode",paraId:24,tocIndex:10},{value:"boolean",paraId:24,tocIndex:10},{value:"isSizeAttenuation",paraId:24,tocIndex:10},{value:"Size attenuation",paraId:24,tocIndex:10},{value:"boolean",paraId:24,tocIndex:10},{value:"radius",paraId:24,tocIndex:10},{value:"Border radius",paraId:24,tocIndex:10},{value:"number | string | number[]",paraId:24,tocIndex:10},{value:"Example:",paraId:25,tocIndex:10},{value:"BaseShape.upsert(\n  'shape',\n  'rect',\n  {\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    radius: 8,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:26,tocIndex:10},{value:"Property",paraId:27,tocIndex:12},{value:"Description",paraId:27,tocIndex:12},{value:"Type",paraId:27,tocIndex:12},{value:"Required",paraId:27,tocIndex:12},{value:"cx",paraId:27,tocIndex:12},{value:"Center x coordinate",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"cy",paraId:27,tocIndex:12},{value:"Center y coordinate",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"cz",paraId:27,tocIndex:12},{value:"Center z coordinate",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"rx",paraId:27,tocIndex:12},{value:"X-axis radius",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"ry",paraId:27,tocIndex:12},{value:"Y-axis radius",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"isBillboard",paraId:27,tocIndex:12},{value:"Billboard mode",paraId:27,tocIndex:12},{value:"boolean",paraId:27,tocIndex:12},{value:"isSizeAttenuation",paraId:27,tocIndex:12},{value:"Size attenuation",paraId:27,tocIndex:12},{value:"boolean",paraId:27,tocIndex:12},{value:"Example:",paraId:28,tocIndex:12},{value:"BaseShape.upsert(\n  'shape',\n  'ellipse',\n  {\n    cx: 100,\n    cy: 100,\n    rx: 50,\n    ry: 80,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:29,tocIndex:12},{value:"Property",paraId:30,tocIndex:14},{value:"Description",paraId:30,tocIndex:14},{value:"Type",paraId:30,tocIndex:14},{value:"Required",paraId:30,tocIndex:14},{value:"x",paraId:30,tocIndex:14},{value:"HTML x coordinate",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"y",paraId:30,tocIndex:14},{value:"HTML y coordinate",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"innerHTML",paraId:30,tocIndex:14},{value:"HTML content",paraId:30,tocIndex:14},{value:"string | HTMLElement",paraId:30,tocIndex:14},{value:"✓",paraId:30,tocIndex:14},{value:"width",paraId:30,tocIndex:14},{value:"HTML width",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"height",paraId:30,tocIndex:14},{value:"HTML height",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"Example:",paraId:31,tocIndex:14},{value:"BaseShape.upsert(\n  'shape',\n  'html',\n  {\n    x: 100,\n    y: 100,\n    innerHTML: <div>content</div>,\n  },\n  container,\n);\n",paraId:32,tocIndex:14},{value:"Property",paraId:33,tocIndex:16},{value:"Description",paraId:33,tocIndex:16},{value:"Type",paraId:33,tocIndex:16},{value:"Required",paraId:33,tocIndex:16},{value:"x",paraId:33,tocIndex:16},{value:"Image x coordinate",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"y",paraId:33,tocIndex:16},{value:"Image y coordinate",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"z",paraId:33,tocIndex:16},{value:"Image z coordinate",paraId:33,tocIndex:16},{value:"number",paraId:33,tocIndex:16},{value:"src",paraId:33,tocIndex:16},{value:"Image source or HTMLImageElement",paraId:33,tocIndex:16},{value:"string | HTMLImageElement",paraId:33,tocIndex:16},{value:"✓",paraId:33,tocIndex:16},{value:"width",paraId:33,tocIndex:16},{value:"Image width",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"height",paraId:33,tocIndex:16},{value:"Image height",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"isBillboard",paraId:33,tocIndex:16},{value:"Billboard mode",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"isSizeAttenuation",paraId:33,tocIndex:16},{value:"Size attenuation",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"billboardRotation",paraId:33,tocIndex:16},{value:"Billboard rotation angle",paraId:33,tocIndex:16},{value:"number",paraId:33,tocIndex:16},{value:"keepAspectRatio",paraId:33,tocIndex:16},{value:"Keep original aspect ratio",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"Example:",paraId:34,tocIndex:16},{value:"BaseShape.upsert(\n  'shape',\n  'image',\n  {\n    x: 100,\n    y: 100,\n    src: 'http://',\n  },\n  container,\n);\n",paraId:35,tocIndex:16},{value:"Property",paraId:36,tocIndex:18},{value:"Description",paraId:36,tocIndex:18},{value:"Type",paraId:36,tocIndex:18},{value:"Required",paraId:36,tocIndex:18},{value:"x1",paraId:36,tocIndex:18},{value:"Start x coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"y1",paraId:36,tocIndex:18},{value:"Start y coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"x2",paraId:36,tocIndex:18},{value:"End x coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"y2",paraId:36,tocIndex:18},{value:"End y coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"z1",paraId:36,tocIndex:18},{value:"Start z coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"z2",paraId:36,tocIndex:18},{value:"End z coordinate",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"isBillboard",paraId:36,tocIndex:18},{value:"Billboard mode",paraId:36,tocIndex:18},{value:"boolean",paraId:36,tocIndex:18},{value:"isSizeAttenuation",paraId:36,tocIndex:18},{value:"Size attenuation",paraId:36,tocIndex:18},{value:"boolean",paraId:36,tocIndex:18},{value:"markerStart",paraId:36,tocIndex:18},{value:"Marker at start",paraId:36,tocIndex:18},{value:"DisplayObject | null",paraId:36,tocIndex:18},{value:"markerEnd",paraId:36,tocIndex:18},{value:"Marker at end",paraId:36,tocIndex:18},{value:"DisplayObject | null",paraId:36,tocIndex:18},{value:"markerStartOffset",paraId:36,tocIndex:18},{value:"Start marker offset",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"markerEndOffset",paraId:36,tocIndex:18},{value:"End marker offset",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"Example:",paraId:37,tocIndex:18},{value:"BaseShape.upsert(\n  'shape',\n  'line',\n  {\n    x1: 100,\n    y1: 100,\n    x2: 150,\n    y2: 150,\n    stroke: 'blue',\n  },\n  container,\n);\n",paraId:38,tocIndex:18},{value:"Property",paraId:39,tocIndex:20},{value:"Description",paraId:39,tocIndex:20},{value:"Type",paraId:39,tocIndex:20},{value:"Required",paraId:39,tocIndex:20},{value:"d",paraId:39,tocIndex:20},{value:"Path string or array",paraId:39,tocIndex:20},{value:"string | PathArray",paraId:39,tocIndex:20},{value:"✓",paraId:39,tocIndex:20},{value:"markerStart",paraId:39,tocIndex:20},{value:"Marker at start",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerEnd",paraId:39,tocIndex:20},{value:"Marker at end",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerMid",paraId:39,tocIndex:20},{value:"Marker at middle",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerStartOffset",paraId:39,tocIndex:20},{value:"Start marker offset",paraId:39,tocIndex:20},{value:"number",paraId:39,tocIndex:20},{value:"markerEndOffset",paraId:39,tocIndex:20},{value:"End marker offset",paraId:39,tocIndex:20},{value:"number",paraId:39,tocIndex:20},{value:"isBillboard",paraId:39,tocIndex:20},{value:"Billboard mode",paraId:39,tocIndex:20},{value:"boolean",paraId:39,tocIndex:20},{value:"isSizeAttenuation",paraId:39,tocIndex:20},{value:"Size attenuation",paraId:39,tocIndex:20},{value:"boolean",paraId:39,tocIndex:20},{value:"fillRule",paraId:39,tocIndex:20},{value:"Fill rule",paraId:39,tocIndex:20},{value:"nonzero",paraId:39,tocIndex:20},{value:" | ",paraId:39,tocIndex:20},{value:"evenodd",paraId:39,tocIndex:20},{value:"Example:",paraId:40,tocIndex:20},{value:"BaseShape.upsert(\n  'shape',\n  'path',\n  {\n    d: 'M 0,0 L 20,10 L 20,-10 Z',\n    stroke: 'blue',\n  },\n  container,\n);\n",paraId:41,tocIndex:20},{value:"Property",paraId:42,tocIndex:22},{value:"Description",paraId:42,tocIndex:22},{value:"Type",paraId:42,tocIndex:22},{value:"Required",paraId:42,tocIndex:22},{value:"points",paraId:42,tocIndex:22},{value:"Array of polygon points",paraId:42,tocIndex:22},{value:"([number, number] | [number, number, number])[]",paraId:42,tocIndex:22},{value:"✓",paraId:42,tocIndex:22},{value:"markerStart",paraId:42,tocIndex:22},{value:"Marker at start",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerEnd",paraId:42,tocIndex:22},{value:"Marker at end",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerMid",paraId:42,tocIndex:22},{value:"Marker at middle",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerStartOffset",paraId:42,tocIndex:22},{value:"Start marker offset",paraId:42,tocIndex:22},{value:"number",paraId:42,tocIndex:22},{value:"markerEndOffset",paraId:42,tocIndex:22},{value:"End marker offset",paraId:42,tocIndex:22},{value:"number",paraId:42,tocIndex:22},{value:"isClosed",paraId:42,tocIndex:22},{value:"Is polygon closed",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"isBillboard",paraId:42,tocIndex:22},{value:"Billboard mode",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"isSizeAttenuation",paraId:42,tocIndex:22},{value:"Size attenuation",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"Example:",paraId:43,tocIndex:22},{value:"BaseShape.upsert(\n  'shape',\n  'polygon',\n  {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  container,\n);\n",paraId:44,tocIndex:22},{value:"Property",paraId:45,tocIndex:24},{value:"Description",paraId:45,tocIndex:24},{value:"Type",paraId:45,tocIndex:24},{value:"Required",paraId:45,tocIndex:24},{value:"points",paraId:45,tocIndex:24},{value:"Array of polyline points",paraId:45,tocIndex:24},{value:"([number, number] | [number, number, number])[]",paraId:45,tocIndex:24},{value:"✓",paraId:45,tocIndex:24},{value:"markerStart",paraId:45,tocIndex:24},{value:"Marker at start",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerEnd",paraId:45,tocIndex:24},{value:"Marker at end",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerMid",paraId:45,tocIndex:24},{value:"Marker at middle",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerStartOffset",paraId:45,tocIndex:24},{value:"Start marker offset",paraId:45,tocIndex:24},{value:"number",paraId:45,tocIndex:24},{value:"markerEndOffset",paraId:45,tocIndex:24},{value:"End marker offset",paraId:45,tocIndex:24},{value:"number",paraId:45,tocIndex:24},{value:"isBillboard",paraId:45,tocIndex:24},{value:"Billboard mode",paraId:45,tocIndex:24},{value:"boolean",paraId:45,tocIndex:24},{value:"isSizeAttenuation",paraId:45,tocIndex:24},{value:"Size attenuation",paraId:45,tocIndex:24},{value:"boolean",paraId:45,tocIndex:24},{value:"Example:",paraId:46,tocIndex:24},{value:"BaseShape.upsert(\n  'shape',\n  'polyline',\n  {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  container,\n);\n",paraId:47,tocIndex:24},{value:"Property",paraId:48,tocIndex:26},{value:"Description",paraId:48,tocIndex:26},{value:"Type",paraId:48,tocIndex:26},{value:"Required",paraId:48,tocIndex:26},{value:"x",paraId:48,tocIndex:26},{value:"Text x coordinate",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"y",paraId:48,tocIndex:26},{value:"Text y coordinate",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"z",paraId:48,tocIndex:26},{value:"Text z coordinate",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"text",paraId:48,tocIndex:26},{value:"Text content",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"✓",paraId:48,tocIndex:26},{value:"fontSize",paraId:48,tocIndex:26},{value:"Font size",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"fontFamily",paraId:48,tocIndex:26},{value:"Font family",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"fontStyle",paraId:48,tocIndex:26},{value:"Font style",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"italic",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"oblique",paraId:48,tocIndex:26},{value:"fontWeight",paraId:48,tocIndex:26},{value:"Font weight",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"bold",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"bolder",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"lighter",paraId:48,tocIndex:26},{value:" | number",paraId:48,tocIndex:26},{value:"fontVariant",paraId:48,tocIndex:26},{value:"Font variant",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"small-caps",paraId:48,tocIndex:26},{value:" | string",paraId:48,tocIndex:26},{value:"textAlign",paraId:48,tocIndex:26},{value:"Text horizontal align",paraId:48,tocIndex:26},{value:"start",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"center",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"middle",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"end",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"left",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"right",paraId:48,tocIndex:26},{value:"textBaseline",paraId:48,tocIndex:26},{value:"Text baseline",paraId:48,tocIndex:26},{value:"top",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"hanging",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"middle",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"alphabetic",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"ideographic",paraId:48,tocIndex:26},{value:" | `bottom'",paraId:48,tocIndex:26},{value:"textOverflow",paraId:48,tocIndex:26},{value:"Text overflow",paraId:48,tocIndex:26},{value:"clip",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"ellipsis",paraId:48,tocIndex:26},{value:" | string",paraId:48,tocIndex:26},{value:"lineHeight",paraId:48,tocIndex:26},{value:"Line height",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"letterSpacing",paraId:48,tocIndex:26},{value:"Letter spacing",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"maxLines",paraId:48,tocIndex:26},{value:"Max lines",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"textPath",paraId:48,tocIndex:26},{value:"Text path",paraId:48,tocIndex:26},{value:"Path",paraId:48,tocIndex:26},{value:"textPathSide",paraId:48,tocIndex:26},{value:"Text path side",paraId:48,tocIndex:26},{value:"left",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"right",paraId:48,tocIndex:26},{value:"textPathStartOffset",paraId:48,tocIndex:26},{value:"Text path start offset",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"textDecorationLine",paraId:48,tocIndex:26},{value:"Text decoration line",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"textDecorationColor",paraId:48,tocIndex:26},{value:"Text decoration color",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"textDecorationStyle",paraId:48,tocIndex:26},{value:"Text decoration style",paraId:48,tocIndex:26},{value:"solid",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"double",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"dotted",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"dashed",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"wavy",paraId:48,tocIndex:26},{value:"isBillboard",paraId:48,tocIndex:26},{value:"Billboard mode",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"billboardRotation",paraId:48,tocIndex:26},{value:"Billboard rotation angle",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"isSizeAttenuation",paraId:48,tocIndex:26},{value:"Size attenuation",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"wordWrap",paraId:48,tocIndex:26},{value:"Word wrap",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"wordWrapWidth",paraId:48,tocIndex:26},{value:"Word wrap width",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"dx",paraId:48,tocIndex:26},{value:"X offset",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"dy",paraId:48,tocIndex:26},{value:"Y offset",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"Example:",paraId:49,tocIndex:26},{value:"BaseShape.upsert(\n  'shape',\n  'text',\n  {\n    x: 100,\n    y: 100,\n    text: 'text',\n  },\n  container,\n);\n",paraId:50,tocIndex:26},{value:"Display in multiply line:",paraId:51,tocIndex:26},{value:"{\n  wordWrap: true,\n  wordWrapWidth: 100,\n  maxLines: 4,\n  textOverflow: 'ellipsis',\n}\n",paraId:52,tocIndex:26}]},93410:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(94240);const t=[{value:"State refers to the condition in which an element exists, such as ",paraId:0,tocIndex:0},{value:"selected, hovered, activated",paraId:0,tocIndex:0},{value:", etc. States allow elements to display different styles in different conditions, helping users to understand the information in the graph more intuitively.",paraId:0,tocIndex:0},{value:"Key features include:",paraId:1,tocIndex:0},{value:"Multiple States Coexist",paraId:2,tocIndex:0},{value:': An element can have multiple states simultaneously, such as being both "selected" and "highlighted"',paraId:2,tocIndex:0},{value:"Style Cascading",paraId:2,tocIndex:0},{value:": Styles of multiple states will overlay according to priority, with later applied state styles overriding earlier ones",paraId:2,tocIndex:0},{value:"Flexible Customization",paraId:2,tocIndex:0},{value:": In addition to preset states, users can define any custom states according to business needs",paraId:2,tocIndex:0},{value:"G6 provides several common state types:",paraId:3,tocIndex:1},{value:"selected",paraId:4,tocIndex:1},{value:": Selected state, usually used to indicate elements chosen by the user",paraId:4,tocIndex:1},{value:"active",paraId:4,tocIndex:1},{value:": Active state, usually used to indicate currently interactive active elements",paraId:4,tocIndex:1},{value:"highlight",paraId:4,tocIndex:1},{value:": Highlight state, usually used to emphasize specific elements",paraId:4,tocIndex:1},{value:"inactive",paraId:4,tocIndex:1},{value:": Inactive state, usually used to fade out non-focused elements",paraId:4,tocIndex:1},{value:"disable",paraId:4,tocIndex:1},{value:": Disabled state, usually used to indicate non-interactive elements",paraId:4,tocIndex:1},{value:"Note",paraId:5,tocIndex:1},{value:': When an element has no state set, it is in the "default state". Preset states are not mandatory, and users can define their own state types as needed.',paraId:5,tocIndex:1},{value:"Currently, G6 supports configuring state styles in style mapping, for example:",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  node: {\n    // Default state style\n    style: {\n      fill: '#C6E5FF',\n      stroke: '#5B8FF9',\n      lineWidth: 1,\n    },\n    // Styles for each state\n    state: {\n      selected: {\n        fill: '#95D6FB',\n        stroke: '#1890FF',\n        lineWidth: 2,\n        shadowColor: '#1890FF',\n        shadowBlur: 10,\n      },\n      highlight: {\n        stroke: '#FF6A00',\n        lineWidth: 2,\n      },\n      disable: {\n        fill: '#ECECEC',\n        stroke: '#BFBFBF',\n        opacity: 0.5,\n      },\n    },\n  },\n\n  // Default styles and state styles for edges\n  edge: {\n    style: {\n      /* Default style */\n    },\n    state: {\n      selected: {\n        /* Selected state style */\n      },\n      highlight: {\n        /* Highlight state style */\n      },\n      // Other states...\n    },\n  },\n\n  // Default styles and state styles for combos\n  combo: {\n    style: {\n      /* Default style */\n    },\n    state: {\n      selected: {\n        /* Selected state style */\n      },\n      // Other states...\n    },\n  },\n});\n",paraId:7,tocIndex:3},{value:"Before rendering, you can configure the initial state of elements in the data:",paraId:8,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      states: ['selected'], // This node is initially in the selected state\n      // Other node attributes...\n    },\n    {\n      id: 'node2',\n      states: ['disabled'], // This node is initially in the disabled state\n      // Other node attributes...\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n      states: ['highlight'], // This edge is initially in the highlight state\n      // Other edge attributes...\n    },\n  ],\n};\n",paraId:9,tocIndex:4},{value:"A more common scenario is dynamically changing the state of elements through user interaction:",paraId:10,tocIndex:4},{value:"// Example 1: Set a single node to the selected state\ngraph.setElementState('node1', 'selected');\n\n// Example 2: Set multiple states simultaneously\ngraph.setElementState('node2', ['highlight', 'active']);\n\n// Example 3: Batch set states for multiple elements\ngraph.setElementState({\n  node1: ['selected'],\n  node2: ['highlight'],\n  edge1: ['active'],\n});\n\n// Example 4: Remove states (revert to default state)\ngraph.setElementState('node1', []);\n",paraId:11,tocIndex:4},{value:"G6 provides multiple APIs to get states or determine if an element is in a certain state:",paraId:12,tocIndex:5},{value:"// Get all states of a specified element (returns an array of states)\nconst states = graph.getElementState('node1');\nconsole.log(states); // Example: ['selected', 'highlight']\n",paraId:13,tocIndex:5},{value:"When an element is only in the ",paraId:14,tocIndex:5},{value:"default state",paraId:14,tocIndex:5},{value:", the return value of ",paraId:14,tocIndex:5},{value:"getElementState",paraId:14,tocIndex:5},{value:" is ",paraId:14,tocIndex:5},{value:"[]",paraId:14,tocIndex:5},{value:".",paraId:14,tocIndex:5},{value:"// Get all node data in a specified state\nconst selectedNodes = graph.getElementDataByState('node', 'selected');\n",paraId:15,tocIndex:5},{value:"When an element is in multiple states, the priority of the states is determined by the order in the state array. For example, if a node is in both ",paraId:16,tocIndex:6},{value:"['selected', 'highlight']",paraId:16,tocIndex:6},{value:" states, the final state style is:",paraId:16,tocIndex:6},{value:"Final Style = Default State Style + Selected State Style + Highlight State Style",paraId:17,tocIndex:6},{value:"If there is a conflict in styles of different states (e.g., both set the ",paraId:18,tocIndex:6},{value:"fill",paraId:18,tocIndex:6},{value:" attribute), the style of the later state will override the earlier one.",paraId:18,tocIndex:6},{value:"You can create custom states according to business needs:",paraId:19,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  node: {\n    style: {\n      /* Default style */\n    },\n    state: {\n      // Custom state: warning\n      warning: {\n        fill: '#FFF7E6',\n        stroke: '#FA8C16',\n        lineWidth: 2,\n        lineDash: [4, 4],\n      },\n      // Custom state: encrypted\n      encrypted: {\n        fill: '#E6F7FF',\n        stroke: '#1890FF',\n        icon: {\n          show: true,\n          img: 'https://path/to/lock-icon.png',\n          width: 16,\n          height: 16,\n        },\n      },\n    },\n  },\n});\n",paraId:20,tocIndex:7},{value:"Apply custom states:",paraId:21,tocIndex:7},{value:"graph.setElementState('node1', 'warning');\ngraph.setElementState('node2', 'encrypted');\n",paraId:22,tocIndex:7}]},3668:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(24437);const t=[]},2e4:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(45724);const t=[{value:"Extension",paraId:0,tocIndex:0},{value:" is a concept in G6 that collectively refers to all types of registrable content, including elements, behaviors, layouts, and plugins, among others.",paraId:0,tocIndex:0},{value:"Plugin",paraId:1,tocIndex:0},{value:" represents a flexible extension mechanism provided by G6 and is a special type of ",paraId:1,tocIndex:0},{value:"Extension",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Taking ",paraId:2,tocIndex:1},{value:"label",paraId:2,tocIndex:1},{value:" as an example, you can set ",paraId:2,tocIndex:1},{value:"labelWordWrap",paraId:2,tocIndex:1},{value:" and ",paraId:2,tocIndex:1},{value:"labelWordWrapWidth",paraId:2,tocIndex:1},{value:" to achieve text overflow ellipsis.",paraId:2,tocIndex:1},{value:"{\n  labelText: 'This is a long text',\n  labelWordWrap: true,\n  labelWordWrapWidth: 50,\n}\n",paraId:3,tocIndex:1},{value:"Some plugins or behaviors support configuring key press triggers. Please use standard key names, such as ",paraId:4,tocIndex:2},{value:"Control",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Shift",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Alt",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Meta",paraId:4,tocIndex:2},{value:", as well as letters, numbers, symbols, and so on.",paraId:4,tocIndex:2},{value:"Ensure that you call ",paraId:5,tocIndex:3},{value:"graph.draw()",paraId:5,tocIndex:3},{value:" or ",paraId:5,tocIndex:3},{value:"graph.render()",paraId:5,tocIndex:3},{value:" to update the canvas after updating the data.",paraId:5,tocIndex:3},{value:"G6 merges differences and updates the canvas uniformly after ",paraId:6,tocIndex:3},{value:"draw",paraId:6,tocIndex:3},{value:" or ",paraId:6,tocIndex:3},{value:"render",paraId:6,tocIndex:3},{value:" for multiple data updates to improve performance.",paraId:6,tocIndex:3},{value:"When multiple interactions conflict with each other, you can set the enable timing of interactions to avoid multiple interactions being triggered simultaneously.",paraId:7,tocIndex:4},{value:"Taking ",paraId:8,tocIndex:4},{value:"drag-canvas",paraId:8,tocIndex:4},{value:" and ",paraId:8,tocIndex:4},{value:"brush-select",paraId:8,tocIndex:4},{value:" as an example, if you directly configure these two interactions, dragging on the canvas will cause interaction exceptions. You can disable the ",paraId:8,tocIndex:4},{value:"drag-canvas",paraId:8,tocIndex:4},{value:" interaction when the ",paraId:8,tocIndex:4},{value:"shift",paraId:8,tocIndex:4},{value:" key is pressed.",paraId:8,tocIndex:4},{value:"behaviors: [\n  {\n    type: 'drag-canvas',\n    enable: (event) => event.shiftKey === false,\n  },\n  {\n    type: 'brush-select',\n  },\n];\n",paraId:9,tocIndex:4},{value:"At this point, when the ",paraId:10,tocIndex:4},{value:"shift",paraId:10,tocIndex:4},{value:" key is pressed, the ",paraId:10,tocIndex:4},{value:"drag-canvas",paraId:10,tocIndex:4},{value:" interaction will be disabled, and the ",paraId:10,tocIndex:4},{value:"brush-select",paraId:10,tocIndex:4},{value:" interaction will not be affected.",paraId:10,tocIndex:4},{value:"draw",paraId:11},{value:"render",paraId:11},{value:"Both ",paraId:12,tocIndex:5},{value:"draw",paraId:12,tocIndex:5},{value:" and ",paraId:12,tocIndex:5},{value:"render",paraId:12,tocIndex:5},{value:" execute drawing operations, but ",paraId:12,tocIndex:5},{value:"render",paraId:12,tocIndex:5},{value:" additionally performs ",paraId:12,tocIndex:5},{value:"layout",paraId:12,tocIndex:5},{value:" and ",paraId:12,tocIndex:5},{value:"auto fit",paraId:12,tocIndex:5},{value:" operations based on ",paraId:12,tocIndex:5},{value:"draw",paraId:12,tocIndex:5},{value:".",paraId:12,tocIndex:5},{value:"You can simply understand it as: ",paraId:13,tocIndex:5},{value:"render",paraId:13,tocIndex:5},{value:" = ",paraId:13,tocIndex:5},{value:"draw",paraId:13,tocIndex:5},{value:" + ",paraId:13,tocIndex:5},{value:"layout",paraId:13,tocIndex:5},{value:" + ",paraId:13,tocIndex:5},{value:"fitView",paraId:13,tocIndex:5},{value:"/",paraId:13,tocIndex:5},{value:"fitCenter",paraId:13,tocIndex:5},{value:".",paraId:13,tocIndex:5},{value:"Reason 1: The style in the data is overridden by the style in the style mapping.",paraId:14,tocIndex:6},{value:"{\n  data: [{ id: 'node-1', style: { fill: 'orange' } }],\n  node: {\n    style: {\n      fill: 'pink', // No matter what the style in the data is, it will be overridden by the style here\n    }\n  }\n}\n",paraId:15,tocIndex:6},{value:"Solution: Use a callback method to prioritize obtaining styles from the data to improve data priority.",paraId:16,tocIndex:6},{value:"{\n  node: {\n    style: (data) => {\n      return {\n        fill: data.style?.fill || 'pink',\n      };\n    };\n  }\n}\n",paraId:17,tocIndex:6},{value:'When using the Canvas renderer for drawing, residual content may appear in the canvas, which is referred to as "dirty rectangles". This phenomenon occurs because the underlying rendering engine improves performance by only drawing the parts that have changed each time, rather than clearing the entire canvas.',paraId:18,tocIndex:7},{value:"However, when the graphics in the canvas change, there may be cases where some graphics are not correctly cleared, resulting in residual content.",paraId:19,tocIndex:7},{value:"You can solve this issue by:",paraId:20,tocIndex:7},{value:"Using the SVG or WebGL renderer;",paraId:21,tocIndex:7},{value:"Checking whether there are illegal values in the element of the nodes, such as null, NaN, and so on;",paraId:21,tocIndex:7},{value:"Using integers as much as possible for numeric style values, such as r, width, height, fontSize, and so on.",paraId:21,tocIndex:7},{value:"Please avoid using Vue reactive data, Immer.js, and other wrapped objects as the data source for G6, as these objects will be deeply monitored internally, and even freeze the data object, causing G6 to fail to operate normally.",paraId:22,tocIndex:8},{value:"WARNING in ./node_modules/@antv/util/esm/path/util/segment-cubic-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-cubic-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-cubic-factory.ts'\n\nWARNING in ./node_modules/@antv/util/esm/path/util/segment-line-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-line-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-line-factory.ts'\n\nWARNING in ./node_modules/@antv/util/esm/path/util/segment-quad-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-quad-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-quad-factory.ts'\n",paraId:23,tocIndex:9},{value:"Explanation: ",paraId:24,tocIndex:9},{value:"@antv/util",paraId:24,tocIndex:9},{value:" is a tool library that AntV relies on at the bottom.",paraId:24,tocIndex:9},{value:"From the partial warning message above, we can see that there is a problem with the type declaration file of the ",paraId:25,tocIndex:9},{value:"@antv/util",paraId:25,tocIndex:9},{value:" tool library that G6 depends on.",paraId:25,tocIndex:9},{value:"This warning does not affect the normal operation of the project",paraId:25,tocIndex:9},{value:".",paraId:25,tocIndex:9},{value:"This message will only appear in TypeScript projects. The following are ways to turn it off:",paraId:26,tocIndex:9},{value:"Turn off TypeScript sourcemap",paraId:27,tocIndex:9},{value:"Create a ",paraId:28,tocIndex:9},{value:".env",paraId:28,tocIndex:9},{value:" file in the root directory of the project and add the following content:",paraId:28,tocIndex:9},{value:"text\nGENERATE_SOURCEMAP=false\ntext",paraId:29,tocIndex:9},{value:"Disable sourcemapping for specific modules",paraId:30,tocIndex:9},{value:"Disabling sourcemapping directly is too simple and crude, and is not user-friendly for developers who may have debugging needs. Therefore, sourcemapping can be disabled for specific modules by configuring the build tool separately.",paraId:31,tocIndex:9},{value:"a. webpack configuration",paraId:32,tocIndex:9},{value:"module.exports = {\n  // ...其他配置\n  module: {\n    rules: [\n      {\n        test: /node_modules\\/@antv\\/util\\/esm\\/path\\/util\\/.+\\.js$/,\n        use: ['source-map-loader'],\n        enforce: 'pre',\n      },\n    ],\n  },\n  ignoreWarnings: [/Failed to parse source map/],\n};\n",paraId:33,tocIndex:9},{value:"b. vite configuration",paraId:34,tocIndex:9},{value:"import { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      onwarn(warning, warn) {\n        // Ignore warnings for specific modules\n        if (warning.code === 'MODULE_LEVEL_DIRECTIVE' && warning.message.includes('@antv/util')) {\n          return;\n        }\n        // For other warnings, use the default warning handling\n        warn(warning);\n      },\n    },\n  },\n});\n",paraId:35,tocIndex:9},{value:"In v5, the built-in colors are: export type BuiltInPalette = 'spectral' | 'oranges' | 'greens' | 'blues';",paraId:36,tocIndex:10},{value:"The solution is as follows:",paraId:37,tocIndex:10},{value:"const graph = new Graph({\n  container: '#ID',\n  width: number,\n  height: number,\n  data,\n  node: {\n    palette: {\n      field: 'color',\n      // right\n      color: ['red', 'green', 'blue'],\n\n      // error\n      // color: 'red'\n    },\n  },\n});\n",paraId:38,tocIndex:10},{value:"In v5, built-in plugins include ",paraId:39,tocIndex:11},{value:"bubble-sets",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"edge-filter-lens",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"grid-line",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"background",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"contextmenu",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"fisheye",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"fullscreen",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"history",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"hull",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"legend",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"minimap",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"snapline",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"timebar",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"toolbar",paraId:39,tocIndex:11},{value:" ",paraId:39,tocIndex:11},{value:"tooltip",paraId:39,tocIndex:11},{value:" >",paraId:39,tocIndex:11},{value:"watermark",paraId:39,tocIndex:11},{value:". ",paraId:39,tocIndex:11},{value:"Detailed reference",paraId:39,tocIndex:11},{value:"Actual reason: The parent container of the ",paraId:40,tocIndex:11},{value:"graph",paraId:40,tocIndex:11},{value:" instance, ",paraId:40,tocIndex:11},{value:"<div ref={containerRef} />",paraId:40,tocIndex:11},{value:", does not have a height set, so the G6 Graph may not be able to calculate the correct size.",paraId:40,tocIndex:11},{value:"If you want to enable the ",paraId:40,tocIndex:11},{value:"grid-line",paraId:40,tocIndex:11},{value:" canvas plugin, you need to set the width and height of the parent element, which is not valid in the graph configuration",paraId:40,tocIndex:11},{value:".",paraId:40,tocIndex:11},{value:"Use ",paraId:41,tocIndex:12},{value:"new Graph({xxx})",paraId:41,tocIndex:12},{value:" uniformly.",paraId:41,tocIndex:12},{value:"In v5, built-in layouts include ",paraId:42,tocIndex:12},{value:"antv-dagre",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"combo-combined",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"compact-box",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"force-atlas2",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"circular",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"concentric",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"d3-force",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"dagre",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"dendrogram",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"force",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"fruchterman",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"grid",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"indented",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"mds",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"mindmap",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"radial",paraId:42,tocIndex:12},{value:" ",paraId:42,tocIndex:12},{value:"random",paraId:42,tocIndex:12},{value:". ",paraId:42,tocIndex:12},{value:"Specific reference",paraId:42,tocIndex:12},{value:"v5 merges the graph and tree graph, no longer creates the tree graph layout by instantiating ",paraId:43,tocIndex:12},{value:"G6.TreeGraph",paraId:43,tocIndex:12},{value:", and removes this method. For details, see ",paraId:43,tocIndex:12},{value:"Features - Merge Graph and Tree Graph",paraId:43,tocIndex:12},{value:"is configured ",paraId:44,tocIndex:13},{value:"portLinkToCenter",paraId:44,tocIndex:13},{value:" to ",paraId:44,tocIndex:13},{value:"true",paraId:44,tocIndex:13},{value:".",paraId:44,tocIndex:13},{value:"const graph = new Graph({\n  container: xxx,\n  node: {\n    type: 'rect',\n    style: {\n      portLinkToCenter: true,\n    },\n  },\n  edge: {\n    type: 'xxx',\n  },\n});\n",paraId:45,tocIndex:13},{value:"Implementation solution: ",paraId:46,tocIndex:14},{value:"#6347",paraId:46,tocIndex:14},{value:"const measureTextWidth = memoize(\n  (text: string, font: any = {}): TextMetrics => {\n    const { fontSize, fontFamily = 'sans-serif', fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    // @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\n    ctx.font = [fontStyle, fontWeight, fontVariant, `${fontSize}px`, fontFamily].join(' ');\n    return ctx.measureText(isString(text) ? text : '').width;\n  },\n  (text: string, font = {}) => [text, ...values(font)].join(''),\n);\n\nconst graph = new G6.Graph({\n    node: {\n          style: { size: d => [measureTextWidth(d.label, {...}) , xxx] },\n    }\n})\n",paraId:47,tocIndex:14},{value:"You can manually specify the ",paraId:48,tocIndex:15},{value:"IPointerEvent",paraId:48,tocIndex:15},{value:" type. For details, see ",paraId:48,tocIndex:15},{value:"#6346",paraId:48,tocIndex:15},{value:"import { NodeEvent } from '@antv/g6';\nimport type { IPointerEvent } from '@antv/g6';\n\ngraph.on(NodeEvent.CLICK, (event: IPointerEvent) => {\n  // handler\n});\n",paraId:49,tocIndex:15},{value:"Update the node data, set the ",paraId:50,tocIndex:16},{value:"combo",paraId:50,tocIndex:16},{value:" value to ",paraId:50,tocIndex:16},{value:"null",paraId:50,tocIndex:16},{value:".",paraId:50,tocIndex:16},{value:"graph.updateNodeData([{ id: 'node-id', combo: null }]);\n",paraId:51,tocIndex:16}]},62657:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(69260);const t=[{value:"Before using 3D capabilities, please install the 3D extension package first:",paraId:0,tocIndex:0},{value:"npm install @antv/g6-extension-3d --save\n",paraId:1,tocIndex:0},{value:"The extension package exports the following:",paraId:2,tocIndex:0},{value:"renderer: 3D renderer",paraId:3,tocIndex:0},{value:"Elements",paraId:4,tocIndex:0},{value:"Capsule: capsule node",paraId:5,tocIndex:0},{value:"Cone: cone node",paraId:5,tocIndex:0},{value:"Cube: cube node",paraId:5,tocIndex:0},{value:"Cylinder: cylinder node",paraId:5,tocIndex:0},{value:"Sphere: sphere node",paraId:5,tocIndex:0},{value:"Torus: torus node",paraId:5,tocIndex:0},{value:"Line3D: 3D line",paraId:5,tocIndex:0},{value:"Layout",paraId:6,tocIndex:0},{value:"D3Force3DLayout: 3D force-directed layout",paraId:7,tocIndex:0},{value:"Behaviors",paraId:8,tocIndex:0},{value:"DragCanvas3D: drag canvas",paraId:9,tocIndex:0},{value:"ObserveCanvas3D: observe canvas",paraId:9,tocIndex:0},{value:"RollCanvas3D: rotate canvas",paraId:9,tocIndex:0},{value:"ZoomCanvas3D: zoom canvas",paraId:9,tocIndex:0},{value:"Plugin",paraId:10,tocIndex:0},{value:"Light: light source",paraId:11,tocIndex:0},{value:"The following extensions are required:",paraId:12,tocIndex:1},{value:"renderer",paraId:13,tocIndex:1},{value:"at least one 3D node",paraId:13,tocIndex:1},{value:"Line3D",paraId:13,tocIndex:1},{value:"Light",paraId:13,tocIndex:1},{value:"The renderer does not need to be registered, it can be passed in during the instantiation of Graph.",paraId:14,tocIndex:1},{value:"Register as follows:",paraId:15,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { Sphere, Line3D, Light } from '@antv/g6-extension-3d';\n\nregister(ExtensionCategory.NODE, 'sphere', Sphere);\nregister(ExtensionCategory.EDGE, 'line3d', Line3D);\nregister(ExtensionCategory.PLUGIN, 'light', Light);\n",paraId:16,tocIndex:1},{value:"After completing the above steps, you can create a 3D graph:",paraId:17,tocIndex:2},{value:"import { Graph } from '@antv/g6';\nimport { renderer } from '@antv/g6-extension-3d';\n\nconst graph = new Graph({\n  // ... other options\n  // use 3d renderer\n  renderer,\n  node: {\n    type: 'sphere', // use 3d node\n    style: {\n      materialType: 'phong', // use Phong material\n    },\n  },\n  edge: {\n    type: 'line3d', // use 3D edge\n  },\n  plugins: [\n    {\n      type: 'light', // Add light source\n      // configure directional light\n      directional: {\n        direction: [0, 0, 1],\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:18,tocIndex:2},{value:"You can also refer to:",paraId:19,tocIndex:2},{value:"Lite Solar System",paraId:20,tocIndex:2},{value:"3D Force Layout",paraId:21,tocIndex:2},{value:"@antv/g6",paraId:22,tocIndex:3},{value:" has a built-in registered plugin for CameraSetting for camera configuration, refer to ",paraId:22,tocIndex:3},{value:"plugin",paraId:22,tocIndex:3},{value:".",paraId:22,tocIndex:3},{value:"{\n  plugins: [\n    {\n      type: 'camera-setting',\n      projectionMode: 'perspective',\n      near: 0.1,\n      far: 1000,\n      fov: 45,\n      aspect: 1,\n    },\n  ];\n}\n",paraId:23,tocIndex:3}]},99872:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(53251);const t=[{value:"In general, if you are using modern build tools such as Webpack, Rollup, or ESBuild, you can easily build projects that depend on ",paraId:0},{value:"@antv/g6",paraId:0},{value:".",paraId:0},{value:"Some build tools, such as Vite, use ESBuild as the underlying tool, so you can refer to ESBuild's configuration.",paraId:1},{value:"Below are some example configurations that you can refer to when building your project. If you find that these configurations do not work properly, make sure that your build tool version is up to date.",paraId:2},{value:"Make sure that ",paraId:3,tocIndex:0},{value:"webpack",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"webpack-cli",paraId:3,tocIndex:0},{value:" are installed in your project:",paraId:3,tocIndex:0},{value:"npm install webpack webpack-cli --save-dev\n",paraId:4,tocIndex:0},{value:"Refer to the following ",paraId:5,tocIndex:0},{value:"webpack.config.js",paraId:5,tocIndex:0},{value:" for configuration:",paraId:5,tocIndex:0},{value:"const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.ts',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'index.js',\n  },\n  mode: 'production',\n};\n",paraId:6,tocIndex:0},{value:"Run the build command:",paraId:7,tocIndex:0},{value:"npx webpack\n",paraId:8,tocIndex:0},{value:"The above configuration works with ",paraId:9,tocIndex:0},{value:'"webpack": "^5.94.0"',paraId:9,tocIndex:0},{value:", ",paraId:9,tocIndex:0},{value:'"webpack-cli": "^5.1.4"',paraId:9,tocIndex:0},{value:".",paraId:9,tocIndex:0},{value:"⚠️ It is strongly recommended that projects use Webpack 5. If you are using Webpack 4, follow the steps below to configure:",paraId:10},{value:"Install the necessary dependencies: ",paraId:11},{value:"babel-loader",paraId:11},{value:" (<9), ",paraId:11},{value:"@babel/preset-env",paraId:11},{value:", ",paraId:11},{value:"@open-wc/webpack-import-meta-loader",paraId:11},{value:"If you are using TypeScript, you also need to install ",paraId:12},{value:"ts-loader",paraId:12},{value:".",paraId:12},{value:"npm install babel-loader@8 @babel/preset-env @open-wc/webpack-import-meta-loader --save-dev\n",paraId:13},{value:"Modify the ",paraId:14},{value:"webpack.config.js",paraId:14},{value:" configuration:",paraId:14},{value:"module.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'index.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env'],\n          },\n        },\n      },\n      {\n        test: /\\.js$/,\n        loader: '@open-wc/webpack-import-meta-loader',\n      },\n    ],\n  },\n  mode: 'production',\n};\n",paraId:15},{value:"First, make sure that ",paraId:16,tocIndex:1},{value:"rollup",paraId:16,tocIndex:1},{value:" and the necessary plugins are installed in your project:",paraId:16,tocIndex:1},{value:"@rollup/plugin-commonjs",paraId:17,tocIndex:1},{value:": Used to load CommonJS modules",paraId:17,tocIndex:1},{value:"@rollup/plugin-node-resolve",paraId:17,tocIndex:1},{value:": Used to load Node.js modules",paraId:17,tocIndex:1},{value:"npm install rollup @rollup/plugin-commonjs @rollup/plugin-node-resolve --save-dev\n",paraId:18,tocIndex:1},{value:"Refer to the following ",paraId:19,tocIndex:1},{value:"rollup.config.js",paraId:19,tocIndex:1},{value:" for configuration:",paraId:19,tocIndex:1},{value:"const commonjs = require('@rollup/plugin-commonjs');\nconst resolve = require('@rollup/plugin-node-resolve');\n\nmodule.exports = {\n  input: 'src/index.ts',\n  output: {\n    file: 'dist/index.js',\n    format: 'umd',\n    name: 'project',\n  },\n  plugins: [resolve(), commonjs()],\n};\n",paraId:20,tocIndex:1},{value:"Run the build command:",paraId:21,tocIndex:1},{value:"npx rollup -c\n",paraId:22,tocIndex:1},{value:"First, make sure that ",paraId:23,tocIndex:2},{value:"esbuild",paraId:23,tocIndex:2},{value:" is installed in your project:",paraId:23,tocIndex:2},{value:"npm install esbuild --save-dev\n",paraId:24,tocIndex:2},{value:"Run the build command:",paraId:25,tocIndex:2},{value:"npx esbuild src/index.ts --bundle --outfile=dist/index.js\n",paraId:26,tocIndex:2}]},64906:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(79720);const t=[{value:"There are three coordinate systems in G6 5.0: Canvas, Viewport, and Client.",paraId:0,tocIndex:0},{value:"The coordinate system used when drawing G6 elements is not affected by camera zooming or panning. To change the position of an element, you need to directly modify the element's position properties (x/y/z).",paraId:1,tocIndex:1},{value:"The canvas space is theoretically infinite. In the initial state (no panning, zoom ratio is 1), the origin of the canvas coordinate system is located at the upper-left corner of the viewport.",paraId:2,tocIndex:1},{value:"The viewport coordinate system is the projection of the camera coordinate system. When the camera pans or zooms, the position of elements in the canvas will also change in the viewport coordinate system.",paraId:3,tocIndex:2},{value:"The size of the viewport is the size of the canvas DOM container. The origin of the viewport coordinate system is located at the upper-left corner of the viewport, with the x-axis pointing to the right and the y-axis pointing down.",paraId:4,tocIndex:2},{value:"The client coordinate system has the browser's upper-left corner as the origin, with the x-axis pointing to the right and the y-axis pointing down.",paraId:5,tocIndex:3},{value:"The following figure describes the relationship between the viewport coordinate system and the client coordinate system:",paraId:6,tocIndex:3},{value:"G6 provides methods for coordinate system conversion, making it easy to convert between different coordinate systems.",paraId:7,tocIndex:4},{value:"Canvas coordinate system to viewport coordinate system: ",paraId:8,tocIndex:4},{value:"getViewportByCanvas",paraId:9,tocIndex:4},{value:"Client coordinate system to canvas coordinate system: ",paraId:8,tocIndex:4},{value:"getCanvasByClient",paraId:10,tocIndex:4},{value:"Viewport coordinate system to canvas coordinate system: ",paraId:8,tocIndex:4},{value:"getCanvasByViewport",paraId:11,tocIndex:4},{value:"Canvas coordinate system to client coordinate system: ",paraId:8,tocIndex:4},{value:"getClientByCanvas",paraId:12,tocIndex:4},{value:"Other related APIs are also provided:",paraId:13,tocIndex:4},{value:"Get the viewport center in viewport coordinates: ",paraId:14,tocIndex:4},{value:"getCanvasCenter",paraId:15,tocIndex:4},{value:"Get the viewport center in canvas coordinates: ",paraId:14,tocIndex:4},{value:"getViewportCenter",paraId:16,tocIndex:4},{value:"Get the position of the graph origin in the viewport coordinate system: ",paraId:14,tocIndex:4},{value:"getPosition",paraId:17,tocIndex:4}]},49452:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52311);const t=[{value:"G6 5.0 only provides an API for exporting the canvas as a Base64 image (",paraId:0},{value:"toDataURL",paraId:1},{value:"). If you need to download the image, you can use the following method:",paraId:0},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:2},{value:"The exported image may not contain the complete canvas content; the export range only includes the content within the Graph canvas. Some plugins use custom containers, canvases, etc., and this content will not appear in the exported image.",paraId:3}]},38316:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35999);const t=[{value:"The event system in G6 is encapsulated based on the event system of ",paraId:0,tocIndex:0},{value:"G",paraId:0,tocIndex:0},{value:", providing a wider range of event types and more convenient methods for event binding and unbinding.",paraId:0,tocIndex:0},{value:"The event types in G6 are mainly divided into the following categories:",paraId:1,tocIndex:1},{value:"Graph events",paraId:2,tocIndex:1},{value:"Canvas events",paraId:2,tocIndex:1},{value:"Element events",paraId:2,tocIndex:1},{value:"Graph events refer to events associated with the entire graph instance, such as the graph's rendering completion event, the graph's update event, etc. The complete list of graph events can be found at ",paraId:3,tocIndex:2},{value:"GraphEvent",paraId:4,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Listening to graph events is consistent with the default event listening method. For example, to listen to the graph's rendering completion event:",paraId:5,tocIndex:3},{value:"import { Graph, GraphEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(GraphEvent.AFTER_RENDER, () => {\n  // event handler\n});\n",paraId:6,tocIndex:3},{value:"Canvas events refer to events associated with the canvas, such as the canvas's click event, the canvas's drag event, etc. The complete list of canvas events can be found at ",paraId:7,tocIndex:4},{value:"CanvasEvent",paraId:8,tocIndex:4},{value:".",paraId:7,tocIndex:4},{value:"For example, to listen to the canvas's click event:",paraId:9,tocIndex:5},{value:"import { Graph, CanvasEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(CanvasEvent.CLICK, (event) => {\n  // event handler\n});\n",paraId:10,tocIndex:5},{value:"Element events primarily refer to events that are triggered on element objects, such as a node's drag event, an edge's click event, etc. Elements are categorized into three types: nodes (",paraId:11,tocIndex:6},{value:"node",paraId:11,tocIndex:6},{value:"), edges (",paraId:11,tocIndex:6},{value:"edge",paraId:11,tocIndex:6},{value:"), and combos (",paraId:11,tocIndex:6},{value:"combo",paraId:11,tocIndex:6},{value:"). The complete list of corresponding events can be found at: ",paraId:11,tocIndex:6},{value:"NodeEvent",paraId:12,tocIndex:6},{value:", ",paraId:11,tocIndex:6},{value:"EdgeEvent",paraId:13,tocIndex:6},{value:", ",paraId:11,tocIndex:6},{value:"ComboEvent",paraId:14,tocIndex:6},{value:".",paraId:11,tocIndex:6},{value:"Similar to canvas events, for example, to listen to a node's drag event and an edge's click event:",paraId:15,tocIndex:7},{value:"import { Graph, NodeEvent, EdgeEvent, ComboEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(NodeEvent.DRAG, (event) => {\n  // event handler\n});\n\ngraph.on(EdgeEvent.CLICK, (event) => {\n  // event handler\n});\n\ngraph.on(ComboEvent.CLICK, (event) => {\n  // event handler\n});\n",paraId:16,tocIndex:7},{value:"G6 provides the following APIs for event listening and unlistening:",paraId:17,tocIndex:8},{value:"Add an event listener",paraId:18,tocIndex:9},{value:"const handler = (event) => {\n  // event handler\n};\n\ngraph.on('event_name', handler);\n",paraId:19,tocIndex:9},{value:"Remove an event listener",paraId:20,tocIndex:10},{value:"graph.off('event_name', handler);\n",paraId:21,tocIndex:10},{value:"When no arguments are passed, it will remove all event listeners:",paraId:22,tocIndex:10},{value:"graph.off();\n",paraId:23,tocIndex:10},{value:"Add a one-time event listener, which means the event listener will be automatically removed after the event is triggered",paraId:24,tocIndex:11},{value:"graph.once('event_name', handler);\n",paraId:25,tocIndex:11},{value:"If you want to manually trigger an event, you can use the ",paraId:26,tocIndex:12},{value:"emit",paraId:26,tocIndex:12},{value:" method:",paraId:26,tocIndex:12},{value:"graph.emit('event_name', {\n  // event data\n});\n",paraId:27,tocIndex:12}]},48713:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(23996);const t=[{value:"Why use iconfont? It offers great compatibility, a wide variety of icons, and multicolor options. For more details, please visit the ",paraId:0,tocIndex:0},{value:"Alibaba Iconfont Platform",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"First, you need to download the desired font icons from the ",paraId:1,tocIndex:2},{value:"iconfont",paraId:1,tocIndex:2},{value:" website. Create a project, select the required icons, and then download the generated icon files.",paraId:1,tocIndex:2},{value:"After downloading, place the directory containing the icon font files (typically including ",paraId:2,tocIndex:3},{value:".eot",paraId:2,tocIndex:3},{value:", ",paraId:2,tocIndex:3},{value:".woff",paraId:2,tocIndex:3},{value:", ",paraId:2,tocIndex:3},{value:".ttf",paraId:2,tocIndex:3},{value:", and ",paraId:2,tocIndex:3},{value:".svg",paraId:2,tocIndex:3},{value:" files, as well as the ",paraId:2,tocIndex:3},{value:"iconfont.css",paraId:2,tocIndex:3},{value:" stylesheet) into your project.",paraId:2,tocIndex:3},{value:"You can choose how to include them. Below is an example of how to include them in HTML:",paraId:3,tocIndex:3},{value:"<head>\n  <style>\n    @import 'path-to-iconfont/iconfont.css';\n  </style>\n</head>\n",paraId:4,tocIndex:3},{value:"{\n  node: {\n    style: {\n      iconFontFamily: 'iconfont', // Corresponds to the `font-family` value in iconfont.css\n      iconText: '\\ue7f1', // Corresponds to the `content` value in iconfont.css, make sure to add `u`\n      iconFill: '#7863FF'\n    }\n  }\n}\n",paraId:5,tocIndex:4},{value:"getIcon()",paraId:6},{value:"To make it easier to retrieve icons, you can create a utility function ",paraId:7,tocIndex:5},{value:"getIcon",paraId:7,tocIndex:5},{value:". This function reads the icon information from the ",paraId:7,tocIndex:5},{value:"iconfont.json",paraId:7,tocIndex:5},{value:" file and returns the corresponding Unicode character. Note that manually concatenating Unicode (",paraId:7,tocIndex:5},{value:"\\\\u${icon.unicode}",paraId:7,tocIndex:5},{value:") won't work. Refer to ",paraId:7,tocIndex:5},{value:"MDN String.fromCodePoint",paraId:7,tocIndex:5},{value:" for details.",paraId:7,tocIndex:5},{value:"First, ensure you have an ",paraId:8,tocIndex:5},{value:"iconfont.json",paraId:8,tocIndex:5},{value:" file containing the detailed icon information.",paraId:8,tocIndex:5},{value:"import fonts from 'path-to-iconfont/iconfont.json';\n\nconst icons = fonts.glyphs.map((icon) => {\n  return {\n    name: icon.font_class,\n    unicode: String.fromCodePoint(icon.unicode_decimal), // `\\\\u${icon.unicode}`,\n  };\n});\n\nconst getIcon = (type) => {\n  const matchIcon = icons.find((icon) => {\n    return icon.name === type;\n  }) || { unicode: '', name: 'default' };\n  return matchIcon.unicode;\n};\n",paraId:9,tocIndex:5},{value:"Use it in your project:",paraId:10,tocIndex:5},{value:"{\n  node: {\n    style: {\n      iconFontFamily: \"iconfont\",\n      iconText: getIcon('logo')\n    }\n  }\n}\n",paraId:11,tocIndex:5}]},27674:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(24578);const t=[{value:"G6 uses Canvas as the default renderer, but also supports rendering with SVG and WebGL. To switch to the SVG or WebGL renderer, simply pass the ",paraId:0},{value:"renderer",paraId:0},{value:" parameter during initialization.",paraId:0},{value:"Install the renderer dependency:",paraId:1,tocIndex:0},{value:"npm install @antv/g-svg\n",paraId:2,tocIndex:0},{value:"Configure the renderer:",paraId:3,tocIndex:0},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... other options\n  // All canvases will use the SVG renderer here\n  renderer: () => new SVGRenderer(),\n});\n",paraId:4,tocIndex:0},{value:"Install the renderer dependency:",paraId:5,tocIndex:1},{value:"npm install @antv/g-webgl\n",paraId:6,tocIndex:1},{value:"Configure the renderer:",paraId:7,tocIndex:1},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... other options\n  // All canvases will use the WebGL renderer here\n  renderer: () => new WebGLRenderer(),\n});\n",paraId:8,tocIndex:1},{value:"G6 uses layered canvases for rendering, so ",paraId:9,tocIndex:2},{value:"renderer",paraId:9,tocIndex:2},{value:" is a callback function that takes the canvas type as a parameter and returns the renderer instance. If you want to use different renderers on different canvases, you can configure it like this:",paraId:9,tocIndex:2},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst graph = new Graph({\n  // ... other options\n  renderer: (layer) => {\n    // The main canvas uses the WebGL renderer, and the other canvases use the SVG renderer\n    if (layer === 'main') return new WebGLRenderer();\n    return new SVGRenderer();\n  },\n});\n",paraId:10,tocIndex:2},{value:"G6 does not provide a API to switch the renderer, but you can still update the ",paraId:11,tocIndex:3},{value:"renderer",paraId:11,tocIndex:3},{value:" option through the ",paraId:11,tocIndex:3},{value:"setOptions",paraId:11,tocIndex:3},{value:" method.",paraId:11,tocIndex:3},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\n// Use the WebGL renderer by default\nconst graph = new Graph({\n  // ... other options\n  renderer: () => new WebGLRenderer(),\n});\n\nawait graph.render();\n\n// Switch to the SVG renderer\ngraph.setOptions({\n  renderer: () => new SVGRenderer(),\n});\n",paraId:12,tocIndex:3}]},26699:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(72891);const t=[{value:"# npm\nnpm install @antv/g6 --save\n\n# pnpm\npnpm add @antv/g6\n\n# yarn\nyarn add @antv/g6\n",paraId:0,tocIndex:0},{value:"Import G6 in the code:",paraId:1,tocIndex:0},{value:"import { Graph } from '@antv/g6';\n",paraId:2,tocIndex:0},{value:"Visit ",paraId:3,tocIndex:0},{value:"G6 npm Example",paraId:3,tocIndex:0},{value:" to view the complete example code.",paraId:3,tocIndex:0},{value:"@antv/g6",paraId:4,tocIndex:1},{value:" Available on multiple CDNs:",paraId:4,tocIndex:1},{value:"unpkg: ",paraId:5,tocIndex:1},{value:"https://unpkg.com/@antv/g6@5/dist/g6.min.js",paraId:5,tocIndex:1},{value:"jsDelivr: ",paraId:5,tocIndex:1},{value:"https://cdn.jsdelivr.net/npm/@antv/g6@5/dist/g6.min.js",paraId:5,tocIndex:1},{value:"npmmirror: ",paraId:5,tocIndex:1},{value:"https://registry.npmmirror.com/@antv/g6/5/files/dist/g6.min.js",paraId:5,tocIndex:1},{value:"Import G6 using a ",paraId:6,tocIndex:1},{value:"script",paraId:6,tocIndex:1},{value:" tag:",paraId:6,tocIndex:1},{value:'<script src="https://unpkg.com/@antv/g6@5/dist/g6.min.js"><\/script>\n',paraId:7,tocIndex:1},{value:"Visit ",paraId:8,tocIndex:1},{value:"G6 CDN Example",paraId:8,tocIndex:1},{value:" to view the complete example code.",paraId:8,tocIndex:1}]},98049:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(32173);const t=[{value:"Refer to the example below, you can use G6 in Angular, and you can also view the ",paraId:0},{value:"Live Example",paraId:0},{value:"。",paraId:0},{value:"app.component.html",paraId:1},{value:"<div>\n  <h1>{{ title }}</h1>\n  <div #container></div>\n</div>\n",paraId:2},{value:"app.component.ts",paraId:3},{value:"import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { Graph } from '@antv/g6';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Use G6 in Angular';\n\n  @ViewChild('container') container: ElementRef;\n\n  ngAfterViewInit() {\n    const graph = new Graph({\n      container: this.container.nativeElement,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }\n}\n",paraId:4}]},89526:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78454);const t=[{value:"Refer to the example below, you can use G6 in React, and you can also view the ",paraId:0,tocIndex:0},{value:"Live Example",paraId:0,tocIndex:0},{value:" 。",paraId:0,tocIndex:0},{value:"import { Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport default () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new Graph({\n      container: containerRef.current!,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }, []);\n\n  return <div ref={containerRef} />;\n};\n",paraId:1,tocIndex:0},{value:"In strict mode, React will update twice, causing G6 to create and destroy the Graph instance repeatedly. You can refer to the following example to solve this problem:",paraId:2,tocIndex:1},{value:"import type { GraphOptions } from '@antv/g6';\nimport { Graph as G6Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport interface GraphProps {\n  options: GraphOptions;\n  onRender?: (graph: G6Graph) => void;\n  onDestroy?: () => void;\n}\n\nexport const Graph = (props: GraphProps) => {\n  const { options, onRender, onDestroy } = props;\n  const graphRef = useRef<G6Graph>();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new G6Graph({ container: containerRef.current! });\n    graphRef.current = graph;\n\n    return () => {\n      const graph = graphRef.current;\n      if (graph) {\n        graph.destroy();\n        onDestroy?.();\n        graphRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const graph = graphRef.current;\n\n    if (!options || !container || !graph || graph.destroyed) return;\n\n    graph.setOptions(options);\n    graph\n      .render()\n      .then(() => onRender?.(graph))\n      // eslint-disable-next-line no-console\n      .catch((error) => console.debug(error));\n  }, [options]);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n};\n",paraId:3,tocIndex:1}]},62737:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(98966);const t=[{value:"Please do not pass Vue reactive data directly to the G6 instance, which may cause G6 to fail to render correctly, or even cause the page to crash.",paraId:0},{value:"Refer to the example below, you can use G6 in Vue, and you can also view the ",paraId:1},{value:"Live Example",paraId:1},{value:"。",paraId:1},{value:"<template>\n  <div id=\"container\"></div>\n</template>\n\n<script setup>\n  import { onMounted } from 'vue';\n  import { Graph } from '@antv/g6';\n\n  onMounted(() => {\n    const graph = new Graph({\n      container: document.getElementById('container'),\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  });\n<\/script>\n",paraId:2}]},42141:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52717);const t=[{value:"Visit ",paraId:0,tocIndex:0},{value:"Chart Examples",paraId:1,tocIndex:0},{value:" to experience G6 online without any environment setup.",paraId:0,tocIndex:0},{value:"In this example, we will create a simple graph using G6 based on an HTML page.",paraId:2,tocIndex:1},{value:"Copy the following code into an HTML file and then open this file in a browser:",paraId:3,tocIndex:1},{value:"\x3c!-- Prepare a container --\x3e\n<div id=\"container\" style=\"width: 500px; height: 500px\"></div>\n\n\x3c!-- Import G6's JS file --\x3e\n<script src=\"https://unpkg.com/@antv/g6@5/dist/g6.min.js\"><\/script>\n\n<script>\n  const { Graph } = G6;\n\n  fetch('https://assets.antv.antgroup.com/g6/graph.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const graph = new Graph({\n        container: 'container',\n        autoFit: 'view',\n        data,\n        node: {\n          style: {\n            size: 10,\n          },\n          palette: {\n            field: 'group',\n            color: 'tableau',\n          },\n        },\n        layout: {\n          type: 'd3-force',\n          manyBody: {},\n          x: {},\n          y: {},\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n      });\n\n      graph.render();\n    });\n<\/script>\n",paraId:4,tocIndex:1},{value:"You will get a graph as shown below:",paraId:5,tocIndex:1},{value:"fetch('https://assets.antv.antgroup.com/g6/graph.json')\n  .then((res) => res.json())\n  .then((data) =>\n    createGraph(\n      {\n        data,\n        autoFit: 'view',\n        animation: false,\n        node: {\n          style: {\n            size: 10,\n          },\n          palette: {\n            field: 'group',\n            color: 'tableau',\n          },\n        },\n        layout: {\n          type: 'd3-force',\n          animation: false,\n          manyBody: {},\n          x: {},\n          y: {},\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n      },\n      { width: 500, height: 500 },\n    ),\n  );\n",paraId:6,tocIndex:1},{value:"Let's analyze the following code snippet:",paraId:7,tocIndex:1},{value:"First, we create a ",paraId:8,tocIndex:1},{value:"div",paraId:8,tocIndex:1},{value:" element to serve as the container for the graph:",paraId:8,tocIndex:1},{value:'<div id="container" style="width: 500px; height: 500px"></div>\n',paraId:9,tocIndex:1},{value:"Then, include the G6's JS file:",paraId:10,tocIndex:1},{value:'<script src="https://unpkg.com/@antv/g6@5/dist/g6.min.js"><\/script>\n',paraId:11,tocIndex:1},{value:"Use the ",paraId:12,tocIndex:1},{value:"fetch",paraId:12,tocIndex:1},{value:" method to obtain the graph's data:",paraId:12,tocIndex:1},{value:"fetch('https://assets.antv.antgroup.com/g6/graph.json').then((res) => res.json());\n",paraId:13,tocIndex:1},{value:"Finally, create an instance of the graph, pass in the configuration object, and call the ",paraId:14,tocIndex:1},{value:"render",paraId:14,tocIndex:1},{value:" method to render the graph:",paraId:14,tocIndex:1},{value:"const { Graph } = G6;\n\nconst graph = new Graph({\n  container: 'container',\n  autoFit: 'view',\n  data,\n  node: {\n    style: {\n      size: 10,\n    },\n    palette: {\n      field: 'group',\n      color: 'tableau',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    manyBody: {},\n    x: {},\n    y: {},\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:15,tocIndex:1},{value:"If you are using frameworks such as React, Vue, Angular, etc., you can refer to:",paraId:16,tocIndex:1},{value:"Using G6 in React",paraId:17,tocIndex:1},{value:"Using G6 in Vue",paraId:18,tocIndex:1},{value:"Using G6 in Angular",paraId:19,tocIndex:1}]},52529:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(40465);const t=[{value:"This tutorial will guide you through the development of a G6 chart from scratch, and along the way, you will learn and understand the main concepts of G6.",paraId:0},{value:"We will use Vite to create a simple front-end application.",paraId:1,tocIndex:0},{value:"First, create an empty directory:",paraId:2,tocIndex:1},{value:"mkdir g6-tutorial\n\ncd g6-tutorial\n",paraId:3,tocIndex:1},{value:"Initialize the project:",paraId:4,tocIndex:1},{value:"npm init -y\n",paraId:5,tocIndex:1},{value:"Install G6:",paraId:6,tocIndex:1},{value:"npm install @antv/g6 --save\n",paraId:7,tocIndex:1},{value:"Vite is a new type of front-end build tool that is based on ESModule and can quickly start up projects.",paraId:8,tocIndex:1},{value:"Install Vite:",paraId:9,tocIndex:1},{value:"npm install vite --save-dev\n",paraId:10,tocIndex:1},{value:"Add a start script to the ",paraId:11,tocIndex:1},{value:"package.json",paraId:11,tocIndex:1},{value:":",paraId:11,tocIndex:1},{value:'{\n  "scripts": {\n    "dev": "vite"\n  }\n}\n',paraId:12,tocIndex:1},{value:"Create the ",paraId:13,tocIndex:2},{value:"index.html",paraId:13,tocIndex:2},{value:" and ",paraId:13,tocIndex:2},{value:"main.ts",paraId:13,tocIndex:2},{value:" files with the following content:",paraId:13,tocIndex:2},{value:"index.html",paraId:14,tocIndex:2},{value:":",paraId:14,tocIndex:2},{value:'<!doctype html>\n<html>\n  <head>\n    <title>@antv/g6 Tutorial</title>\n  </head>\n  <body>\n    <div id="container"></div>\n    <script type="module" src="main.ts"><\/script>\n  </body>\n</html>\n',paraId:15,tocIndex:2},{value:"main.ts",paraId:16,tocIndex:2},{value:"：",paraId:16,tocIndex:2},{value:"alert('Hello, G6!');\n",paraId:17,tocIndex:2},{value:"npm run dev\n",paraId:18,tocIndex:3},{value:"Open a web browser and visit the address output in the terminal (typically: ",paraId:19,tocIndex:3},{value:"http://127.0.0.1:5173/",paraId:19,tocIndex:3},{value:'), and you will see a pop-up displaying "Hello, G6!".',paraId:19,tocIndex:3},{value:"Next, we will create a simple chart using G6.",paraId:20,tocIndex:4},{value:"G6 uses JSON-formatted data to describe the graph, which usually includes nodes and edges. We will use the following prepared data:",paraId:21,tocIndex:5},{value:"const data = {\n  nodes: [\n    { id: 'node-1', style: { x: 50, y: 50 } },\n    { id: 'node-2', style: { x: 150, y: 50 } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2' }],\n};\n",paraId:22,tocIndex:5},{value:"The data includes two nodes and one edge. The ",paraId:23,tocIndex:5},{value:"id",paraId:23,tocIndex:5},{value:" attribute for nodes is mandatory, and the position of each node is set in the ",paraId:23,tocIndex:5},{value:"style",paraId:23,tocIndex:5},{value:". The ",paraId:23,tocIndex:5},{value:"source",paraId:23,tocIndex:5},{value:" and ",paraId:23,tocIndex:5},{value:"target",paraId:23,tocIndex:5},{value:" attributes of the edge represent the ",paraId:23,tocIndex:5},{value:"id",paraId:23,tocIndex:5},{value:" of the starting node and the ending node, respectively.",paraId:23,tocIndex:5},{value:"Create an instance of the Graph, pass in a configuration object that includes the container and data, and then call the ",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:" method to draw the Graph:",paraId:24,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:6},{value:"As shown below, you can see that the chart has been successfully drawn:",paraId:26,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n});\n\ngraph.render();\n",paraId:27,tocIndex:6},{value:"Next, we will introduce how to configure the style and types of elements in the canvas.",paraId:28,tocIndex:7},{value:"G6 provides various mechanisms to configure element styles, which can be done in the data itself or within the chart instance. In the previous example, we configured the position of the nodes in the data. Next, we will configure the styles of nodes and edges in the graph configuration options:",paraId:29,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    style: {\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:30,tocIndex:7},{value:"As the code shows, we have configured the fill color of the nodes to be pink and the stroke color of the edges to be light green within the chart instance. You can see the effect in the example below:",paraId:31,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    style: {\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:32,tocIndex:7},{value:"The key parts are the ",paraId:33,tocIndex:7},{value:"node.style",paraId:33,tocIndex:7},{value:" and ",paraId:33,tocIndex:7},{value:"edge.style",paraId:33,tocIndex:7},{value:" options, which are used to configure the styles of nodes and edges, respectively.",paraId:33,tocIndex:7},{value:"In the subsequent code examples, we will only display the parts of the options. For the complete code of this project, please refer to the ",paraId:34,tocIndex:7},{value:"Complete Example",paraId:34,tocIndex:7},{value:".",paraId:34,tocIndex:7},{value:"Next, we will demonstrate more types of nodes by setting the node type:",paraId:35,tocIndex:7},{value:"{\n  node: {\n    type: (datum) => datum.id === 'node-1' ? 'circle' : 'rect',\n    style: {\n      fill: 'pink',\n      size: 20\n    }\n  }\n}\n",paraId:36,tocIndex:7},{value:"In the code above, we set the ",paraId:37,tocIndex:7},{value:"type",paraId:37,tocIndex:7},{value:" attribute of the node, which can be a string or a function. When ",paraId:37,tocIndex:7},{value:"type",paraId:37,tocIndex:7},{value:" is a function, the argument of the function is the current node's data object, and the return value is the type of the node.",paraId:37,tocIndex:7},{value:"Similarly, each attribute under the ",paraId:38,tocIndex:7},{value:"style",paraId:38,tocIndex:7},{value:" style of an element can also be a function, with the argument being the current element's data object.",paraId:38,tocIndex:7},{value:"You can even set the entire ",paraId:39,tocIndex:7},{value:"style",paraId:39,tocIndex:7},{value:" property as a function, allowing you to dynamically set the element's style based on the data object.",paraId:39,tocIndex:7},{value:"The circular node (",paraId:40,tocIndex:7},{value:"circle",paraId:40,tocIndex:7},{value:") is the default node type in G6. Here, we set the type of the first node to a circle and the type of the second node to a rectangle.",paraId:40,tocIndex:7},{value:"At the same time, we also set the size of the nodes to 20, so the first node is a circle with a radius of 10, and the second node is a square with a side length of 20.",paraId:41,tocIndex:7},{value:"If you want to set the size of the rectangular node to 20x10, you can set ",paraId:42,tocIndex:7},{value:"size",paraId:42,tocIndex:7},{value:" to an array ",paraId:42,tocIndex:7},{value:"[20, 10]",paraId:42,tocIndex:7},{value:".",paraId:42,tocIndex:7},{value:"You can see the effect in the example below:",paraId:43,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\n    style: {\n      fill: 'pink',\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:44,tocIndex:7},{value:"The chart provided in the previous example is static. Next, we will add some interactive behaviors.",paraId:45,tocIndex:8},{value:"G6 offers a variety of interactive behaviors. We will add a few commonly used Behaviors to allow users to drag, zoom the canvas, and drag nodes.",paraId:46,tocIndex:8},{value:"{\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'];\n}\n",paraId:47,tocIndex:8},{value:"Try dragging nodes and the canvas in the example below, and use the scroll wheel to zoom in and out on the canvas:",paraId:48,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\n    style: {\n      fill: 'pink',\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:49,tocIndex:8},{value:"In the previous example, we manually set the positions of the nodes. However, this can become very difficult when there are many nodes.",paraId:50,tocIndex:9},{value:"Layout algorithms can automatically adjust the positions of nodes based on certain rules. G6 provides a variety of layout algorithms, such as tree layout, force-directed layout, and so on.",paraId:51,tocIndex:9},{value:"First, generate a set of data that does not include position information:",paraId:52,tocIndex:9},{value:"const data = {\n  nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n};\n",paraId:53,tocIndex:9},{value:"By default, if a node does not have position information, G6 will place the node at the top-left corner, that is, at the coordinates ",paraId:54,tocIndex:9},{value:"(0, 0)",paraId:54,tocIndex:9},{value:".",paraId:54,tocIndex:9},{value:"Next, we will use the ",paraId:55,tocIndex:9},{value:"d3-force",paraId:55,tocIndex:9},{value:" layout algorithm, which is a force-directed layout algorithm that can simulate the forces of attraction and repulsion between nodes, allowing the nodes to automatically adjust to suitable positions.",paraId:55,tocIndex:9},{value:"{\n  layout: {\n    type: 'd3-force',\n  },\n}\n",paraId:56,tocIndex:9},{value:"View the example below, and you can see that the nodes have automatically adjusted to suitable positions:",paraId:57,tocIndex:9},{value:"Complete Code",paraId:58},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:59,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:60,tocIndex:9},{value:"Similarly, when there are many nodes, manually setting the color of each node can become difficult. G6 provides a palette mechanism that makes it easy to assign colors to elements.",paraId:61,tocIndex:10},{value:"Palettes typically assign colors to elements based on a specific field in the data, such as the type of node, the weight of an edge, etc.",paraId:62,tocIndex:10},{value:"Below, we add a ",paraId:63,tocIndex:10},{value:"category",paraId:63,tocIndex:10},{value:" field in the data:",paraId:63,tocIndex:10},{value:"const data = {\n  nodes: Array.from({ length: 10 }).map((_, i) => ({\n    id: `node-${i}`,\n    data: { category: i === 0 ? 'central' : 'around' },\n  })),\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n};\n",paraId:64,tocIndex:10},{value:"Then, use the ",paraId:65,tocIndex:10},{value:"tableau",paraId:65,tocIndex:10},{value:" palette to set the colors for the nodes, where the ",paraId:65,tocIndex:10},{value:"field",paraId:65,tocIndex:10},{value:" attribute specifies the field in the data, and the ",paraId:65,tocIndex:10},{value:"color",paraId:65,tocIndex:10},{value:" attribute specifies the name of the palette.",paraId:65,tocIndex:10},{value:"{\n  node: {\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    }\n  }\n}\n",paraId:66,tocIndex:10},{value:"It is important to note that the ",paraId:67,tocIndex:10},{value:"fill",paraId:67,tocIndex:10},{value:" style in ",paraId:67,tocIndex:10},{value:"node.style",paraId:67,tocIndex:10},{value:" should be removed, as its priority is higher than the colors assigned by the palette.",paraId:67,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:68,tocIndex:10},{value:"The plugin mechanism is an important feature of G6, which allows you to extend the functionality of G6 through plugins. G6 provides a wealth of built-in plugins, such as ",paraId:69,tocIndex:11},{value:"tooltip",paraId:69,tocIndex:11},{value:", ",paraId:69,tocIndex:11},{value:"legend",paraId:69,tocIndex:11},{value:", etc., and also supports user-defined plugins.",paraId:69,tocIndex:11},{value:"Below, we will use the ",paraId:70,tocIndex:11},{value:"grid-line",paraId:70,tocIndex:11},{value:" plugin to add grid lines to the canvas:",paraId:70,tocIndex:11},{value:"{\n  plugins: ['grid-line'],\n}\n",paraId:71,tocIndex:11},{value:"You can see that grid lines have been added to the canvas:",paraId:72,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n  plugins: ['grid-line'],\n});\n\ngraph.render();\n",paraId:73,tocIndex:11},{value:"The plugin configuration mentioned above used a shorthand form. Most plugins support the passing of additional parameters. For example, the ",paraId:74,tocIndex:11},{value:"grid-line",paraId:74,tocIndex:11},{value:" plugin allows you to configure the ",paraId:74,tocIndex:11},{value:"follow",paraId:74,tocIndex:11},{value:" property to specify whether the grid lines should follow the canvas when it is dragged.",paraId:74,tocIndex:11},{value:"{\n  plugins: [{ type: 'grid-line', follow: true }];\n}\n",paraId:75,tocIndex:11},{value:"Try dragging the canvas in the example below, and you will see that the grid lines move along with the canvas:",paraId:76,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n  plugins: [{ type: 'grid-line', follow: true }],\n});\n\ngraph.render();\n",paraId:77,tocIndex:11},{value:"In this tutorial, we created a G6 chart from scratch and became acquainted with the main concepts of G6. We learned how to create a simple chart, how to configure the style and types of elements, how to add interactive behaviors, how to use layout algorithms, how to use palettes, and how to use plugins.",paraId:78,tocIndex:12},{value:"For a more detailed introduction to the concepts of G6, you can refer to ",paraId:79,tocIndex:12},{value:"Core Concepts",paraId:80,tocIndex:12},{value:".",paraId:79,tocIndex:12},{value:"Detailed explanations of options such as elements, layouts, and plugins can be found in the ",paraId:81,tocIndex:12},{value:"API",paraId:82,tocIndex:12},{value:".",paraId:81,tocIndex:12}]},99664:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(71551);const t=[{value:"Extension is an important concept in G6, it is a general term for all expandable parts in G6, including the following types:",paraId:0,tocIndex:0},{value:"Animation",paraId:1,tocIndex:0},{value:"Behavior",paraId:1,tocIndex:0},{value:"Element\n",paraId:1,tocIndex:0},{value:"Node",paraId:2,tocIndex:0},{value:"Edge",paraId:2,tocIndex:0},{value:"Combo",paraId:2,tocIndex:0},{value:"Layout",paraId:1,tocIndex:0},{value:"Palette",paraId:1,tocIndex:0},{value:"Plugin",paraId:1,tocIndex:0},{value:"Theme",paraId:1,tocIndex:0},{value:"Transform",paraId:1,tocIndex:0},{value:"G6 provides the ",paraId:3,tocIndex:1},{value:"register",paraId:3,tocIndex:1},{value:" function for registering extensions, for example:",paraId:3,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomNode } from './my-custom-node';\n\n// # Registering Nodes\nregister(ExtensionCategory.NODE, 'custom-node', CustomNode);\n",paraId:4,tocIndex:1},{value:"The first parameter of the ",paraId:5,tocIndex:1},{value:"register",paraId:5,tocIndex:1},{value:" function is the type of the extension, the second parameter is the name of the extension, and the third parameter is the implementation of the extension.",paraId:5,tocIndex:1},{value:"Different types of extensions ",paraId:6,tocIndex:1},{value:"can",paraId:6,tocIndex:1},{value:" use the same extension name, but when registering extensions of the same type, only the first registration will take effect.",paraId:6,tocIndex:1},{value:"// ✅\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\nregister(ExtensionCategory.COMBO, 'custom-name', CustomCombo);\n\n// ❌\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\n",paraId:7,tocIndex:1},{value:"The configuration location for different types of extensions varies, but all are used by specifying the name that was used during registration, for example:",paraId:8,tocIndex:2},{value:"Using node extensions: ",paraId:9,tocIndex:2},{value:"options.node.type",paraId:9,tocIndex:2},{value:"Using edge extensions: ",paraId:9,tocIndex:2},{value:"options.edge.type",paraId:9,tocIndex:2},{value:"Using combo extensions: ",paraId:9,tocIndex:2},{value:"options.combo.type",paraId:9,tocIndex:2},{value:"Using behavior extensions: ",paraId:9,tocIndex:2},{value:"options.behaviors",paraId:9,tocIndex:2},{value:"Using layout extensions: ",paraId:9,tocIndex:2},{value:"options.layout.type",paraId:9,tocIndex:2},{value:"Using plugin extensions: ",paraId:9,tocIndex:2},{value:"options.plugins",paraId:9,tocIndex:2},{value:"Using theme extensions: ",paraId:9,tocIndex:2},{value:"options.theme",paraId:9,tocIndex:2},{value:"Using data transform extensions: ",paraId:9,tocIndex:2},{value:"options.transform",paraId:9,tocIndex:2},{value:"Using palette extensions: ",paraId:9,tocIndex:2},{value:"options.node.palette",paraId:9,tocIndex:2},{value:", ",paraId:9,tocIndex:2},{value:"options.edge.palette",paraId:9,tocIndex:2},{value:", etc.",paraId:9,tocIndex:2},{value:"Using animation extensions: ",paraId:9,tocIndex:2},{value:"options.node.animate",paraId:9,tocIndex:2},{value:", ",paraId:9,tocIndex:2},{value:"options.edge.animate",paraId:9,tocIndex:2},{value:", etc.",paraId:9,tocIndex:2},{value:"G6 provides the ",paraId:10,tocIndex:3},{value:"getExtension",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"getExtensions",paraId:10,tocIndex:3},{value:" methods to obtain a single extension and all extensions of a specified type, respectively, for example:",paraId:10,tocIndex:3},{value:"import { getExtension, getExtensions, ExtensionCategory } from '@antv/g6';\n\n// To get the implementation of the node extension registered with the name 'custom-node'\ngetExtension(ExtensionCategory.NODE, 'custom-node');\n\n// Retrieve all registered node extension implementations\ngetExtensions(ExtensionCategory.NODE);\n",paraId:11,tocIndex:3}]},81718:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(93264);const t=[{value:"title: Built-in Extensions\norder: 4",paraId:0},{value:"The G6 built-in extensions and registered types are as follows:",paraId:1},{value:"Extension",paraId:2,tocIndex:0},{value:"Registration Type",paraId:2,tocIndex:0},{value:"ComboCollapse",paraId:2,tocIndex:0},{value:"'combo-collapse'",paraId:2,tocIndex:0},{value:"ComboExpand",paraId:2,tocIndex:0},{value:"'combo-expand'",paraId:2,tocIndex:0},{value:"NodeCollapse",paraId:2,tocIndex:0},{value:"'node-collapse'",paraId:2,tocIndex:0},{value:"NodeExpand",paraId:2,tocIndex:0},{value:"'node-expand'",paraId:2,tocIndex:0},{value:"PathIn",paraId:2,tocIndex:0},{value:"'path-in'",paraId:2,tocIndex:0},{value:"PathOut",paraId:2,tocIndex:0},{value:"'path-out'",paraId:2,tocIndex:0},{value:"Fade",paraId:2,tocIndex:0},{value:"'fade'",paraId:2,tocIndex:0},{value:"Translate",paraId:2,tocIndex:0},{value:"'translate'",paraId:2,tocIndex:0},{value:"Usage:",paraId:3,tocIndex:0},{value:"In ",paraId:4,tocIndex:0},{value:"GraphOptions.[node|edge|combo].animation.[stage]",paraId:4,tocIndex:0},{value:", for example:",paraId:4,tocIndex:0},{value:"const graph = new Graph({\n  // ... other options\n  node: {\n    animation: {\n      update: 'translate', // Only use translation animation in the update stage\n    },\n  },\n});\n",paraId:5,tocIndex:0},{value:"Extension",paraId:6,tocIndex:1},{value:"Registration Type",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"BrushSelect",paraId:6,tocIndex:1},{value:"'brush-select'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"ClickSelect",paraId:6,tocIndex:1},{value:"'click-select'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"CollapseExpand",paraId:6,tocIndex:1},{value:"'collapse-expand'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"CreateEdge",paraId:6,tocIndex:1},{value:"'create-edge'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"DragCanvas",paraId:6,tocIndex:1},{value:"'drag-canvas'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"DragElementForce",paraId:6,tocIndex:1},{value:"'drag-element-force'",paraId:6,tocIndex:1},{value:"Drag element when use d3-force layout",paraId:6,tocIndex:1},{value:"DragElement",paraId:6,tocIndex:1},{value:"'drag-element'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"FixElementSize",paraId:6,tocIndex:1},{value:"'fix-element-size'",paraId:6,tocIndex:1},{value:"Keep the size of element during zooming canvas",paraId:6,tocIndex:1},{value:"FocusElement",paraId:6,tocIndex:1},{value:"'focus-element'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"HoverActivate",paraId:6,tocIndex:1},{value:"'hover-activate'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"LassoSelect",paraId:6,tocIndex:1},{value:"'lasso-select'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"OptimizeViewportTransform",paraId:6,tocIndex:1},{value:"'optimize-viewport-transform'",paraId:6,tocIndex:1},{value:"Hide elements during manipulate the canvas",paraId:6,tocIndex:1},{value:"ScrollCanvas",paraId:6,tocIndex:1},{value:"'scroll-canvas'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"ZoomCanvas",paraId:6,tocIndex:1},{value:"'zoom-canvas'",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"Usage:",paraId:7,tocIndex:1},{value:"In ",paraId:8,tocIndex:1},{value:"GraphOptions.behaviors",paraId:8,tocIndex:1},{value:", for example:",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  // ... other options\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n});\n",paraId:9,tocIndex:1},{value:"Extension",paraId:10,tocIndex:3},{value:"Registration Type",paraId:10,tocIndex:3},{value:"circle",paraId:10,tocIndex:3},{value:"Circle",paraId:10,tocIndex:3},{value:"diamond",paraId:10,tocIndex:3},{value:"Diamond",paraId:10,tocIndex:3},{value:"ellipse",paraId:10,tocIndex:3},{value:"Ellipse",paraId:10,tocIndex:3},{value:"hexagon",paraId:10,tocIndex:3},{value:"Hexagon",paraId:10,tocIndex:3},{value:"html",paraId:10,tocIndex:3},{value:"HTML",paraId:10,tocIndex:3},{value:"image",paraId:10,tocIndex:3},{value:"Image",paraId:10,tocIndex:3},{value:"rect",paraId:10,tocIndex:3},{value:"Rect",paraId:10,tocIndex:3},{value:"star",paraId:10,tocIndex:3},{value:"Star",paraId:10,tocIndex:3},{value:"donut",paraId:10,tocIndex:3},{value:"Donut",paraId:10,tocIndex:3},{value:"triangle",paraId:10,tocIndex:3},{value:"Triangle",paraId:10,tocIndex:3},{value:"Usage:",paraId:11,tocIndex:3},{value:"1. In ",paraId:12,tocIndex:3},{value:"GraphOptions.data.nodes[number].type",paraId:12,tocIndex:3},{value:";\n2. In ",paraId:12,tocIndex:3},{value:"GraphOptions.node.type",paraId:12,tocIndex:3},{value:";",paraId:12,tocIndex:3},{value:"const graph = new Graph({\n  // ... other options\n  data: {\n    nodes: [{ id: 'node-1', type: 'circle' }],\n  },\n  node: {\n    type: 'circle',\n  },\n});\n",paraId:13,tocIndex:3},{value:"Extension",paraId:14,tocIndex:4},{value:"Registration Type",paraId:14,tocIndex:4},{value:"Description",paraId:14,tocIndex:4},{value:"Cubic",paraId:14,tocIndex:4},{value:"'cubic'",paraId:14,tocIndex:4},{value:"Cubic Bezier Curve",paraId:14,tocIndex:4},{value:"Line",paraId:14,tocIndex:4},{value:"'line'",paraId:14,tocIndex:4},{value:"/",paraId:14,tocIndex:4},{value:"Polyline",paraId:14,tocIndex:4},{value:"'polyline'",paraId:14,tocIndex:4},{value:"/",paraId:14,tocIndex:4},{value:"Quadratic",paraId:14,tocIndex:4},{value:"'quadratic'",paraId:14,tocIndex:4},{value:"Quadratic Bezier Curve",paraId:14,tocIndex:4},{value:"CubicHorizontal",paraId:14,tocIndex:4},{value:"'cubic-horizontal'",paraId:14,tocIndex:4},{value:"Horizontal Cubic Bezier Curve",paraId:14,tocIndex:4},{value:"CubicVertical",paraId:14,tocIndex:4},{value:"'cubic-vertical'",paraId:14,tocIndex:4},{value:"Vertical Cubic Bezier Curve",paraId:14,tocIndex:4},{value:"CubicRadial",paraId:14,tocIndex:4},{value:"'cubic-radial'",paraId:14,tocIndex:4},{value:"Radial Cubic Bezier Curve",paraId:14,tocIndex:4},{value:"Usage(like ",paraId:15,tocIndex:4},{value:"Nodes",paraId:15,tocIndex:4},{value:"):",paraId:15,tocIndex:4},{value:"1. In ",paraId:16,tocIndex:4},{value:"GraphOptions.data.edges[number].type",paraId:16,tocIndex:4},{value:";\n2. In ",paraId:16,tocIndex:4},{value:"GraphOptions.edge.type",paraId:16,tocIndex:4},{value:";",paraId:16,tocIndex:4},{value:"Extension",paraId:17,tocIndex:5},{value:"Registration Type",paraId:17,tocIndex:5},{value:"CircleCombo",paraId:17,tocIndex:5},{value:"'circle'",paraId:17,tocIndex:5},{value:"RectCombo",paraId:17,tocIndex:5},{value:"'rect'",paraId:17,tocIndex:5},{value:"Usage(like ",paraId:18,tocIndex:5},{value:"Nodes",paraId:18,tocIndex:5},{value:"):",paraId:18,tocIndex:5},{value:"1. In ",paraId:19,tocIndex:5},{value:"GraphOptions.data.combos[number].type",paraId:19,tocIndex:5},{value:";\n2. In ",paraId:19,tocIndex:5},{value:"GraphOptions.combo.type",paraId:19,tocIndex:5},{value:";",paraId:19,tocIndex:5},{value:"Extension",paraId:20,tocIndex:6},{value:"Registration Type",paraId:20,tocIndex:6},{value:"Description",paraId:20,tocIndex:6},{value:"AntVDagreLayout",paraId:20,tocIndex:6},{value:"'antv-dagre'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"ComboCombinedLayout",paraId:20,tocIndex:6},{value:"'combo-combined'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"CompactBoxLayout",paraId:20,tocIndex:6},{value:"'compact-box'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"ForceAtlas2Layout",paraId:20,tocIndex:6},{value:"'force-atlas2'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"CircularLayout",paraId:20,tocIndex:6},{value:"'circular'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"ConcentricLayout",paraId:20,tocIndex:6},{value:"'concentric'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"D3ForceLayout",paraId:20,tocIndex:6},{value:"'d3-force'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"DagreLayout",paraId:20,tocIndex:6},{value:"'dagre'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"DendrogramLayout",paraId:20,tocIndex:6},{value:"'dendrogram'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"ForceLayout",paraId:20,tocIndex:6},{value:"'force'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"FruchtermanLayout",paraId:20,tocIndex:6},{value:"'fruchterman'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"GridLayout",paraId:20,tocIndex:6},{value:"'grid'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"IndentedLayout",paraId:20,tocIndex:6},{value:"'indented'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"MDSLayout",paraId:20,tocIndex:6},{value:"'mds'",paraId:20,tocIndex:6},{value:"Multidimensional Scaling Layout",paraId:20,tocIndex:6},{value:"MindmapLayout",paraId:20,tocIndex:6},{value:"'mindmap'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"RadialLayout",paraId:20,tocIndex:6},{value:"'radial'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"RandomLayout",paraId:20,tocIndex:6},{value:"'random'",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"Usage:",paraId:21,tocIndex:6},{value:"In ",paraId:22,tocIndex:6},{value:"GraphOptions.layout",paraId:22,tocIndex:6},{value:", for example:",paraId:22,tocIndex:6},{value:"const graph = new Graph({\n  // ... other options\n  layout: {\n    type: 'force',\n  },\n});\n",paraId:23,tocIndex:6},{value:"spectral",paraId:24,tocIndex:7},{value:"tableau",paraId:25,tocIndex:7},{value:"oranges",paraId:26,tocIndex:7},{value:"greens",paraId:27,tocIndex:7},{value:"blues",paraId:28,tocIndex:7},{value:"Usage:",paraId:29,tocIndex:7},{value:"In ",paraId:30,tocIndex:7},{value:"GraphOptions.[node|edge|combo].palette",paraId:30,tocIndex:7},{value:", for example:",paraId:30,tocIndex:7},{value:"const graph = new Graph({\n  // ... other options\n  node: {\n    palette: 'tableau',\n  },\n});\n",paraId:31,tocIndex:7},{value:"Registration Type",paraId:32,tocIndex:8},{value:"dark",paraId:32,tocIndex:8},{value:"light",paraId:32,tocIndex:8},{value:"Usage:",paraId:33,tocIndex:8},{value:"In ",paraId:34,tocIndex:8},{value:"GraphOptions.theme",paraId:34,tocIndex:8},{value:", for example:",paraId:34,tocIndex:8},{value:"const graph = new Graph({\n  // ... other options\n  theme: 'dark',\n});\n",paraId:35,tocIndex:8},{value:"Extension",paraId:36,tocIndex:9},{value:"Registration Type",paraId:36,tocIndex:9},{value:"BubbleSets",paraId:36,tocIndex:9},{value:"'bubble-sets'",paraId:36,tocIndex:9},{value:"EdgeFilterLens",paraId:36,tocIndex:9},{value:"'edge-filter-lens'",paraId:36,tocIndex:9},{value:"GridLine",paraId:36,tocIndex:9},{value:"'grid-line'",paraId:36,tocIndex:9},{value:"Background",paraId:36,tocIndex:9},{value:"'background'",paraId:36,tocIndex:9},{value:"Contextmenu",paraId:36,tocIndex:9},{value:"'contextmenu'",paraId:36,tocIndex:9},{value:"Fisheye",paraId:36,tocIndex:9},{value:"'fisheye'",paraId:36,tocIndex:9},{value:"Fullscreen",paraId:36,tocIndex:9},{value:"'fullscreen'",paraId:36,tocIndex:9},{value:"History",paraId:36,tocIndex:9},{value:"'history'",paraId:36,tocIndex:9},{value:"Hull",paraId:36,tocIndex:9},{value:"'hull'",paraId:36,tocIndex:9},{value:"Legend",paraId:36,tocIndex:9},{value:"'legend'",paraId:36,tocIndex:9},{value:"Minimap",paraId:36,tocIndex:9},{value:"'minimap'",paraId:36,tocIndex:9},{value:"Snapline",paraId:36,tocIndex:9},{value:"'snapline'",paraId:36,tocIndex:9},{value:"Timebar",paraId:36,tocIndex:9},{value:"'timebar'",paraId:36,tocIndex:9},{value:"Toolbar",paraId:36,tocIndex:9},{value:"'toolbar'",paraId:36,tocIndex:9},{value:"Tooltip",paraId:36,tocIndex:9},{value:"'tooltip'",paraId:36,tocIndex:9},{value:"Watermark",paraId:36,tocIndex:9},{value:"'watermark'",paraId:36,tocIndex:9},{value:"Usage:",paraId:37,tocIndex:9},{value:"In ",paraId:38,tocIndex:9},{value:"GraphOptions.plugins",paraId:38,tocIndex:9},{value:", for example:",paraId:38,tocIndex:9},{value:"const graph = new Graph({\n  // ... other options\n  plugins: ['minimap', 'contextmenu'],\n});\n",paraId:39,tocIndex:9},{value:"Extension",paraId:40,tocIndex:10},{value:"Registration Type",paraId:40,tocIndex:10},{value:"Description",paraId:40,tocIndex:10},{value:"ProcessParallelEdges",paraId:40,tocIndex:10},{value:"'process-parallel-edges'",paraId:40,tocIndex:10},{value:"/",paraId:40,tocIndex:10},{value:"PlaceRadialLabels",paraId:40,tocIndex:10},{value:"'place-radial-labels'",paraId:40,tocIndex:10},{value:"径向标签",paraId:40,tocIndex:10},{value:"Usage:",paraId:41,tocIndex:10},{value:"In ",paraId:42,tocIndex:10},{value:"GraphOptions.transform",paraId:42,tocIndex:10},{value:", for example:",paraId:42,tocIndex:10},{value:"const graph = new Graph({\n  // ... other options\n  transform: ['process-parallel-edges', 'place-radial-labels'],\n});\n",paraId:43,tocIndex:10},{value:"Registration Type",paraId:44,tocIndex:11},{value:"circle",paraId:44,tocIndex:11},{value:"ellipse",paraId:44,tocIndex:11},{value:"group",paraId:44,tocIndex:11},{value:"html",paraId:44,tocIndex:11},{value:"image",paraId:44,tocIndex:11},{value:"line",paraId:44,tocIndex:11},{value:"path",paraId:44,tocIndex:11},{value:"polygon",paraId:44,tocIndex:11},{value:"polyline",paraId:44,tocIndex:11},{value:"rect",paraId:44,tocIndex:11},{value:"text",paraId:44,tocIndex:11},{value:"label",paraId:44,tocIndex:11},{value:"badge",paraId:44,tocIndex:11},{value:"Usage:",paraId:45,tocIndex:11},{value:"In the ",paraId:46,tocIndex:11},{value:"upsert",paraId:46,tocIndex:11},{value:" method of the element class when customizing the shape, pass the second parameter:",paraId:46,tocIndex:11},{value:"this.upsert('shape-key', 'text', { text: 'label', fontSize: 16 }, this);\n",paraId:47,tocIndex:11}]},66763:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6496);const t=[{value:'In Chinese, the character "图" (Graph) can often be used to represent many different concepts, such as image,shape,and chart or diagram,etc.',paraId:0,tocIndex:1},{value:"In Graph Theory, a graph is a mathematical structure used to model pairwise relationships between objects, which we typically represent with nodes (or Vertex) and edges (or Link) to denote the objects and the relationships between them.",paraId:1,tocIndex:1},{value:'The "graph" in G6:',paraId:2,tocIndex:1},{value:'Conceptually, it is the "graph" from Graph Theory, a data structure composed of nodes and edges.',paraId:3,tocIndex:1},{value:'Visually, a "graph" is a figure composed of a set of graphical elements representing nodes and edges.',paraId:3,tocIndex:1},{value:'In terms of code implementation, a "graph" is a class capable of transforming data into a graphical display.',paraId:3,tocIndex:1},{value:"Graph Theory categorizes graphs into many different types based on their structure and properties, such as:",paraId:4,tocIndex:2},{value:"Directed Graph and Undirected Graph",paraId:5,tocIndex:2},{value:"Weighted Graph and Unweighted Graph",paraId:5,tocIndex:2},{value:"Simple Graph and Multigraph",paraId:5,tocIndex:2},{value:"Cyclic Graph and Acyclic Graph",paraId:5,tocIndex:2},{value:"Connected Graph and Disconnected Graph",paraId:5,tocIndex:2},{value:"Complete Graph and Non-Complete Graph",paraId:5,tocIndex:2},{value:"Sparse Graph and Dense Graph",paraId:5,tocIndex:2},{value:"...",paraId:5,tocIndex:2},{value:"In G6, we provide a universal graph representation capable of depicting the various types of graphs mentioned above, for example:",paraId:6,tocIndex:2},{value:"Directed Graph and Undirected Graph: Defined by the start and end points of the edges.",paraId:7,tocIndex:2},{value:"Weighted Graph and Unweighted Graph: Defined by the ",paraId:7,tocIndex:2},{value:"weight",paraId:7,tocIndex:2},{value:" data on the edges.",paraId:7,tocIndex:2},{value:"Simple Graph and Multigraph: Defined by the uniqueness of the edges.",paraId:7,tocIndex:2},{value:"...",paraId:7,tocIndex:2},{value:"Graphs are a very versatile data structure that can be used to represent a variety of scenarios, such as:",paraId:8,tocIndex:3},{value:"Social Networks",paraId:9,tocIndex:3},{value:"Knowledge Graphs",paraId:9,tocIndex:3},{value:"Traffic Networks",paraId:9,tocIndex:3},{value:"Power Grids",paraId:9,tocIndex:3},{value:"In G6, we provide a rich expression capability for graphs that can meet the needs of different scenarios. We also offer a wealth of interactive and animated effects to make the graphs more vivid and intuitive.",paraId:10,tocIndex:3},{value:"To create a Graph with G6, you first need to import the ",paraId:11,tocIndex:4},{value:"@antv/g6",paraId:11,tocIndex:4},{value:" library, and then instantiate the Graph class.",paraId:11,tocIndex:4},{value:"For installation instructions, refer to: ",paraId:12,tocIndex:4},{value:"Getting Started - Installation",paraId:13,tocIndex:4},{value:"The Graph class accepts an instantiation argument object, known as ",paraId:14,tocIndex:4},{value:"options",paraId:14,tocIndex:4},{value:" (Options, in visualization theory it is referred to as: ",paraId:14,tocIndex:4},{value:"Specification",paraId:14,tocIndex:4},{value:"), which is used to configure the graph's data, element styles, layout, interactions, etc.",paraId:14,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  // ... other other options\n});\n",paraId:15,tocIndex:4},{value:"The instantiation process only configures the basic information of the graph. To render the graph onto the page, you still need to call the ",paraId:16},{value:"render",paraId:16},{value:" method.",paraId:16},{value:"To learn how to quickly create a graph, please refer to ",paraId:17},{value:"Quick Start",paraId:18},{value:".",paraId:17},{value:"For more detailed information about the configuration options, please refer to ",paraId:17},{value:"Options",paraId:19},{value:".",paraId:17},{value:"To gain an in-depth understanding of the concepts within the configuration options, please read the rest of the content in this section.",paraId:17}]},66296:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(81821);const t=[{value:"{ type: 'view'; options?: ",paraId:0,tocIndex:0},{value:"FitViewOptions",paraId:1,tocIndex:0},{value:"; animation?: ",paraId:0,tocIndex:0},{value:"ViewportAnimationEffectTiming",paraId:2,tocIndex:0},{value:"; } | { type: 'center'; animation?: ",paraId:0,tocIndex:0},{value:"ViewportAnimationEffectTiming",paraId:3,tocIndex:0},{value:"; } | 'view' | 'center'",paraId:0,tocIndex:0},{value:"Whether to automatically fit the canvas. ⚠️ ",paraId:4,tocIndex:0},{value:"Note",paraId:4,tocIndex:0},{value:": Each time ",paraId:4,tocIndex:0},{value:"render",paraId:4,tocIndex:0},{value:" is executed, it will adapt according to ",paraId:4,tocIndex:0},{value:"autoFit",paraId:4,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"Two basic adaptation modes:",paraId:5,tocIndex:0},{value:"'view'",paraId:6,tocIndex:0},{value:" - Automatically scale to ensure all content is visible within the view",paraId:6,tocIndex:0},{value:"'center'",paraId:6,tocIndex:0},{value:" - Center the content without changing the zoom level",paraId:6,tocIndex:0},{value:"More precise adaptation control can be achieved through object form:",paraId:7,tocIndex:0},{value:"const graph = new Graph({\n  autoFit: {\n    type: 'view', // Adaptation type: 'view' or 'center'\n    options: {\n      // Only applicable to 'view' type\n      when: 'overflow', // When to adapt: 'overflow' (only when content overflows) or 'always' (always adapt)\n      direction: 'x', // Adaptation direction: 'x', 'y', or 'both'\n    },\n    animation: {\n      // Adaptation animation effect\n      duration: 1000, // Animation duration (milliseconds)\n      easing: 'ease-in-out', // Animation easing function\n    },\n  },\n});\n",paraId:8,tocIndex:0},{value:"Property",paraId:9,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"Type",paraId:9,tocIndex:1},{value:"Default",paraId:9,tocIndex:1},{value:"Required",paraId:9,tocIndex:1},{value:"when",paraId:9,tocIndex:1},{value:"Adaptation occurs under the following conditions ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'overflow'",paraId:9,tocIndex:1},{value:" adapt only when content overflows ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:" always adapt",paraId:9,tocIndex:1},{value:"'overflow'",paraId:9,tocIndex:1},{value:" | ",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:"direction",paraId:9,tocIndex:1},{value:"Adapt only in the specified direction ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'x'",paraId:9,tocIndex:1},{value:" adapt only in x direction ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'y'",paraId:9,tocIndex:1},{value:" adapt only in y direction ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:" adapt in both x and y directions",paraId:9,tocIndex:1},{value:"'x'",paraId:9,tocIndex:1},{value:" | ",paraId:9,tocIndex:1},{value:"'y'",paraId:9,tocIndex:1},{value:" | ",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:"type ViewportAnimationEffectTiming =\n  | boolean // true to enable default animation, false to disable animation\n  | {\n      easing?: string; // Animation easing function: 'ease-in-out', 'ease-in', 'ease-out', 'linear'\n      duration?: number; // Animation duration (milliseconds)\n    };\n",paraId:10,tocIndex:2},{value:"boolean",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"Default:",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"false",paraId:11,tocIndex:3},{value:"Whether to automatically resize the canvas.",paraId:12,tocIndex:3},{value:"Implemented based on the ",paraId:13,tocIndex:3},{value:"window.onresize",paraId:13,tocIndex:3},{value:" event. When the browser window size changes, the canvas will automatically resize to fit the container.",paraId:13,tocIndex:3},{value:"string",paraId:14,tocIndex:4},{value:"Canvas background color.",paraId:15,tocIndex:4},{value:"This color is used as the background color when exporting images. Any valid CSS color value can be used, such as hexadecimal, RGB, RGBA, etc.",paraId:16,tocIndex:4},{value:"CanvasConfig",paraId:17,tocIndex:5},{value:"Canvas configuration. Related configuration items under GraphOptions (such as ",paraId:18,tocIndex:5},{value:"container",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"width",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"height",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"devicePixelRatio",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"background",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"cursor",paraId:18,tocIndex:5},{value:") are shortcut configuration items and will be converted to canvas configuration items.",paraId:18,tocIndex:5},{value:"Property",paraId:19,tocIndex:6},{value:"Description",paraId:19,tocIndex:6},{value:"Type",paraId:19,tocIndex:6},{value:"Default",paraId:19,tocIndex:6},{value:"Required",paraId:19,tocIndex:6},{value:"container",paraId:19,tocIndex:6},{value:"Canvas container",paraId:19,tocIndex:6},{value:"string | HTMLElement",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"devicePixelRatio",paraId:19,tocIndex:6},{value:"Device pixel ratio",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"width",paraId:19,tocIndex:6},{value:"Canvas width",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"height",paraId:19,tocIndex:6},{value:"Canvas height",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"cursor",paraId:19,tocIndex:6},{value:"Cursor style, same as ",paraId:19,tocIndex:6},{value:"GraphOptions.cursor",paraId:20,tocIndex:6},{value:"string",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"background",paraId:19,tocIndex:6},{value:"Canvas background color",paraId:19,tocIndex:6},{value:"string",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"renderer",paraId:19,tocIndex:6},{value:"Renderer, same as ",paraId:19,tocIndex:6},{value:"GraphOptions.renderer",paraId:21,tocIndex:6},{value:"(layer: ",paraId:19,tocIndex:6},{value:"'background'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'main'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'label'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'transient'",paraId:19,tocIndex:6},{value:") => IRenderer",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"enableMultiLayer",paraId:19,tocIndex:6},{value:"Whether to enable multi-layer. Non-dynamic parameter, effective only during initialization",paraId:19,tocIndex:6},{value:"boolean",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"string |",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"HTMLElement",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"|",paraId:22,tocIndex:7},{value:" Canvas",paraId:22,tocIndex:7},{value:"Canvas container, can be one of the following three assignments:",paraId:23,tocIndex:7},{value:"ID string of the DOM element, such as ",paraId:24,tocIndex:7},{value:"'container'",paraId:24,tocIndex:7},{value:"HTML element object, such as ",paraId:24,tocIndex:7},{value:"document.getElementById('container')",paraId:24,tocIndex:7},{value:"Canvas instance, such as ",paraId:24,tocIndex:7},{value:"new Canvas(options)",paraId:24,tocIndex:7},{value:", where ",paraId:24,tocIndex:7},{value:"options",paraId:24,tocIndex:7},{value:" is of type ",paraId:24,tocIndex:7},{value:"CanvasConfig",paraId:25,tocIndex:7},{value:".",paraId:24,tocIndex:7},{value:"string",paraId:26,tocIndex:8},{value:"Cursor style, controls the cursor shape when hovering over the canvas. Any valid CSS cursor value can be used.",paraId:27,tocIndex:8},{value:"Supported values include: ",paraId:28,tocIndex:8},{value:"'auto'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'default'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'none'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'context-menu'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'help'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'pointer'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'progress'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'wait'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'cell'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'crosshair'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'text'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'vertical-text'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'alias'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'copy'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'move'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'no-drop'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'not-allowed'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'grab'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'grabbing'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'all-scroll'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'col-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'row-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'n-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'e-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'s-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'w-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'ne-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'nw-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'se-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'sw-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'ew-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'ns-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'nesw-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'nwse-resize'",paraId:28,tocIndex:8},{value:", ",paraId:28,tocIndex:8},{value:"'zoom-in'",paraId:28,tocIndex:8},{value:", `'zoom-out'.",paraId:28,tocIndex:8},{value:"Cursor values are referenced from ",paraId:29,tocIndex:8},{value:"MDN - cursor",paraId:29,tocIndex:8},{value:".",paraId:29,tocIndex:8},{value:"number",paraId:30,tocIndex:9},{value:"Device pixel ratio.",paraId:31,tocIndex:9},{value:"Used for high-definition screens, the default is ",paraId:32,tocIndex:9},{value:"window.devicePixelRatio",paraId:32,tocIndex:9},{value:".",paraId:32,tocIndex:9},{value:"number",paraId:33,tocIndex:10},{value:"Canvas width. If not set, the container width will be automatically obtained.",paraId:34,tocIndex:10},{value:"number",paraId:35,tocIndex:11},{value:"Canvas height. If not set, the container height will be automatically obtained.",paraId:36,tocIndex:11},{value:"(layer: 'background' | 'main' | 'label' | 'transient') =>",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"IRenderer",paraId:37,tocIndex:12},{value:"Manually specify the renderer",paraId:38,tocIndex:12},{value:"G6 uses a layered rendering approach, divided into four layers: ",paraId:39,tocIndex:12},{value:"background",paraId:39,tocIndex:12},{value:", ",paraId:39,tocIndex:12},{value:"main",paraId:39,tocIndex:12},{value:", ",paraId:39,tocIndex:12},{value:"label",paraId:39,tocIndex:12},{value:", ",paraId:39,tocIndex:12},{value:"transient",paraId:39,tocIndex:12},{value:". Users can set the renderer for each layer of the canvas through this configuration item.",paraId:39,tocIndex:12},{value:"Example",paraId:40,tocIndex:12},{value:": Use SVG renderer for rendering",paraId:40,tocIndex:12},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  renderer: () => new SVGRenderer(),\n});\n",paraId:41,tocIndex:12},{value:"number | number[]",paraId:42,tocIndex:13},{value:"Canvas padding",paraId:43,tocIndex:13},{value:"Usually, during adaptation, it will be adapted according to the padding. It can be a single value (same padding on all sides) or an array form (specify the padding for top, right, bottom, left in order).",paraId:44,tocIndex:13},{value:"Example:",paraId:45,tocIndex:13},{value:"// Single value\nconst graph1 = new Graph({\n  padding: 20, // 20 pixels of padding on all sides\n});\n\n// Array form\nconst graph2 = new Graph({\n  padding: [20, 40, 20, 40], // Padding for top, right, bottom, left\n});\n",paraId:46,tocIndex:13},{value:"number",paraId:47,tocIndex:14},{value:" ",paraId:47,tocIndex:14},{value:"Default:",paraId:47,tocIndex:14},{value:" ",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"Rotation angle (in radians)",paraId:48,tocIndex:14},{value:"number",paraId:49,tocIndex:15},{value:"Viewport x coordinate, sets the initial horizontal position of the viewport.",paraId:50,tocIndex:15},{value:"number",paraId:51,tocIndex:16},{value:"Viewport y coordinate, sets the initial vertical position of the viewport.",paraId:52,tocIndex:16},{value:"number",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"Default:",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"1",paraId:53,tocIndex:17},{value:"Sets the initial zoom level of the viewport, 1 means 100% (original size).",paraId:54,tocIndex:17},{value:"[number, number]",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"Default:",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"[0.01, 10]",paraId:55,tocIndex:18},{value:"Zoom range, limits the minimum and maximum scale that users can zoom.",paraId:56,tocIndex:18},{value:"boolean | ",paraId:57,tocIndex:19},{value:"AnimationEffectTiming",paraId:58,tocIndex:19},{value:"Enable or disable global animation",paraId:59,tocIndex:19},{value:"When configured as an animation option, animation will be enabled, and this animation configuration will be used as the base configuration for global animation.",paraId:60,tocIndex:19},{value:"Property",paraId:61,tocIndex:20},{value:"Description",paraId:61,tocIndex:20},{value:"Type",paraId:61,tocIndex:20},{value:"Default",paraId:61,tocIndex:20},{value:"Required",paraId:61,tocIndex:20},{value:"delay",paraId:61,tocIndex:20},{value:"Animation delay time",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"direction",paraId:61,tocIndex:20},{value:"Animation direction",paraId:61,tocIndex:20},{value:"'alternate'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'alternate-reverse'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'normal'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'reverse'",paraId:61,tocIndex:20},{value:"'forward'",paraId:61,tocIndex:20},{value:"duration",paraId:61,tocIndex:20},{value:"Animation duration",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"easing",paraId:61,tocIndex:20},{value:"Animation easing function",paraId:61,tocIndex:20},{value:"string",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"fill",paraId:61,tocIndex:20},{value:"Fill mode after animation ends",paraId:61,tocIndex:20},{value:"'auto'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'backwards'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'both'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'forwards'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'none'",paraId:61,tocIndex:20},{value:"'none'",paraId:61,tocIndex:20},{value:"iterations",paraId:61,tocIndex:20},{value:"Animation iteration count",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"Example:",paraId:62,tocIndex:20},{value:"// Simple enable\nconst graph1 = new Graph({\n  animation: true,\n});\n\n// Detailed configuration\nconst graph2 = new Graph({\n  animation: {\n    duration: 500, // Animation duration (milliseconds)\n    easing: 'ease-in-out', // Easing function\n  },\n});\n",paraId:63,tocIndex:20},{value:"GraphData",paraId:64,tocIndex:21},{value:"Data.",paraId:65,tocIndex:21},{value:"Property",paraId:66,tocIndex:22},{value:"Description",paraId:66,tocIndex:22},{value:"Type",paraId:66,tocIndex:22},{value:"Default",paraId:66,tocIndex:22},{value:"Required",paraId:66,tocIndex:22},{value:"nodes",paraId:66,tocIndex:22},{value:"Node data",paraId:66,tocIndex:22},{value:"NodeData",paraId:67,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"edges",paraId:66,tocIndex:22},{value:"Edge data",paraId:66,tocIndex:22},{value:"EdgeData",paraId:68,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"combos",paraId:66,tocIndex:22},{value:"Combo data",paraId:66,tocIndex:22},{value:"ComboData",paraId:69,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"Property",paraId:70,tocIndex:23},{value:"Description",paraId:70,tocIndex:23},{value:"Type",paraId:70,tocIndex:23},{value:"Default",paraId:70,tocIndex:23},{value:"Required",paraId:70,tocIndex:23},{value:"id",paraId:70,tocIndex:23},{value:"Unique identifier for the node, used to distinguish different nodes",paraId:70,tocIndex:23},{value:"string",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"✓",paraId:70,tocIndex:23},{value:"type",paraId:70,tocIndex:23},{value:"Node type, built-in node type name or custom node name",paraId:70,tocIndex:23},{value:"string",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"data",paraId:70,tocIndex:23},{value:"Node data, used to store custom data for the node, such as node name, description, etc. Can be accessed in style mapping through callback functions",paraId:70,tocIndex:23},{value:"object",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"style",paraId:70,tocIndex:23},{value:"Node style, including visual attributes such as position, size, color, etc.",paraId:70,tocIndex:23},{value:"object",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"states",paraId:70,tocIndex:23},{value:"Initial state of the node, such as selected, activated, hovered, etc.",paraId:70,tocIndex:23},{value:"string[]",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"combo",paraId:70,tocIndex:23},{value:"ID of the combo to which it belongs, used to organize the hierarchical relationship of nodes, if none, it is null",paraId:70,tocIndex:23},{value:"string | null",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"children",paraId:70,tocIndex:23},{value:"Collection of child node IDs, used only in tree graph scenarios",paraId:70,tocIndex:23},{value:"string[]",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"Property",paraId:71,tocIndex:24},{value:"Description",paraId:71,tocIndex:24},{value:"Type",paraId:71,tocIndex:24},{value:"Default",paraId:71,tocIndex:24},{value:"Required",paraId:71,tocIndex:24},{value:"source",paraId:71,tocIndex:24},{value:"Starting node ID of the edge",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"✓",paraId:71,tocIndex:24},{value:"target",paraId:71,tocIndex:24},{value:"Target node ID of the edge",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"✓",paraId:71,tocIndex:24},{value:"id",paraId:71,tocIndex:24},{value:"Unique identifier for the edge",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"type",paraId:71,tocIndex:24},{value:"Edge type, built-in edge type name or custom edge name",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"data",paraId:71,tocIndex:24},{value:"Edge data, used to store custom data for the edge, can be accessed in style mapping through callback functions",paraId:71,tocIndex:24},{value:"object",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"style",paraId:71,tocIndex:24},{value:"Edge style, including visual attributes such as line color, width, arrow, etc.",paraId:71,tocIndex:24},{value:"object",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"states",paraId:71,tocIndex:24},{value:"Initial state of the edge",paraId:71,tocIndex:24},{value:"string[]",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"Property",paraId:72,tocIndex:25},{value:"Description",paraId:72,tocIndex:25},{value:"Type",paraId:72,tocIndex:25},{value:"Default",paraId:72,tocIndex:25},{value:"Required",paraId:72,tocIndex:25},{value:"id",paraId:72,tocIndex:25},{value:"Unique identifier for the combo",paraId:72,tocIndex:25},{value:"string",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"✓",paraId:72,tocIndex:25},{value:"type",paraId:72,tocIndex:25},{value:"Combo type, built-in combo type name or custom combo name",paraId:72,tocIndex:25},{value:"string",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"data",paraId:72,tocIndex:25},{value:"Combo data, used to store custom data for the combo, can be accessed in style mapping through callback functions",paraId:72,tocIndex:25},{value:"object",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"style",paraId:72,tocIndex:25},{value:"Combo style",paraId:72,tocIndex:25},{value:"object",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"states",paraId:72,tocIndex:25},{value:"Initial state of the combo",paraId:72,tocIndex:25},{value:"string[]",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"combo",paraId:72,tocIndex:25},{value:"Parent combo ID. If there is no parent combo, it is null",paraId:72,tocIndex:25},{value:"string | null",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"Example:",paraId:73,tocIndex:25},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 100 } },\n      { id: 'node2', style: { x: 200, y: 200 } },\n    ],\n    edges: [{ id: 'edge1', source: 'node1', target: 'node2' }],\n    combos: [{ id: 'combo1', style: { x: 150, y: 150 } }],\n  },\n});\n",paraId:74,tocIndex:25},{value:"Read ",paraId:75,tocIndex:25},{value:"Data",paraId:76,tocIndex:25},{value:" to learn more about graph data, including but not limited to data formats, how to manipulate data, etc.",paraId:75,tocIndex:25},{value:"NodeOptions",paraId:77,tocIndex:26},{value:"Node configuration options.",paraId:78,tocIndex:26},{value:"Property",paraId:79,tocIndex:27},{value:"Description",paraId:79,tocIndex:27},{value:"Type",paraId:79,tocIndex:27},{value:"Default",paraId:79,tocIndex:27},{value:"Required",paraId:79,tocIndex:27},{value:"type",paraId:79,tocIndex:27},{value:"Node type, built-in node type name or custom node name",paraId:79,tocIndex:27},{value:"Type",paraId:80,tocIndex:27},{value:"circle",paraId:79,tocIndex:27},{value:"style",paraId:79,tocIndex:27},{value:"Node style, including color, size, etc.",paraId:79,tocIndex:27},{value:"Style",paraId:81,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"state",paraId:79,tocIndex:27},{value:"Define the style of the node in different states",paraId:79,tocIndex:27},{value:"State",paraId:82,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"palette",paraId:79,tocIndex:27},{value:"Define the color palette of the node, used to map colors based on different data",paraId:79,tocIndex:27},{value:"Palette",paraId:83,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"animation",paraId:79,tocIndex:27},{value:"Define the animation effect of the node",paraId:79,tocIndex:27},{value:"Animation",paraId:84,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"See ",paraId:85,tocIndex:27},{value:"Node",paraId:86,tocIndex:27},{value:" for details",paraId:85,tocIndex:27},{value:"Example:",paraId:87,tocIndex:27},{value:"const graph = new Graph({\n  node: {\n    type: 'circle', // Node type\n    style: {\n      fill: '#e6f7ff', // Fill color\n      stroke: '#91d5ff', // Border color\n      lineWidth: 1, // Border width\n      r: 20, // Radius\n      labelText: (d) => d.id, // Label text\n    },\n    // Node state style\n    state: {\n      hover: {\n        lineWidth: 2,\n        stroke: '#69c0ff',\n      },\n      selected: {\n        fill: '#bae7ff',\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n    },\n  },\n});\n",paraId:88,tocIndex:27},{value:"EdgeOptions",paraId:89,tocIndex:28},{value:"Edge configuration options",paraId:90,tocIndex:28},{value:"Property",paraId:91,tocIndex:29},{value:"Description",paraId:91,tocIndex:29},{value:"Type",paraId:91,tocIndex:29},{value:"Default",paraId:91,tocIndex:29},{value:"Required",paraId:91,tocIndex:29},{value:"type",paraId:91,tocIndex:29},{value:"Edge type, built-in edge type name or custom edge name",paraId:91,tocIndex:29},{value:"Type",paraId:92,tocIndex:29},{value:"line",paraId:91,tocIndex:29},{value:"style",paraId:91,tocIndex:29},{value:"Edge style, including color, size, etc.",paraId:91,tocIndex:29},{value:"Style",paraId:93,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"state",paraId:91,tocIndex:29},{value:"Define the style of the edge in different states",paraId:91,tocIndex:29},{value:"State",paraId:94,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"palette",paraId:91,tocIndex:29},{value:"Define the color palette of the edge, used to map colors based on different data",paraId:91,tocIndex:29},{value:"Palette",paraId:95,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"animation",paraId:91,tocIndex:29},{value:"Define the animation effect of the edge",paraId:91,tocIndex:29},{value:"Animation",paraId:96,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"See ",paraId:97,tocIndex:29},{value:"Edge",paraId:98,tocIndex:29},{value:" for details",paraId:97,tocIndex:29},{value:"Example:",paraId:99,tocIndex:29},{value:"const graph = new Graph({\n  edge: {\n    type: 'polyline', // Edge type\n    style: {\n      stroke: '#91d5ff', // Edge color\n      lineWidth: 2, // Edge width\n      endArrow: true, // Whether there is an arrow\n    },\n    // Edge state style\n    state: {\n      selected: {\n        stroke: '#1890ff',\n        lineWidth: 3,\n      },\n    },\n  },\n});\n",paraId:100,tocIndex:29},{value:"ComboOptions",paraId:101,tocIndex:30},{value:"Combo configuration options",paraId:102,tocIndex:30},{value:"Property",paraId:103,tocIndex:30},{value:"Description",paraId:103,tocIndex:30},{value:"Type",paraId:103,tocIndex:30},{value:"Default",paraId:103,tocIndex:30},{value:"Required",paraId:103,tocIndex:30},{value:"type",paraId:103,tocIndex:30},{value:"Combo type, built-in combo type name or custom combo name",paraId:103,tocIndex:30},{value:"Type",paraId:104,tocIndex:30},{value:"circle",paraId:103,tocIndex:30},{value:"style",paraId:103,tocIndex:30},{value:"Combo style, including color, size, etc.",paraId:103,tocIndex:30},{value:"Style",paraId:105,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"state",paraId:103,tocIndex:30},{value:"Define the style of the combo in different states",paraId:103,tocIndex:30},{value:"State",paraId:106,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"palette",paraId:103,tocIndex:30},{value:"Define the color palette of the combo, used to map colors based on different data",paraId:103,tocIndex:30},{value:"Palette",paraId:107,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"animation",paraId:103,tocIndex:30},{value:"Define the animation effect of the combo",paraId:103,tocIndex:30},{value:"Animation",paraId:108,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"See ",paraId:109,tocIndex:30},{value:"Combo",paraId:110,tocIndex:30},{value:" for details",paraId:109,tocIndex:30},{value:"Example:",paraId:111,tocIndex:30},{value:"const graph = new Graph({\n  combo: {\n    type: 'circle', // Combo type\n    style: {\n      fill: '#f0f0f0', // Background color\n      stroke: '#d9d9d9', // Border color\n      lineWidth: 1, // Border width\n    },\n    // Combo state style\n    state: {\n      selected: {\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n    },\n  },\n});\n",paraId:112,tocIndex:30},{value:"CustomLayoutOptions | CustomLayoutOptions[]",paraId:113,tocIndex:31},{value:"Layout configuration options, can be an object (normal layout) or an array (pipeline layout).",paraId:114,tocIndex:31},{value:"Example",paraId:115,tocIndex:31},{value:":",paraId:115,tocIndex:31},{value:"const graph = new Graph({\n  container: 'container',\n  layout: {\n    type: 'force', // Force-directed layout\n    preventOverlap: true, // Prevent node overlap\n    nodeStrength: -50, // Repulsion between nodes\n    edgeStrength: 0.5, // Elastic coefficient of edges\n    iterations: 200, // Number of iterations\n    animation: true, // Enable layout animation\n  },\n});\n",paraId:116,tocIndex:31},{value:"false | 'light' | 'dark' | string",paraId:117,tocIndex:32},{value:"Set the theme of the chart, can be the built-in ",paraId:118,tocIndex:32},{value:"'light'",paraId:118,tocIndex:32},{value:", ",paraId:118,tocIndex:32},{value:"'dark'",paraId:118,tocIndex:32},{value:" theme, or the name of a custom theme. Set to ",paraId:118,tocIndex:32},{value:"false",paraId:118,tocIndex:32},{value:" to use no theme.",paraId:118,tocIndex:32},{value:"(string | ",paraId:119,tocIndex:33},{value:"CustomExtensionOptions",paraId:120,tocIndex:33},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:119,tocIndex:33},{value:"Configure the interaction behaviors of the chart, can be a string (using default configuration), an object (custom configuration), or a function (dynamic configuration, the graph instance can be accessed within the function).",paraId:121,tocIndex:33},{value:"Example:",paraId:122,tocIndex:33},{value:"const graph = new Graph({\n  behaviors: [\n    'drag-canvas', // Enable canvas dragging with default configuration\n    'zoom-canvas', // Enable canvas zooming with default configuration\n    {\n      type: 'drag-element', // Custom configuration for dragging elements\n      key: 'drag-node-only',\n      enable: (event) => event.targetType === 'node', // Only allow dragging nodes\n    },\n    function () {\n      console.log(this); // Output graph instance\n      return {\n        type: 'hover-activate',\n      };\n    },\n  ],\n});\n",paraId:123,tocIndex:33},{value:"View ",paraId:124,tocIndex:33},{value:"Interaction Overview",paraId:125,tocIndex:33},{value:" to learn more about interaction principles",paraId:124,tocIndex:33},{value:"Browse ",paraId:124,tocIndex:33},{value:"Built-in Interactions",paraId:126,tocIndex:33},{value:" to get a list of all built-in interactions and their configuration options",paraId:124,tocIndex:33},{value:"(string | ",paraId:127,tocIndex:34},{value:"CustomExtensionOptions",paraId:128,tocIndex:34},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:127,tocIndex:34},{value:"Set the plugins of the chart, can be a string (using default configuration), an object (custom configuration), or a function (dynamic configuration, the graph instance can be accessed within the function).",paraId:129,tocIndex:34},{value:"Example:",paraId:130,tocIndex:34},{value:"const graph = new Graph({\n  container: 'container',\n  plugins: [\n    'minimap', // Enable minimap with default configuration\n    {\n      type: 'grid', // Enable grid background\n      key: 'grid-plugin',\n      line: {\n        stroke: '#d9d9d9',\n        lineWidth: 1,\n      },\n    },\n    {\n      type: 'toolbar', // Enable toolbar\n      key: 'graph-toolbar',\n      position: 'top-right', // Position\n    },\n  ],\n});\n",paraId:131,tocIndex:34},{value:"View ",paraId:132,tocIndex:34},{value:"Plugin Overview",paraId:133,tocIndex:34},{value:" to learn more about plugin principles",paraId:132,tocIndex:34},{value:"Browse ",paraId:132,tocIndex:34},{value:"Built-in Plugins",paraId:134,tocIndex:34},{value:" to get a list of all built-in plugins and their configuration options",paraId:132,tocIndex:34},{value:"(string | ",paraId:135,tocIndex:35},{value:"CustomExtensionOptions",paraId:136,tocIndex:35},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:135,tocIndex:35},{value:"Configure data processing, used to process data before rendering, does not affect the original data. Can be a string (using default configuration), an object (custom configuration), or a function (dynamic configuration, the graph instance can be accessed within the function).",paraId:137,tocIndex:35},{value:"Example:",paraId:138,tocIndex:35},{value:"const graph = new Graph({\n  transforms: [\n    'process-parallel-edges', // Process parallel edges with default configuration\n    {\n      type: 'map-node-size', // Map node size based on node data\n      field: 'value', // Use the value of the field\n      max: 50, // Maximum radius\n      min: 20, // Minimum radius\n    },\n  ],\n});\n",paraId:139,tocIndex:35},{value:"View ",paraId:140,tocIndex:35},{value:"Data Processing Overview",paraId:141,tocIndex:35},{value:" to learn more about data processing principles",paraId:140,tocIndex:35},{value:"Browse ",paraId:140,tocIndex:35},{value:"Built-in Data Processing",paraId:142,tocIndex:35},{value:" to get a list of all built-in data processing and their configuration options",paraId:140,tocIndex:35},{value:"interface CustomExtensionOption extends Record<string, any> {\n  /** Extension type */\n  type: string;\n  /** Extension key, i.e., unique identifier */\n  key?: string;\n}\n",paraId:143,tocIndex:36}]},98239:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(58767);const t=[{value:"G6 is a graph visualization engine. It provides capabilities for graph drawing, layout, analysis, interaction, animation, and other aspects of graph visualization. It aims to offer developers a set of tools that are easy to use, professionally reliable, and highly customizable for graph visualization development.",paraId:0,tocIndex:1},{value:"Built-in 10+ elements to meet the needs of common scenarios.",paraId:1,tocIndex:2},{value:"Built-in 10+ interactions that can be freely combined according to different scenarios.",paraId:2,tocIndex:3},{value:"High-performance layouts, built-in 10+ common graph layouts, with support for WebGPU and WASM computational acceleration.",paraId:3,tocIndex:4},{value:"Supports 3D elements and layouts to create immersive graph visualization scenarios.",paraId:4,tocIndex:6},{value:"Elements, layouts, interactions, and plugins are all customizable, enabling every creative idea you have.",paraId:5,tocIndex:7},{value:"Click to enter 👉 ",paraId:6,tocIndex:8},{value:"Quick Start",paraId:7,tocIndex:8}]},83030:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57577);const t=[{value:"AntvDagre builds upon the original ",paraId:0,tocIndex:0},{value:"dagre",paraId:0,tocIndex:0},{value:" layout and adds more useful options, such as ",paraId:0,tocIndex:0},{value:"nodeOrder",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"edgeLabelSpace",paraId:0,tocIndex:0},{value:", and more. The ",paraId:0,tocIndex:0},{value:"dagre",paraId:0,tocIndex:0},{value:" layout itself is a hierarchical layout suitable for directed acyclic graphs (DAGs), which can automatically handle node direction and spacing, and supports both horizontal and vertical layouts. See more Dagre layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:", and ",paraId:0,tocIndex:0},{value:"official documentation",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'antv-dagre',\n    rankdir: 'TB',\n    align: 'UL',\n    nodesep: 50,\n    ranksep: 50,\n    controlPoints: false,\n  },\n});\n",paraId:2,tocIndex:1},{value:"For more native ",paraId:3,tocIndex:2},{value:"dagre",paraId:3,tocIndex:2},{value:" options, refer to the ",paraId:3,tocIndex:2},{value:"official documentation",paraId:3,tocIndex:2},{value:". Here, only some core and new options are listed.",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Type",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:"type",paraId:4,tocIndex:2},{value:"Layout type",paraId:4,tocIndex:2},{value:"antv-dagre",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"✓",paraId:4,tocIndex:2},{value:"rankdir",paraId:4,tocIndex:2},{value:"Layout direction, options",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:"align",paraId:4,tocIndex:2},{value:"Node alignment, options",paraId:4,tocIndex:2},{value:"UL",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"UR",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DL",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DR",paraId:4,tocIndex:2},{value:"UL",paraId:4,tocIndex:2},{value:"nodesep",paraId:4,tocIndex:2},{value:"Node spacing (px). For ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:", it's horizontal spacing; for ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:", it's vertical spacing.",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"50",paraId:4,tocIndex:2},{value:"nodesepFunc",paraId:4,tocIndex:2},{value:"Callback for node spacing (px), allows different spacing for different nodes. For ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:", it's horizontal spacing; for ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:", it's vertical spacing. Takes precedence over nodesep.",paraId:4,tocIndex:2},{value:"(d?: Node) => number",paraId:4,tocIndex:2},{value:"ranksep",paraId:4,tocIndex:2},{value:"Rank spacing (px). For ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:", it's vertical spacing between ranks; for ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:", it's horizontal spacing.",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"100",paraId:4,tocIndex:2},{value:"ranksepFunc",paraId:4,tocIndex:2},{value:"Callback for rank spacing (px), allows different spacing for different ranks. For ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:", it's vertical spacing; for ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" or ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:", it's horizontal spacing. Takes precedence over ranksep.",paraId:4,tocIndex:2},{value:"(d?: Node) => number",paraId:4,tocIndex:2},{value:"ranker",paraId:4,tocIndex:2},{value:"Algorithm for assigning ranks to nodes: ",paraId:4,tocIndex:2},{value:"longest-path",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"tight-tree",paraId:4,tocIndex:2},{value:", or ",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"tight-tree",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"longest-path",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:"nodeSize",paraId:4,tocIndex:2},{value:"Specify node size for all or each node, used for collision detection. If a single number is returned, width and height are the same; if an array, e.g. ",paraId:4,tocIndex:2},{value:"[width, height]",paraId:4,tocIndex:2},{value:".",paraId:4,tocIndex:2},{value:"Size",paraId:4,tocIndex:2},{value:"((nodeData: Node) => Size)",paraId:4,tocIndex:2},{value:"controlPoints",paraId:4,tocIndex:2},{value:"Whether to keep edge control points. Only effective when using built-in polyline edges (",paraId:4,tocIndex:2},{value:"type: 'polyline-edge'",paraId:4,tocIndex:2},{value:") or any edge that uses ",paraId:4,tocIndex:2},{value:"style.controlPoints",paraId:4,tocIndex:2},{value:" as control points. Adds ",paraId:4,tocIndex:2},{value:"style.controlPoints",paraId:4,tocIndex:2},{value:" to edge data.",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"begin",paraId:4,tocIndex:2},{value:"Top-left alignment position of the layout",paraId:4,tocIndex:2},{value:"[number, number] | [number, number, number]",paraId:4,tocIndex:2},{value:"sortByCombo",paraId:4,tocIndex:2},{value:"Whether to sort nodes in the same rank by their parentId to prevent Combo overlap",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"edgeLabelSpace",paraId:4,tocIndex:2},{value:"Whether to reserve space for edge labels",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"true",paraId:4,tocIndex:2},{value:"nodeOrder",paraId:4,tocIndex:2},{value:"Reference array for node order in the same rank, stores node ids. If not specified, dagre's default order is used.",paraId:4,tocIndex:2},{value:"string[]",paraId:4,tocIndex:2},{value:"radial",paraId:4,tocIndex:2},{value:"Whether to use radial layout based on ",paraId:4,tocIndex:2},{value:"dagre",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"focusNode",paraId:4,tocIndex:2},{value:"Focus node, only effective when ",paraId:4,tocIndex:2},{value:"radial",paraId:4,tocIndex:2},{value:" is true",paraId:4,tocIndex:2},{value:"ID | Node | null",paraId:4,tocIndex:2},{value:"preset",paraId:4,tocIndex:2},{value:"Reference node positions for layout calculation, usually for smooth transitions when switching data. In G6, if updating data, the existing layout result is used as input.",paraId:4,tocIndex:2},{value:"OutNode[]",paraId:4,tocIndex:2},{value:"DagreAlign",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"UL",paraId:5,tocIndex:3},{value:"Node alignment: U = upper, D = down, L = left, R = right",paraId:6,tocIndex:3},{value:"UL",paraId:7,tocIndex:3},{value:": align to upper left",paraId:7,tocIndex:3},{value:"UR",paraId:7,tocIndex:3},{value:": align to upper right",paraId:7,tocIndex:3},{value:"DL",paraId:7,tocIndex:3},{value:": align to lower left",paraId:7,tocIndex:3},{value:"DR",paraId:7,tocIndex:3},{value:": align to lower right",paraId:7,tocIndex:3},{value:"DagreRankdir",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"Default:",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"TB",paraId:8,tocIndex:4},{value:"Layout direction. T = top, B = bottom, L = left, R = right",paraId:9,tocIndex:4},{value:"TB",paraId:10,tocIndex:4},{value:": top to bottom",paraId:10,tocIndex:4},{value:"BT",paraId:10,tocIndex:4},{value:": bottom to top",paraId:10,tocIndex:4},{value:"LR",paraId:10,tocIndex:4},{value:": left to right",paraId:10,tocIndex:4},{value:"RL",paraId:10,tocIndex:4},{value:": right to left",paraId:10,tocIndex:4},{value:"network-simplex",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"tight-tree",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"longest-path",paraId:11,tocIndex:5},{value:"Layout mode",paraId:12,tocIndex:5},{value:"number",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"Default:",paraId:13,tocIndex:6},{value:" 50",paraId:13,tocIndex:6},{value:"Rank spacing (px)",paraId:14,tocIndex:6},{value:"For 'TB' or 'BT', it's vertical spacing; for 'LR' or 'RL', it's horizontal spacing. ",paraId:15,tocIndex:6},{value:"ranksepFunc",paraId:15,tocIndex:6},{value:" has higher priority.",paraId:15,tocIndex:6},{value:"(d?: Node) => number",paraId:16,tocIndex:7},{value:"Callback for rank spacing (px)",paraId:17,tocIndex:7},{value:"For 'TB' or 'BT', it's vertical spacing; for 'LR' or 'RL', it's horizontal spacing. Takes precedence over nodesep if set.",paraId:18,tocIndex:7},{value:"number",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"Default:",paraId:19,tocIndex:8},{value:" 50",paraId:19,tocIndex:8},{value:"Node spacing (px)",paraId:20,tocIndex:8},{value:"For 'TB' or 'BT', it's horizontal spacing; for 'LR' or 'RL', it's vertical spacing. ",paraId:21,tocIndex:8},{value:"nodesepFunc",paraId:21,tocIndex:8},{value:" has higher priority.",paraId:21,tocIndex:8},{value:"(d?: Node) => number",paraId:22,tocIndex:9},{value:"Callback for node spacing (px), allows different spacing for different nodes",paraId:23,tocIndex:9},{value:"For 'TB' or 'BT', it's horizontal spacing; for 'LR' or 'RL', it's vertical spacing. Takes precedence over nodesep if set.",paraId:24,tocIndex:9},{value:"[number, number] | [number, number, number]",paraId:25,tocIndex:10},{value:" ",paraId:25,tocIndex:10},{value:"Default:",paraId:25,tocIndex:10},{value:" undefined",paraId:25,tocIndex:10},{value:"Top-left alignment position of the layout",paraId:26,tocIndex:10},{value:"boolean",paraId:27,tocIndex:11},{value:" ",paraId:27,tocIndex:11},{value:"Default:",paraId:27,tocIndex:11},{value:" false",paraId:27,tocIndex:11},{value:"Whether to keep edge control points. Only effective when using built-in polyline edges (",paraId:28,tocIndex:11},{value:"type: 'polyline-edge'",paraId:28,tocIndex:11},{value:") or any edge that uses ",paraId:28,tocIndex:11},{value:"style.controlPoints",paraId:28,tocIndex:11},{value:" as control points. Adds ",paraId:28,tocIndex:11},{value:"style.controlPoints",paraId:28,tocIndex:11},{value:" to edge data.",paraId:28,tocIndex:11},{value:"boolean",paraId:29,tocIndex:12},{value:" ",paraId:29,tocIndex:12},{value:"Default:",paraId:29,tocIndex:12},{value:" true",paraId:29,tocIndex:12},{value:"Whether to reserve space for edge labels",paraId:30,tocIndex:12},{value:"This affects whether a dummy node is added in the middle of the edge.",paraId:31,tocIndex:12},{value:"ID | Node | null",paraId:32,tocIndex:13},{value:"Focus node, only effective when ",paraId:33,tocIndex:13},{value:"radial",paraId:33,tocIndex:13},{value:" is true",paraId:33,tocIndex:13},{value:"ID: node id",paraId:34,tocIndex:13},{value:"Node: node instance",paraId:34,tocIndex:13},{value:"null: cancel focus",paraId:34,tocIndex:13},{value:"string[]",paraId:35,tocIndex:14},{value:" ",paraId:35,tocIndex:14},{value:"Default:",paraId:35,tocIndex:14},{value:" undefined",paraId:35,tocIndex:14},{value:"Reference array for node order in the same rank, stores node ids",paraId:36,tocIndex:14},{value:"If not specified, dagre's default order is used.",paraId:37,tocIndex:14},{value:"Size | ((nodeData: Node) => Size)",paraId:38,tocIndex:15},{value:" ",paraId:38,tocIndex:15},{value:"Default:",paraId:38,tocIndex:15},{value:" undefined",paraId:38,tocIndex:15},{value:"Specify node size for all or each node.",paraId:39,tocIndex:15},{value:"Used for collision detection to prevent node overlap",paraId:40,tocIndex:15},{value:"OutNode[]",paraId:41,tocIndex:16},{value:" ",paraId:41,tocIndex:16},{value:"Default:",paraId:41,tocIndex:16},{value:" undefined",paraId:41,tocIndex:16},{value:"Reference node positions for layout calculation",paraId:42,tocIndex:16},{value:"Usually for smooth transitions when switching data. In G6, if updating data, the existing layout result is used as input.",paraId:43,tocIndex:16},{value:"boolean",paraId:44,tocIndex:17},{value:"Whether to use radial layout based on dagre",paraId:45,tocIndex:17},{value:"boolean",paraId:46,tocIndex:18},{value:" ",paraId:46,tocIndex:18},{value:"Default:",paraId:46,tocIndex:18},{value:" false",paraId:46,tocIndex:18},{value:"Whether to sort nodes in the same rank by their parentId to prevent Combo overlap",paraId:47,tocIndex:18},{value:"Recommended to enable when using Combo",paraId:48,tocIndex:18},{value:"Flowcharts",paraId:49,tocIndex:19},{value:": Suitable for displaying flowcharts, node direction and spacing are automatically handled",paraId:49,tocIndex:19},{value:"Dependency Graphs",paraId:49,tocIndex:19},{value:": Display dependencies between packages or modules",paraId:49,tocIndex:19},{value:"Task Scheduling Graphs",paraId:49,tocIndex:19},{value:": Show dependencies and execution order between tasks",paraId:49,tocIndex:19},{value:"The following documents can help you better understand the Dagre layout",paraId:50,tocIndex:20},{value:"Graph Layout Algorithms: In-depth Dagre Layout",paraId:51,tocIndex:20},{value:"In-depth Dagre Layout Algorithm",paraId:51,tocIndex:20}]},62681:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(80760);const t=[{value:"This article introduces the common attribute configurations for built-in layouts.",paraId:0},{value:"Property",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:"Type",paraId:1,tocIndex:0},{value:"Default",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:"type",paraId:1,tocIndex:0},{value:"Layout type, name of built-in or custom layout",paraId:1,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"✓",paraId:1,tocIndex:0},{value:"isLayoutInvisibleNodes",paraId:1,tocIndex:0},{value:"Whether invisible nodes participate in the layout (takes effect when preLayout is true)",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"false",paraId:1,tocIndex:0},{value:"nodeFilter",paraId:1,tocIndex:0},{value:"Nodes participating in the layout",paraId:1,tocIndex:0},{value:"(node: NodeData) => boolean",paraId:1,tocIndex:0},{value:"() => true",paraId:1,tocIndex:0},{value:"preLayout",paraId:1,tocIndex:0},{value:"Use pre-layout, calculate layout before initializing elements",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"false",paraId:1,tocIndex:0},{value:"enableWorker",paraId:1,tocIndex:0},{value:"Whether to run the layout in a WebWorker",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"iterations",paraId:1,tocIndex:0},{value:"Number of iterations for iterative layout",paraId:1,tocIndex:0},{value:"number",paraId:1,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"Specifies the layout type, either the name of a built-in layout type or a custom layout.",paraId:3,tocIndex:1},{value:"const graph = new Graph({\n  // Other configurations...\n  layout: {\n    type: 'antv-dagre',\n  },\n});\n",paraId:4,tocIndex:1},{value:"Optional values include:",paraId:5,tocIndex:1},{value:"antv-dagre",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Custom layout based on dagre",paraId:7,tocIndex:1},{value:"circular",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Circular layout",paraId:8,tocIndex:1},{value:"combo-combined",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Layout suitable for combinations",paraId:9,tocIndex:1},{value:"concentric",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Concentric layout",paraId:10,tocIndex:1},{value:"d3-force",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Force-directed layout based on D3",paraId:11,tocIndex:1},{value:"d3-force-3d",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"3D Force-directed layout",paraId:12,tocIndex:1},{value:"dagre",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Dagre layout",paraId:13,tocIndex:1},{value:"fishbone",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Fishbone layout",paraId:14,tocIndex:1},{value:"force",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Force-directed layout",paraId:15,tocIndex:1},{value:"force-atlas2",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"ForceAtlas2 layout",paraId:16,tocIndex:1},{value:"fruchterman",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Fruchterman layout",paraId:17,tocIndex:1},{value:"grid",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Grid layout",paraId:18,tocIndex:1},{value:"mds",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"MDS layout for high-dimensional data",paraId:19,tocIndex:1},{value:"radial",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Radial layout",paraId:20,tocIndex:1},{value:"random",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Random layout",paraId:21,tocIndex:1},{value:"snake",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Snake layout",paraId:22,tocIndex:1},{value:"compact-box",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Compact box tree layout",paraId:23,tocIndex:1},{value:"dendrogram",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Dendrogram layout",paraId:24,tocIndex:1},{value:"mindmap",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Mindmap layout",paraId:25,tocIndex:1},{value:"indented",paraId:6,tocIndex:1},{value:": ",paraId:6,tocIndex:1},{value:"Indented tree layout",paraId:26,tocIndex:1}]},49826:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52216);const t=[{value:"Circular layout arranges nodes evenly or at intervals on a circle, and also supports spiral layouts by configuring different startRadius and endRadius. See more circular layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" or ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Circular layout",paraId:2,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"Suitable for networks with equal relationships and no hierarchical structure",paraId:3,tocIndex:1},{value:"Spiral layout",paraId:4,tocIndex:1},{value:":",paraId:4,tocIndex:1},{value:"Suitable for implicit hierarchies or time series graphs (such as organizational charts, propagation networks)",paraId:5,tocIndex:1},{value:"Other settings use the default configuration (layout width and height default to the entire canvas container)",paraId:6,tocIndex:2},{value:"const graph = new Graph({\n  // other configurations\n  layout: {\n    type: 'circular',\n  },\n});\n",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:"Type",paraId:8,tocIndex:3},{value:"Default",paraId:8,tocIndex:3},{value:"Required",paraId:8,tocIndex:3},{value:"type",paraId:8,tocIndex:3},{value:"Layout type",paraId:8,tocIndex:3},{value:"circular",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"✓",paraId:8,tocIndex:3},{value:"angleRatio",paraId:8,tocIndex:3},{value:"How many 2*PI between the first and last node",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"center",paraId:8,tocIndex:3},{value:"Center of the layout",paraId:8,tocIndex:3},{value:"[number, number]|[number, number, number]",paraId:8,tocIndex:3},{value:"[",paraId:8,tocIndex:3},{value:"layout width",paraId:8,tocIndex:3},{value:" / 2, ",paraId:8,tocIndex:3},{value:"layout height",paraId:8,tocIndex:3},{value:" / 2]",paraId:8,tocIndex:3},{value:"clockwise",paraId:8,tocIndex:3},{value:"Whether to arrange clockwise",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"true",paraId:8,tocIndex:3},{value:"divisions",paraId:8,tocIndex:3},{value:"Number of segments on the ring (segments will be evenly distributed, effective when endRadius - startRadius != 0)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"nodeSize",paraId:8,tocIndex:3},{value:"Node size (diameter), used for collision detection",paraId:8,tocIndex:3},{value:"Size | ((nodeData: Node) => Size)",paraId:8,tocIndex:3},{value:"10",paraId:8,tocIndex:3},{value:"nodeSpacing",paraId:8,tocIndex:3},{value:"Minimum spacing between rings, used to adjust radius",paraId:8,tocIndex:3},{value:"number | ((nodeData: Node) => number)",paraId:8,tocIndex:3},{value:"10",paraId:8,tocIndex:3},{value:"ordering",paraId:8,tocIndex:3},{value:"Node ordering on the ring, ",paraId:8,tocIndex:3},{value:"see details",paraId:9,tocIndex:3},{value:"topology",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"topology-directed",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"degree",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"radius",paraId:8,tocIndex:3},{value:"Circle radius, if set, spiral layout configs ",paraId:8,tocIndex:3},{value:"startRadius",paraId:8,tocIndex:3},{value:" and ",paraId:8,tocIndex:3},{value:"endRadius",paraId:8,tocIndex:3},{value:" are ignored, ",paraId:8,tocIndex:3},{value:"see details",paraId:10,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"startAngle",paraId:8,tocIndex:3},{value:"Start angle of the layout",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"0",paraId:8,tocIndex:3},{value:"endAngle",paraId:8,tocIndex:3},{value:"End angle of the layout",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"2 * Math.PI",paraId:8,tocIndex:3},{value:"startRadius",paraId:8,tocIndex:3},{value:"Start radius for spiral layout, ",paraId:8,tocIndex:3},{value:"usage",paraId:11,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"endRadius",paraId:8,tocIndex:3},{value:"End radius for spiral layout",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"width",paraId:8,tocIndex:3},{value:"Layout width",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"canvas width",paraId:8,tocIndex:3},{value:"height",paraId:8,tocIndex:3},{value:"Layout height",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"canvas height",paraId:8,tocIndex:3},{value:"Node ordering on the ring",paraId:12,tocIndex:4},{value:"topology",paraId:13,tocIndex:4},{value:": topological order",paraId:13,tocIndex:4},{value:"topology-directed",paraId:13,tocIndex:4},{value:": topological order (directed graph)",paraId:13,tocIndex:4},{value:"degree",paraId:13,tocIndex:4},{value:": order by degree",paraId:13,tocIndex:4},{value:"If not set (",paraId:14,tocIndex:4},{value:"null",paraId:14,tocIndex:4},{value:"), the order in the array is used directly",paraId:14,tocIndex:4},{value:"If radius, startRadius, and endRadius are not set, the default is ",paraId:15,tocIndex:5},{value:"Math.min(layout width, layout height) / 2",paraId:15,tocIndex:5},{value:", i.e., fills the entire layout area",paraId:15,tocIndex:5},{value:"const graph = new Graph({\n  // other configurations\n  layout: {\n    type: 'circular',\n  },\n});\n",paraId:16,tocIndex:7},{value:"const graph = new Graph({\n  // other configurations\n  layout: {\n    type: 'circular',\n    startRadius: 10,\n    endRadius: 300,\n  },\n});\n",paraId:17,tocIndex:8}]},28585:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82419);const t=[{value:"ComboCombined composite layout is suitable for graph data with composite group structures. It supports flexible configuration of the layout for elements inside combos as well as the layout between the outermost combos and nodes. By default, the internal elements use the Concentric layout, and the outer layout uses the gForce force-directed layout, balancing layout effect and overall stability. See more ComboCombined layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"User profile analysis: Analyze user behavior and product relationships, use user interest circles as combos, display specific products and behavior tags as internal nodes, and help operators identify user consumption paths.",paraId:2,tocIndex:1},{value:"Supply chain management graph: Divide suppliers, manufacturers, warehouses, and distributors into combos by role or region, display resources, personnel, or equipment as internal nodes, and clearly show the internal structure of each link in the supply chain.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"Required",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"Layout type",paraId:3,tocIndex:2},{value:"combo-combined",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:"Layout center",paraId:3,tocIndex:2},{value:"PointTuple",paraId:3,tocIndex:2},{value:"Graph center",paraId:3,tocIndex:2},{value:"comboPadding",paraId:3,tocIndex:2},{value:"Padding value inside the combo, used only for force calculation, not for rendering. It is recommended to set the same value as the visual padding.",paraId:3,tocIndex:2},{value:"((d?: unknown) => number)",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"innerLayout",paraId:3,tocIndex:2},{value:"Layout algorithm for elements inside the combo, ",paraId:3,tocIndex:2},{value:"see below",paraId:4,tocIndex:2},{value:"Layout",paraId:3,tocIndex:2},{value:"ConcentricLayout",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"Node size (diameter), used for collision detection. If not specified, it is calculated from the node's size property, or defaults to 10.",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:" | (d?: ",paraId:3,tocIndex:2},{value:"NodeData",paraId:5,tocIndex:2},{value:") => number",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"outerLayout",paraId:3,tocIndex:2},{value:"Layout algorithm for the outermost layer, ",paraId:3,tocIndex:2},{value:"see below",paraId:6,tocIndex:2},{value:"Layout",paraId:3,tocIndex:2},{value:"ForceLayout",paraId:3,tocIndex:2},{value:"spacing",paraId:3,tocIndex:2},{value:"Minimum spacing between node/combo edges when preventNodeOverlap or preventOverlap is ",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:". Can be a callback for different nodes.",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | (d?: ",paraId:3,tocIndex:2},{value:"NodeData",paraId:7,tocIndex:2},{value:") => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"treeKey",paraId:3,tocIndex:2},{value:"treeKey",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"Layout<any>",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"Default:",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"ConcentricLayout",paraId:8,tocIndex:3},{value:"The layout algorithm for elements inside the combo. Must use a synchronous layout algorithm. Default is ",paraId:9,tocIndex:3},{value:"ConcentricLayout",paraId:9,tocIndex:3},{value:". ",paraId:9,tocIndex:3},{value:"More layouts",paraId:9,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3},{value:"import { ConcentricLayout } from '@antv/layout';\n\nnew Graph({\n  layout: {\n    type: 'combo-combined',\n    /**\n     * See more ConcentricLayout options:\n     * https://github.com/antvis/layout/blob/v5/packages/layout/src/types.ts#L397\n     */\n    innerLayout: new ConcentricLayout({\n      sortBy: 'id',\n      nodeSize: 20,\n      clockwise: true,\n    }),\n  },\n});\n",paraId:11,tocIndex:3},{value:"Layout<any>",paraId:12,tocIndex:4},{value:" ",paraId:12,tocIndex:4},{value:"Default:",paraId:12,tocIndex:4},{value:" ",paraId:12,tocIndex:4},{value:"ForceLayout",paraId:12,tocIndex:4},{value:"The layout algorithm for the outermost layer. Default is ",paraId:13,tocIndex:4},{value:"ForceLayout",paraId:13,tocIndex:4},{value:". ",paraId:13,tocIndex:4},{value:"More layouts",paraId:13,tocIndex:4},{value:"Example",paraId:14,tocIndex:4},{value:"import { ForceLayout } from '@antv/layout';\n\nnew Graph({\n  layout: {\n    type: 'combo-combined',\n    /**\n     * See more ForceLayout options:\n     * https://github.com/antvis/layout/blob/v5/packages/layout/src/types.ts#L950\n     */\n    outerLayout: new ForceLayout({\n      gravity: 1,\n      factor: 2,\n      linkDistance: (edge: any, source: any, target: any) => {\n        const nodeSize = ((source.size?.[0] || 30) + (target.size?.[0] || 30)) / 2;\n        return Math.min(nodeSize * 1.5, 70);\n      },\n    }),\n  },\n});\n",paraId:15,tocIndex:4}]},55082:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75676);const t=[{value:"The CompactBox layout is suitable for visualizing structured tree data. It is evolved from the classic ",paraId:0,tocIndex:0},{value:"Reingold–Tilford tidy layout algorithm",paraId:0,tocIndex:0},{value:", and considers the bounding box of each tree node during layout, effectively maintaining the compactness and hierarchical clarity of the tree structure. See more CompactBox layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Decision trees: The compact tree layout can visually and intuitively display each decision path.",paraId:2,tocIndex:1},{value:"Knowledge graphs: Show hierarchical relationships and connections between concepts. The compact layout can present complex knowledge networks in limited space.",paraId:2,tocIndex:1},{value:"const graph = new Graph({\n  layout: {\n    type: 'compact-box',\n    direction: 'LR',\n    getHeight: () => 16,\n    getWidth: () => 16,\n    getVGap: () => 16,\n    getHGap: () => 40,\n  },\n});\n",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"Layout type",paraId:4,tocIndex:3},{value:"compact-box",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"direction",paraId:4,tocIndex:3},{value:"Layout direction, ",paraId:4,tocIndex:3},{value:"options",paraId:5,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"H",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"V",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:"getSide",paraId:4,tocIndex:3},{value:"Set whether the node is on the left or right of the root. Only works for ",paraId:4,tocIndex:3},{value:"H",paraId:4,tocIndex:3},{value:" direction. ",paraId:4,tocIndex:3},{value:"See below",paraId:6,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:7,tocIndex:3},{value:") => string",paraId:4,tocIndex:3},{value:"getId",paraId:4,tocIndex:3},{value:"Callback for node id",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:8,tocIndex:3},{value:") => string",paraId:4,tocIndex:3},{value:"getWidth",paraId:4,tocIndex:3},{value:"Callback for node width",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:9,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getHeight",paraId:4,tocIndex:3},{value:"Callback for node height",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:10,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getHGap",paraId:4,tocIndex:3},{value:"Callback for horizontal gap",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:11,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getVGap",paraId:4,tocIndex:3},{value:"Callback for vertical gap",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:12,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"radial",paraId:4,tocIndex:3},{value:"Whether to enable radial layout, ",paraId:4,tocIndex:3},{value:"see below",paraId:13,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"LR",paraId:14,tocIndex:4},{value:" | ",paraId:14,tocIndex:4},{value:"RL",paraId:14,tocIndex:4},{value:" | ",paraId:14,tocIndex:4},{value:"TB",paraId:14,tocIndex:4},{value:" | ",paraId:14,tocIndex:4},{value:"BT",paraId:14,tocIndex:4},{value:" | ",paraId:14,tocIndex:4},{value:"H",paraId:14,tocIndex:4},{value:" | ",paraId:14,tocIndex:4},{value:"V",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"Default:",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"LR",paraId:14,tocIndex:4},{value:"Tree layout direction",paraId:15,tocIndex:4},{value:"TB",paraId:16,tocIndex:4},{value:": Root at the top, layout downwards",paraId:16,tocIndex:4},{value:"BT",paraId:16,tocIndex:4},{value:": Root at the bottom, layout upwards",paraId:16,tocIndex:4},{value:"LR",paraId:16,tocIndex:4},{value:": Root at the left, layout to the right",paraId:16,tocIndex:4},{value:"RL",paraId:16,tocIndex:4},{value:": Root at the right, layout to the left",paraId:16,tocIndex:4},{value:"H",paraId:16,tocIndex:4},{value:": Root in the middle, horizontal symmetric layout. You can use ",paraId:16,tocIndex:4},{value:"getSide",paraId:16,tocIndex:4},{value:" to specify the left/right logic for each node",paraId:16,tocIndex:4},{value:"V",paraId:16,tocIndex:4},{value:": Root in the middle, vertical symmetric layout",paraId:16,tocIndex:4},{value:"(d?: ",paraId:17,tocIndex:5},{value:"NodeData",paraId:18,tocIndex:5},{value:") => string",paraId:17,tocIndex:5},{value:"Set whether the node is on the left or right of the root. Only works for ",paraId:19,tocIndex:5},{value:"H",paraId:19,tocIndex:5},{value:" direction. If not set, the algorithm will automatically assign left/right. See ",paraId:19,tocIndex:5},{value:"getSide auto logic",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"Example:",paraId:20,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:21,tocIndex:5},{value:"(d?: ",paraId:22,tocIndex:6},{value:"NodeData",paraId:23,tocIndex:6},{value:") => string",paraId:22,tocIndex:6},{value:"Callback for node id",paraId:24,tocIndex:6},{value:"Example:",paraId:25,tocIndex:6},{value:"(d) => {\n  // d is a node\n  return d.id + '_node';\n};\n",paraId:26,tocIndex:6},{value:"(d?: ",paraId:27,tocIndex:7},{value:"NodeData",paraId:28,tocIndex:7},{value:") => number",paraId:27,tocIndex:7},{value:"Callback for node width",paraId:29,tocIndex:7},{value:"Example:",paraId:30,tocIndex:7},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:31,tocIndex:7},{value:"(d?: ",paraId:32,tocIndex:8},{value:"NodeData",paraId:33,tocIndex:8},{value:") => number",paraId:32,tocIndex:8},{value:"Callback for node height",paraId:34,tocIndex:8},{value:"Example:",paraId:35,tocIndex:8},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:36,tocIndex:8},{value:"(d?: ",paraId:37,tocIndex:9},{value:"NodeData",paraId:38,tocIndex:9},{value:") => number",paraId:37,tocIndex:9},{value:"Callback for horizontal gap",paraId:39,tocIndex:9},{value:"Example:",paraId:40,tocIndex:9},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:41,tocIndex:9},{value:"(d?: ",paraId:42,tocIndex:10},{value:"NodeData",paraId:43,tocIndex:10},{value:") => number",paraId:42,tocIndex:10},{value:"Callback for vertical gap",paraId:44,tocIndex:10},{value:"Example:",paraId:45,tocIndex:10},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:46,tocIndex:10},{value:"boolean",paraId:47,tocIndex:11},{value:"Whether to use radial layout. If ",paraId:48,tocIndex:11},{value:"radial",paraId:48,tocIndex:11},{value:" is ",paraId:48,tocIndex:11},{value:"true",paraId:48,tocIndex:11},{value:", it is recommended to set ",paraId:48,tocIndex:11},{value:"direction",paraId:48,tocIndex:11},{value:" to ",paraId:48,tocIndex:11},{value:"'LR'",paraId:48,tocIndex:11},{value:" or ",paraId:48,tocIndex:11},{value:"'RL'",paraId:48,tocIndex:11},{value:".",paraId:48,tocIndex:11}]},29591:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(63664);const t=[{value:"The concentric layout arranges nodes in layers according to a certain sorting rule, with each layer of nodes placed around a common center. See more concentric layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" or ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Layered data visualization, such as permission structures, organizational charts, etc., with the center as the top-level role and outer rings as lower-level nodes.",paraId:2,tocIndex:1},{value:"Visualization of ranking analysis results, with high-importance nodes in the center and low-importance nodes on the periphery, quickly expressing the relative influence of nodes in the graph.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"Required",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"Layout type",paraId:3,tocIndex:2},{value:"concentric",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:"Center position of the circular layout, defaults to the center of the container",paraId:3,tocIndex:2},{value:"[number, number] | [number, number, number]",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"clockwise",paraId:3,tocIndex:2},{value:"Whether to arrange nodes clockwise",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"equidistant",paraId:3,tocIndex:2},{value:"Whether the distance between rings is equal",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"width",paraId:3,tocIndex:2},{value:"Layout width, defaults to container width",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"height",paraId:3,tocIndex:2},{value:"Layout height, defaults to container height",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"sortBy",paraId:3,tocIndex:2},{value:"The property to sort by (node attribute name). The higher the value, the closer to the center. If set to 'degree', nodes with higher degree are placed closer to the center",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:"degree",paraId:3,tocIndex:2},{value:"maxLevelDiff",paraId:3,tocIndex:2},{value:"Maximum attribute difference in the same layer. If undefined, set to maxValue / 4, where maxValue is the maximum value of the sorting property",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"Node size (diameter), used for collision detection",paraId:3,tocIndex:2},{value:"number | number[] | ((nodeData: Node) => number)",paraId:3,tocIndex:2},{value:"30",paraId:3,tocIndex:2},{value:"nodeSpacing",paraId:3,tocIndex:2},{value:"Minimum spacing between rings, used to adjust the radius",paraId:3,tocIndex:2},{value:"number | number[] | ((node?: Node) => number)",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"preventOverlap",paraId:3,tocIndex:2},{value:"Whether to prevent overlap. Must be used with nodeSize or data.size. Only works if node size is set in data or in this layout config.",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"startAngle",paraId:3,tocIndex:2},{value:"The angle (in radians) to start laying out nodes",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"3 / 2 * Math.PI",paraId:3,tocIndex:2},{value:"sweep",paraId:3,tocIndex:2},{value:"The angle difference between the first and last node in the same layer. If undefined, set to 2 ",paraId:3,tocIndex:2},{value:"Math.PI",paraId:3,tocIndex:2},{value:" (1 - 1 / level.nodes )",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      { id: 'center', data: { label: 'Center', level: 0 } },\n      { id: 'level1-0', data: { label: 'L1-0', level: 1 } },\n      { id: 'level1-1', data: { label: 'L1-1', level: 1 } },\n      { id: 'level1-2', data: { label: 'L1-2', level: 1 } },\n      { id: 'level1-3', data: { label: 'L1-3', level: 1 } },\n      { id: 'level1-4', data: { label: 'L1-4', level: 1 } },\n      { id: 'level1-5', data: { label: 'L1-5', level: 1 } },\n      { id: 'level2-0', data: { label: 'L2-0', level: 2 } },\n      { id: 'level2-1', data: { label: 'L2-1', level: 2 } },\n      { id: 'level2-2', data: { label: 'L2-2', level: 2 } },\n      { id: 'level2-3', data: { label: 'L2-3', level: 2 } },\n      { id: 'level2-4', data: { label: 'L2-4', level: 2 } },\n      { id: 'level2-5', data: { label: 'L2-5', level: 2 } },\n      { id: 'level2-6', data: { label: 'L2-6', level: 2 } },\n      { id: 'level2-7', data: { label: 'L2-7', level: 2 } },\n      { id: 'level2-8', data: { label: 'L2-8', level: 2 } },\n      { id: 'level2-9', data: { label: 'L2-9', level: 2 } },\n      { id: 'level2-10', data: { label: 'L2-10', level: 2 } },\n      { id: 'level2-11', data: { label: 'L2-11', level: 2 } },\n    ],\n    edges: [\n      { id: 'e-center-level1-0', source: 'center', target: 'level1-0' },\n      { id: 'e-center-level1-1', source: 'center', target: 'level1-1' },\n      { id: 'e-center-level1-2', source: 'center', target: 'level1-2' },\n      { id: 'e-center-level1-3', source: 'center', target: 'level1-3' },\n      { id: 'e-center-level1-4', source: 'center', target: 'level1-4' },\n      { id: 'e-center-level1-5', source: 'center', target: 'level1-5' },\n      { id: 'e-level1-0-level2-0', source: 'level1-0', target: 'level2-0' },\n      { id: 'e-level1-0-level2-1', source: 'level1-0', target: 'level2-1' },\n      { id: 'e-level1-1-level2-2', source: 'level1-1', target: 'level2-2' },\n      { id: 'e-level1-1-level2-3', source: 'level1-1', target: 'level2-3' },\n      { id: 'e-level1-2-level2-4', source: 'level1-2', target: 'level2-4' },\n      { id: 'e-level1-2-level2-5', source: 'level1-2', target: 'level2-5' },\n      { id: 'e-level1-3-level2-6', source: 'level1-3', target: 'level2-6' },\n      { id: 'e-level1-3-level2-7', source: 'level1-3', target: 'level2-7' },\n      { id: 'e-level1-4-level2-8', source: 'level1-4', target: 'level2-8' },\n      { id: 'e-level1-4-level2-9', source: 'level1-4', target: 'level2-9' },\n      { id: 'e-level1-5-level2-10', source: 'level1-5', target: 'level2-10' },\n      { id: 'e-level1-5-level2-11', source: 'level1-5', target: 'level2-11' },\n    ],\n  },\n  layout: {\n    type: 'concentric',\n    nodeSize: 32,\n    sortBy: 'degree',\n    preventOverlap: true,\n  },\n  behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n  animation: false,\n});\n\ngraph.render();\n",paraId:4,tocIndex:3}]},13047:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(40757);const t=[{value:"The D3Force3D layout is a 3D extension based on ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:", which simulates physical forces in three-dimensional space to achieve automatic layout. Compared to 2D layouts, it adds force effects in the Z-axis direction, allowing richer data relationships to be displayed in 3D space.",paraId:0,tocIndex:0},{value:"D3Force3D extends the traditional 2D force-directed layout with the following forces:",paraId:1,tocIndex:2},{value:"3D Centering Force",paraId:2,tocIndex:2},{value:": Pulls nodes toward the center point in 3D space",paraId:2,tocIndex:2},{value:"3D Collision Force",paraId:2,tocIndex:2},{value:": Prevents node overlap in 3D space",paraId:2,tocIndex:2},{value:"3D Radial Force",paraId:2,tocIndex:2},{value:": Attracts nodes to a sphere in 3D space",paraId:2,tocIndex:2},{value:"3D Axis Forces",paraId:2,tocIndex:2},{value:": Applies forces along the X, Y, and Z axes",paraId:2,tocIndex:2},{value:"The layout is computed through iterations, mainly involving the following parameters:",paraId:3,tocIndex:3},{value:"alpha",paraId:4,tocIndex:3},{value:": The current energy value of the iteration, controlling node movement speed",paraId:4,tocIndex:3},{value:"alphaDecay",paraId:4,tocIndex:3},{value:": The decay rate of the energy value",paraId:4,tocIndex:3},{value:"alphaMin",paraId:4,tocIndex:3},{value:": The minimum energy value; iteration stops below this value",paraId:4,tocIndex:3},{value:"velocityDecay",paraId:4,tocIndex:3},{value:": The velocity decay factor",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Layout type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"d3-force-3d",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"nodeSize",paraId:5,tocIndex:4},{value:"Node size (diameter), used for collision detection",paraId:5,tocIndex:4},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"iterations",paraId:5,tocIndex:4},{value:"Number of force iterations; higher means more precise but slower",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"numDimensions",paraId:5,tocIndex:4},{value:"Number of dimensions (2 or 3)",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"3",paraId:5,tocIndex:4},{value:"forceSimulation",paraId:5,tocIndex:4},{value:"Custom force simulation method",paraId:5,tocIndex:4},{value:"Simulation<NodeDatum, EdgeDatum>",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onTick",paraId:5,tocIndex:4},{value:"Callback for each iteration",paraId:5,tocIndex:4},{value:"(data: LayoutMapping) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"randomSource",paraId:5,tocIndex:4},{value:"Random number generator",paraId:5,tocIndex:4},{value:"() => number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"Property",paraId:6,tocIndex:5},{value:"Description",paraId:6,tocIndex:5},{value:"Type",paraId:6,tocIndex:5},{value:"Default",paraId:6,tocIndex:5},{value:"Required",paraId:6,tocIndex:5},{value:"alpha",paraId:6,tocIndex:5},{value:"Current convergence threshold",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"1",paraId:6,tocIndex:5},{value:"alphaDecay",paraId:6,tocIndex:5},{value:"Convergence decay rate (0-1)",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.028",paraId:6,tocIndex:5},{value:"alphaMin",paraId:6,tocIndex:5},{value:"Stop iteration threshold",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.001",paraId:6,tocIndex:5},{value:"alphaTarget",paraId:6,tocIndex:5},{value:"Target convergence threshold",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0",paraId:6,tocIndex:5},{value:"velocityDecay",paraId:6,tocIndex:5},{value:"Velocity decay factor",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.4",paraId:6,tocIndex:5},{value:"Property",paraId:7,tocIndex:7},{value:"Description",paraId:7,tocIndex:7},{value:"Type",paraId:7,tocIndex:7},{value:"Default",paraId:7,tocIndex:7},{value:"Required",paraId:7,tocIndex:7},{value:"center.x",paraId:7,tocIndex:7},{value:"Center x coordinate",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.y",paraId:7,tocIndex:7},{value:"Center y coordinate",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.z",paraId:7,tocIndex:7},{value:"Center z coordinate",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.strength",paraId:7,tocIndex:7},{value:"Force strength",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"1",paraId:7,tocIndex:7},{value:"Property",paraId:8,tocIndex:8},{value:"Description",paraId:8,tocIndex:8},{value:"Type",paraId:8,tocIndex:8},{value:"Default",paraId:8,tocIndex:8},{value:"Required",paraId:8,tocIndex:8},{value:"collide.radius",paraId:8,tocIndex:8},{value:"Collision radius",paraId:8,tocIndex:8},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:8,tocIndex:8},{value:"10",paraId:8,tocIndex:8},{value:"collide.strength",paraId:8,tocIndex:8},{value:"Force strength",paraId:8,tocIndex:8},{value:"number",paraId:8,tocIndex:8},{value:"1",paraId:8,tocIndex:8},{value:"collide.iterations",paraId:8,tocIndex:8},{value:"Collision iterations",paraId:8,tocIndex:8},{value:"number",paraId:8,tocIndex:8},{value:"1",paraId:8,tocIndex:8},{value:"Property",paraId:9,tocIndex:9},{value:"Description",paraId:9,tocIndex:9},{value:"Type",paraId:9,tocIndex:9},{value:"Default",paraId:9,tocIndex:9},{value:"Required",paraId:9,tocIndex:9},{value:"link.id",paraId:9,tocIndex:9},{value:"Edge id generator",paraId:9,tocIndex:9},{value:"(edge: EdgeDatum, index: number, edges: EdgeDatum[]) => string",paraId:9,tocIndex:9},{value:"edge.id",paraId:9,tocIndex:9},{value:"link.distance",paraId:9,tocIndex:9},{value:"Ideal edge length",paraId:9,tocIndex:9},{value:"number | ((edge: EdgeDatum, index: number, edges: EdgeDatum[]) => number)",paraId:9,tocIndex:9},{value:"30",paraId:9,tocIndex:9},{value:"link.strength",paraId:9,tocIndex:9},{value:"Force strength",paraId:9,tocIndex:9},{value:"number | ((edge: EdgeDatum, index: number, edges: EdgeDatum[]) => number)",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:"link.iterations",paraId:9,tocIndex:9},{value:"Link force iterations",paraId:9,tocIndex:9},{value:"number",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:"Property",paraId:10,tocIndex:10},{value:"Description",paraId:10,tocIndex:10},{value:"Type",paraId:10,tocIndex:10},{value:"Default",paraId:10,tocIndex:10},{value:"Required",paraId:10,tocIndex:10},{value:"manyBody.strength",paraId:10,tocIndex:10},{value:"Force strength",paraId:10,tocIndex:10},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:10,tocIndex:10},{value:"-30",paraId:10,tocIndex:10},{value:"manyBody.theta",paraId:10,tocIndex:10},{value:"Barnes-Hut accuracy",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"0.9",paraId:10,tocIndex:10},{value:"manyBody.distanceMin",paraId:10,tocIndex:10},{value:"Minimum interaction distance",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"1",paraId:10,tocIndex:10},{value:"manyBody.distanceMax",paraId:10,tocIndex:10},{value:"Maximum interaction distance",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"Infinity",paraId:10,tocIndex:10},{value:"Property",paraId:11,tocIndex:11},{value:"Description",paraId:11,tocIndex:11},{value:"Type",paraId:11,tocIndex:11},{value:"Default",paraId:11,tocIndex:11},{value:"Required",paraId:11,tocIndex:11},{value:"radial.strength",paraId:11,tocIndex:11},{value:"Force strength",paraId:11,tocIndex:11},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:11,tocIndex:11},{value:"0.1",paraId:11,tocIndex:11},{value:"radial.radius",paraId:11,tocIndex:11},{value:"Target radius",paraId:11,tocIndex:11},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:11,tocIndex:11},{value:"100",paraId:11,tocIndex:11},{value:"radial.x",paraId:11,tocIndex:11},{value:"Sphere center x",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"radial.y",paraId:11,tocIndex:11},{value:"Sphere center y",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"radial.z",paraId:11,tocIndex:11},{value:"Sphere center z",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"Each axis can be configured separately:",paraId:12,tocIndex:12},{value:"Property",paraId:13,tocIndex:12},{value:"Description",paraId:13,tocIndex:12},{value:"Type",paraId:13,tocIndex:12},{value:"Default",paraId:13,tocIndex:12},{value:"Required",paraId:13,tocIndex:12},{value:"x.strength",paraId:13,tocIndex:12},{value:"X-axis force strength",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"x.x",paraId:13,tocIndex:12},{value:"Target x coordinate",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"y.strength",paraId:13,tocIndex:12},{value:"Y-axis force strength",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"y.y",paraId:13,tocIndex:12},{value:"Target y coordinate",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"z.strength",paraId:13,tocIndex:12},{value:"Z-axis force strength",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"z.z",paraId:13,tocIndex:12},{value:"Target z coordinate",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12}]},99820:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(19984);const t=[{value:"The D3Force layout is a force-directed layout based on ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:". It simulates physical forces (such as attraction, repulsion, collision, etc.) to make the graph reach a stable state with minimal energy.",paraId:0,tocIndex:0},{value:"The main features of this layout are:",paraId:1,tocIndex:0},{value:"Automatic arrangement",paraId:2,tocIndex:0},{value:": No need to manually set node positions, the system will automatically find suitable positions",paraId:2,tocIndex:0},{value:"Real-time adjustment",paraId:2,tocIndex:0},{value:": When you drag a node, other nodes will adjust their positions in real time",paraId:2,tocIndex:0},{value:"Flexible configuration",paraId:2,tocIndex:0},{value:":\n",paraId:2,tocIndex:0},{value:"You can adjust the attraction and repulsion between nodes",paraId:3,tocIndex:0},{value:"You can set the ideal length of edges",paraId:3,tocIndex:0},{value:"You can fix the positions of important nodes",paraId:3,tocIndex:0},{value:"Animation effect",paraId:2,tocIndex:0},{value:": Nodes move with smooth animation, making changes more natural",paraId:2,tocIndex:0},{value:"The D3Force layout simulates five different forces to achieve automatic layout. Imagine a physical world where these forces act simultaneously and eventually reach equilibrium:",paraId:4,tocIndex:2},{value:"Note: The arrows of different colors in the diagram represent different types of forces. In the actual layout, these forces are invisible and also affected by other forces.",paraId:5,tocIndex:2},{value:"Link Force",paraId:6,tocIndex:2},{value:": Imagine nodes connected by rubber bands, which pull connected nodes to a suitable distance. The tightness of the rubber band is the force strength, and the ideal length is the distance we set.",paraId:6,tocIndex:2},{value:"Many-Body Force",paraId:6,tocIndex:2},{value:": Similar to magnets, it allows all nodes to attract or repel each other. When the force strength is negative, nodes repel each other (like like poles of magnets); when positive, they attract (like opposite poles). This force determines the density of the graph.",paraId:6,tocIndex:2},{value:"Center Force",paraId:6,tocIndex:2},{value:": Like all nodes are tied to the center of the canvas by an invisible string. This force prevents nodes from drifting too far and keeps the graph centered.",paraId:6,tocIndex:2},{value:"Collision Force",paraId:6,tocIndex:2},{value:": Treats nodes as solid balls. When nodes get too close, they automatically bounce apart. This force mainly prevents node overlap and improves readability.",paraId:6,tocIndex:2},{value:"Radial Force",paraId:6,tocIndex:2},{value:": Imagine an invisible ring that attracts nodes to the ring. By setting the radius and force strength, nodes can form a beautiful circular layout.",paraId:6,tocIndex:2},{value:"Layout calculation is an iterative process with two key concepts:",paraId:7,tocIndex:3},{value:'Like the "energy" of the layout, it determines how vigorously nodes move:',paraId:8,tocIndex:4},{value:"Initial state",paraId:9,tocIndex:4},{value:": Alpha = 1, nodes move vigorously",paraId:9,tocIndex:4},{value:"During calculation",paraId:9,tocIndex:4},{value:": Alpha gradually decreases, node movement slows",paraId:9,tocIndex:4},{value:"End state",paraId:9,tocIndex:4},{value:": When Alpha < alphaMin, nodes stop moving",paraId:9,tocIndex:4},{value:"Controls the number of times forces are applied in each calculation:",paraId:10,tocIndex:5},{value:"Effect",paraId:11,tocIndex:5},{value:": The larger the value, the more precise the layout, but the slower the computation",paraId:11,tocIndex:5},{value:"Adjustment",paraId:11,tocIndex:5},{value:":\n",paraId:11,tocIndex:5},{value:"Simple graphs: use the default value",paraId:12,tocIndex:5},{value:"Complex graphs: increase the number of iterations as needed",paraId:12,tocIndex:5},{value:"Real-time interaction: use fewer iterations",paraId:12,tocIndex:5},{value:"Tip: Iterations and alpha value work together. Increasing iterations makes each step more precise, while alpha controls the overall progress.",paraId:13,tocIndex:5},{value:"Property",paraId:14,tocIndex:6},{value:"Description",paraId:14,tocIndex:6},{value:"Type",paraId:14,tocIndex:6},{value:"Default",paraId:14,tocIndex:6},{value:"Required",paraId:14,tocIndex:6},{value:"type",paraId:14,tocIndex:6},{value:"Layout type",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"'d3-force'",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"nodeSize",paraId:14,tocIndex:6},{value:"Node size (diameter), for collision detection",paraId:14,tocIndex:6},{value:"number | ((node, index, nodes) => number)",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"iterations",paraId:14,tocIndex:6},{value:"Number of force iterations, higher is more precise",paraId:14,tocIndex:6},{value:"number",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"onTick",paraId:14,tocIndex:6},{value:"Callback for each iteration, for real-time results",paraId:14,tocIndex:6},{value:"(data: LayoutMapping) => void",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"forceSimulation",paraId:14,tocIndex:6},{value:"Custom force simulation, defaults to d3.js method",paraId:14,tocIndex:6},{value:"Simulation<NodeDatum, EdgeDatum>",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"randomSource",paraId:14,tocIndex:6},{value:"Function to generate random numbers",paraId:14,tocIndex:6},{value:"() => number",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"Property",paraId:15,tocIndex:7},{value:"Description",paraId:15,tocIndex:7},{value:"Type",paraId:15,tocIndex:7},{value:"Default",paraId:15,tocIndex:7},{value:"Required",paraId:15,tocIndex:7},{value:"alpha",paraId:15,tocIndex:7},{value:"Current convergence threshold, controls activity",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"1",paraId:15,tocIndex:7},{value:"alphaMin",paraId:15,tocIndex:7},{value:"Minimum threshold to stop, when alpha < this, stop",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.001",paraId:15,tocIndex:7},{value:"alphaDecay",paraId:15,tocIndex:7},{value:"Decay rate of alpha, [0, 1], 0.028 ≈ 300 iterations",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.028",paraId:15,tocIndex:7},{value:"alphaTarget",paraId:15,tocIndex:7},{value:"Target alpha, system tries to converge to this value",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0",paraId:15,tocIndex:7},{value:"velocityDecay",paraId:15,tocIndex:7},{value:"Velocity decay factor, higher means slower movement",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.4",paraId:15,tocIndex:7},{value:"Property",paraId:16,tocIndex:9},{value:"Description",paraId:16,tocIndex:9},{value:"Type",paraId:16,tocIndex:9},{value:"Default",paraId:16,tocIndex:9},{value:"Required",paraId:16,tocIndex:9},{value:"link.id",paraId:16,tocIndex:9},{value:"Function to generate edge id",paraId:16,tocIndex:9},{value:"(edge, index, edges) => string",paraId:16,tocIndex:9},{value:"(e) => e.id",paraId:16,tocIndex:9},{value:"link.distance",paraId:16,tocIndex:9},{value:"Ideal edge length",paraId:16,tocIndex:9},{value:"number | ((edge, index, edges) => number)",paraId:16,tocIndex:9},{value:"30",paraId:16,tocIndex:9},{value:"link.strength",paraId:16,tocIndex:9},{value:"Force strength, higher means closer to ideal",paraId:16,tocIndex:9},{value:"number | ((edge, index, edges) => number)",paraId:16,tocIndex:9},{value:"1",paraId:16,tocIndex:9},{value:"link.iterations",paraId:16,tocIndex:9},{value:"Number of link force iterations",paraId:16,tocIndex:9},{value:"number",paraId:16,tocIndex:9},{value:"1",paraId:16,tocIndex:9},{value:"Property",paraId:17,tocIndex:10},{value:"Description",paraId:17,tocIndex:10},{value:"Type",paraId:17,tocIndex:10},{value:"Default",paraId:17,tocIndex:10},{value:"Required",paraId:17,tocIndex:10},{value:"manyBody.strength",paraId:17,tocIndex:10},{value:"Force strength, negative for repulsion, positive for attraction",paraId:17,tocIndex:10},{value:"number | ((node, index, nodes) => number)",paraId:17,tocIndex:10},{value:"-30",paraId:17,tocIndex:10},{value:"manyBody.theta",paraId:17,tocIndex:10},{value:"Barnes-Hut accuracy, smaller is more accurate",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"0.9",paraId:17,tocIndex:10},{value:"manyBody.distanceMin",paraId:17,tocIndex:10},{value:"Minimum distance, prevents excessive force",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"1",paraId:17,tocIndex:10},{value:"manyBody.distanceMax",paraId:17,tocIndex:10},{value:"Maximum distance, beyond which no force is applied",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"Infinity",paraId:17,tocIndex:10},{value:"Property",paraId:18,tocIndex:11},{value:"Description",paraId:18,tocIndex:11},{value:"Type",paraId:18,tocIndex:11},{value:"Default",paraId:18,tocIndex:11},{value:"Required",paraId:18,tocIndex:11},{value:"center.x",paraId:18,tocIndex:11},{value:"Center x coordinate",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"0",paraId:18,tocIndex:11},{value:"center.y",paraId:18,tocIndex:11},{value:"Center y coordinate",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"0",paraId:18,tocIndex:11},{value:"center.strength",paraId:18,tocIndex:11},{value:"Force strength, higher means closer to center",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"1",paraId:18,tocIndex:11},{value:"Property",paraId:19,tocIndex:12},{value:"Description",paraId:19,tocIndex:12},{value:"Type",paraId:19,tocIndex:12},{value:"Default",paraId:19,tocIndex:12},{value:"Required",paraId:19,tocIndex:12},{value:"collide.radius",paraId:19,tocIndex:12},{value:"Collision radius, nodes repel if closer",paraId:19,tocIndex:12},{value:"number | ((node, index, nodes) => number)",paraId:19,tocIndex:12},{value:"10",paraId:19,tocIndex:12},{value:"collide.strength",paraId:19,tocIndex:12},{value:"Force strength, higher means stronger repulsion",paraId:19,tocIndex:12},{value:"number",paraId:19,tocIndex:12},{value:"1",paraId:19,tocIndex:12},{value:"collide.iterations",paraId:19,tocIndex:12},{value:"Number of collision iterations",paraId:19,tocIndex:12},{value:"number",paraId:19,tocIndex:12},{value:"1",paraId:19,tocIndex:12},{value:"Property",paraId:20,tocIndex:13},{value:"Description",paraId:20,tocIndex:13},{value:"Type",paraId:20,tocIndex:13},{value:"Default",paraId:20,tocIndex:13},{value:"Required",paraId:20,tocIndex:13},{value:"radial.strength",paraId:20,tocIndex:13},{value:"Force strength, higher means closer to radius",paraId:20,tocIndex:13},{value:"number | ((node, index, nodes) => number)",paraId:20,tocIndex:13},{value:"0.1",paraId:20,tocIndex:13},{value:"radial.radius",paraId:20,tocIndex:13},{value:"Target radius, nodes are attracted to circle",paraId:20,tocIndex:13},{value:"number | ((node, index, nodes) => number)",paraId:20,tocIndex:13},{value:"100",paraId:20,tocIndex:13},{value:"radial.x",paraId:20,tocIndex:13},{value:"Center x coordinate",paraId:20,tocIndex:13},{value:"number",paraId:20,tocIndex:13},{value:"0",paraId:20,tocIndex:13},{value:"radial.y",paraId:20,tocIndex:13},{value:"Center y coordinate",paraId:20,tocIndex:13},{value:"number",paraId:20,tocIndex:13},{value:"0",paraId:20,tocIndex:13},{value:"Property",paraId:21,tocIndex:14},{value:"Description",paraId:21,tocIndex:14},{value:"Type",paraId:21,tocIndex:14},{value:"Default",paraId:21,tocIndex:14},{value:"Required",paraId:21,tocIndex:14},{value:"x.strength",paraId:21,tocIndex:14},{value:"Force strength in x direction",paraId:21,tocIndex:14},{value:"number | ((node, index, nodes) => number)",paraId:21,tocIndex:14},{value:"-",paraId:21,tocIndex:14},{value:"x.x",paraId:21,tocIndex:14},{value:"Target x coordinate, nodes attracted here",paraId:21,tocIndex:14},{value:"number | ((node, index, nodes) => number)",paraId:21,tocIndex:14},{value:"-",paraId:21,tocIndex:14},{value:"Property",paraId:22,tocIndex:15},{value:"Description",paraId:22,tocIndex:15},{value:"Type",paraId:22,tocIndex:15},{value:"Default",paraId:22,tocIndex:15},{value:"Required",paraId:22,tocIndex:15},{value:"y.strength",paraId:22,tocIndex:15},{value:"Force strength in y direction",paraId:22,tocIndex:15},{value:"number | ((node, index, nodes) => number)",paraId:22,tocIndex:15},{value:"-",paraId:22,tocIndex:15},{value:"y.y",paraId:22,tocIndex:15},{value:"Target y coordinate, nodes attracted here",paraId:22,tocIndex:15},{value:"number | ((node, index, nodes) => number)",paraId:22,tocIndex:15},{value:"-",paraId:22,tocIndex:15},{value:"{\n  layout: {\n    type: 'd3-force',\n    collide: {\n      // Prevent nodes from overlapping by specifying a collision radius for each node.\n      radius: (d) => d.size / 2,\n    },\n  },\n}\n",paraId:23,tocIndex:17},{value:"See ",paraId:24,tocIndex:17},{value:"Example - Prevent Node Overlap in Force-Directed Layout",paraId:25,tocIndex:17},{value:"This example shows how to use force-directed layout for team clustering, where nodes of different teams automatically cluster together.",paraId:26,tocIndex:18},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      // Team A\n      { id: 'A1', team: 'A', label: 'A1', size: 30 },\n      { id: 'A2', team: 'A', label: 'A2', size: 20 },\n      { id: 'A3', team: 'A', label: 'A3', size: 20 },\n      { id: 'A4', team: 'A', label: 'A4', size: 20 },\n      // Team B\n      { id: 'B1', team: 'B', label: 'B1', size: 30 },\n      { id: 'B2', team: 'B', label: 'B2', size: 20 },\n      { id: 'B3', team: 'B', label: 'B3', size: 20 },\n      { id: 'B4', team: 'B', label: 'B4', size: 20 },\n      // Team C\n      { id: 'C1', team: 'C', label: 'C1', size: 30 },\n      { id: 'C2', team: 'C', label: 'C2', size: 20 },\n      { id: 'C3', team: 'C', label: 'C3', size: 20 },\n      { id: 'C4', team: 'C', label: 'C4', size: 20 },\n    ],\n    edges: [\n      // Team A internal connections\n      { source: 'A1', target: 'A2' },\n      { source: 'A1', target: 'A3' },\n      { source: 'A1', target: 'A4' },\n      // Team B internal connections\n      { source: 'B1', target: 'B2' },\n      { source: 'B1', target: 'B3' },\n      { source: 'B1', target: 'B4' },\n      // Team C internal connections\n      { source: 'C1', target: 'C2' },\n      { source: 'C1', target: 'C3' },\n      { source: 'C1', target: 'C4' },\n      // Few connections between teams\n      { source: 'A1', target: 'B1' },\n      { source: 'B1', target: 'C1' },\n    ],\n  },\n  node: {\n    style: {\n      size: (d) => d.size,\n      fill: (d) => {\n        // Different colors for different teams\n        const colors = {\n          A: '#FF6B6B',\n          B: '#4ECDC4',\n          C: '#45B7D1',\n        };\n        return colors[d.team];\n      },\n      labelText: (d) => d.label,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#aaa',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    // Configure link force - nodes within the same team are closer\n    link: {\n      distance: (d) => {\n        // Shorter distance within the same team\n        if (d.source.team === d.target.team) return 50;\n        // Longer distance between teams\n        return 200;\n      },\n      strength: (d) => {\n        // Stronger connection within the same team\n        if (d.source.team === d.target.team) return 0.7;\n        // Weaker connection between teams\n        return 0.1;\n      },\n    },\n    // Configure many-body force - control repulsion between nodes\n    manyBody: {\n      strength: (d) => {\n        // Team leader nodes (ending with 1) have stronger repulsion\n        if (d.label.endsWith('1')) return -100;\n        return -30;\n      },\n    },\n    // Configure collision force - prevent node overlap\n    collide: {\n      radius: 35,\n      strength: 0.8,\n    },\n    // Configure center force - keep the graph centered\n    center: {\n      strength: 0.05,\n    },\n  },\n  behaviors: ['drag-element-force'],\n});\n\ngraph.render();\n",paraId:27,tocIndex:18},{value:"Show full code",paraId:28},{value:"import { Graph } from '@antv/g6';\n\n// Create mock data with nodes from different teams\nconst data = {\n  nodes: [\n    // Team A\n    { id: 'A1', team: 'A', label: 'A1', size: 30 },\n    { id: 'A2', team: 'A', label: 'A2', size: 20 },\n    { id: 'A3', team: 'A', label: 'A3', size: 20 },\n    { id: 'A4', team: 'A', label: 'A4', size: 20 },\n    // Team B\n    { id: 'B1', team: 'B', label: 'B1', size: 30 },\n    { id: 'B2', team: 'B', label: 'B2', size: 20 },\n    { id: 'B3', team: 'B', label: 'B3', size: 20 },\n    { id: 'B4', team: 'B', label: 'B4', size: 20 },\n    // Team C\n    { id: 'C1', team: 'C', label: 'C1', size: 30 },\n    { id: 'C2', team: 'C', label: 'C2', size: 20 },\n    { id: 'C3', team: 'C', label: 'C3', size: 20 },\n    { id: 'C4', team: 'C', label: 'C4', size: 20 },\n  ],\n  edges: [\n    // Team A internal connections\n    { source: 'A1', target: 'A2' },\n    { source: 'A1', target: 'A3' },\n    { source: 'A1', target: 'A4' },\n    // Team B internal connections\n    { source: 'B1', target: 'B2' },\n    { source: 'B1', target: 'B3' },\n    { source: 'B1', target: 'B4' },\n    // Team C internal connections\n    { source: 'C1', target: 'C2' },\n    { source: 'C1', target: 'C3' },\n    { source: 'C1', target: 'C4' },\n    // Few connections between teams\n    { source: 'A1', target: 'B1' },\n    { source: 'B1', target: 'C1' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      size: (d) => d.size,\n      fill: (d) => {\n        // Different colors for different teams\n        const colors = {\n          A: '#FF6B6B',\n          B: '#4ECDC4',\n          C: '#45B7D1',\n        };\n        return colors[d.team];\n      },\n      labelText: (d) => d.label,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#aaa',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    // Configure link force - nodes within the same team are closer\n    link: {\n      distance: (d) => {\n        // Shorter distance within the same team\n        if (d.source.team === d.target.team) return 50;\n        // Longer distance between teams\n        return 200;\n      },\n      strength: (d) => {\n        // Stronger connection within the same team\n        if (d.source.team === d.target.team) return 0.7;\n        // Weaker connection between teams\n        return 0.1;\n      },\n    },\n    // Configure many-body force - control repulsion between nodes\n    manyBody: {\n      strength: (d) => {\n        // Team leader nodes (ending with 1) have stronger repulsion\n        if (d.label.endsWith('1')) return -100;\n        return -30;\n      },\n    },\n    // Configure collision force - prevent node overlap\n    collide: {\n      radius: 35,\n      strength: 0.8,\n    },\n    // Configure center force - keep the graph centered\n    center: {\n      strength: 0.05,\n    },\n  },\n  behaviors: ['drag-element-force'],\n});\n\ngraph.render();\n",paraId:29,tocIndex:18},{value:"Main configuration notes:",paraId:30,tocIndex:18},{value:"link.distance",paraId:31,tocIndex:18},{value:": Shorter within teams, longer between teams",paraId:31,tocIndex:18},{value:"link.strength",paraId:31,tocIndex:18},{value:": Stronger within teams, weaker between teams",paraId:31,tocIndex:18},{value:"manyBody.strength",paraId:31,tocIndex:18},{value:": Controls repulsion between nodes",paraId:31,tocIndex:18},{value:"collide",paraId:31,tocIndex:18},{value:": Prevents node overlap",paraId:31,tocIndex:18},{value:"center",paraId:31,tocIndex:18},{value:": Keeps the layout centered",paraId:31,tocIndex:18},{value:"See also ",paraId:32,tocIndex:18},{value:"Customize parameters for different nodes",paraId:33,tocIndex:18},{value:".",paraId:32,tocIndex:18}]},73566:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(43478);const t=[{value:"Dagre is a hierarchical layout suitable for directed acyclic graphs (DAGs). It can automatically handle the direction and spacing between nodes and supports both horizontal and vertical layouts. See more Dagre layout ",paraId:0,tocIndex:1},{value:"examples",paraId:1,tocIndex:1},{value:", ",paraId:0,tocIndex:1},{value:"source code",paraId:0,tocIndex:1},{value:", and ",paraId:0,tocIndex:1},{value:"official documentation",paraId:0,tocIndex:1},{value:".",paraId:0,tocIndex:1},{value:"const graph = new Graph({\n  layout: {\n    type: 'dagre',\n    rankdir: 'TB',\n    align: 'UL',\n    nodesep: 50,\n    ranksep: 50,\n    controlPoints: false,\n  },\n});\n",paraId:2,tocIndex:2},{value:"For more options, refer to the ",paraId:3,tocIndex:3},{value:"official documentation",paraId:3,tocIndex:3},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"Layout type",paraId:4,tocIndex:3},{value:"dagre",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"rankdir",paraId:4,tocIndex:3},{value:"Layout direction, options",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:"align",paraId:4,tocIndex:3},{value:"Node alignment, options",paraId:4,tocIndex:3},{value:"UL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"UR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"DL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"DR",paraId:4,tocIndex:3},{value:"UL",paraId:4,tocIndex:3},{value:"nodesep",paraId:4,tocIndex:3},{value:"Node spacing (px). For ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" or ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:", it's the horizontal spacing; for ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" or ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:", it's the vertical spacing",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"50",paraId:4,tocIndex:3},{value:"ranksep",paraId:4,tocIndex:3},{value:"Rank spacing (px). For ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" or ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:", it's the vertical spacing between ranks; for ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" or ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:", it's the horizontal spacing between ranks",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"100",paraId:4,tocIndex:3},{value:"ranker",paraId:4,tocIndex:3},{value:"Algorithm for assigning ranks to nodes: ",paraId:4,tocIndex:3},{value:"longest-path",paraId:4,tocIndex:3},{value:", ",paraId:4,tocIndex:3},{value:"tight-tree",paraId:4,tocIndex:3},{value:", or ",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"tight-tree",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"longest-path",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:"nodeSize",paraId:4,tocIndex:3},{value:"G6 custom property, specify node size for all or each node. If a single number, width and height are the same; if array: ",paraId:4,tocIndex:3},{value:"[width, height]",paraId:4,tocIndex:3},{value:"number | number[] | () => (number | number[])",paraId:4,tocIndex:3},{value:"controlPoints",paraId:4,tocIndex:3},{value:"Whether to retain edge control points",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"TB",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"BT",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"LR",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"RL",paraId:5,tocIndex:4},{value:", ",paraId:5,tocIndex:4},{value:"Default",paraId:5,tocIndex:4},{value:": ",paraId:5,tocIndex:4},{value:"TB",paraId:5,tocIndex:4},{value:"Layout direction",paraId:6,tocIndex:4},{value:"TB",paraId:7,tocIndex:4},{value:": Top to Bottom;",paraId:7,tocIndex:4},{value:"BT",paraId:8,tocIndex:4},{value:": Bottom to Top;",paraId:8,tocIndex:4},{value:"LR",paraId:9,tocIndex:4},{value:": Left to Right;",paraId:9,tocIndex:4},{value:"RL",paraId:10,tocIndex:4},{value:": Right to Left.",paraId:10,tocIndex:4},{value:"UL",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"UR",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"DL",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"DR",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:": ",paraId:11,tocIndex:5},{value:"UL",paraId:11,tocIndex:5},{value:"Node alignment",paraId:12,tocIndex:5},{value:"UL",paraId:13,tocIndex:5},{value:": Upper Left",paraId:13,tocIndex:5},{value:"UR",paraId:13,tocIndex:5},{value:": Upper Right",paraId:13,tocIndex:5},{value:"DL",paraId:13,tocIndex:5},{value:": Down Left",paraId:13,tocIndex:5},{value:"DR",paraId:13,tocIndex:5},{value:": Down Right",paraId:13,tocIndex:5},{value:"number, ",paraId:14,tocIndex:6},{value:"Default",paraId:14,tocIndex:6},{value:": 50",paraId:14,tocIndex:6},{value:"Node spacing (px). For ",paraId:15,tocIndex:6},{value:"TB",paraId:15,tocIndex:6},{value:" or ",paraId:15,tocIndex:6},{value:"BT",paraId:15,tocIndex:6},{value:", it's the horizontal spacing; for ",paraId:15,tocIndex:6},{value:"LR",paraId:15,tocIndex:6},{value:" or ",paraId:15,tocIndex:6},{value:"RL",paraId:15,tocIndex:6},{value:", it's the vertical spacing",paraId:15,tocIndex:6},{value:"number, ",paraId:16,tocIndex:7},{value:"Default",paraId:16,tocIndex:7},{value:": 50",paraId:16,tocIndex:7},{value:"Rank spacing (px). For ",paraId:17,tocIndex:7},{value:"TB",paraId:17,tocIndex:7},{value:" or ",paraId:17,tocIndex:7},{value:"BT",paraId:17,tocIndex:7},{value:", it's the vertical spacing between ranks; for ",paraId:17,tocIndex:7},{value:"LR",paraId:17,tocIndex:7},{value:" or ",paraId:17,tocIndex:7},{value:"RL",paraId:17,tocIndex:7},{value:", it's the horizontal spacing between ranks",paraId:17,tocIndex:7},{value:"network-simplex",paraId:18,tocIndex:8},{value:" | ",paraId:18,tocIndex:8},{value:"tight-tree",paraId:18,tocIndex:8},{value:" | ",paraId:18,tocIndex:8},{value:"longest-path",paraId:18,tocIndex:8},{value:", ",paraId:18,tocIndex:8},{value:"Default",paraId:18,tocIndex:8},{value:": ",paraId:18,tocIndex:8},{value:"network-simplex",paraId:18,tocIndex:8},{value:"Algorithm for assigning ranks to nodes, supports three algorithms:",paraId:19,tocIndex:8},{value:"longest-path",paraId:20,tocIndex:8},{value:": Uses DFS to recursively find the longest path for each node. Simple and fast, but may result in many long edges.",paraId:20,tocIndex:8},{value:"tight-tree",paraId:20,tocIndex:8},{value:": An optimization algorithm to reduce the number of long edges. It first uses ",paraId:20,tocIndex:8},{value:"longest-path",paraId:20,tocIndex:8},{value:" to compute initial ranks, then adjusts slack edges to build a feasible tree.",paraId:20,tocIndex:8},{value:"network-simplex",paraId:20,tocIndex:8},{value:": Based on ",paraId:20,tocIndex:8},{value:"A Technique for Drawing Directed Graphs",paraId:20,tocIndex:8},{value:", iteratively modifies node ranks to minimize slack edges.",paraId:20,tocIndex:8},{value:"number | number[] | () => (number | number[])",paraId:21,tocIndex:9},{value:"G6 custom property, specify node size for all or each node. If a single number, width and height are the same; if array: ",paraId:22,tocIndex:9},{value:"[width, height]",paraId:22,tocIndex:9},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 20;\n  return [10, 20];\n};\n",paraId:23,tocIndex:9},{value:"boolean, ",paraId:24,tocIndex:10},{value:"Default",paraId:24,tocIndex:10},{value:": false",paraId:24,tocIndex:10},{value:"Whether to retain edge control points.",paraId:25,tocIndex:10},{value:"Flowcharts",paraId:26,tocIndex:11},{value:": Suitable for displaying flowcharts, automatically handling direction and spacing between nodes.",paraId:26,tocIndex:11},{value:"Dependency Graphs",paraId:26,tocIndex:11},{value:": Display dependencies between packages or modules.",paraId:26,tocIndex:11},{value:"Task Scheduling Graphs",paraId:26,tocIndex:11},{value:": Show dependencies and execution order between tasks.",paraId:26,tocIndex:11},{value:"The following documents can help you better understand Dagre layout",paraId:27,tocIndex:12},{value:"Graph Layout Algorithms｜Detailed Dagre Layout",paraId:28,tocIndex:12},{value:"In-depth Interpretation of Dagre Layout Algorithm",paraId:28,tocIndex:12}]},27139:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82069);const t=[{value:"The dendrogram layout is suitable for visualizing hierarchical clustering data. Its feature is that all child nodes are laid out on the same level, node size is not considered, and each node is treated as 1px.",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'dendrogram',\n    direction: 'LR',\n    nodeSep: 30,\n    rankSep: 250,\n    radial: false,\n  },\n});\n",paraId:1,tocIndex:1},{value:"Property",paraId:2,tocIndex:2},{value:"Description",paraId:2,tocIndex:2},{value:"Type",paraId:2,tocIndex:2},{value:"Default",paraId:2,tocIndex:2},{value:"Required",paraId:2,tocIndex:2},{value:"type",paraId:2,tocIndex:2},{value:"Layout type",paraId:2,tocIndex:2},{value:"dendrogram",paraId:2,tocIndex:2},{value:"-",paraId:2,tocIndex:2},{value:"✓",paraId:2,tocIndex:2},{value:"direction",paraId:2,tocIndex:2},{value:"Layout direction, ",paraId:2,tocIndex:2},{value:"options",paraId:3,tocIndex:2},{value:"LR",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"RL",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"TB",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"BT",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"H",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"V",paraId:2,tocIndex:2},{value:"LR",paraId:2,tocIndex:2},{value:"nodeSep",paraId:2,tocIndex:2},{value:"Node spacing, distance between nodes on the same level",paraId:2,tocIndex:2},{value:"number",paraId:2,tocIndex:2},{value:"20",paraId:2,tocIndex:2},{value:"rankSep",paraId:2,tocIndex:2},{value:"Rank spacing, distance between different levels",paraId:2,tocIndex:2},{value:"number",paraId:2,tocIndex:2},{value:"200",paraId:2,tocIndex:2},{value:"radial",paraId:2,tocIndex:2},{value:"Whether to enable radial layout, ",paraId:2,tocIndex:2},{value:"see below",paraId:4,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"Tree layout direction options:",paraId:5,tocIndex:3},{value:"TB",paraId:6,tocIndex:3},{value:": Root at the top, layout downward",paraId:6,tocIndex:3},{value:"BT",paraId:7,tocIndex:3},{value:": Root at the bottom, layout upward",paraId:7,tocIndex:3},{value:"LR",paraId:8,tocIndex:3},{value:": Root at the left, layout to the right",paraId:8,tocIndex:3},{value:"RL",paraId:9,tocIndex:3},{value:": Root at the right, layout to the left",paraId:9,tocIndex:3},{value:"H",paraId:10,tocIndex:3},{value:": Root in the middle, horizontal symmetric layout",paraId:10,tocIndex:3},{value:"V",paraId:11,tocIndex:3},{value:": Root in the middle, vertical symmetric layout",paraId:11,tocIndex:3},{value:"Whether to enable radial layout mode. When enabled, nodes are distributed radially around the root node.",paraId:12,tocIndex:4},{value:"If ",paraId:13,tocIndex:4},{value:"radial",paraId:13,tocIndex:4},{value:" is set to ",paraId:13,tocIndex:4},{value:"true",paraId:13,tocIndex:4},{value:", it is recommended to set ",paraId:13,tocIndex:4},{value:"direction",paraId:13,tocIndex:4},{value:" to ",paraId:13,tocIndex:4},{value:"'LR'",paraId:13,tocIndex:4},{value:" or ",paraId:13,tocIndex:4},{value:"'RL'",paraId:13,tocIndex:4},{value:" for best results.",paraId:13,tocIndex:4}]},7155:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(54536);const t=[{value:"Fishbone layout is a graphical layout specifically designed for representing hierarchical data. By simulating the shape of a fishbone, it arranges data nodes according to their hierarchy, making the hierarchical relationships of the data clearer and more intuitive. Fishbone layout is especially suitable for datasets that need to show causality, hierarchy, or classification information.",paraId:0,tocIndex:0},{value:"Displaying hierarchical data, such as organizational structures or classification systems",paraId:1,tocIndex:1},{value:"Showing problem analysis processes, such as fault analysis or quality analysis",paraId:1,tocIndex:1},{value:"Displaying decision processes, such as decision trees or factor analysis",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'Quality',\n          depth: 0,\n          children: ['Machine', 'Method', 'Material', 'Man Power', 'Measurement', 'Milieu'],\n        },\n        {\n          id: 'Machine',\n          depth: 1,\n          children: ['Mill', 'Mixer', 'Metal Lathe'],\n        },\n        {\n          id: 'Mill',\n          depth: 2,\n        },\n        {\n          id: 'Mixer',\n          depth: 2,\n        },\n        {\n          id: 'Metal Lathe',\n          depth: 2,\n          children: ['Milling'],\n        },\n        {\n          id: 'Milling',\n          depth: 3,\n        },\n        {\n          id: 'Method',\n          depth: 1,\n        },\n        {\n          id: 'Material',\n          depth: 1,\n          children: ['Masonite', 'Marscapone', 'Meat'],\n        },\n        {\n          id: 'Masonite',\n          depth: 2,\n          children: ['spearMint', 'pepperMint', 'test1'],\n        },\n        {\n          id: 'spearMint',\n          depth: 3,\n        },\n        {\n          id: 'pepperMint',\n          depth: 3,\n          children: ['test3'],\n        },\n        {\n          id: 'test3',\n          depth: 4,\n        },\n        {\n          id: 'test1',\n          depth: 3,\n          children: ['test4'],\n        },\n        {\n          id: 'test4',\n          depth: 4,\n        },\n        {\n          id: 'Marscapone',\n          depth: 2,\n          children: ['Malty', 'Minty'],\n        },\n        {\n          id: 'Malty',\n          depth: 3,\n        },\n        {\n          id: 'Minty',\n          depth: 3,\n        },\n        {\n          id: 'Meat',\n          depth: 2,\n          children: ['Mutton'],\n        },\n        {\n          id: 'Mutton',\n          depth: 3,\n        },\n        {\n          id: 'Man Power',\n          depth: 1,\n          children: ['Manager', \"Master's Student\", 'Magician', 'Miner', 'Magister', 'Massage Artist'],\n        },\n        {\n          id: 'Manager',\n          depth: 2,\n        },\n        {\n          id: \"Master's Student\",\n          depth: 2,\n        },\n        {\n          id: 'Magician',\n          depth: 2,\n        },\n        {\n          id: 'Miner',\n          depth: 2,\n        },\n        {\n          id: 'Magister',\n          depth: 2,\n          children: ['Malpractice'],\n        },\n        {\n          id: 'Malpractice',\n          depth: 3,\n        },\n        {\n          id: 'Massage Artist',\n          depth: 2,\n          children: ['Masseur', 'Masseuse'],\n        },\n        {\n          id: 'Masseur',\n          depth: 3,\n        },\n        {\n          id: 'Masseuse',\n          depth: 3,\n        },\n        {\n          id: 'Measurement',\n          depth: 1,\n          children: ['Malleability'],\n        },\n        {\n          id: 'Malleability',\n          depth: 2,\n        },\n        {\n          id: 'Milieu',\n          depth: 1,\n          children: ['Marine'],\n        },\n        {\n          id: 'Marine',\n          depth: 2,\n        },\n      ],\n      edges: [\n        {\n          source: 'Quality',\n          target: 'Machine',\n        },\n        {\n          source: 'Quality',\n          target: 'Method',\n        },\n        {\n          source: 'Quality',\n          target: 'Material',\n        },\n        {\n          source: 'Quality',\n          target: 'Man Power',\n        },\n        {\n          source: 'Quality',\n          target: 'Measurement',\n        },\n        {\n          source: 'Quality',\n          target: 'Milieu',\n        },\n        {\n          source: 'Machine',\n          target: 'Mill',\n        },\n        {\n          source: 'Machine',\n          target: 'Mixer',\n        },\n        {\n          source: 'Machine',\n          target: 'Metal Lathe',\n        },\n        {\n          source: 'Metal Lathe',\n          target: 'Milling',\n        },\n        {\n          source: 'Material',\n          target: 'Masonite',\n        },\n        {\n          source: 'Material',\n          target: 'Marscapone',\n        },\n        {\n          source: 'Material',\n          target: 'Meat',\n        },\n        {\n          source: 'Masonite',\n          target: 'spearMint',\n        },\n        {\n          source: 'Masonite',\n          target: 'pepperMint',\n        },\n        {\n          source: 'Masonite',\n          target: 'test1',\n        },\n        {\n          source: 'pepperMint',\n          target: 'test3',\n        },\n        {\n          source: 'test1',\n          target: 'test4',\n        },\n        {\n          source: 'Marscapone',\n          target: 'Malty',\n        },\n        {\n          source: 'Marscapone',\n          target: 'Minty',\n        },\n        {\n          source: 'Meat',\n          target: 'Mutton',\n        },\n        {\n          source: 'Man Power',\n          target: 'Manager',\n        },\n        {\n          source: 'Man Power',\n          target: \"Master's Student\",\n        },\n        {\n          source: 'Man Power',\n          target: 'Magician',\n        },\n        {\n          source: 'Man Power',\n          target: 'Miner',\n        },\n        {\n          source: 'Man Power',\n          target: 'Magister',\n        },\n        {\n          source: 'Man Power',\n          target: 'Massage Artist',\n        },\n        {\n          source: 'Magister',\n          target: 'Malpractice',\n        },\n        {\n          source: 'Massage Artist',\n          target: 'Masseur',\n        },\n        {\n          source: 'Massage Artist',\n          target: 'Masseuse',\n        },\n        {\n          source: 'Measurement',\n          target: 'Malleability',\n        },\n        {\n          source: 'Milieu',\n          target: 'Marine',\n        },\n      ],\n    },\n    node: {\n      type: 'rect',\n      style: {\n        size: [32, 32],\n        // fill: () => randomColor(),\n        label: false,\n        labelFill: '#262626',\n        labelFontFamily: 'Gill Sans',\n        labelMaxLines: 2,\n        labelMaxWidth: '100%',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n        labelWordWrap: true,\n      },\n    },\n    edge: {\n      type: 'polyline',\n      style: {\n        lineWidth: 3,\n      },\n    },\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n    autoFit: 'view',\n    layout: {\n      type: 'fishbone',\n      direction: 'RL',\n      hGap: 50,\n      vGap: 50,\n      getRibSep: () => 60,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'fishbone',\n      direction: 'RL',\n      hGap: 50,\n      vGap: 50,\n      getRibSep: 60,\n    };\n\n    const optionFolder = gui.addFolder('Fishbone Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'direction', ['RL', 'LR']);\n    optionFolder.add(options, 'hGap', 20, 100, 10);\n    optionFolder.add(options, 'vGap', 20, 100, 10);\n    optionFolder.add(options, 'getRibSep', 30, 100, 10);\n\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: property === 'getRibSep' ? () => value : value,\n        }),\n      );\n      await graph.layout();\n      // 调整 direction 后部分node可能会溢出屏幕，重新执行下fitView\n      if (property === 'direction') {\n        graph.fitView();\n      }\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'fishbone',\n    direction: 'LR',\n    hGap: 50,\n    vGap: 50,\n    getRibSep: () => 60,\n  },\n});\n",paraId:3,tocIndex:3},{value:"Property",paraId:4,tocIndex:4},{value:"Description",paraId:4,tocIndex:4},{value:"Type",paraId:4,tocIndex:4},{value:"Default",paraId:4,tocIndex:4},{value:"Required",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"Layout type",paraId:4,tocIndex:4},{value:"fishbone",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"direction",paraId:4,tocIndex:4},{value:"Layout direction, ",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:" (right to left, head on right), ",paraId:4,tocIndex:4},{value:"LR",paraId:4,tocIndex:4},{value:" (left to right, head on left)",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:" | ",paraId:4,tocIndex:4},{value:"LR",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:"hGap",paraId:4,tocIndex:4},{value:"Horizontal gap",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"vGap",paraId:4,tocIndex:4},{value:"Vertical gap",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"getRibSep",paraId:4,tocIndex:4},{value:"Function to get rib gap",paraId:4,tocIndex:4},{value:"(node: NodeData) => number",paraId:4,tocIndex:4},{value:"() => 60",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"Layout width",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"Layout height",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"Node size",paraId:4,tocIndex:4},{value:"number | [number, number] | [number, number, number] | ((node: NodeData) => number | [number, number] | [number, number, number])",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"isLayoutInvisibleNodes",paraId:4,tocIndex:4},{value:"Whether invisible nodes participate in layout (effective when preLayout is true)",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeFilter",paraId:4,tocIndex:4},{value:"Nodes to participate in this layout",paraId:4,tocIndex:4},{value:"(node: NodeData) => boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"preLayout",paraId:4,tocIndex:4},{value:"Use pre-layout, calculate layout before initializing elements (not suitable for pipeline layout)",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"The simplest configuration:",paraId:5,tocIndex:6},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nconst graph = new Graph({\n  layout: {\n    type: 'fishbone',\n  },\n  autoFit: 'view',\n  data: treeToGraphData({\n    nodes: [\n      { id: 'root', data: { label: 'Root' } },\n      { id: 'child1', data: { label: 'Child 1' } },\n      { id: 'child2', data: { label: 'Child 2' } },\n      { id: 'child3', data: { label: 'Child 3' } },\n    ],\n    edges: [\n      { id: 'e1', source: 'root', target: 'child1' },\n      { id: 'e2', source: 'root', target: 'child2' },\n      { id: 'e3', source: 'root', target: 'child3' },\n    ],\n  }),\n  edge: {\n    type: 'polyline',\n    style: {\n      lineWidth: 3,\n    },\n  },\n  behaviors: ['drag-canvas'],\n});\n",paraId:6,tocIndex:6},{value:"Result:",paraId:7,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'fishbone',\n  },\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'Quality',\n        depth: 0,\n        children: ['Machine', 'Method', 'Material', 'Man Power', 'Measurement', 'Milieu'],\n      },\n      {\n        id: 'Machine',\n        depth: 1,\n        children: ['Mill', 'Mixer', 'Metal Lathe'],\n      },\n      {\n        id: 'Mill',\n        depth: 2,\n      },\n      {\n        id: 'Mixer',\n        depth: 2,\n      },\n      {\n        id: 'Metal Lathe',\n        depth: 2,\n        children: ['Milling'],\n      },\n      {\n        id: 'Milling',\n        depth: 3,\n      },\n      {\n        id: 'Method',\n        depth: 1,\n      },\n      {\n        id: 'Material',\n        depth: 1,\n        children: ['Masonite', 'Marscapone', 'Meat'],\n      },\n      {\n        id: 'Masonite',\n        depth: 2,\n        children: ['spearMint', 'pepperMint', 'test1'],\n      },\n      {\n        id: 'spearMint',\n        depth: 3,\n      },\n      {\n        id: 'pepperMint',\n        depth: 3,\n        children: ['test3'],\n      },\n      {\n        id: 'test3',\n        depth: 4,\n      },\n      {\n        id: 'test1',\n        depth: 3,\n        children: ['test4'],\n      },\n      {\n        id: 'test4',\n        depth: 4,\n      },\n      {\n        id: 'Marscapone',\n        depth: 2,\n        children: ['Malty', 'Minty'],\n      },\n      {\n        id: 'Malty',\n        depth: 3,\n      },\n      {\n        id: 'Minty',\n        depth: 3,\n      },\n      {\n        id: 'Meat',\n        depth: 2,\n        children: ['Mutton'],\n      },\n      {\n        id: 'Mutton',\n        depth: 3,\n      },\n      {\n        id: 'Man Power',\n        depth: 1,\n        children: ['Manager', \"Master's Student\", 'Magician', 'Miner', 'Magister', 'Massage Artist'],\n      },\n      {\n        id: 'Manager',\n        depth: 2,\n      },\n      {\n        id: \"Master's Student\",\n        depth: 2,\n      },\n      {\n        id: 'Magician',\n        depth: 2,\n      },\n      {\n        id: 'Miner',\n        depth: 2,\n      },\n      {\n        id: 'Magister',\n        depth: 2,\n        children: ['Malpractice'],\n      },\n      {\n        id: 'Malpractice',\n        depth: 3,\n      },\n      {\n        id: 'Massage Artist',\n        depth: 2,\n        children: ['Masseur', 'Masseuse'],\n      },\n      {\n        id: 'Masseur',\n        depth: 3,\n      },\n      {\n        id: 'Masseuse',\n        depth: 3,\n      },\n      {\n        id: 'Measurement',\n        depth: 1,\n        children: ['Malleability'],\n      },\n      {\n        id: 'Malleability',\n        depth: 2,\n      },\n      {\n        id: 'Milieu',\n        depth: 1,\n        children: ['Marine'],\n      },\n      {\n        id: 'Marine',\n        depth: 2,\n      },\n    ],\n    edges: [\n      {\n        source: 'Quality',\n        target: 'Machine',\n      },\n      {\n        source: 'Quality',\n        target: 'Method',\n      },\n      {\n        source: 'Quality',\n        target: 'Material',\n      },\n      {\n        source: 'Quality',\n        target: 'Man Power',\n      },\n      {\n        source: 'Quality',\n        target: 'Measurement',\n      },\n      {\n        source: 'Quality',\n        target: 'Milieu',\n      },\n      {\n        source: 'Machine',\n        target: 'Mill',\n      },\n      {\n        source: 'Machine',\n        target: 'Mixer',\n      },\n      {\n        source: 'Machine',\n        target: 'Metal Lathe',\n      },\n      {\n        source: 'Metal Lathe',\n        target: 'Milling',\n      },\n      {\n        source: 'Material',\n        target: 'Masonite',\n      },\n      {\n        source: 'Material',\n        target: 'Marscapone',\n      },\n      {\n        source: 'Material',\n        target: 'Meat',\n      },\n      {\n        source: 'Masonite',\n        target: 'spearMint',\n      },\n      {\n        source: 'Masonite',\n        target: 'pepperMint',\n      },\n      {\n        source: 'Masonite',\n        target: 'test1',\n      },\n      {\n        source: 'pepperMint',\n        target: 'test3',\n      },\n      {\n        source: 'test1',\n        target: 'test4',\n      },\n      {\n        source: 'Marscapone',\n        target: 'Malty',\n      },\n      {\n        source: 'Marscapone',\n        target: 'Minty',\n      },\n      {\n        source: 'Meat',\n        target: 'Mutton',\n      },\n      {\n        source: 'Man Power',\n        target: 'Manager',\n      },\n      {\n        source: 'Man Power',\n        target: \"Master's Student\",\n      },\n      {\n        source: 'Man Power',\n        target: 'Magician',\n      },\n      {\n        source: 'Man Power',\n        target: 'Miner',\n      },\n      {\n        source: 'Man Power',\n        target: 'Magister',\n      },\n      {\n        source: 'Man Power',\n        target: 'Massage Artist',\n      },\n      {\n        source: 'Magister',\n        target: 'Malpractice',\n      },\n      {\n        source: 'Massage Artist',\n        target: 'Masseur',\n      },\n      {\n        source: 'Massage Artist',\n        target: 'Masseuse',\n      },\n      {\n        source: 'Measurement',\n        target: 'Malleability',\n      },\n      {\n        source: 'Milieu',\n        target: 'Marine',\n      },\n    ],\n  },\n  edge: {\n    type: 'polyline',\n    style: {\n      lineWidth: 3,\n    },\n  },\n  behaviors: ['drag-canvas'],\n});\n\ngraph.render();\n",paraId:8,tocIndex:6},{value:"Fishbone Layout",paraId:9}]},99452:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(4938);const t=[{value:"ForceAtlas2 is a force-directed layout algorithm that optimizes node positions by simulating forces in a physical system. This layout is especially suitable for visualizing large-scale network data, effectively revealing relationships and cluster structures among nodes.",paraId:0,tocIndex:0},{value:"Social network analysis: Display user relationship networks, with node degree reflecting user influence",paraId:1,tocIndex:1},{value:"Knowledge graphs: Show associations between concepts, discover knowledge domains through clustering",paraId:1,tocIndex:1},{value:"System architecture diagrams: Show dependencies between system components, highlight core components via hub mode",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'Myriel' },\n        { id: 'Napoleon' },\n        { id: 'Mlle.Baptistine' },\n        { id: 'Mme.Magloire' },\n        { id: 'CountessdeLo' },\n        { id: 'Geborand' },\n        { id: 'Champtercier' },\n        { id: 'Cravatte' },\n        { id: 'Count' },\n        { id: 'OldMan' },\n        { id: 'Labarre' },\n        { id: 'Valjean' },\n        { id: 'Marguerite' },\n        { id: 'Mme.deR' },\n        { id: 'Isabeau' },\n        { id: 'Gervais' },\n        { id: 'Tholomyes' },\n        { id: 'Listolier' },\n        { id: 'Fameuil' },\n        { id: 'Blacheville' },\n        { id: 'Favourite' },\n        { id: 'Dahlia' },\n        { id: 'Zephine' },\n        { id: 'Fantine' },\n        { id: 'Mme.Thenardier' },\n        { id: 'Thenardier' },\n        { id: 'Cosette' },\n        { id: 'Javert' },\n        { id: 'Fauchelevent' },\n        { id: 'Bamatabois' },\n        { id: 'Perpetue' },\n        { id: 'Simplice' },\n        { id: 'Scaufflaire' },\n        { id: 'Woman1' },\n        { id: 'Judge' },\n        { id: 'Champmathieu' },\n        { id: 'Brevet' },\n        { id: 'Chenildieu' },\n        { id: 'Cochepaille' },\n        { id: 'Pontmercy' },\n        { id: 'Boulatruelle' },\n        { id: 'Eponine' },\n        { id: 'Anzelma' },\n        { id: 'Woman2' },\n        { id: 'MotherInnocent' },\n        { id: 'Gribier' },\n        { id: 'Jondrette' },\n        { id: 'Mme.Burgon' },\n        { id: 'Gavroche' },\n        { id: 'Gillenormand' },\n        { id: 'Magnon' },\n        { id: 'Mlle.Gillenormand' },\n        { id: 'Mme.Pontmercy' },\n        { id: 'Mlle.Vaubois' },\n        { id: 'Lt.Gillenormand' },\n        { id: 'Marius' },\n        { id: 'BaronessT' },\n        { id: 'Mabeuf' },\n        { id: 'Enjolras' },\n        { id: 'Combeferre' },\n        { id: 'Prouvaire' },\n        { id: 'Feuilly' },\n        { id: 'Courfeyrac' },\n        { id: 'Bahorel' },\n        { id: 'Bossuet' },\n        { id: 'Joly' },\n        { id: 'Grantaire' },\n        { id: 'MotherPlutarch' },\n        { id: 'Gueulemer' },\n        { id: 'Babet' },\n        { id: 'Claquesous' },\n        { id: 'Montparnasse' },\n        { id: 'Toussaint' },\n        { id: 'Child1' },\n        { id: 'Child2' },\n        { id: 'Brujon' },\n        { id: 'Mme.Hucheloup' },\n      ],\n      edges: [\n        { source: 'Napoleon', target: 'Myriel', value: 1 },\n        { source: 'Mlle.Baptistine', target: 'Myriel', value: 8 },\n        { source: 'Mme.Magloire', target: 'Myriel', value: 10 },\n        { source: 'Mme.Magloire', target: 'Mlle.Baptistine', value: 6 },\n        { source: 'CountessdeLo', target: 'Myriel', value: 1 },\n        { source: 'Geborand', target: 'Myriel', value: 1 },\n        { source: 'Champtercier', target: 'Myriel', value: 1 },\n        { source: 'Cravatte', target: 'Myriel', value: 1 },\n        { source: 'Count', target: 'Myriel', value: 2 },\n        { source: 'OldMan', target: 'Myriel', value: 1 },\n        { source: 'Valjean', target: 'Labarre', value: 1 },\n        { source: 'Valjean', target: 'Mme.Magloire', value: 3 },\n        { source: 'Valjean', target: 'Mlle.Baptistine', value: 3 },\n        { source: 'Valjean', target: 'Myriel', value: 5 },\n        { source: 'Marguerite', target: 'Valjean', value: 1 },\n        { source: 'Mme.deR', target: 'Valjean', value: 1 },\n        { source: 'Isabeau', target: 'Valjean', value: 1 },\n        { source: 'Gervais', target: 'Valjean', value: 1 },\n        { source: 'Listolier', target: 'Tholomyes', value: 4 },\n        { source: 'Fameuil', target: 'Tholomyes', value: 4 },\n        { source: 'Fameuil', target: 'Listolier', value: 4 },\n        { source: 'Blacheville', target: 'Tholomyes', value: 4 },\n        { source: 'Blacheville', target: 'Listolier', value: 4 },\n        { source: 'Blacheville', target: 'Fameuil', value: 4 },\n        { source: 'Favourite', target: 'Tholomyes', value: 3 },\n        { source: 'Favourite', target: 'Listolier', value: 3 },\n        { source: 'Favourite', target: 'Fameuil', value: 3 },\n        { source: 'Favourite', target: 'Blacheville', value: 4 },\n        { source: 'Dahlia', target: 'Tholomyes', value: 3 },\n        { source: 'Dahlia', target: 'Listolier', value: 3 },\n        { source: 'Dahlia', target: 'Fameuil', value: 3 },\n        { source: 'Dahlia', target: 'Blacheville', value: 3 },\n        { source: 'Dahlia', target: 'Favourite', value: 5 },\n        { source: 'Zephine', target: 'Tholomyes', value: 3 },\n        { source: 'Zephine', target: 'Listolier', value: 3 },\n        { source: 'Zephine', target: 'Fameuil', value: 3 },\n        { source: 'Zephine', target: 'Blacheville', value: 3 },\n        { source: 'Zephine', target: 'Favourite', value: 4 },\n        { source: 'Zephine', target: 'Dahlia', value: 4 },\n        { source: 'Fantine', target: 'Tholomyes', value: 3 },\n        { source: 'Fantine', target: 'Listolier', value: 3 },\n        { source: 'Fantine', target: 'Fameuil', value: 3 },\n        { source: 'Fantine', target: 'Blacheville', value: 3 },\n        { source: 'Fantine', target: 'Favourite', value: 4 },\n        { source: 'Fantine', target: 'Dahlia', value: 4 },\n        { source: 'Fantine', target: 'Zephine', value: 4 },\n        { source: 'Fantine', target: 'Marguerite', value: 2 },\n        { source: 'Fantine', target: 'Valjean', value: 9 },\n        { source: 'Mme.Thenardier', target: 'Fantine', value: 2 },\n        { source: 'Mme.Thenardier', target: 'Valjean', value: 7 },\n        { source: 'Thenardier', target: 'Mme.Thenardier', value: 13 },\n        { source: 'Thenardier', target: 'Fantine', value: 1 },\n        { source: 'Thenardier', target: 'Valjean', value: 12 },\n        { source: 'Cosette', target: 'Mme.Thenardier', value: 4 },\n        { source: 'Cosette', target: 'Valjean', value: 31 },\n        { source: 'Cosette', target: 'Tholomyes', value: 1 },\n        { source: 'Cosette', target: 'Thenardier', value: 1 },\n        { source: 'Javert', target: 'Valjean', value: 17 },\n        { source: 'Javert', target: 'Fantine', value: 5 },\n        { source: 'Javert', target: 'Thenardier', value: 5 },\n        { source: 'Javert', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Javert', target: 'Cosette', value: 1 },\n        { source: 'Fauchelevent', target: 'Valjean', value: 8 },\n        { source: 'Fauchelevent', target: 'Javert', value: 1 },\n        { source: 'Bamatabois', target: 'Fantine', value: 1 },\n        { source: 'Bamatabois', target: 'Javert', value: 1 },\n        { source: 'Bamatabois', target: 'Valjean', value: 2 },\n        { source: 'Perpetue', target: 'Fantine', value: 1 },\n        { source: 'Simplice', target: 'Perpetue', value: 2 },\n        { source: 'Simplice', target: 'Valjean', value: 3 },\n        { source: 'Simplice', target: 'Fantine', value: 2 },\n        { source: 'Simplice', target: 'Javert', value: 1 },\n        { source: 'Scaufflaire', target: 'Valjean', value: 1 },\n        { source: 'Woman1', target: 'Valjean', value: 2 },\n        { source: 'Woman1', target: 'Javert', value: 1 },\n        { source: 'Judge', target: 'Valjean', value: 3 },\n        { source: 'Judge', target: 'Bamatabois', value: 2 },\n        { source: 'Champmathieu', target: 'Valjean', value: 3 },\n        { source: 'Champmathieu', target: 'Judge', value: 3 },\n        { source: 'Champmathieu', target: 'Bamatabois', value: 2 },\n        { source: 'Brevet', target: 'Judge', value: 2 },\n        { source: 'Brevet', target: 'Champmathieu', value: 2 },\n        { source: 'Brevet', target: 'Valjean', value: 2 },\n        { source: 'Brevet', target: 'Bamatabois', value: 1 },\n        { source: 'Chenildieu', target: 'Judge', value: 2 },\n        { source: 'Chenildieu', target: 'Champmathieu', value: 2 },\n        { source: 'Chenildieu', target: 'Brevet', value: 2 },\n        { source: 'Chenildieu', target: 'Valjean', value: 2 },\n        { source: 'Chenildieu', target: 'Bamatabois', value: 1 },\n        { source: 'Cochepaille', target: 'Judge', value: 2 },\n        { source: 'Cochepaille', target: 'Champmathieu', value: 2 },\n        { source: 'Cochepaille', target: 'Brevet', value: 2 },\n        { source: 'Cochepaille', target: 'Chenildieu', value: 2 },\n        { source: 'Cochepaille', target: 'Valjean', value: 2 },\n        { source: 'Cochepaille', target: 'Bamatabois', value: 1 },\n        { source: 'Pontmercy', target: 'Thenardier', value: 1 },\n        { source: 'Boulatruelle', target: 'Thenardier', value: 1 },\n        { source: 'Eponine', target: 'Mme.Thenardier', value: 5 },\n        { source: 'Eponine', target: 'Thenardier', value: 1 },\n        { source: 'Anzelma', target: 'Eponine', value: 1 },\n        { source: 'Anzelma', target: 'Thenardier', value: 1 },\n        { source: 'Anzelma', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Woman2', target: 'Valjean', value: 3 },\n        { source: 'Woman2', target: 'Cosette', value: 1 },\n        { source: 'Woman2', target: 'Javert', value: 1 },\n        { source: 'MotherInnocent', target: 'Fauchelevent', value: 3 },\n        { source: 'MotherInnocent', target: 'Valjean', value: 1 },\n        { source: 'Gribier', target: 'Fauchelevent', value: 2 },\n        { source: 'Mme.Burgon', target: 'Jondrette', value: 1 },\n        { source: 'Jondrette', target: 'Mme.Burgon', value: 2 },\n        { source: 'Jondrette', target: 'Valjean', value: 1 },\n        { source: 'Gavroche', target: 'Mme.Burgon', value: 2 },\n        { source: 'Gavroche', target: 'Thenardier', value: 1 },\n        { source: 'Gavroche', target: 'Javert', value: 1 },\n        { source: 'Gavroche', target: 'Valjean', value: 2 },\n        { source: 'Gillenormand', target: 'Cosette', value: 3 },\n        { source: 'Gillenormand', target: 'Valjean', value: 2 },\n        { source: 'Magnon', target: 'Gillenormand', value: 1 },\n        { source: 'Magnon', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Mlle.Gillenormand', target: 'Gillenormand', value: 9 },\n        { source: 'Mlle.Gillenormand', target: 'Cosette', value: 2 },\n        { source: 'Mlle.Gillenormand', target: 'Valjean', value: 2 },\n        { source: 'Mme.Pontmercy', target: 'Mlle.Gillenormand', value: 1 },\n        { source: 'Mme.Pontmercy', target: 'Pontmercy', value: 1 },\n        { source: 'Mlle.Vaubois', target: 'Mlle.Gillenormand', value: 1 },\n        { source: 'Lt.Gillenormand', target: 'Mlle.Gillenormand', value: 2 },\n        { source: 'Lt.Gillenormand', target: 'Gillenormand', value: 1 },\n        { source: 'Lt.Gillenormand', target: 'Cosette', value: 1 },\n        { source: 'Marius', target: 'Mlle.Gillenormand', value: 6 },\n        { source: 'Marius', target: 'Gillenormand', value: 12 },\n        { source: 'Marius', target: 'Pontmercy', value: 1 },\n        { source: 'Marius', target: 'Lt.Gillenormand', value: 1 },\n        { source: 'Marius', target: 'Cosette', value: 21 },\n        { source: 'Marius', target: 'Valjean', value: 19 },\n        { source: 'Marius', target: 'Tholomyes', value: 1 },\n        { source: 'Marius', target: 'Thenardier', value: 2 },\n        { source: 'Marius', target: 'Eponine', value: 5 },\n        { source: 'Marius', target: 'Gavroche', value: 4 },\n        { source: 'BaronessT', target: 'Gillenormand', value: 1 },\n        { source: 'BaronessT', target: 'Marius', value: 1 },\n        { source: 'Mabeuf', target: 'Marius', value: 1 },\n        { source: 'Mabeuf', target: 'Eponine', value: 1 },\n        { source: 'Mabeuf', target: 'Gavroche', value: 1 },\n        { source: 'Enjolras', target: 'Marius', value: 7 },\n        { source: 'Enjolras', target: 'Gavroche', value: 7 },\n        { source: 'Enjolras', target: 'Javert', value: 6 },\n        { source: 'Enjolras', target: 'Mabeuf', value: 1 },\n        { source: 'Enjolras', target: 'Valjean', value: 4 },\n        { source: 'Combeferre', target: 'Enjolras', value: 15 },\n        { source: 'Combeferre', target: 'Marius', value: 5 },\n        { source: 'Combeferre', target: 'Gavroche', value: 6 },\n        { source: 'Combeferre', target: 'Mabeuf', value: 2 },\n        { source: 'Prouvaire', target: 'Gavroche', value: 1 },\n        { source: 'Prouvaire', target: 'Enjolras', value: 4 },\n        { source: 'Prouvaire', target: 'Combeferre', value: 2 },\n        { source: 'Feuilly', target: 'Gavroche', value: 2 },\n        { source: 'Feuilly', target: 'Enjolras', value: 6 },\n        { source: 'Feuilly', target: 'Prouvaire', value: 2 },\n        { source: 'Feuilly', target: 'Combeferre', value: 5 },\n        { source: 'Feuilly', target: 'Mabeuf', value: 1 },\n        { source: 'Feuilly', target: 'Marius', value: 1 },\n        { source: 'Courfeyrac', target: 'Marius', value: 9 },\n        { source: 'Courfeyrac', target: 'Enjolras', value: 17 },\n        { source: 'Courfeyrac', target: 'Combeferre', value: 13 },\n        { source: 'Courfeyrac', target: 'Gavroche', value: 7 },\n        { source: 'Courfeyrac', target: 'Mabeuf', value: 2 },\n        { source: 'Courfeyrac', target: 'Eponine', value: 1 },\n        { source: 'Courfeyrac', target: 'Feuilly', value: 6 },\n        { source: 'Courfeyrac', target: 'Prouvaire', value: 3 },\n        { source: 'Bahorel', target: 'Combeferre', value: 5 },\n        { source: 'Bahorel', target: 'Gavroche', value: 5 },\n        { source: 'Bahorel', target: 'Courfeyrac', value: 6 },\n        { source: 'Bahorel', target: 'Mabeuf', value: 2 },\n        { source: 'Bahorel', target: 'Enjolras', value: 4 },\n        { source: 'Bahorel', target: 'Feuilly', value: 3 },\n        { source: 'Bahorel', target: 'Prouvaire', value: 2 },\n        { source: 'Bahorel', target: 'Marius', value: 1 },\n        { source: 'Bossuet', target: 'Marius', value: 5 },\n        { source: 'Bossuet', target: 'Courfeyrac', value: 12 },\n        { source: 'Bossuet', target: 'Gavroche', value: 5 },\n        { source: 'Bossuet', target: 'Bahorel', value: 4 },\n        { source: 'Bossuet', target: 'Enjolras', value: 10 },\n        { source: 'Bossuet', target: 'Feuilly', value: 6 },\n        { source: 'Bossuet', target: 'Prouvaire', value: 2 },\n        { source: 'Bossuet', target: 'Combeferre', value: 9 },\n        { source: 'Bossuet', target: 'Mabeuf', value: 1 },\n        { source: 'Bossuet', target: 'Valjean', value: 1 },\n        { source: 'Joly', target: 'Bahorel', value: 5 },\n        { source: 'Joly', target: 'Bossuet', value: 7 },\n        { source: 'Joly', target: 'Gavroche', value: 3 },\n        { source: 'Joly', target: 'Courfeyrac', value: 5 },\n        { source: 'Joly', target: 'Enjolras', value: 5 },\n        { source: 'Joly', target: 'Feuilly', value: 5 },\n        { source: 'Joly', target: 'Prouvaire', value: 2 },\n        { source: 'Joly', target: 'Combeferre', value: 5 },\n        { source: 'Joly', target: 'Mabeuf', value: 1 },\n        { source: 'Joly', target: 'Marius', value: 2 },\n        { source: 'Grantaire', target: 'Bossuet', value: 3 },\n        { source: 'Grantaire', target: 'Enjolras', value: 3 },\n        { source: 'Grantaire', target: 'Combeferre', value: 1 },\n        { source: 'Grantaire', target: 'Courfeyrac', value: 2 },\n        { source: 'Grantaire', target: 'Joly', value: 2 },\n        { source: 'Grantaire', target: 'Gavroche', value: 1 },\n        { source: 'Grantaire', target: 'Bahorel', value: 1 },\n        { source: 'Grantaire', target: 'Feuilly', value: 1 },\n        { source: 'Grantaire', target: 'Prouvaire', value: 1 },\n        { source: 'MotherPlutarch', target: 'Mabeuf', value: 3 },\n        { source: 'Gueulemer', target: 'Thenardier', value: 5 },\n        { source: 'Gueulemer', target: 'Valjean', value: 1 },\n        { source: 'Gueulemer', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Gueulemer', target: 'Javert', value: 1 },\n        { source: 'Gueulemer', target: 'Gavroche', value: 1 },\n        { source: 'Gueulemer', target: 'Eponine', value: 1 },\n        { source: 'Babet', target: 'Thenardier', value: 6 },\n        { source: 'Babet', target: 'Gueulemer', value: 6 },\n        { source: 'Babet', target: 'Valjean', value: 1 },\n        { source: 'Babet', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Babet', target: 'Javert', value: 2 },\n        { source: 'Babet', target: 'Gavroche', value: 1 },\n        { source: 'Babet', target: 'Eponine', value: 1 },\n        { source: 'Claquesous', target: 'Thenardier', value: 4 },\n        { source: 'Claquesous', target: 'Babet', value: 4 },\n        { source: 'Claquesous', target: 'Gueulemer', value: 4 },\n        { source: 'Claquesous', target: 'Valjean', value: 1 },\n        { source: 'Claquesous', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Claquesous', target: 'Javert', value: 1 },\n        { source: 'Claquesous', target: 'Eponine', value: 1 },\n        { source: 'Claquesous', target: 'Enjolras', value: 1 },\n        { source: 'Montparnasse', target: 'Javert', value: 1 },\n        { source: 'Montparnasse', target: 'Babet', value: 2 },\n        { source: 'Montparnasse', target: 'Gueulemer', value: 2 },\n        { source: 'Montparnasse', target: 'Claquesous', value: 2 },\n        { source: 'Montparnasse', target: 'Valjean', value: 1 },\n        { source: 'Montparnasse', target: 'Gavroche', value: 1 },\n        { source: 'Montparnasse', target: 'Eponine', value: 1 },\n        { source: 'Montparnasse', target: 'Thenardier', value: 1 },\n        { source: 'Toussaint', target: 'Cosette', value: 2 },\n        { source: 'Toussaint', target: 'Javert', value: 1 },\n        { source: 'Toussaint', target: 'Valjean', value: 1 },\n        { source: 'Child1', target: 'Gavroche', value: 2 },\n        { source: 'Child2', target: 'Gavroche', value: 2 },\n        { source: 'Child2', target: 'Child1', value: 3 },\n        { source: 'Brujon', target: 'Babet', value: 3 },\n        { source: 'Brujon', target: 'Gueulemer', value: 3 },\n        { source: 'Brujon', target: 'Thenardier', value: 3 },\n        { source: 'Brujon', target: 'Gavroche', value: 1 },\n        { source: 'Brujon', target: 'Eponine', value: 1 },\n        { source: 'Brujon', target: 'Claquesous', value: 1 },\n        { source: 'Brujon', target: 'Montparnasse', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Bossuet', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Joly', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Grantaire', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Bahorel', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Courfeyrac', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Gavroche', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Enjolras', value: 1 },\n      ],\n    },\n    autoFit: 'view',\n    layout: {\n      type: 'force-atlas2',\n      preventOverlap: true,\n      kr: 20,\n      center: [250, 250],\n      ks: 0.1,\n      ksmax: 10,\n      tao: 0.1,\n      mode: 'normal',\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n    autoResize: true,\n    zoomRange: [0.1, 5],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'force-atlas2',\n      preventOverlap: true,\n      kr: 20,\n      ks: 0.1,\n      ksmax: 10,\n      tao: 0.1,\n      mode: 'normal',\n      kg: 1,\n      barnesHut: false,\n      dissuadeHubs: false,\n      prune: false,\n    };\n\n    const optionFolder = gui.addFolder('ForceAtlas2 Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'kr', 1, 100, 1);\n    optionFolder.add(options, 'ks', 0.01, 1, 0.01);\n    optionFolder.add(options, 'ksmax', 1, 20, 1);\n    optionFolder.add(options, 'tao', 0.01, 1, 0.01);\n    optionFolder.add(options, 'kg', 0, 10, 0.1);\n    optionFolder.add(options, 'barnesHut');\n    optionFolder.add(options, 'dissuadeHubs');\n    optionFolder.add(options, 'prune');\n    optionFolder.add(options, 'mode', ['normal', 'linlog']);\n\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: value,\n        }),\n      );\n      await graph.layout();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n    center: [250, 250],\n  },\n});\n",paraId:3,tocIndex:3},{value:"Property",paraId:4,tocIndex:4},{value:"Description",paraId:4,tocIndex:4},{value:"Type",paraId:4,tocIndex:4},{value:"Default",paraId:4,tocIndex:4},{value:"Required",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"Layout type, must be ",paraId:4,tocIndex:4},{value:"force-atlas2",paraId:4,tocIndex:4},{value:"force-atlas2",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"barnesHut",paraId:4,tocIndex:4},{value:"Whether to enable quadtree acceleration. When enabled, improves performance for large graphs but may affect layout quality. By default, enabled if node count > 250.",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"dissuadeHubs",paraId:4,tocIndex:4},{value:"Whether to enable hub mode. If true, nodes with higher in-degree are more likely to be placed at the center than those with high out-degree",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"Layout height. Defaults to container height",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"kg",paraId:4,tocIndex:4},{value:"Gravity coefficient. The larger the value, the more concentrated the layout is at the center",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"1",paraId:4,tocIndex:4},{value:"kr",paraId:4,tocIndex:4},{value:"Repulsion coefficient. Adjusts the compactness of the layout. The larger the value, the looser the layout",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"5",paraId:4,tocIndex:4},{value:"ks",paraId:4,tocIndex:4},{value:"Controls the speed of node movement during iteration",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"0.1",paraId:4,tocIndex:4},{value:"ksmax",paraId:4,tocIndex:4},{value:"Maximum node movement speed during iteration",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"mode",paraId:4,tocIndex:4},{value:"Clustering mode. In ",paraId:4,tocIndex:4},{value:"linlog",paraId:4,tocIndex:4},{value:" mode, clusters are more compact",paraId:4,tocIndex:4},{value:"normal",paraId:4,tocIndex:4},{value:" | ",paraId:4,tocIndex:4},{value:"linlog",paraId:4,tocIndex:4},{value:"normal",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"Node size (diameter). Used for repulsion calculation when ",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:" is enabled. If not set, uses ",paraId:4,tocIndex:4},{value:"data.size",paraId:4,tocIndex:4},{value:" in node data",paraId:4,tocIndex:4},{value:"Size | ((node?: Node) => Size)",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"onTick",paraId:4,tocIndex:4},{value:"Callback for each iteration",paraId:4,tocIndex:4},{value:"(data: LayoutMapping) => void",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"Whether to prevent node overlap. When enabled, layout considers node size to avoid overlap. Node size is specified by ",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:" or ",paraId:4,tocIndex:4},{value:"data.size",paraId:4,tocIndex:4},{value:" in node data",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"prune",paraId:4,tocIndex:4},{value:"Whether to enable auto-pruning. By default, enabled if node count > 100. Pruning speeds up convergence but may reduce layout quality. Set to false to disable auto-activation",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"tao",paraId:4,tocIndex:4},{value:"Tolerance for stopping oscillation when layout is near convergence",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"0.1",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"Layout width. Defaults to container width",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"Layout center, format [x, y]. Each node is attracted to this point, gravity controlled by ",paraId:4,tocIndex:4},{value:"kg",paraId:4,tocIndex:4},{value:". If not set, uses canvas center",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n  },\n  autoFit: 'view',\n  data: {\n    nodes: [\n      { id: 'node1' },\n      { id: 'node2' },\n      { id: 'node3' },\n      { id: 'node4' },\n      { id: 'node5' },\n      { id: 'node6' },\n      { id: 'node7' },\n      { id: 'node8' },\n      { id: 'node9' },\n      { id: 'node10' },\n      { id: 'node11' },\n      { id: 'node12' },\n      { id: 'node13' },\n      { id: 'node14' },\n      { id: 'node15' },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n      { source: 'node5', target: 'node6' },\n      { source: 'node6', target: 'node7' },\n      { source: 'node7', target: 'node8' },\n      { source: 'node8', target: 'node9' },\n      { source: 'node9', target: 'node10' },\n      { source: 'node10', target: 'node11' },\n      { source: 'node11', target: 'node12' },\n      { source: 'node12', target: 'node13' },\n      { source: 'node13', target: 'node14' },\n      { source: 'node14', target: 'node15' },\n      { source: 'node15', target: 'node1' },\n      { source: 'node1', target: 'node8' },\n      { source: 'node2', target: 'node9' },\n      { source: 'node3', target: 'node10' },\n      { source: 'node4', target: 'node11' },\n      { source: 'node5', target: 'node12' },\n      { source: 'node6', target: 'node13' },\n      { source: 'node7', target: 'node14' },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n",paraId:5,tocIndex:6},{value:"Result:",paraId:6,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n  },\n  data: {\n    nodes: [\n      { id: 'node1' },\n      { id: 'node2' },\n      { id: 'node3' },\n      { id: 'node4' },\n      { id: 'node5' },\n      { id: 'node6' },\n      { id: 'node7' },\n      { id: 'node8' },\n      { id: 'node9' },\n      { id: 'node10' },\n      { id: 'node11' },\n      { id: 'node12' },\n      { id: 'node13' },\n      { id: 'node14' },\n      { id: 'node15' },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n      { source: 'node5', target: 'node6' },\n      { source: 'node6', target: 'node7' },\n      { source: 'node7', target: 'node8' },\n      { source: 'node8', target: 'node9' },\n      { source: 'node9', target: 'node10' },\n      { source: 'node10', target: 'node11' },\n      { source: 'node11', target: 'node12' },\n      { source: 'node12', target: 'node13' },\n      { source: 'node13', target: 'node14' },\n      { source: 'node14', target: 'node15' },\n      { source: 'node15', target: 'node1' },\n      { source: 'node1', target: 'node8' },\n      { source: 'node2', target: 'node9' },\n      { source: 'node3', target: 'node10' },\n      { source: 'node4', target: 'node11' },\n      { source: 'node5', target: 'node12' },\n      { source: 'node6', target: 'node13' },\n      { source: 'node7', target: 'node14' },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:7,tocIndex:6},{value:"ForceAtlas2 Layout",paraId:8}]},93653:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91404);const t=[{value:"CentripetalOptions",paraId:0,tocIndex:1},{value:"Centripetal force configuration, including the center and strength for leaf nodes, isolated nodes, and other nodes.",paraId:1,tocIndex:1},{value:"boolean",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"Default:",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"Whether to cluster all nodes.",paraId:3,tocIndex:2},{value:"If true, the field specified by nodeClusterBy in node data will be used for clustering. centripetalOptions.single, centripetalOptions.leaf, and centripetalOptions.others will use the value returned by getClusterNodeStrength; leaf and centripetalOptions.center will use the average center of all nodes in the current cluster.",paraId:4,tocIndex:2},{value:"number | ((node: Node) => number)",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"20",paraId:5,tocIndex:3},{value:"Used with clustering and nodeClusterBy to specify the strength of the cluster centripetal force.",paraId:6,tocIndex:3},{value:"number",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"Default:",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"1",paraId:7,tocIndex:4},{value:"Strength of anti-overlap force, range [0, 1].",paraId:8,tocIndex:4},{value:"number",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"Default:",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"0.005",paraId:9,tocIndex:5},{value:"Coulomb coefficient, a factor for repulsion. The larger the value, the greater the repulsion between nodes.",paraId:10,tocIndex:5},{value:"number",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"Default:",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"0.9",paraId:11,tocIndex:6},{value:"Damping coefficient, range [0, 1]. The larger the value, the slower the speed decreases.",paraId:12,tocIndex:6},{value:"number | ((d?: Edge) => number)",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"Default:",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"50",paraId:13,tocIndex:7},{value:"Strength of edge force (attraction).",paraId:14,tocIndex:7},{value:"number",paraId:15,tocIndex:8},{value:" ",paraId:15,tocIndex:8},{value:"Default:",paraId:15,tocIndex:8},{value:" ",paraId:15,tocIndex:8},{value:"1",paraId:15,tocIndex:8},{value:"Repulsion coefficient. The larger the value, the greater the repulsion.",paraId:16,tocIndex:8},{value:"(node?: Node, degree?: number) => number[]",paraId:17,tocIndex:9},{value:"Callback for the x, y, and strength of the centripetal force for each node. If not specified, no extra centripetal force is applied.",paraId:18,tocIndex:9},{value:"(node?: Node) => number",paraId:19,tocIndex:10},{value:"Callback for the mass of each node. The parameter is the node's internal data, and the return value is the mass.",paraId:20,tocIndex:10},{value:"number",paraId:21,tocIndex:11},{value:" ",paraId:21,tocIndex:11},{value:"Default:",paraId:21,tocIndex:11},{value:" ",paraId:21,tocIndex:11},{value:"10",paraId:21,tocIndex:11},{value:"Strength of the central force, i.e., the force attracting all nodes to the center. The larger the value, the more compact the layout.",paraId:22,tocIndex:11},{value:"number",paraId:23,tocIndex:12},{value:"Layout height, defaults to canvas height.",paraId:24,tocIndex:12},{value:"number",paraId:25,tocIndex:13},{value:" ",paraId:25,tocIndex:13},{value:"Default:",paraId:25,tocIndex:13},{value:" ",paraId:25,tocIndex:13},{value:"0.02",paraId:25,tocIndex:13},{value:"Controls the movement speed of each node per iteration.",paraId:26,tocIndex:13},{value:"boolean",paraId:27,tocIndex:14},{value:" ",paraId:27,tocIndex:14},{value:"Default:",paraId:27,tocIndex:14},{value:" ",paraId:27,tocIndex:14},{value:"false",paraId:27,tocIndex:14},{value:"Whether to cluster leaf nodes.",paraId:28,tocIndex:14},{value:"If true, centripetalOptions.single will be 100; centripetalOptions.leaf will use the value returned by getClusterNodeStrength; getClusterNodeStrength.center will return the average center of all leaf nodes.",paraId:29,tocIndex:14},{value:"number | ((edge?: Edge, source?: any, target?: any) => number)",paraId:30,tocIndex:15},{value:" ",paraId:30,tocIndex:15},{value:"Default:",paraId:30,tocIndex:15},{value:" ",paraId:30,tocIndex:15},{value:"200",paraId:30,tocIndex:15},{value:"Edge length.",paraId:31,tocIndex:15},{value:"number: fixed length",paraId:32,tocIndex:15},{value:"((edge?: Edge, source?: any, target?: any) => number): returns length based on edge info",paraId:32,tocIndex:15},{value:"number",paraId:33,tocIndex:16},{value:" ",paraId:33,tocIndex:16},{value:"Default:",paraId:33,tocIndex:16},{value:" ",paraId:33,tocIndex:16},{value:"200",paraId:33,tocIndex:16},{value:"Maximum movement length per iteration.",paraId:34,tocIndex:16},{value:"(params: { energy: number; nodes: Node[]; edges: Edge[]; iterations: number; }) => void",paraId:35,tocIndex:17},{value:"Callback for monitoring each iteration. energy indicates the convergence energy of the layout. May incur extra computation if configured; if not configured, no computation is performed.",paraId:36,tocIndex:17},{value:"string",paraId:37,tocIndex:18},{value:"Specifies the field name in node data for clustering. Takes effect when clustering is true. Automatically generates centripetalOptions, can be used with clusterNodeStrength.",paraId:38,tocIndex:18},{value:"Size | ((d?: Node) => Size)",paraId:39,tocIndex:19},{value:"Node size (diameter). Used for collision detection to prevent node overlap.",paraId:40,tocIndex:19},{value:"number | ((d?: Node) => number)",paraId:41,tocIndex:20},{value:"Takes effect when preventOverlap is true. Minimum spacing between node edges to prevent overlap. Can be a callback to set different spacing for different nodes.",paraId:42,tocIndex:20},{value:"number | ((d?: Node) => number)",paraId:43,tocIndex:21},{value:" ",paraId:43,tocIndex:21},{value:"Default:",paraId:43,tocIndex:21},{value:" ",paraId:43,tocIndex:21},{value:"1000",paraId:43,tocIndex:21},{value:"Node force. Positive means attraction, negative means repulsion.",paraId:44,tocIndex:21},{value:"(data: LayoutMapping) => void",paraId:45,tocIndex:22},{value:"Callback for each iteration.",paraId:46,tocIndex:22},{value:"boolean",paraId:47,tocIndex:23},{value:" ",paraId:47,tocIndex:23},{value:"Default:",paraId:47,tocIndex:23},{value:" ",paraId:47,tocIndex:23},{value:"true",paraId:47,tocIndex:23},{value:"Whether to prevent overlap. Must be used with nodeSize or data.size in node data. Only when data.size is set in the data or nodeSize is configured in the layout with the same value as the node size in the graph, collision detection for node overlap can be performed.",paraId:48,tocIndex:23},{value:"number",paraId:49,tocIndex:24},{value:"Layout width, defaults to canvas width.",paraId:50,tocIndex:24}]},48181:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(62509);const t=[{value:"The Fruchterman layout is a force-directed layout based on the algorithm from ",paraId:0,tocIndex:0},{value:"Graph Drawing by Force-directed Placement",paraId:0,tocIndex:0},{value:". By flexibly configuring parameters to simulate physical forces, the layout automatically reaches a stable equilibrium state with minimal energy. It supports both basic uniform distribution and cluster layouts. See more Fruchterman force-directed layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Basic uniform distribution: Suitable for displaying network graphs with evenly distributed nodes and clear overall structure, such as network topology and knowledge graphs.",paraId:2,tocIndex:1},{value:"Cluster layout: Suitable for visualizing data with internal aggregation or grouping, such as community structure display and association group analysis.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"Required",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"Layout type",paraId:3,tocIndex:2},{value:"'fruchterman'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"height",paraId:3,tocIndex:2},{value:"Layout height",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"container height",paraId:3,tocIndex:2},{value:"width",paraId:3,tocIndex:2},{value:"Layout width",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"container width",paraId:3,tocIndex:2},{value:"gravity",paraId:3,tocIndex:2},{value:"Central force, i.e., the force attracting all nodes to the ",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:". The larger the value, the more compact the layout",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"speed",paraId:3,tocIndex:2},{value:"Node movement speed per iteration. Too high a speed may cause strong oscillation",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"5",paraId:3,tocIndex:2},{value:"onTick",paraId:3,tocIndex:2},{value:"Callback for each iteration",paraId:3,tocIndex:2},{value:"(data: ",paraId:3,tocIndex:2},{value:"LayoutMapping",paraId:3,tocIndex:2},{value:") => void",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:"Whether to use cluster layout",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"nodeClusterBy",paraId:4,tocIndex:3},{value:"Field name in node data for clustering, effective when ",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:" is true",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"'cluster'",paraId:4,tocIndex:3},{value:"clusterGravity",paraId:4,tocIndex:3},{value:"Gravity within clusters, affects cluster compactness, effective when ",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:" is true",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  data: {\n    nodes: [\n      { id: '0' },\n      { id: '1' },\n      { id: '2' },\n      { id: '3' },\n      { id: '4' },\n      { id: '5' },\n      { id: '6' },\n      { id: '7' },\n      { id: '8' },\n      { id: '9' },\n      { id: '10' },\n    ],\n    edges: [\n      { source: '0', target: '1' },\n      { source: '0', target: '2' },\n      { source: '0', target: '3' },\n      { source: '0', target: '4' },\n      { source: '0', target: '7' },\n      { source: '0', target: '8' },\n      { source: '0', target: '9' },\n      { source: '0', target: '10' },\n      { source: '2', target: '3' },\n      { source: '4', target: '5' },\n      { source: '4', target: '6' },\n      { source: '5', target: '6' },\n      { source: '9', target: '10' },\n    ],\n  },\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => d.id,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 5,\n    speed: 5,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:5,tocIndex:5},{value:"Show full code",paraId:6},{value:"import { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '0' },\n    { id: '1' },\n    { id: '2' },\n    { id: '3' },\n    { id: '4' },\n    { id: '5' },\n    { id: '6' },\n    { id: '7' },\n    { id: '8' },\n    { id: '9' },\n    { id: '10' },\n  ],\n  edges: [\n    { source: '0', target: '1' },\n    { source: '0', target: '2' },\n    { source: '0', target: '3' },\n    { source: '0', target: '4' },\n    { source: '0', target: '7' },\n    { source: '0', target: '8' },\n    { source: '0', target: '9' },\n    { source: '0', target: '10' },\n    { source: '2', target: '3' },\n    { source: '4', target: '5' },\n    { source: '4', target: '6' },\n    { source: '5', target: '6' },\n    { source: '9', target: '10' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => d.id,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 5,\n    speed: 5,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:7,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  data: {\n    nodes: [\n      { id: '0', data: { cluster: 'a' } },\n      { id: '1', data: { cluster: 'a' } },\n      { id: '2', data: { cluster: 'a' } },\n      { id: '3', data: { cluster: 'a' } },\n      { id: '4', data: { cluster: 'a' } },\n      { id: '5', data: { cluster: 'b' } },\n      { id: '6', data: { cluster: 'b' } },\n      { id: '7', data: { cluster: 'b' } },\n      { id: '8', data: { cluster: 'c' } },\n      { id: '9', data: { cluster: 'c' } },\n      { id: '10', data: { cluster: 'c' } },\n    ],\n    edges: [\n      { source: '0', target: '1' },\n      { source: '0', target: '2' },\n      { source: '0', target: '4' },\n      { source: '0', target: '6' },\n      { source: '2', target: '3' },\n      { source: '2', target: '4' },\n      { source: '3', target: '4' },\n      { source: '5', target: '6' },\n      { source: '6', target: '7' },\n      { source: '7', target: '8' },\n      { source: '8', target: '9' },\n      { source: '8', target: '10' },\n    ],\n  },\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => `${d.data.cluster}-${d.id}`,\n    },\n    palette: {\n      type: 'group',\n      field: 'cluster',\n    },\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 6,\n    speed: 5,\n\n    // Cluster layout parameters\n    clustering: true,\n    nodeClusterBy: 'cluster',\n    clusterGravity: 3,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:8,tocIndex:6},{value:"Show full code",paraId:6},{value:"import { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '0', data: { cluster: 'a' } },\n    { id: '1', data: { cluster: 'a' } },\n    { id: '2', data: { cluster: 'a' } },\n    { id: '3', data: { cluster: 'a' } },\n    { id: '4', data: { cluster: 'a' } },\n    { id: '5', data: { cluster: 'b' } },\n    { id: '6', data: { cluster: 'b' } },\n    { id: '7', data: { cluster: 'b' } },\n    { id: '8', data: { cluster: 'c' } },\n    { id: '9', data: { cluster: 'c' } },\n    { id: '10', data: { cluster: 'c' } },\n  ],\n  edges: [\n    { source: '0', target: '1' },\n    { source: '0', target: '2' },\n    { source: '0', target: '4' },\n    { source: '0', target: '6' },\n    { source: '2', target: '3' },\n    { source: '2', target: '4' },\n    { source: '3', target: '4' },\n    { source: '5', target: '6' },\n    { source: '6', target: '7' },\n    { source: '7', target: '8' },\n    { source: '8', target: '9' },\n    { source: '8', target: '10' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => `${d.data.cluster}-${d.id}`,\n    },\n    palette: {\n      type: 'group',\n      field: 'cluster',\n    },\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 6,\n    speed: 5,\n\n    // Cluster layout parameters\n    clustering: true,\n    nodeClusterBy: 'cluster',\n    clusterGravity: 3,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:9,tocIndex:6}]},31104:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(30947);const t=[{value:"The grid layout arranges nodes in a grid pattern, suitable for scenarios where nodes need to be arranged neatly. This layout supports automatic calculation of the number of rows and columns, or you can specify them manually. It also supports preventing node overlap.",paraId:0,tocIndex:0},{value:"Visualizing data in a matrix or table format",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: Array.from({ length: 25 }, (_, i) => ({\n        id: `node-${i}`,\n        data: {\n          value: Math.random() * 100,\n        },\n      })),\n      edges: Array.from({ length: 20 }, (_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 25)}`,\n        target: `node-${Math.floor(Math.random() * 25)}`,\n      })),\n    },\n    autoFit: 'view',\n    node: {\n      style: {\n        size: 20,\n        label: true,\n        labelText: (datum) => datum.id,\n        labelBackground: true,\n        icon: false,\n      },\n      palette: {\n        type: 'group',\n        field: (datum) => datum.data.value,\n        color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#bfbfbf',\n      },\n    },\n    behaviors: ['drag-canvas'],\n    layout: {\n      type: 'grid',\n      cols: 5,\n      rows: 5,\n      width: 400,\n      height: 400,\n      preventOverlap: true,\n      nodeSize: 30,\n      condense: false,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'grid',\n      cols: 5,\n      rows: 5,\n      width: 400,\n      height: 400,\n      preventOverlap: true,\n      nodeSize: 30,\n      condense: false,\n    };\n\n    const optionFolder = gui.addFolder('Grid Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'cols', 2, 10, 1);\n    optionFolder.add(options, 'rows', 2, 10, 1);\n    optionFolder.add(options, 'width', 200, 600, 50);\n    optionFolder.add(options, 'height', 200, 600, 50);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'nodeSize', 10, 50, 5);\n    optionFolder.add(options, 'condense');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.setLayout({\n        type: 'grid',\n        [property]: value,\n      });\n      graph.layout();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    begin: [0, 0],\n    cols: 5,\n    rows: 5,\n    width: 300,\n    height: 300,\n    preventOverlap: true,\n    nodeSize: 30,\n    condense: false,\n  },\n});\n",paraId:3,tocIndex:3},{value:"Property",paraId:4,tocIndex:4},{value:"Description",paraId:4,tocIndex:4},{value:"Type",paraId:4,tocIndex:4},{value:"Default",paraId:4,tocIndex:4},{value:"Required",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"Layout type",paraId:4,tocIndex:4},{value:"grid",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"begin",paraId:4,tocIndex:4},{value:"Grid start position (top-left corner), default is ",paraId:4,tocIndex:4},{value:"[0, 0]",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"[0, 0]",paraId:4,tocIndex:4},{value:"cols",paraId:4,tocIndex:4},{value:"Number of columns. If undefined, the algorithm calculates it automatically based on node count, layout space, and rows (if set)",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"rows",paraId:4,tocIndex:4},{value:"Number of rows. If undefined, the algorithm calculates it automatically based on node count, layout space, and cols (if set)",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"Layout area width. In G6, the container width is used as the default value",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"300",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"Layout area height. In G6, the container height is used as the default value",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"300",paraId:4,tocIndex:4},{value:"condense",paraId:4,tocIndex:4},{value:"If false, uses all available canvas space; if true, uses the minimum canvas space",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"Node size (diameter), used for collision detection when preventing overlap",paraId:4,tocIndex:4},{value:"Size | ((nodeData: Node) => Size)",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSpacing",paraId:4,tocIndex:4},{value:"Node spacing, used to adjust the gap between nodes",paraId:4,tocIndex:4},{value:"((node?: Node) => number) | number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"position",paraId:4,tocIndex:4},{value:"Specify the row and column for each node",paraId:4,tocIndex:4},{value:"(node?: Node) => { row?: number; col?: number; }",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"Whether to prevent node overlap. Requires nodeSize or size property in node data",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"preventOverlapPadding",paraId:4,tocIndex:4},{value:"Padding when preventing overlap. Effective when preventOverlap is true",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"sortBy",paraId:4,tocIndex:4},{value:"Sort basis (node property name). Higher values are placed more centrally. If undefined, degree is used for sorting",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"boolean",paraId:5,tocIndex:5},{value:" ",paraId:5,tocIndex:5},{value:"Default:",paraId:5,tocIndex:5},{value:" ",paraId:5,tocIndex:5},{value:"false",paraId:5,tocIndex:5},{value:"Whether to prevent overlap",paraId:6,tocIndex:5},{value:"Must be used with nodeSize or the size property in node data. Only when data has data.size or nodeSize is set in the layout, collision detection for node overlap can be performed.",paraId:7,tocIndex:5},{value:"number",paraId:8,tocIndex:6},{value:" ",paraId:8,tocIndex:6},{value:"Default:",paraId:8,tocIndex:6},{value:" ",paraId:8,tocIndex:6},{value:"10",paraId:8,tocIndex:6},{value:"Padding when preventing overlap. Effective when preventOverlap is true.",paraId:9,tocIndex:6},{value:"string",paraId:10,tocIndex:7},{value:" ",paraId:10,tocIndex:7},{value:"Default:",paraId:10,tocIndex:7},{value:" ",paraId:10,tocIndex:7},{value:"undefined",paraId:10,tocIndex:7},{value:"Sort basis (node property name). Higher values are placed more centrally. If undefined, degree is used for sorting. In G6, the container width is used as the default value for grid layout width. When used alone, the default is 300.",paraId:11,tocIndex:7},{value:"The simplest configuration:",paraId:12,tocIndex:9},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n});\n",paraId:13,tocIndex:9},{value:"Result:",paraId:14,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:15,tocIndex:9},{value:"You can customize the grid layout in various ways:",paraId:16,tocIndex:10},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    begin: [50, 50], // Start layout from [50, 50]\n    cols: 4, // 4 columns\n    rows: 6, // 6 rows\n    width: 400, // Layout area width\n    height: 600, // Layout area height\n    preventOverlap: true, // Prevent node overlap\n    nodeSize: 30, // Node size\n    condense: true, // Use minimum space\n    sortBy: 'value', // Sort by value property\n  },\n  data: {\n    nodes: Array.from({ length: 24 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100, // Property for sorting\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 24)}`,\n      target: `node-${Math.floor(Math.random() * 24)}`,\n    })),\n  },\n});\n",paraId:17,tocIndex:10},{value:"Result:",paraId:18,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    begin: [50, 50],\n    cols: 4,\n    rows: 6,\n    width: 400,\n    height: 600,\n    preventOverlap: true,\n    nodeSize: 30,\n    condense: true,\n    sortBy: 'value',\n  },\n  data: {\n    nodes: Array.from({ length: 24 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 24)}`,\n      target: `node-${Math.floor(Math.random() * 24)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n    palette: {\n      type: 'group',\n      field: (datum) => datum.data.value,\n      color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:19,tocIndex:10},{value:"You can specify the position for specific nodes using the ",paraId:20,tocIndex:11},{value:"position",paraId:20,tocIndex:11},{value:" property:",paraId:20,tocIndex:11},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n    position: (node) => {\n      // Specify position for specific nodes\n      if (node.id === 'node-0') return { row: 0, col: 0 }; // Top-left\n      if (node.id === 'node-1') return { row: 0, col: 4 }; // Top-right\n      if (node.id === 'node-2') return { row: 4, col: 0 }; // Bottom-left\n      if (node.id === 'node-3') return { row: 4, col: 4 }; // Bottom-right\n      return undefined; // Other nodes are auto-arranged\n    },\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n});\n",paraId:21,tocIndex:11},{value:"Result:",paraId:22,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n    position: (node) => {\n      if (node.id === 'node-0') return { row: 0, col: 0 };\n      if (node.id === 'node-1') return { row: 0, col: 4 };\n      if (node.id === 'node-2') return { row: 4, col: 0 };\n      if (node.id === 'node-3') return { row: 4, col: 4 };\n      return undefined;\n    },\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:23,tocIndex:11},{value:"Grid Layout",paraId:24,tocIndex:12}]},8859:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(65324);const t=[{value:"Indented tree layout represents the hierarchy of tree nodes through indentation in the horizontal direction. Each element occupies a row or column, commonly used in file directory structures, organizational charts, and other scenarios. This layout provides a clear structure for displaying hierarchical relationships.",paraId:0,tocIndex:1},{value:"File directory structure visualization",paraId:1,tocIndex:2},{value:"Organizational charts",paraId:1,tocIndex:2},{value:"Classification system display",paraId:1,tocIndex:2},{value:"Tree-like data where hierarchical relationships need to be emphasized",paraId:1,tocIndex:2},{value:"IndentedLayout supports common layout configuration items and specific configuration items, as shown below.",paraId:2,tocIndex:3},{value:"Property",paraId:3,tocIndex:3},{value:"Description",paraId:3,tocIndex:3},{value:"Type",paraId:3,tocIndex:3},{value:"Default",paraId:3,tocIndex:3},{value:"Required",paraId:3,tocIndex:3},{value:"type",paraId:3,tocIndex:3},{value:"Layout type, must be 'indented'",paraId:3,tocIndex:3},{value:"'indented'",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"✓",paraId:3,tocIndex:3},{value:"direction",paraId:3,tocIndex:3},{value:"Layout direction, see details below",paraId:3,tocIndex:3},{value:"'LR' | 'RL' | 'H'",paraId:3,tocIndex:3},{value:"'LR'",paraId:3,tocIndex:3},{value:"indent",paraId:3,tocIndex:3},{value:"Column spacing, fixed value or function",paraId:3,tocIndex:3},{value:"number | (d?: Node) => number",paraId:3,tocIndex:3},{value:"20",paraId:3,tocIndex:3},{value:"getWidth",paraId:3,tocIndex:3},{value:"Get each node's width, effective when direction='H'",paraId:3,tocIndex:3},{value:"(d?: Node) => number",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"getHeight",paraId:3,tocIndex:3},{value:"Get each node's height",paraId:3,tocIndex:3},{value:"(d?: Node) => number",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"getSide",paraId:3,tocIndex:3},{value:"Node placement on left/right side of root, overrides direction='H'",paraId:3,tocIndex:3},{value:"(d?: Node) => 'left' | 'right'",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"dropCap",paraId:3,tocIndex:3},{value:"Whether the first child of each node starts on the next line",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"true",paraId:3,tocIndex:3},{value:"isLayoutInvisibleNodes",paraId:3,tocIndex:3},{value:"Whether invisible nodes participate in layout (when preLayout=true)",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"false",paraId:3,tocIndex:3},{value:"nodeFilter",paraId:3,tocIndex:3},{value:"Nodes participating in this layout",paraId:3,tocIndex:3},{value:"(node: NodeData) => boolean",paraId:3,tocIndex:3},{value:"() => true",paraId:3,tocIndex:3},{value:"preLayout",paraId:3,tocIndex:3},{value:"Use pre-layout, calculate layout before initializing elements",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"false",paraId:3,tocIndex:3},{value:"enableWorker",paraId:3,tocIndex:3},{value:"Whether to run layout in WebWorker",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"iterations",paraId:3,tocIndex:3},{value:"Number of iterations for iterative layout",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"direction",paraId:4,tocIndex:4},{value:"'LR'",paraId:5,tocIndex:4},{value:": Root node on the left, layout to the right\n",paraId:5,tocIndex:4},{value:"'RL'",paraId:5,tocIndex:4},{value:": Root node on the right, layout to the left\n",paraId:5,tocIndex:4},{value:"'H'",paraId:5,tocIndex:4},{value:": Root node in the middle, horizontal symmetric layout\n",paraId:5,tocIndex:4},{value:"indent",paraId:6,tocIndex:4},{value:"Fixed value: Consistent indentation for all levels",paraId:7,tocIndex:4},{value:"Function: (d?: Node) => number, customize indentation based on node",paraId:7,tocIndex:4},{value:"Example:\n",paraId:7,tocIndex:4},{value:"(d) => {\n  if (d.parent?.id === 'testId') return d.parent.x + 50;\n  return 100;\n};\n",paraId:8,tocIndex:4},{value:"getWidth/getHeight",paraId:9,tocIndex:4},{value:"Used to customize each node's width/height, often for content adaptation",paraId:10,tocIndex:4},{value:"Example:\n",paraId:10,tocIndex:4},{value:"(d) => (d.id === 'testId' ? 50 : 100);\n",paraId:11,tocIndex:4},{value:"getSide",paraId:12,tocIndex:4},{value:"Specifies which side of the root node a node should be placed, only effective when direction='H'",paraId:13,tocIndex:4},{value:"Example:\n",paraId:13,tocIndex:4},{value:"(d) => (d.id === 'testId' ? 'left' : 'right');\n",paraId:14,tocIndex:4},{value:"For more examples, see ",paraId:15,tocIndex:5},{value:"Online Demo",paraId:15,tocIndex:5},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nfetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const graph = new Graph({\n      container: 'container',\n      data: treeToGraphData(data),\n      autoFit: 'view',\n      layout: {\n        type: 'indented',\n        direction: 'H',\n        indent: 80,\n        getHeight: () => 16,\n        getWidth: () => 32,\n      },\n    });\n    graph.render();\n  });\n",paraId:16,tocIndex:6},{value:"// ... code as above, layout.direction: 'LR'\n",paraId:17,tocIndex:7},{value:"// ... code as above, layout.direction: 'RL'\n",paraId:18,tocIndex:8},{value:"layout: {\n  type: 'indented',\n  direction: 'H',\n  indent: 80,\n  getHeight: () => 16,\n  getWidth: () => 32,\n  getSide: (d) => {\n    if (d.id === 'Regression' || d.id === 'Classification') return 'left';\n    return 'right';\n  },\n}\n",paraId:19,tocIndex:9},{value:"layout: {\n  type: 'indented',\n  direction: 'LR',\n  indent: 80,\n  getHeight: () => 16,\n  getWidth: () => 32,\n  dropCap: false,\n}\n",paraId:20,tocIndex:10}]},21284:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75730);const t=[{value:"MDS (Multidimensional Scaling) is a classic dimensionality reduction algorithm. In G6, the MDS layout constructs a distance matrix between nodes and restores their relative distances in high-dimensional space as much as possible in 2D space. It is suitable for graph visualization scenarios that show similarity, distance, or structural relationships between nodes.",paraId:0,tocIndex:1},{value:"Data dimensionality reduction visualization",paraId:1,tocIndex:2},{value:"Displaying distance relationships between nodes",paraId:1,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'mds',\n    center: [300, 300],\n    linkDistance: 100,\n  },\n});\n",paraId:2,tocIndex:3},{value:"Option",paraId:3,tocIndex:4},{value:"Description",paraId:3,tocIndex:4},{value:"Type",paraId:3,tocIndex:4},{value:"Default",paraId:3,tocIndex:4},{value:"Required",paraId:3,tocIndex:4},{value:"type",paraId:3,tocIndex:4},{value:"Layout type",paraId:3,tocIndex:4},{value:"mds",paraId:3,tocIndex:4},{value:"-",paraId:3,tocIndex:4},{value:"Yes",paraId:3,tocIndex:4},{value:"center",paraId:3,tocIndex:4},{value:"Center position of the circular layout",paraId:3,tocIndex:4},{value:"[number,number]",paraId:3,tocIndex:4},{value:"[0,0]",paraId:3,tocIndex:4},{value:"No",paraId:3,tocIndex:4},{value:"linkDistance",paraId:3,tocIndex:4},{value:"Ideal length of edges (spring length)",paraId:3,tocIndex:4},{value:"number",paraId:3,tocIndex:4},{value:"50",paraId:3,tocIndex:4},{value:"No",paraId:3,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"The center coordinates of the layout. All nodes will be symmetrically distributed around this point.",paraId:5,tocIndex:4},{value:"linkDistance",paraId:6,tocIndex:4},{value:"number Default: 50",paraId:7,tocIndex:4},{value:"The ideal distance between nodes. The larger the value, the more dispersed the nodes.",paraId:8,tocIndex:4},{value:"createGraph(\n  {\n    autoFit: 'view',\n    data: {\n      nodes: Array.from({ length: 25 }, (_, i) => ({\n        id: `node-${i}`,\n        data: {\n          value: Math.random() * 100,\n        },\n      })),\n      edges: Array.from({ length: 20 }, (_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 25)}`,\n        target: `node-${Math.floor(Math.random() * 25)}`,\n      })),\n    },\n    node: {\n      style: {\n        labelText: (d) => d.id,\n      },\n    },\n    layout: {\n      type: 'mds',\n      nodeSize: 32,\n      linkDistance: 100,\n    },\n    behaviors: ['drag-element', 'drag-canvas', 'zoom-canvas'],\n  },\n  { width: 600, height: 300 },\n);\n",paraId:9,tocIndex:5}]},77889:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42865);const t=[{value:"The mindmap tree layout is suitable for hierarchical layouts of tree structures, supporting expansion on both left and right sides. Nodes at the same depth will be placed on the same layer. Note: the layout ",paraId:0,tocIndex:0},{value:"does",paraId:0,tocIndex:0},{value:" take node size into account. See more mindmap layout ",paraId:0,tocIndex:0},{value:"examples",paraId:1,tocIndex:0},{value:" or ",paraId:0,tocIndex:0},{value:"source code",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'mindmap',\n    direction: 'H',\n    preLayout: false,\n    getHeight: () => 32,\n    getWidth: () => 32,\n    getVGap: () => 16,\n    getHGap: () => 72,\n  },\n});\n",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"Required",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"Layout type",paraId:3,tocIndex:2},{value:"mindmap",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"direction",paraId:3,tocIndex:2},{value:"Layout direction, ",paraId:3,tocIndex:2},{value:"options",paraId:4,tocIndex:2},{value:"H",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"LR",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"RL",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"TB",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"BT",paraId:3,tocIndex:2},{value:"LR",paraId:3,tocIndex:2},{value:"getHeight",paraId:3,tocIndex:2},{value:"Function to calculate the height of each node",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"getWidth",paraId:3,tocIndex:2},{value:"Function to calculate the width of each node",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"getVGap",paraId:3,tocIndex:2},{value:"Vertical gap for each node. Note: the actual vertical gap between two nodes is twice the vgap",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"getHGap",paraId:3,tocIndex:2},{value:"Horizontal gap for each node. Note: the actual horizontal gap between two nodes is twice the hgap",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"getSide",paraId:3,tocIndex:2},{value:"Set whether the node is placed on the left or right of the root. Only effective when ",paraId:3,tocIndex:2},{value:"direction",paraId:3,tocIndex:2},{value:" is ",paraId:3,tocIndex:2},{value:"H",paraId:3,tocIndex:2},{value:"(d?: Node) => string",paraId:3,tocIndex:2},{value:"H",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"LR",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"RL",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"TB",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"BT",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"'LR'",paraId:5,tocIndex:3},{value:"Tree layout direction",paraId:6,tocIndex:3},{value:"'H'",paraId:7,tocIndex:3},{value:": horizontal — The children of the root node are divided into two parts and placed on the left and right sides of the root node. You can pass the ",paraId:7,tocIndex:3},{value:"getSide",paraId:7,tocIndex:3},{value:" method to specify the left/right distribution logic for each node. If not provided, the first half will be placed on the right, and the second half on the left by default.",paraId:7,tocIndex:3},{value:"'LR' | 'TB'",paraId:8,tocIndex:3},{value:": Children are placed on the right side of the root node.",paraId:8,tocIndex:3},{value:"'RL'",paraId:9,tocIndex:3},{value:": Children are placed on the left side of the root node.",paraId:9,tocIndex:3},{value:"BT",paraId:10,tocIndex:3},{value:": Children are placed on the right side of the root node, then the entire graph is rotated 180° along the X axis.",paraId:10,tocIndex:3},{value:"(d?: Node) => number",paraId:11,tocIndex:4},{value:"Width of each node",paraId:12,tocIndex:4},{value:"Example:",paraId:13,tocIndex:4},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:14,tocIndex:4},{value:"(d?: Node) => number",paraId:15,tocIndex:5},{value:"Height of each node",paraId:16,tocIndex:5},{value:"Example:",paraId:17,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:18,tocIndex:5},{value:"(d?: Node) => number",paraId:19,tocIndex:6},{value:"Horizontal gap for each node",paraId:20,tocIndex:6},{value:"Example:",paraId:21,tocIndex:6},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:22,tocIndex:6},{value:"(d?: Node) => number",paraId:23,tocIndex:7},{value:"Vertical gap for each node",paraId:24,tocIndex:7},{value:"Example:",paraId:25,tocIndex:7},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:26,tocIndex:7},{value:"(d?: Node) => string",paraId:27,tocIndex:8},{value:"Set whether the node is placed on the left or right of the root. Note: only effective when ",paraId:28,tocIndex:8},{value:"direction",paraId:28,tocIndex:8},{value:" is ",paraId:28,tocIndex:8},{value:"H",paraId:28,tocIndex:8},{value:". If not set, the first half of the children will be placed on the right, and the second half on the left by default. See ",paraId:28,tocIndex:8},{value:"getSide auto calculation logic",paraId:28,tocIndex:8},{value:".",paraId:28,tocIndex:8},{value:"Example:",paraId:29,tocIndex:8},{value:"(d) => {\n  // d is a node\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:30,tocIndex:8},{value:"Data lineage graph: ",paraId:31,tocIndex:9},{value:"direction='H'",paraId:31,tocIndex:9},{value:" is suitable for rendering upstream and downstream lineage of a specified node, with upstream on the left and downstream on the right of the central node.",paraId:31,tocIndex:9},{value:"Mind map: Build custom mind map components.",paraId:31,tocIndex:9}]},95967:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78245);const t=[{value:"Radial layout is a graph layout algorithm that arranges nodes in concentric circles by layers. It is commonly used to display hierarchical relationships, community structures, and more. This layout supports advanced features such as node overlap prevention and group sorting, making it suitable for visualizing various network structures.",paraId:0,tocIndex:0},{value:"Displaying hierarchical structures (e.g., organizational charts, family trees)",paraId:1,tocIndex:1},{value:"Community structure analysis",paraId:1,tocIndex:1},{value:"Scenarios that need to highlight the central node and its radiating relationships",paraId:1,tocIndex:1},{value:"Complex networks requiring node grouping and sorting",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    autoFit: 'view',\n    data: {\n      nodes: [\n        { id: '0' },\n        { id: '1' },\n        { id: '2' },\n        { id: '3' },\n        { id: '4' },\n        { id: '5' },\n        { id: '6' },\n        { id: '7' },\n        { id: '8' },\n        { id: '9' },\n        { id: '10' },\n        { id: '11' },\n        { id: '12' },\n        { id: '13' },\n        { id: '14' },\n        { id: '15' },\n        { id: '16' },\n        { id: '17' },\n        { id: '18' },\n        { id: '19' },\n        { id: '20' },\n        { id: '21' },\n        { id: '22' },\n        { id: '23' },\n        { id: '24' },\n        { id: '25' },\n        { id: '26' },\n        { id: '27' },\n        { id: '28' },\n        { id: '29' },\n        { id: '30' },\n        { id: '31' },\n        { id: '32' },\n        { id: '33' },\n      ],\n      edges: [\n        { source: '0', target: '1' },\n        { source: '0', target: '2' },\n        { source: '0', target: '3' },\n        { source: '0', target: '4' },\n        { source: '0', target: '5' },\n        { source: '0', target: '7' },\n        { source: '0', target: '8' },\n        { source: '0', target: '9' },\n        { source: '0', target: '10' },\n        { source: '0', target: '11' },\n        { source: '0', target: '13' },\n        { source: '0', target: '14' },\n        { source: '0', target: '15' },\n        { source: '0', target: '16' },\n        { source: '2', target: '3' },\n        { source: '4', target: '5' },\n        { source: '4', target: '6' },\n        { source: '5', target: '6' },\n        { source: '7', target: '13' },\n        { source: '8', target: '14' },\n        { source: '10', target: '22' },\n        { source: '10', target: '14' },\n        { source: '10', target: '12' },\n        { source: '10', target: '24' },\n        { source: '10', target: '21' },\n        { source: '10', target: '20' },\n        { source: '11', target: '24' },\n        { source: '11', target: '22' },\n        { source: '11', target: '14' },\n        { source: '12', target: '13' },\n        { source: '16', target: '17' },\n        { source: '16', target: '18' },\n        { source: '16', target: '21' },\n        { source: '16', target: '22' },\n        { source: '17', target: '18' },\n        { source: '17', target: '20' },\n        { source: '18', target: '19' },\n        { source: '19', target: '20' },\n        { source: '19', target: '33' },\n        { source: '19', target: '22' },\n        { source: '19', target: '23' },\n        { source: '20', target: '21' },\n        { source: '21', target: '22' },\n        { source: '22', target: '24' },\n        { source: '22', target: '26' },\n        { source: '22', target: '23' },\n        { source: '22', target: '28' },\n        { source: '22', target: '30' },\n        { source: '22', target: '31' },\n        { source: '22', target: '32' },\n        { source: '22', target: '33' },\n        { source: '23', target: '28' },\n        { source: '23', target: '27' },\n        { source: '23', target: '29' },\n        { source: '23', target: '30' },\n        { source: '23', target: '31' },\n        { source: '23', target: '33' },\n        { source: '32', target: '33' },\n      ],\n    },\n    node: {\n      style: {\n        labelFill: '#fff',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n      },\n    },\n    layout: {\n      type: 'radial',\n      nodeSize: 32,\n      unitRadius: 100,\n      linkDistance: 200,\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      nodeSize: 32,\n      unitRadius: 100,\n      linkDistance: 200,\n      preventOverlap: false,\n      strictRadial: true,\n      sortBy: undefined,\n      sortStrength: 10,\n    };\n    const optionFolder = gui.addFolder('Radial Layout Options');\n    optionFolder.add(options, 'nodeSize', 1, 100, 1);\n    optionFolder.add(options, 'unitRadius', 10, 300, 1);\n    optionFolder.add(options, 'linkDistance', 10, 400, 1);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'strictRadial');\n    optionFolder.add(options, 'sortStrength', 1, 100, 1);\n    optionFolder.add(options, 'sortBy', [undefined, 'data', 'id']);\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: value,\n        }),\n      );\n      await graph.layout();\n      graph.fitView();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'radial',\n    nodeSize: 32,\n    unitRadius: 100,\n    linkDistance: 200,\n  },\n  // other configurations...\n});\n",paraId:3,tocIndex:3},{value:"Property",paraId:4,tocIndex:4},{value:"Description",paraId:4,tocIndex:4},{value:"Type",paraId:4,tocIndex:4},{value:"Default",paraId:4,tocIndex:4},{value:"Required",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"Layout type",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"radial",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"Center coordinates",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"focusNode",paraId:4,tocIndex:4},{value:"Radiating center node",paraId:4,tocIndex:4},{value:"string | Node | null",paraId:4,tocIndex:4},{value:"null",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"Canvas height",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"Canvas width",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"Node size (diameter)",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSpacing",paraId:4,tocIndex:4},{value:"Minimum node spacing (effective when preventing overlap)",paraId:4,tocIndex:4},{value:"number | (nodeData: Node) => number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"linkDistance",paraId:4,tocIndex:4},{value:"Edge length",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"50",paraId:4,tocIndex:4},{value:"unitRadius",paraId:4,tocIndex:4},{value:"Radius per circle",paraId:4,tocIndex:4},{value:"number | null",paraId:4,tocIndex:4},{value:"100",paraId:4,tocIndex:4},{value:"maxIteration",paraId:4,tocIndex:4},{value:"Maximum number of iterations",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"1000",paraId:4,tocIndex:4},{value:"maxPreventOverlapIteration",paraId:4,tocIndex:4},{value:"Max iterations for overlap prevention",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"200",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"Whether to prevent node overlap",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"sortBy",paraId:4,tocIndex:4},{value:"Field for sorting nodes in the same layer",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"sortStrength",paraId:4,tocIndex:4},{value:"Sorting strength for nodes in the same layer",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"strictRadial",paraId:4,tocIndex:4},{value:"Strictly place nodes in the same layer on the same ring",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nfetch('https://assets.antv.antgroup.com/g6/radial.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const graph = new Graph({\n      container: 'container',\n      data,\n      autoFit: 'center',\n      layout: {\n        type: 'radial',\n        nodeSize: 32,\n        unitRadius: 100,\n        linkDistance: 200,\n      },\n      node: {\n        style: {\n          labelFill: '#fff',\n          labelPlacement: 'center',\n          labelText: (d) => d.id,\n        },\n      },\n      behaviors: ['drag-canvas', 'drag-element'],\n    });\n    graph.render();\n  });\n",paraId:5,tocIndex:6},{value:"Result:",paraId:6,tocIndex:6},{value:"Basic Radial Layout",paraId:7,tocIndex:7},{value:"Strict Overlap Prevention Radial Layout",paraId:8,tocIndex:7},{value:"Non-strict Overlap Prevention Radial Layout",paraId:9,tocIndex:7},{value:"Cluster Sorting",paraId:10,tocIndex:7}]},32042:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60498);const t=[{value:"Random Layout",paraId:0,tocIndex:0},{value:" is a layout method based on simple rules. Its core logic is to generate random coordinates for each node within a specified layout area (defined by the layout center, width, and height). The coordinates are completely random, and there is no node collision prevention.",paraId:0,tocIndex:0},{value:"The use cases for random layout are very limited. It is only recommended for the following scenarios:",paraId:1,tocIndex:1},{value:"Initial Data Display",paraId:2,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"During early development, when debugging data loading logic or quickly verifying data structure, random layout can be used for preliminary validation.",paraId:3,tocIndex:1},{value:"For final business delivery, it is recommended to use layouts that better reflect business value, such as ",paraId:4,tocIndex:1},{value:"AntVDagreLayout",paraId:5,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"ForceLayout",paraId:6,tocIndex:1},{value:", or ",paraId:4,tocIndex:1},{value:"custom layouts",paraId:7,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"All other configurations use defaults (the layout width and height default to the entire canvas container).",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // other configurations\n  layout: {\n    type: 'random',\n  },\n});\n",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"Layout type",paraId:10,tocIndex:3},{value:"random",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"center",paraId:10,tocIndex:3},{value:"Layout center",paraId:10,tocIndex:3},{value:"[number, number] | [number, number, number]",paraId:10,tocIndex:3},{value:"[",paraId:10,tocIndex:3},{value:"layout width",paraId:10,tocIndex:3},{value:" / 2, ",paraId:10,tocIndex:3},{value:"layout height",paraId:10,tocIndex:3},{value:" / 2]",paraId:10,tocIndex:3},{value:"height",paraId:10,tocIndex:3},{value:"Layout height",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"canvas height",paraId:10,tocIndex:3},{value:"width",paraId:10,tocIndex:3},{value:"Layout width",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"canvas width",paraId:10,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  autoFit: 'view',\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `${i}`,\n    })),\n  },\n  node: {\n    style: {\n      labelText: (d) => d.id,\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  layout: {\n    type: 'random',\n  },\n});\n\ngraph.render();\n",paraId:11,tocIndex:4}]},82890:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(87598);const t=[{value:"Snake Layout is a special type of graph layout that can more efficiently display long chain structures in a limited space. Note that the graph data must ensure that nodes are linearly arranged from the source node to the sink node, forming a clear path.",paraId:0,tocIndex:0},{value:"Nodes are arranged in an S-shape: the first node is at the start of the first row, subsequent nodes are arranged to the right in the first row until the end. At the end of the row, the next row's nodes are arranged from right to left. This process repeats until all nodes are placed.",paraId:1,tocIndex:0},{value:"Suitable for scenarios that require compact presentation of linear relationships:",paraId:2,tocIndex:1},{value:"Long process visualization",paraId:3,tocIndex:1},{value:"Perfect for scenarios with many process steps, such as approval flows, production line procedures, logistics routes, etc.",paraId:4,tocIndex:1},{value:"Hierarchical structures in limited space",paraId:5,tocIndex:1},{value:"When the hierarchy is too long but the canvas is limited, rows can be folded to save space. For example, API call dependencies (client → gateway → serviceA → serviceB → database, snake layout compresses 5 layers into 2 rows), or file directory trees (deeply nested folder structures, e.g., src/components/utils/helpers/..., using snake layout to fold subdirectories horizontally).",paraId:6,tocIndex:1},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: new Array(16).fill(0).map((_, i) => ({ id: `${i}` })),\n      edges: new Array(15).fill(0).map((_, i) => ({ source: `${i}`, target: `${i + 1}` })),\n    },\n    node: {\n      style: {\n        labelFill: '#fff',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n      },\n    },\n    behaviors: ['drag-canvas'],\n    layout: {\n      type: 'snake',\n      clockwise: true,\n      cols: 4,\n      colGap: 30,\n      rowGap: 30,\n      padding: 15,\n      nodeSize: 30,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'snake',\n      clockwise: true,\n      cols: 4,\n      colGap: 30,\n      rowGap: 30,\n      padding: 15,\n      nodeSize: 30,\n    };\n\n    const optionFolder = gui.addFolder('Grid Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'cols', 2, 10, 1);\n    optionFolder.add(options, 'colGap', 10, 150, 1);\n    optionFolder.add(options, 'rowGap', 10, 150, 1);\n    optionFolder.add(options, 'padding', 5, 100, 1);\n    optionFolder.add(options, 'nodeSize', 10, 50, 30);\n    optionFolder.add(options, 'clockwise');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.setLayout({\n        type: 'snake',\n        [property]: value,\n      });\n      graph.layout();\n    });\n  },\n);\n",paraId:7,tocIndex:2},{value:"If the layout has specific properties, they are listed below. For common layout options, see ",paraId:8,tocIndex:3},{value:"Base Layout Options",paraId:9,tocIndex:3},{value:"Property",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"Layout type",paraId:10,tocIndex:3},{value:"snake",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"clockwise",paraId:11,tocIndex:3},{value:"Whether nodes are arranged clockwise",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"colGap",paraId:10,tocIndex:3},{value:"Gap size between columns",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"Automatically calculated by canvas width and total columns",paraId:10,tocIndex:3},{value:"cols",paraId:10,tocIndex:3},{value:"Number of columns",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"5",paraId:10,tocIndex:3},{value:"nodeSize",paraId:10,tocIndex:3},{value:"Node size",paraId:10,tocIndex:3},{value:"Size | ((node: NodeData) => Size)",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"padding",paraId:10,tocIndex:3},{value:"Padding, i.e., distance from layout area to canvas boundary",paraId:10,tocIndex:3},{value:"number | number[]",paraId:10,tocIndex:3},{value:"0",paraId:10,tocIndex:3},{value:"rowGap",paraId:10,tocIndex:3},{value:"Gap size between rows",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"Automatically calculated by canvas height and total rows",paraId:10,tocIndex:3},{value:"sortBy",paraId:10,tocIndex:3},{value:"Node sorting method",paraId:10,tocIndex:3},{value:"(nodeA: NodeData, nodeB: NodeData) => -1 | 0 | 1",paraId:10,tocIndex:3},{value:"Default is the path order in the graph",paraId:10,tocIndex:3},{value:"When arranged clockwise, nodes start from the top left, the first row is arranged left to right, the second row right to left, and so on, forming an S-shaped path.",paraId:12,tocIndex:4},{value:"When arranged counterclockwise, nodes start from the top right, the first row is arranged right to left, the second row left to right, and so on, forming a reversed S-shaped path.",paraId:12,tocIndex:4},{value:"Snake Layout",paraId:13,tocIndex:5}]},51361:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(67367);const t=[{value:"In G6, layouts are divided into two types: 'iterative layout' and 'non-iterative layout'. An iterative layout refers to a layout algorithm that iterates multiple times until convergence, while a non-iterative layout refers to a layout algorithm that executes only once.",paraId:0,tocIndex:0},{value:"Implementing a non-iterative layout is relatively straightforward; you only need to implement the ",paraId:1,tocIndex:2},{value:"execute",paraId:1,tocIndex:2},{value:" method in ",paraId:1,tocIndex:2},{value:"BaseLayout",paraId:1,tocIndex:2},{value:". Below is a simple implementation of a custom layout:",paraId:1,tocIndex:2},{value:"import { BaseLayout } from '@antv/g6';\nimport type { GraphData } from '@antv/g6';\n\nclass DiagonalLayout extends BaseLayout {\n  id = 'diagonal-layout';\n\n  async execute(data: GraphData): Promise<GraphData> {\n    const { nodes = [] } = data;\n    return {\n      nodes: nodes.map((node, index) => ({\n        id: node.id,\n        style: {\n          x: 50 * index + 25,\n          y: 50 * index + 25,\n        },\n      })),\n    };\n  }\n}\n",paraId:2,tocIndex:2},{value:"In the code above, we implemented a simple layout algorithm that arranges nodes along a diagonal line starting from the top-left corner.",paraId:3,tocIndex:2},{value:"import { Graph, BaseLayout, register, ExtensionCategory } from '@antv/g6';\n\nclass DiagonalLayout extends BaseLayout {\n  id = 'diagonal-layout';\n\n  async execute(data) {\n    const { nodes = [] } = data;\n    return {\n      nodes: nodes.map((node, index) => ({\n        id: node.id,\n        style: {\n          x: 50 * index + 25,\n          y: 50 * index + 25,\n        },\n      })),\n    };\n  }\n}\n\nregister(ExtensionCategory.LAYOUT, 'diagonal', DiagonalLayout);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1' }, { id: 'node-2' }, { id: 'node-3' }, { id: 'node-4' }],\n  },\n  layout: {\n    type: 'diagonal',\n  },\n});\n\ngraph.render();\n",paraId:4,tocIndex:2},{value:"The ",paraId:5},{value:"execute",paraId:5},{value:" method returns a GraphData object, which only needs to contain the basic information of the elements (such as id, source, target) and the properties added by the layout (such as x, y, control points of edges, etc.), and does not need to contain other unnecessary information.\nIf you only need to layout the nodes, you can return only the node information and do not need to return the edge information.",paraId:5},{value:"The implementation of an iterative layout also requires inheriting from ",paraId:6,tocIndex:3},{value:"BaseLayout",paraId:6,tocIndex:3},{value:", but in addition to ",paraId:6,tocIndex:3},{value:"execute",paraId:6,tocIndex:3},{value:", you also need to implement the ",paraId:6,tocIndex:3},{value:"tick",paraId:6,tocIndex:3},{value:" and ",paraId:6,tocIndex:3},{value:"stop",paraId:6,tocIndex:3},{value:" methods. The ",paraId:6,tocIndex:3},{value:"tick",paraId:6,tocIndex:3},{value:" method is used to iterate the layout to a specified number of rounds, and the ",paraId:6,tocIndex:3},{value:"stop",paraId:6,tocIndex:3},{value:" method is used to stop the layout iteration.",paraId:6,tocIndex:3},{value:"In addition, in iterative layouts, you need to call ",paraId:7,tocIndex:3},{value:"options.onTick",paraId:7,tocIndex:3},{value:" each time the layout iterates to trigger the graph update.",paraId:7,tocIndex:3},{value:"type onTick = (data: GraphData) => void;\n",paraId:8,tocIndex:3},{value:"Below is a simple implementation of an iterative layout:",paraId:9,tocIndex:3},{value:"import { BaseLayout } from '@antv/g6';\nimport type { GraphData, BaseLayoutOptions } from '@antv/g6';\n\ninterface TickTockLayoutOptions extends BaseLayoutOptions {\n  onTick: (data: GraphData) => void;\n}\n\nclass TickTockLayout extends BaseLayout<TickTockLayoutOptions> {\n  public id = 'custom-layout';\n\n  private tickCount = 0;\n\n  private data?: GraphData;\n\n  private timer?: number;\n\n  private resolve?: () => void;\n\n  private promise?: Promise<void>;\n\n  async execute(data: GraphData, options: TickTockLayoutOptions): Promise<GraphData> {\n    const { onTick } = { ...this.options, ...options };\n\n    this.tickCount = 0;\n    this.data = data;\n\n    this.promise = new Promise((resolve) => {\n      this.resolve = resolve;\n    });\n\n    this.timer = window.setInterval(() => {\n      onTick(this.simulateTick());\n      if (this.tickCount === 10) this.stop();\n    }, 200);\n\n    await this.promise;\n\n    return this.simulateTick();\n  }\n\n  simulateTick = () => {\n    const x = this.tickCount++ % 2 === 0 ? 50 : 150;\n\n    return {\n      nodes: (this?.data?.nodes || []).map((node, index) => ({\n        id: node.id,\n        style: { x, y: (index + 1) * 30 },\n      })),\n    };\n  };\n\n  tick = () => {\n    return this.simulateTick();\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    this.resolve?.();\n  };\n}\n",paraId:10,tocIndex:3},{value:"In this example, we have implemented a simple iterative layout algorithm that toggles the x-coordinate of the nodes between 50 and 150 every 200 milliseconds and arranges them in order along the y-axis according to the sequence of the nodes.",paraId:11,tocIndex:3},{value:"import { Graph, BaseLayout, register, ExtensionCategory } from '@antv/g6';\n\nclass TickTockLayout extends BaseLayout {\n  id = 'tick-tock-layout';\n\n  async execute(data, options) {\n    const { onTick } = { ...this.options, ...options };\n\n    this.tickCount = 0;\n    this.data = data;\n\n    this.promise = new Promise((resolve) => {\n      this.resolve = resolve;\n    });\n\n    this.timer = window.setInterval(() => {\n      onTick(this.simulateTick());\n      if (this.tickCount === 10) this.stop();\n    }, 200);\n\n    await this.promise;\n\n    return this.simulateTick();\n  }\n\n  simulateTick = () => {\n    const x = this.tickCount++ % 2 === 0 ? 50 : 150;\n\n    return {\n      nodes: (this?.data?.nodes || []).map((node, index) => ({\n        id: node.id,\n        style: { x, y: (index + 1) * 30 },\n      })),\n    };\n  };\n\n  tick = () => {\n    return this.simulateTick();\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    this.resolve?.();\n  };\n}\n\nregister(ExtensionCategory.LAYOUT, 'tick-tock', TickTockLayout);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  animation: true,\n  data: {\n    nodes: [{ id: 'node-1' }, { id: 'node-2' }, { id: 'node-3' }, { id: 'node-4' }, { id: 'node-5' }],\n  },\n  layout: {\n    type: 'tick-tock',\n  },\n});\n\ngraph.render();\n",paraId:12,tocIndex:3},{value:"You can register through the ",paraId:13,tocIndex:4},{value:"register",paraId:13,tocIndex:4},{value:" method provided by G6. For more details, please refer to ",paraId:13,tocIndex:4},{value:"Register Layout",paraId:14,tocIndex:4},{value:"The type and parameters of the layout can be configured in ",paraId:15,tocIndex:5},{value:"options.layout",paraId:15,tocIndex:5},{value:". For more details, please refer to ",paraId:15,tocIndex:5},{value:"Configure Layout",paraId:16,tocIndex:5}]},36562:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(46664);const t=[{value:"Graph layout refers to the process of arranging elements in a graph according to certain rules, such as force-directed layout based on charge elasticity models, grid layout with sequential arrangement, and tree layout based on hierarchical structures.",paraId:0,tocIndex:0},{value:"G6 provides a variety of layout algorithms, allowing users to choose the appropriate one based on their needs:",paraId:1,tocIndex:1},{value:"AntVDagreLayout",paraId:2,tocIndex:1},{value:": Custom layout based on dagre",paraId:3,tocIndex:1},{value:"CircularLayout",paraId:4,tocIndex:1},{value:": Circular layout",paraId:3,tocIndex:1},{value:"ComboCombinedLayout",paraId:5,tocIndex:1},{value:": Layout suitable for combinations",paraId:3,tocIndex:1},{value:"ConcentricLayout",paraId:6,tocIndex:1},{value:": Concentric layout",paraId:3,tocIndex:1},{value:"D3Force3DLayout",paraId:7,tocIndex:1},{value:": ",paraId:3,tocIndex:1},{value:"3D Force-directed",paraId:3,tocIndex:1},{value:" layout",paraId:3,tocIndex:1},{value:"D3ForceLayout",paraId:8,tocIndex:1},{value:": Force-directed layout based on ",paraId:3,tocIndex:1},{value:"D3",paraId:3,tocIndex:1},{value:"DagreLayout",paraId:9,tocIndex:1},{value:": ",paraId:3,tocIndex:1},{value:"dagre",paraId:3,tocIndex:1},{value:" layout",paraId:3,tocIndex:1},{value:"FishboneLayout",paraId:10,tocIndex:1},{value:": Fishbone layout",paraId:3,tocIndex:1},{value:"ForceAtlas2Layout",paraId:11,tocIndex:1},{value:": ",paraId:3,tocIndex:1},{value:"ForceAtlas2",paraId:3,tocIndex:1},{value:" layout",paraId:3,tocIndex:1},{value:"ForceLayout",paraId:12,tocIndex:1},{value:": Force-directed layout",paraId:3,tocIndex:1},{value:"FruchtermanLayout",paraId:13,tocIndex:1},{value:": ",paraId:3,tocIndex:1},{value:"Fruchterman",paraId:3,tocIndex:1},{value:" layout",paraId:3,tocIndex:1},{value:"GridLayout",paraId:14,tocIndex:1},{value:": Grid layout",paraId:3,tocIndex:1},{value:"MDSLayout",paraId:15,tocIndex:1},{value:": High-dimensional data dimensionality reduction layout",paraId:3,tocIndex:1},{value:"RadialLayout",paraId:16,tocIndex:1},{value:": Radial layout",paraId:3,tocIndex:1},{value:"RandomLayout",paraId:17,tocIndex:1},{value:": Random layout",paraId:3,tocIndex:1},{value:"SnakeLayout",paraId:18,tocIndex:1},{value:": Snake layout",paraId:3,tocIndex:1},{value:"CompactBoxLayout",paraId:19,tocIndex:1},{value:": Compact tree layout",paraId:3,tocIndex:1},{value:"DendrogramLayout",paraId:20,tocIndex:1},{value:": Dendrogram layout",paraId:3,tocIndex:1},{value:"MindmapLayout",paraId:21,tocIndex:1},{value:": Mindmap layout",paraId:3,tocIndex:1},{value:"IndentedLayout",paraId:22,tocIndex:1},{value:": Indented tree layout",paraId:3,tocIndex:1},{value:"Among them, ",paraId:23,tocIndex:1},{value:"CompactBox Layout",paraId:23,tocIndex:1},{value:", ",paraId:23,tocIndex:1},{value:"Dendrogram Layout",paraId:23,tocIndex:1},{value:", ",paraId:23,tocIndex:1},{value:"Mindmap Layout",paraId:23,tocIndex:1},{value:", and ",paraId:23,tocIndex:1},{value:"Indented Layout",paraId:23,tocIndex:1},{value:" are types of tree layouts suitable for tree-structured graphs.",paraId:23,tocIndex:1},{value:"You can directly use built-in layouts, but if you want to use other layouts, you need to register them first:",paraId:24,tocIndex:2},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomLayout } from 'package-name/or/path-to-your-custom-layout';\n\nregister(ExtensionCategory.LAYOUT, 'custom-layout', CustomLayout);\n",paraId:25,tocIndex:2},{value:"The ",paraId:26,tocIndex:3},{value:"layout",paraId:26,tocIndex:3},{value:" configuration item can specify the graph's layout algorithm, for example:",paraId:26,tocIndex:3},{value:"{\n  layout: {\n    // Specify the layout algorithm to use\n    type: 'force',\n    // Configuration items for the layout algorithm\n    gravity: 10\n    // ...\n  }\n}\n",paraId:27,tocIndex:3},{value:"You can also use ",paraId:28,tocIndex:3},{value:"graph.setLayout",paraId:28,tocIndex:3},{value:" to update the layout configuration after the graph is instantiated.",paraId:28,tocIndex:3},{value:"G6 provides accelerated versions for some layout algorithms, including executing layout algorithms in Web Workers, providing ",paraId:29,tocIndex:4},{value:"WASM",paraId:29,tocIndex:4},{value:" versions of layout algorithms, and GPU-accelerated layout algorithms. They can be used as follows:",paraId:29,tocIndex:4},{value:"Except for tree layouts, all built-in layout algorithms in G6 support execution in Web Workers. Simply set ",paraId:30,tocIndex:5},{value:"enableWorker",paraId:30,tocIndex:5},{value:" to ",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:":",paraId:30,tocIndex:5},{value:"{\n  layout: {\n    type: 'force',\n    enableWorker: true,\n    // ...\n  }\n}\n",paraId:31,tocIndex:5},{value:"Currently supported WASM version layout algorithms include: ",paraId:32,tocIndex:6},{value:"Fruchterman Layout",paraId:32,tocIndex:6},{value:", ",paraId:32,tocIndex:6},{value:"ForceAtlas Layout",paraId:32,tocIndex:6},{value:", ",paraId:32,tocIndex:6},{value:"Force Layout",paraId:32,tocIndex:6},{value:", ",paraId:32,tocIndex:6},{value:"Dagre Layout",paraId:32,tocIndex:6},{value:".",paraId:32,tocIndex:6},{value:"First, install ",paraId:33,tocIndex:6},{value:"@antv/layout-wasm",paraId:33,tocIndex:6},{value:":",paraId:33,tocIndex:6},{value:"npm install @antv/layout-wasm --save\n",paraId:34,tocIndex:6},{value:"Import and register the layout algorithm:",paraId:35,tocIndex:6},{value:"import { register, Graph, ExtensionCategory } from '@antv/g6';\nimport { FruchtermanLayout, initThreads, supportsThreads } from '@antv/layout-wasm';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-wasm', FruchtermanLayout);\n",paraId:36,tocIndex:6},{value:"Initialize threads:",paraId:37,tocIndex:6},{value:"const supported = await supportsThreads();\nconst threads = await initThreads(supported);\n",paraId:38,tocIndex:6},{value:"Initialize the graph and pass in the layout configuration:",paraId:39,tocIndex:6},{value:"const graph = new Graph({\n  // ... other configurations\n  layout: {\n    type: 'fruchterman-wasm',\n    threads,\n    // ... other configurations\n  },\n});\n",paraId:40,tocIndex:6},{value:"Currently supported GPU-accelerated layout algorithms include: ",paraId:41,tocIndex:7},{value:"Fruchterman Layout",paraId:41,tocIndex:7},{value:", ",paraId:41,tocIndex:7},{value:"GForce Layout",paraId:41,tocIndex:7},{value:".",paraId:41,tocIndex:7},{value:"First, install ",paraId:42,tocIndex:7},{value:"@antv/layout-gpu",paraId:42,tocIndex:7},{value:":",paraId:42,tocIndex:7},{value:"npm install @antv/layout-gpu --save\n",paraId:43,tocIndex:7},{value:"Import and register the layout algorithm:",paraId:44,tocIndex:7},{value:"import { register, Graph, ExtensionCategory } from '@antv/g6';\nimport { FruchtermanLayout } from '@antv/layout-gpu';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-gpu', FruchtermanLayout);\n",paraId:45,tocIndex:7},{value:"Initialize the graph and pass in the layout configuration:",paraId:46,tocIndex:7},{value:"const graph = new Graph({\n  // ... other configurations\n  layout: {\n    type: 'fruchterman-gpu',\n    // ... other configurations\n  },\n});\n",paraId:47,tocIndex:7},{value:"Usually, after calling ",paraId:48,tocIndex:8},{value:"graph.render()",paraId:48,tocIndex:8},{value:", G6 will automatically execute the layout algorithm.",paraId:48,tocIndex:8},{value:"If you need to manually execute the layout algorithm, G6 provides the following APIs:",paraId:49,tocIndex:8},{value:"layout",paraId:50,tocIndex:8},{value:": Execute layout algorithm",paraId:51,tocIndex:8},{value:"setLayout",paraId:52,tocIndex:8},{value:": Set layout algorithm",paraId:51,tocIndex:8},{value:"stopLayout",paraId:53,tocIndex:8},{value:": Stop layout algorithm",paraId:51,tocIndex:8},{value:"If the built-in layout algorithms cannot meet your needs, you can customize layout algorithms. For details, please refer to ",paraId:54,tocIndex:9},{value:"Custom Layout",paraId:55,tocIndex:9},{value:".",paraId:54,tocIndex:9}]},70110:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(19590);const t=[{value:"Support setting a background image for the canvas to make the canvas more hierarchical and narrative.",paraId:0,tocIndex:0},{value:"This plugin is mainly used for:",paraId:1,tocIndex:1},{value:"Setting a unified brand background color or image for charts",paraId:2,tocIndex:1},{value:"Distinguishing different functional areas through the background",paraId:2,tocIndex:1},{value:"Enhancing the visual hierarchy and aesthetics of charts",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the Background plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'background',\n      key: 'my-background', // Specify an identifier for the plugin for dynamic updates\n      backgroundColor: '#f0f2f5', // Set background color\n      backgroundImage: 'url(https://example.com/bg.png)', // Set background image\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"The configuration options for the Background plugin inherit all CSS style properties (",paraId:5,tocIndex:3},{value:"CSSStyleDeclaration",paraId:5,tocIndex:3},{value:"), so you can use any valid CSS property to configure the background. Here are some common configurations:",paraId:5,tocIndex:3},{value:"Property",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:"Type",paraId:6,tocIndex:3},{value:"Default Value",paraId:6,tocIndex:3},{value:"Required",paraId:6,tocIndex:3},{value:"type",paraId:6,tocIndex:3},{value:"Plugin type",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"background",paraId:6,tocIndex:3},{value:"✓",paraId:6,tocIndex:3},{value:"key",paraId:6,tocIndex:3},{value:"Unique identifier for updates",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"width",paraId:6,tocIndex:3},{value:"Background width",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"100%",paraId:6,tocIndex:3},{value:"height",paraId:6,tocIndex:3},{value:"Background height",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"100%",paraId:6,tocIndex:3},{value:"backgroundColor",paraId:6,tocIndex:3},{value:"Background color",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundImage",paraId:6,tocIndex:3},{value:"Background image",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundSize",paraId:6,tocIndex:3},{value:"Background size",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"cover",paraId:6,tocIndex:3},{value:"backgroundPosition",paraId:6,tocIndex:3},{value:"Background position",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundRepeat",paraId:6,tocIndex:3},{value:"Background repeat",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"opacity",paraId:6,tocIndex:3},{value:"Background opacity",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"transition",paraId:6,tocIndex:3},{value:"Transition animation",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"background 0.5s",paraId:6,tocIndex:3},{value:"zIndex",paraId:6,tocIndex:3},{value:"Stacking order",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-1",paraId:6,tocIndex:3},{value:"Note: The ",paraId:7,tocIndex:3},{value:"zIndex",paraId:7,tocIndex:3},{value:" is set to -1 by default to prevent the background from covering other plugin DOM elements, such as grid lines.",paraId:7,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'background',\n      backgroundColor: '#f0f2f5',\n    },\n  ],\n});\n",paraId:8,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'background',\n      backgroundImage: 'url(https://example.com/bg.png)',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    },\n  ],\n});\n",paraId:9,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'background',\n      background: 'linear-gradient(45deg, #1890ff, #722ed1)',\n      opacity: '0.8',\n    },\n  ],\n});\n",paraId:10,tocIndex:7},{value:"// Initial configuration\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'background',\n      key: 'my-background',\n      backgroundColor: '#f0f2f5',\n    },\n  ],\n});\n\n// Subsequent updates\ngraph.updatePlugin({\n  key: 'my-background',\n  backgroundColor: '#e6f7ff',\n  transition: 'background 1s ease',\n});\n",paraId:11,tocIndex:8},{value:"By default, the ",paraId:12,tocIndex:10},{value:"zIndex",paraId:12,tocIndex:10},{value:" of the background plugin is set to ",paraId:12,tocIndex:10},{value:"-1",paraId:12,tocIndex:10},{value:" to ensure it is below other elements. If there are still conflicts, you can adjust the ",paraId:12,tocIndex:10},{value:"zIndex",paraId:12,tocIndex:10},{value:" value:",paraId:12,tocIndex:10},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'background',\n      zIndex: '-2', // Lower z-index to avoid conflicts\n    },\n  ],\n});\n",paraId:13,tocIndex:10}]},75755:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91853);const t=[{value:"The BubbleSets plugin represents sets and their relationships by creating bubble shapes, helping users intuitively understand logical relationships such as intersections and unions between sets. It is a tool to enhance data visualization effects, especially suitable for displaying complex data set relationships.",paraId:0,tocIndex:0},{value:"The BubbleSets plugin is mainly suitable for the following scenarios:",paraId:1,tocIndex:1},{value:"Displaying relationships between sets (e.g., intersections, unions)",paraId:2,tocIndex:1},{value:"Enhancing the expressive ability of data visualization",paraId:2,tocIndex:1},{value:"Identifying specific sets of nodes or edges in complex network graphs",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the BubbleSets plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node1', 'node2'], // List of node IDs to be enclosed\n      label: true, // Whether to display labels\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node-0',\n          data: { cluster: 'a' },\n          style: { x: 555, y: 151 },\n        },\n        {\n          id: 'node-1',\n          data: { cluster: 'a' },\n          style: { x: 532, y: 323 },\n        },\n        {\n          id: 'node-2',\n          data: { cluster: 'a' },\n          style: { x: 473, y: 227 },\n        },\n        {\n          id: 'node-3',\n          data: { cluster: 'a' },\n          style: { x: 349, y: 212 },\n        },\n        {\n          id: 'node-4',\n          data: { cluster: 'b' },\n          style: { x: 234, y: 201 },\n        },\n        {\n          id: 'node-5',\n          data: { cluster: 'b' },\n          style: { x: 338, y: 333 },\n        },\n        {\n          id: 'node-6',\n          data: { cluster: 'b' },\n          style: { x: 365, y: 91 },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge-0',\n          source: 'node-0',\n          target: 'node-2',\n        },\n        {\n          id: 'edge-1',\n          source: 'node-1',\n          target: 'node-2',\n        },\n        {\n          id: 'edge-2',\n          source: 'node-2',\n          target: 'node-3',\n        },\n        {\n          id: 'edge-3',\n          source: 'node-3',\n          target: 'node-4',\n        },\n        {\n          id: 'edge-4',\n          source: 'node-3',\n          target: 'node-5',\n        },\n        {\n          id: 'edge-5',\n          source: 'node-3',\n          target: 'node-6',\n        },\n      ],\n    },\n    node: {\n      style: { labelText: (d) => d.id },\n      palette: { field: 'cluster', color: ['#7e3feb', '#ffa940'] },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'bubble-sets',\n        key: 'bubble-sets',\n        members: ['node-0', 'node-1', 'node-2', 'node-3'],\n        labelText: 'bubblesets-a',\n        fill: '#7e3feb',\n        fillOpacity: 0.1,\n        stroke: '#7e3feb',\n        strokeOpacity: 1,\n        labelFill: '#fff',\n        labelPadding: 2,\n        labelBackgroundFill: '#7e3feb',\n        labelBackgroundRadius: 5,\n      },\n    ],\n  },\n  { width: 600, height: 450 },\n  (gui, graph) => {\n    const options = {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      avoidMembers: [],\n      // style\n      fill: '#7e3feb',\n      fillOpacity: 0.1,\n      stroke: '#7e3feb',\n      strokeOpacity: 1,\n      // label\n      label: true,\n      labelCloseToPath: true,\n      labelAutoRotate: true,\n      labelOffsetX: 0,\n      labelOffsetY: 0,\n      labelPlacement: 'bottom',\n      // bubblesets\n      maxRoutingIterations: 100,\n      maxMarchingIterations: 20,\n      pixelGroup: 4,\n      edgeR0: 10,\n      edgeR1: 20,\n      nodeR0: 15,\n      nodeR1: 50,\n      morphBuffer: 10,\n      threshold: 1,\n      memberInfluenceFactor: 1,\n      edgeInfluenceFactor: 1,\n      nonMemberInfluenceFactor: -0.8,\n      virtualEdges: true,\n    };\n\n    const optionFolder = gui.addFolder('Bubblesets Options');\n    optionFolder.add(options, 'type').disable();\n    optionFolder.addColor(options, 'fill');\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'fillOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'strokeOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'label');\n    optionFolder.add(options, 'labelCloseToPath');\n    optionFolder.add(options, 'labelAutoRotate');\n    optionFolder.add(options, 'labelOffsetX', 0, 20, 1);\n    optionFolder.add(options, 'labelOffsetY', 0, 20, 1);\n    optionFolder.add(options, 'labelPlacement', ['left', 'right', 'top', 'bottom', 'center']);\n    optionFolder.add(options, 'maxRoutingIterations', 0, 200, 1);\n    optionFolder.add(options, 'maxMarchingIterations', 0, 40, 1);\n    optionFolder.add(options, 'pixelGroup', 0, 20, 1);\n    optionFolder.add(options, 'edgeR0', 0, 50, 1);\n    optionFolder.add(options, 'edgeR1', 0, 50, 1);\n    optionFolder.add(options, 'nodeR0', 0, 50, 1);\n    optionFolder.add(options, 'nodeR1', 0, 50, 1);\n    optionFolder.add(options, 'morphBuffer', 0, 20, 1);\n    optionFolder.add(options, 'threshold', -1, 1, 0.1);\n    optionFolder.add(options, 'memberInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'edgeInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'nonMemberInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'virtualEdges');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'bubble-sets',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiConfig = {\n      member: 'node-1',\n      avoidMember: 'node-1',\n    };\n    const apiFolder = gui.addFolder('Bubblesets API');\n    const instance = graph.getPluginInstance('bubble-sets');\n    const nodeIds = graph.getData().nodes.map((node) => node.id);\n    const edgeIds = graph.getData().edges.map((edge) => edge.id);\n    apiFolder.add(apiConfig, 'member', [...nodeIds, ...edgeIds]);\n    apiFolder.add({ addMember: () => instance.addMember(apiConfig.member) }, 'addMember').name('add member');\n    apiFolder\n      .add({ removeMember: () => instance.removeMember(apiConfig.member) }, 'removeMember')\n      .name('remove member');\n    apiFolder\n      .add({ removeMember: () => alert('Members in Bubblesets: ' + instance.getMember()) }, 'removeMember')\n      .name('get member');\n    apiFolder.add(apiConfig, 'avoidMember', nodeIds);\n    apiFolder\n      .add({ addAvoidMember: () => instance.addAvoidMember(apiConfig.avoidMember) }, 'addAvoidMember')\n      .name('add avoid member');\n    apiFolder\n      .add({ removeAvoidMember: () => instance.removeAvoidMember(apiConfig.avoidMember) }, 'removeAvoidMember')\n      .name('remove avoid member');\n    apiFolder\n      .add({ removeMember: () => alert('Avoid members in Bubblesets: ' + instance.getAvoidMember()) }, 'removeMember')\n      .name('get avoid member');\n  },\n);\n",paraId:5,tocIndex:3},{value:"Property",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:"Type",paraId:6,tocIndex:4},{value:"Default Value",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:"type",paraId:6,tocIndex:4},{value:"Plugin type",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"bubble-sets",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"key",paraId:6,tocIndex:4},{value:"Unique identifier for the plugin for subsequent updates",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"members",paraId:6,tocIndex:4},{value:"Member elements, including nodes and edges, ",paraId:6,tocIndex:4},{value:"example",paraId:7,tocIndex:4},{value:"string[]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"avoidMembers",paraId:6,tocIndex:4},{value:"Elements to avoid, not included when drawing contours (currently supports setting nodes)",paraId:6,tocIndex:4},{value:"string[]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"label",paraId:6,tocIndex:4},{value:"Whether to display labels",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelPlacement",paraId:6,tocIndex:4},{value:"Label position",paraId:6,tocIndex:4},{value:"left",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"right",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"top",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"center",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:"labelBackground",paraId:6,tocIndex:4},{value:"Whether to display background",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"false",paraId:6,tocIndex:4},{value:"labelPadding",paraId:6,tocIndex:4},{value:"Label padding",paraId:6,tocIndex:4},{value:"number | number[]",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelCloseToPath",paraId:6,tocIndex:4},{value:"Whether the label is close to the contour, ",paraId:6,tocIndex:4},{value:"example",paraId:8,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelAutoRotate",paraId:6,tocIndex:4},{value:"Whether the label rotates with the contour, ",paraId:6,tocIndex:4},{value:"example",paraId:9,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelOffsetX",paraId:6,tocIndex:4},{value:"Label x-axis offset",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelOffsetY",paraId:6,tocIndex:4},{value:"Label y-axis offset",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelMaxWidth",paraId:6,tocIndex:4},{value:"Maximum width of the text, automatically ellipsized if exceeded",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"maxRoutingIterations",paraId:6,tocIndex:4},{value:"Maximum number of iterations for calculating paths between members",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"100",paraId:6,tocIndex:4},{value:"maxMarchingIterations",paraId:6,tocIndex:4},{value:"Maximum number of iterations for calculating contours",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"20",paraId:6,tocIndex:4},{value:"pixelGroup",paraId:6,tocIndex:4},{value:"Number of pixels per potential area group, used to improve speed",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"4",paraId:6,tocIndex:4},{value:"edgeR0",paraId:6,tocIndex:4},{value:"Edge radius parameter R0",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"edgeR1",paraId:6,tocIndex:4},{value:"Edge radius parameter R1",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nodeR0",paraId:6,tocIndex:4},{value:"Node radius parameter R0",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nodeR1",paraId:6,tocIndex:4},{value:"Node radius parameter R1",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"morphBuffer",paraId:6,tocIndex:4},{value:"Morph buffer size",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"threshold",paraId:6,tocIndex:4},{value:"Threshold",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"memberInfluenceFactor",paraId:6,tocIndex:4},{value:"Member influence factor",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"edgeInfluenceFactor",paraId:6,tocIndex:4},{value:"Edge influence factor",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nonMemberInfluenceFactor",paraId:6,tocIndex:4},{value:"Non-member influence factor",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"virtualEdges",paraId:6,tocIndex:4},{value:"Whether to use virtual edges",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"Member elements, including nodes and edges.",paraId:10,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2'],\n    },\n  ],\n});\n",paraId:11,tocIndex:5},{value:"The effect is as follows:",paraId:12,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'bubble-sets',\n      key: 'bubble-sets-a',\n      members: ['node-0', 'node-1', 'node-2'],\n    },\n  ],\n});\n\ngraph.render();\n",paraId:13,tocIndex:5},{value:"Example: Do not let the label stick to the contour",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelText: 'cluster-a',\n      labelCloseToPath: false,\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"The effect is as follows:",paraId:16,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelText: 'cluster-a',\n      labelCloseToPath: false,\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:17,tocIndex:6},{value:"Example: Do not let the label rotate with the contour",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelText: 'cluster-a',\n      labelAutoRotate: false,\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"The effect is as follows:",paraId:20,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelText: 'cluster-a',\n      labelAutoRotate: false,\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:21,tocIndex:7},{value:"The simplest way is to use the preset configuration directly:",paraId:22,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n    },\n  ],\n});\n",paraId:23,tocIndex:9},{value:"The effect is as follows:",paraId:24,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'bubble-sets',\n      key: 'bubble-sets-a',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n    },\n  ],\n});\n\ngraph.render();\n",paraId:25,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      fill: '#7e3feb', // Bubble fill color\n      fillOpacity: 0.1, // Fill opacity\n      stroke: '#7e3feb', // Border color\n      strokeOpacity: 1, // Border opacity\n    },\n  ],\n});\n",paraId:26,tocIndex:10},{value:"The effect is as follows:",paraId:27,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      fill: '#7e3feb', // Bubble fill color\n      fillOpacity: 0.1, // Fill opacity\n      stroke: '#7e3feb', // Border color\n      strokeOpacity: 1, // Border opacity\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:28,tocIndex:10},{value:"You can configure the position, background, offset, and other properties of the label to enhance the visualization effect.",paraId:29,tocIndex:11},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelPlacement: 'top', // Label position\n      labelBackground: true, // Display label background\n      labelPadding: 5, // Label padding\n    },\n  ],\n});\n",paraId:30,tocIndex:11},{value:"The effect is as follows:",paraId:31,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // Display label\n      labelText: 'cluster-a',\n      labelPlacement: 'top', // Label position\n      labelBackground: true, // Display label background\n      labelPadding: 5, // Label padding\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:32,tocIndex:11}]},56236:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(2877);const t=[{value:"The context menu, also known as the right-click menu, is a menu that appears when a user clicks on a specific area. It supports triggering custom events before and after clicking. Through the context menu, specific element operations can be integrated, making it convenient to control a particular item when needed.",paraId:0,tocIndex:0},{value:"This plugin is mainly used for:",paraId:1,tocIndex:1},{value:"Various interactions with elements: viewing nodes, viewing edges, deleting nodes, etc.",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the Contextmenu plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'contextmenu',\n      // Enable right-click menu only on nodes, by default all elements are enabled\n      enable: (e) => e.targetType === 'node',\n      getItems: () => {\n        return [{ name: 'View Details', value: 'detail' }];\n      },\n      onClick: (value) => {\n        if (value === 'detail') console.log('Display node details');\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"Property",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:"Type",paraId:5,tocIndex:3},{value:"Default Value",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:"className",paraId:5,tocIndex:3},{value:"Additional class name for the menu DOM",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"g6-contextmenu",paraId:5,tocIndex:3},{value:"trigger",paraId:5,tocIndex:3},{value:"How to trigger the right-click menu: ",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:" for right-click, ",paraId:5,tocIndex:3},{value:"click",paraId:5,tocIndex:3},{value:" for click",paraId:5,tocIndex:3},{value:"click",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:"offset",paraId:5,tocIndex:3},{value:"Offset of the menu display in X and Y directions",paraId:5,tocIndex:3},{value:"[number, number]",paraId:5,tocIndex:3},{value:"[4, 4]",paraId:5,tocIndex:3},{value:"onClick",paraId:5,tocIndex:3},{value:"Callback method triggered after the menu is clicked, ",paraId:5,tocIndex:3},{value:"example",paraId:6,tocIndex:3},{value:"(value: string, target: HTMLElement, current: Element) => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:"Returns the list of menu items, supports ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:" type return value. It is a shortcut configuration for ",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:"(event: IElementEvent) => ",paraId:5,tocIndex:3},{value:"Item",paraId:7,tocIndex:3},{value:"[] | Promise<",paraId:5,tocIndex:3},{value:"Item",paraId:8,tocIndex:3},{value:"[]>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:"Returns the content of the menu, supports ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:" type return value, can also use ",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:" for shortcut configuration",paraId:5,tocIndex:3},{value:"(event: IElementEvent) => HTMLElement | string | Promise<HTMLElement | string>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"loadingContent",paraId:5,tocIndex:3},{value:"Menu content used when ",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:" returns a ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:"HTMLElement | string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"enable",paraId:5,tocIndex:3},{value:"Whether it is available, determines whether the right-click menu is supported by parameters, by default all are available",paraId:5,tocIndex:3},{value:"boolean | (event: IElementEvent) => boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"Each menu item (Item) contains the following properties:",paraId:9,tocIndex:4},{value:"Property",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"name",paraId:10,tocIndex:4},{value:"Name displayed for the menu item",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:"Value corresponding to the menu item",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"This function is triggered after clicking a menu item, and the function has three parameters:",paraId:11,tocIndex:5},{value:"value: Corresponds to the value of the menu item",paraId:12,tocIndex:5},{value:"target: The DOM node of the menu item container",paraId:12,tocIndex:5},{value:"current: The element that triggered the menu item, for example, if it is a node, you can use ",paraId:12,tocIndex:5},{value:"current",paraId:12,tocIndex:5},{value:" to get the node information (id), or to modify the element",paraId:12,tocIndex:5},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu', // 'click' or 'contextmenu'\n      onClick: (value, target, current) => {\n        alert('You have clicked the「' + value + '」item');\n      },\n      getItems: () => {\n        return [\n          { name: 'View Details', value: 'detail' },\n          { name: 'Delete', value: 'delete' },\n        ];\n      },\n    },\n  ],\n});\n",paraId:13,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: () => {\n        return [{ name: 'Change Start Point', value: 'change' }];\n      },\n      onClick: (value) => {\n        if (value === 'change') console.log('Execute change start point operation here');\n      },\n      // Enable right-click menu only on edges\n      enable: (e) => e.targetType === 'edge',\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: async () => {\n        // Toolbar configuration can be obtained from the server or other asynchronous sources\n        const response = await fetch('/api/contextmenu-config');\n        const items = await response.json();\n        return items;\n      },\n      // Enable right-click menu only on nodes\n      enable: (e) => e.targetType === 'node',\n    },\n  ],\n});\n",paraId:15,tocIndex:9},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: (e) => {\n        if (e.target.id === 'node-1') {\n          return [\n            {\n              name: 'Delete Node',\n              value: 'delete',\n            },\n          ];\n        }\n        if (e.target.type === 'edge') {\n          return [\n            {\n              name: 'Move Edge',\n              value: 'move',\n            },\n          ];\n        }\n        return [];\n      },\n    },\n  ],\n});\n",paraId:16,tocIndex:10}]},79168:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(3944);const t=[{value:"Edge bundling is a graph visualization technique used to reduce visual clutter in complex network graphs and to reveal high-level patterns and structures in the graph. Its purpose is to bundle adjacent edges together.",paraId:0,tocIndex:0},{value:"The edge bundling plugin provided in G6 is based on the implementation of the ",paraId:1,tocIndex:0},{value:"FEDB (Force-Directed Edge Bundling for Graph Visualization)",paraId:1,tocIndex:0},{value:" paper: modeling edges as flexible springs that can attract each other and bundling them through a self-organizing process.",paraId:1,tocIndex:0},{value:"The edge bundling plugin is mainly suitable for the following scenarios:",paraId:2,tocIndex:1},{value:"Reducing visual clutter in complex network graphs",paraId:3,tocIndex:1},{value:"Revealing high-level patterns and structures in the graph",paraId:3,tocIndex:1},{value:"Improving the readability and aesthetics of large-scale graph data",paraId:3,tocIndex:1},{value:"Below is a simple example of initializing the EdgeBundling plugin:",paraId:4,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.6,\n      cycles: 6,\n      divisions: 3,\n      divRate: 2,\n      iterations: 90,\n      iterRate: 2 / 3,\n      K: 0.1,\n      lambda: 0.1,\n    },\n  ],\n});\n",paraId:5,tocIndex:2},{value:"Property",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:"Type",paraId:6,tocIndex:3},{value:"Default Value",paraId:6,tocIndex:3},{value:"Required",paraId:6,tocIndex:3},{value:"type",paraId:6,tocIndex:3},{value:"Plugin type, used to identify the plugin as an edge bundling plugin",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"edge-bundling",paraId:6,tocIndex:3},{value:"✓",paraId:6,tocIndex:3},{value:"key",paraId:6,tocIndex:3},{value:"Unique identifier for the plugin, can be used to get the plugin instance or update plugin options",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"bundleThreshold",paraId:6,tocIndex:3},{value:"Edge compatibility threshold, determines which edges should be bundled together, the larger the value, the fewer edges are bundled, ",paraId:6,tocIndex:3},{value:"example",paraId:7,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.6",paraId:6,tocIndex:3},{value:"cycles",paraId:6,tocIndex:3},{value:"Number of simulation cycles, controls the number of execution rounds of the edge bundling simulation",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"6",paraId:6,tocIndex:3},{value:"divisions",paraId:6,tocIndex:3},{value:"Initial number of cut points, in subsequent cycles, the number of cut points will gradually increase according to divRate, affecting the degree of edge subdivision",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"1",paraId:6,tocIndex:3},{value:"divRate",paraId:6,tocIndex:3},{value:"Growth rate of cut points, determines the growth rate of cut points in each cycle",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"2",paraId:6,tocIndex:3},{value:"iterations",paraId:6,tocIndex:3},{value:"Specifies the number of iterations executed in the first cycle, in subsequent cycles, the number of iterations will gradually decrease according to iterRate, affecting the accuracy of the simulation",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"90",paraId:6,tocIndex:3},{value:"iterRate",paraId:6,tocIndex:3},{value:"Iteration decrement rate, controls the reduction ratio of iterations in each cycle",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"2/3",paraId:6,tocIndex:3},{value:"K",paraId:6,tocIndex:3},{value:"Edge strength, affects the attraction and repulsion between edges, ",paraId:6,tocIndex:3},{value:"example",paraId:8,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.1",paraId:6,tocIndex:3},{value:"lambda",paraId:6,tocIndex:3},{value:"Initial step size, in subsequent cycles, the step size will double increment, affecting the magnitude of node movement during edge bundling",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.1",paraId:6,tocIndex:3},{value:"Edge compatibility threshold, determines which edges should be bundled together. The larger the value, the fewer edges are bundled, and vice versa.",paraId:9,tocIndex:4},{value:"A lower bundleThreshold value (e.g., 0.4) will cause more edges to be bundled together, forming a more pronounced bundling effect.",paraId:10,tocIndex:4},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.4, // Lower edge compatibility threshold\n    },\n  ],\n});\n",paraId:11,tocIndex:4},{value:"The effect is as follows:\n",paraId:12,tocIndex:4},{value:"A higher bundleThreshold value (e.g., 0.8) will cause fewer edges to be bundled together, maintaining more independent edges.",paraId:13,tocIndex:4},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.8, // Higher edge compatibility threshold\n    },\n  ],\n});\n",paraId:14,tocIndex:4},{value:"The effect is as follows:\n",paraId:15,tocIndex:4},{value:"Edge strength, affects the attraction and repulsion between edges. A higher K value will make the attraction between edges stronger, resulting in a tighter bundling effect.",paraId:16,tocIndex:5},{value:"A lower K value (e.g., 0.05) will make the attraction between edges weaker, resulting in a weaker bundling effect.",paraId:17,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      K: 0.05, // Lower edge strength\n    },\n  ],\n});\n",paraId:18,tocIndex:5},{value:"The effect is as follows:\n",paraId:19,tocIndex:5},{value:"A higher K value (e.g., 0.2) will make the attraction between edges stronger, resulting in a more pronounced bundling effect.",paraId:20,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      K: 0.2, // Higher edge strength\n    },\n  ],\n});\n",paraId:21,tocIndex:5},{value:"The effect is as follows:\n",paraId:22,tocIndex:5},{value:"The simplest way is to use the preset configuration directly:",paraId:23,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: ['edge-bundling'],\n});\n",paraId:24,tocIndex:7},{value:"You can customize the parameters of edge bundling as needed:",paraId:25,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.8, // Higher edge compatibility threshold\n      cycles: 8, // More simulation cycles\n      K: 0.2, // Stronger edge strength\n    },\n  ],\n});\n",paraId:26,tocIndex:8},{value:"Use the key identifier to dynamically update edge bundling properties at runtime:",paraId:27,tocIndex:9},{value:"// Initial configuration\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'edge-bundling',\n      key: 'my-edge-bundling',\n      bundleThreshold: 0.6,\n    },\n  ],\n});\n\n// Subsequent dynamic update\ngraph.updatePlugin({\n  key: 'my-edge-bundling',\n  bundleThreshold: 0.8, // Update edge compatibility threshold\n  cycles: 10, // Update number of simulation cycles\n});\n",paraId:28,tocIndex:9}]},79114:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(94114);const t=[{value:"The Edge Filter Lens plugin allows you to keep the edges of interest within the lens range, while other edges will not be displayed in that range. This is an important visualization exploration tool that can help users focus on edge relationships in specific areas.",paraId:0,tocIndex:0},{value:"Need to focus on viewing edge relationships in local areas",paraId:1,tocIndex:1},{value:"Highlight connections between specific nodes in complex networks",paraId:1,tocIndex:1},{value:"Below is a simple example of initializing the EdgeFilterLens plugin:",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      trigger: 'pointermove', // Follow mouse movement\n      r: 60, // Set lens radius\n      nodeType: 'both', // Edge display condition\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        // 上部疏散区域\n        { id: 'Myriel', style: { x: 207, y: 78, label: 'Myriel' } },\n        { id: 'Napoleon', style: { x: 127, y: 62, label: 'Napoleon' } },\n        { id: 'CountessdeLo', style: { x: 171, y: 47, label: 'CountessdeLo' } },\n        { id: 'Geborand', style: { x: 106, y: 81, label: 'Geborand' } },\n        { id: 'Champtercier', style: { x: 247, y: 58, label: 'Champtercier' } },\n        { id: 'Cravatte', style: { x: 152, y: 50, label: 'Cravatte' } },\n\n        // 中上部区域\n        { id: 'Mlle.Baptistine', style: { x: 205, y: 141, label: 'Mlle.Baptistine' } },\n        { id: 'Mme.Magloire', style: { x: 275, y: 120, label: 'Mme.Magloire' } },\n        { id: 'Labarre', style: { x: 246, y: 183, label: 'Labarre' } },\n        { id: 'Valjean', style: { x: 342, y: 221, label: 'Valjean' } },\n        { id: 'Marguerite', style: { x: 285, y: 171, label: 'Marguerite' } },\n\n        // 中部密集区域\n        { id: 'Tholomyes', style: { x: 379, y: 158, label: 'Tholomyes' } },\n        { id: 'Listolier', style: { x: 288, y: 80, label: 'Listolier' } },\n        { id: 'Fameuil', style: { x: 349, y: 89, label: 'Fameuil' } },\n        { id: 'Blacheville', style: { x: 381, y: 95, label: 'Blacheville' } },\n        { id: 'Favourite', style: { x: 264, y: 153, label: 'Favourite' } },\n        { id: 'Dahlia', style: { x: 323, y: 170, label: 'Dahlia' } },\n        { id: 'Zephine', style: { x: 306, y: 114, label: 'Zephine' } },\n        { id: 'Fantine', style: { x: 357, y: 187, label: 'Fantine' } },\n\n        // 右侧区域\n        { id: 'Bamatabois', style: { x: 411, y: 156, label: 'Bamatabois' } },\n        { id: 'Perpetue', style: { x: 454, y: 195, label: 'Perpetue' } },\n        { id: 'Simplice', style: { x: 406, y: 227, label: 'Simplice' } },\n\n        // 下部区域\n        { id: 'Cosette', style: { x: 343, y: 248, label: 'Cosette' } },\n        { id: 'Javert', style: { x: 388, y: 263, label: 'Javert' } },\n        { id: 'Fauchelevent', style: { x: 397, y: 276, label: 'Fauchelevent' } },\n        { id: 'Thenardier', style: { x: 317, y: 300, label: 'Thenardier' } },\n        { id: 'Eponine', style: { x: 268, y: 365, label: 'Eponine' } },\n        { id: 'Anzelma', style: { x: 234, y: 303, label: 'Anzelma' } },\n        { id: 'Woman2', style: { x: 304, y: 254, label: 'Woman2' } },\n\n        // 最右侧独立节点\n        { id: 'Gribier', style: { x: 457, y: 160, label: 'Gribier' } },\n        { id: 'Jondrette', style: { x: 510, y: 327, label: 'Jondrette' } },\n      ],\n      edges: [\n        // 上部连接\n        { id: 'e1', source: 'Myriel', target: 'CountessdeLo' },\n        { id: 'e2', source: 'Napoleon', target: 'Myriel' },\n        { id: 'e3', source: 'Geborand', target: 'Napoleon' },\n        { id: 'e4', source: 'Champtercier', target: 'Myriel' },\n        { id: 'e5', source: 'Cravatte', target: 'CountessdeLo' },\n\n        // 中上部连接\n        { id: 'e6', source: 'Mlle.Baptistine', target: 'Mme.Magloire' },\n        { id: 'e7', source: 'Labarre', target: 'Valjean' },\n        { id: 'e8', source: 'Valjean', target: 'Marguerite' },\n        { id: 'e9', source: 'Marguerite', target: 'Mme.Magloire' },\n\n        // 中部密集连接\n        { id: 'e10', source: 'Tholomyes', target: 'Listolier' },\n        { id: 'e11', source: 'Listolier', target: 'Fameuil' },\n        { id: 'e12', source: 'Fameuil', target: 'Blacheville' },\n        { id: 'e13', source: 'Blacheville', target: 'Favourite' },\n        { id: 'e14', source: 'Favourite', target: 'Dahlia' },\n        { id: 'e15', source: 'Dahlia', target: 'Zephine' },\n        { id: 'e16', source: 'Zephine', target: 'Fantine' },\n        { id: 'e17', source: 'Tholomyes', target: 'Fantine' },\n        { id: 'e18', source: 'Valjean', target: 'Fantine' },\n\n        // 右侧连接\n        { id: 'e19', source: 'Bamatabois', target: 'Perpetue' },\n        { id: 'e20', source: 'Perpetue', target: 'Simplice' },\n        { id: 'e21', source: 'Bamatabois', target: 'Gribier' },\n\n        // 下部连接\n        { id: 'e22', source: 'Valjean', target: 'Cosette' },\n        { id: 'e23', source: 'Cosette', target: 'Javert' },\n        { id: 'e24', source: 'Javert', target: 'Fauchelevent' },\n        { id: 'e25', source: 'Fauchelevent', target: 'Thenardier' },\n        { id: 'e26', source: 'Thenardier', target: 'Eponine' },\n        { id: 'e27', source: 'Eponine', target: 'Anzelma' },\n        { id: 'e28', source: 'Woman2', target: 'Cosette' },\n\n        // 跨区域连接\n        { id: 'e29', source: 'Fantine', target: 'Bamatabois' },\n        { id: 'e30', source: 'Javert', target: 'Bamatabois' },\n        { id: 'e31', source: 'Simplice', target: 'Jondrette' },\n        { id: 'e32', source: 'Thenardier', target: 'Jondrette' },\n        { id: 'e33', source: 'Favourite', target: 'Valjean' },\n        { id: 'e34', source: 'Tholomyes', target: 'Cosette' },\n      ],\n    },\n    node: {\n      style: {\n        label: true,\n        size: 16,\n      },\n      palette: {\n        field: (datum) => Math.floor(datum.style?.y / 60),\n      },\n    },\n    edge: {\n      style: {\n        label: true,\n        labelText: (d) => d.data.value?.toString(),\n        stroke: '#ccc',\n        endArrow: true,\n        endArrowType: 'triangle',\n      },\n    },\n    plugins: [\n      {\n        type: 'edge-filter-lens',\n        key: 'edge-filter-lens',\n        r: 80,\n        trigger: 'pointermove',\n      },\n    ],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const TRIGGER_TYPES = ['pointermove', 'click', 'drag'];\n    const NODE_TYPES = ['both', 'source', 'target', 'either'];\n\n    const options = {\n      type: 'edge-filter-lens',\n      r: 80, // 透镜半径\n      trigger: 'pointermove', // 触发方式\n      nodeType: 'both', // 边显示条件\n      minR: 50, // 最小半径\n      maxR: 150, // 最大半径\n      scaleRBy: 'wheel', // 缩放方式\n      style: {\n        fill: '#f0f5ff',\n        fillOpacity: 0.4,\n        stroke: '#1d39c4',\n        strokeOpacity: 0.8,\n        lineWidth: 1.5,\n      },\n      nodeStyle: {\n        size: 35,\n        fill: '#d6e4ff',\n        stroke: '#2f54eb',\n        lineWidth: 2,\n        labelFontSize: 14,\n        labelFontWeight: 'bold',\n        labelFill: '#1d39c4',\n      },\n      edgeStyle: {\n        stroke: '#1d39c4',\n        lineWidth: 2,\n        strokeOpacity: 0.8,\n      },\n    };\n\n    const optionFolder = gui.addFolder('Edge Filter Lens Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'r', 50, 150, 5);\n    optionFolder.add(options, 'trigger', TRIGGER_TYPES);\n    optionFolder.add(options, 'nodeType', NODE_TYPES);\n    optionFolder.add(options, 'minR', 20, 100, 5);\n    optionFolder.add(options, 'maxR', 100, 200, 5);\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property.includes('.')) {\n        const [group, prop] = property.split('.');\n        graph.updatePlugin({\n          key: 'edge-filter-lens',\n          [group]: {\n            ...options[group],\n            [prop]: value,\n          },\n        });\n      } else {\n        graph.updatePlugin({\n          key: 'edge-filter-lens',\n          [property]: value,\n        });\n      }\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default Value",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Plugin type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"edge-filter-lens",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"Unique identifier for the plugin, can be used to get the plugin instance or update plugin options",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"trigger",paraId:5,tocIndex:4},{value:"Method to move the lens:",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:": The lens always follows the mouse movement ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:": Move the lens to the click position when clicking on the canvas ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:": Move the lens by dragging",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"r",paraId:5,tocIndex:4},{value:"Radius of the lens",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"60",paraId:5,tocIndex:4},{value:"maxR",paraId:5,tocIndex:4},{value:"Maximum radius of the lens",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"Half of the smaller dimension of the canvas",paraId:5,tocIndex:4},{value:"minR",paraId:5,tocIndex:4},{value:"Minimum radius of the lens",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"scaleRBy",paraId:5,tocIndex:4},{value:"Method to scale the lens radius: ",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:": Scale the lens radius by the wheel",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"nodeType",paraId:5,tocIndex:4},{value:"Edge display condition:",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:": The edge is displayed only when both the source and target nodes are in the lens ",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"source",paraId:5,tocIndex:4},{value:": The edge is displayed only when the source node is in the lens",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"target",paraId:5,tocIndex:4},{value:": The edge is displayed only when the target node is in the lens ",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"either",paraId:5,tocIndex:4},{value:": The edge is displayed as long as either the source or target node is in the lens",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"source",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"target",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"either",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:"filter",paraId:5,tocIndex:4},{value:"Filter out elements that are never displayed in the lens",paraId:5,tocIndex:4},{value:"(id: string, elementType: ",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"edge",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"combo",paraId:5,tocIndex:4},{value:") => boolean",paraId:5,tocIndex:4},{value:"() => true",paraId:5,tocIndex:4},{value:"style",paraId:5,tocIndex:4},{value:"Style of the lens, ",paraId:5,tocIndex:4},{value:"configuration options",paraId:6,tocIndex:4},{value:"object",paraId:5,tocIndex:4},{value:"nodeStyle",paraId:5,tocIndex:4},{value:"Style of nodes in the lens",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:7,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"NodeData",paraId:8,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:9,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: false }",paraId:5,tocIndex:4},{value:"edgeStyle",paraId:5,tocIndex:4},{value:"Style of edges in the lens",paraId:5,tocIndex:4},{value:"EdgeStyle",paraId:10,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"EdgeData",paraId:11,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"EdgeStyle",paraId:12,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: true }",paraId:5,tocIndex:4},{value:"preventDefault",paraId:5,tocIndex:4},{value:"Whether to prevent default events",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"Style properties of the circular lens.",paraId:13,tocIndex:5},{value:"Property",paraId:14,tocIndex:5},{value:"Description",paraId:14,tocIndex:5},{value:"Type",paraId:14,tocIndex:5},{value:"Default Value",paraId:14,tocIndex:5},{value:"fill",paraId:14,tocIndex:5},{value:"Fill color",paraId:14,tocIndex:5},{value:"string | Pattern | null",paraId:14,tocIndex:5},{value:"#fff",paraId:14,tocIndex:5},{value:"stroke",paraId:14,tocIndex:5},{value:"Stroke color",paraId:14,tocIndex:5},{value:"string | Pattern | null",paraId:14,tocIndex:5},{value:"#000",paraId:14,tocIndex:5},{value:"opacity",paraId:14,tocIndex:5},{value:"Overall opacity",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"1",paraId:14,tocIndex:5},{value:"fillOpacity",paraId:14,tocIndex:5},{value:"Fill opacity",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"0.8",paraId:14,tocIndex:5},{value:"strokeOpacity",paraId:14,tocIndex:5},{value:"Stroke opacity",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"lineWidth",paraId:14,tocIndex:5},{value:"Line width",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"2",paraId:14,tocIndex:5},{value:"lineCap",paraId:14,tocIndex:5},{value:"Line cap style",paraId:14,tocIndex:5},{value:"butt",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"round",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"square",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"lineJoin",paraId:14,tocIndex:5},{value:"Line join style",paraId:14,tocIndex:5},{value:"miter",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"round",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"bevel",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowColor",paraId:14,tocIndex:5},{value:"Shadow color",paraId:14,tocIndex:5},{value:"string",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowBlur",paraId:14,tocIndex:5},{value:"Shadow blur degree",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowOffsetX",paraId:14,tocIndex:5},{value:"Shadow X offset",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowOffsetY",paraId:14,tocIndex:5},{value:"Shadow Y offset",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"For complete style properties, refer to ",paraId:15,tocIndex:5},{value:"Element - Node - Built-in Node - General Style Properties - style",paraId:16,tocIndex:5},{value:"The simplest configuration method:",paraId:17,tocIndex:7},{value:"const graph = new Graph({\n  plugins: ['edge-filter-lens'],\n});\n",paraId:18,tocIndex:7},{value:"The effect is as follows:",paraId:19,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      // Upper evacuation area\n      { id: 'node1', style: { x: 150, y: 60, label: 'Node 1' } },\n      { id: 'node2', style: { x: 100, y: 40, label: 'Node 2' } },\n      { id: 'node3', style: { x: 200, y: 35, label: 'Node 3' } },\n      { id: 'node4', style: { x: 150, y: 30, label: 'Node 4' } },\n\n      // Middle area\n      { id: 'node5', style: { x: 220, y: 140, label: 'Node 5' } },\n      { id: 'node6', style: { x: 280, y: 160, label: 'Node 6' } },\n      { id: 'node7', style: { x: 220, y: 120, label: 'Node 7' } },\n      { id: 'node8', style: { x: 260, y: 100, label: 'Node 8' } },\n      { id: 'node9', style: { x: 240, y: 130, label: 'Node 9' } },\n      { id: 'node10', style: { x: 300, y: 110, label: 'Node 10' } },\n\n      // Lower area\n      { id: 'node11', style: { x: 240, y: 200, label: 'Node 11' } },\n      { id: 'node12', style: { x: 280, y: 220, label: 'Node 12' } },\n      { id: 'node13', style: { x: 300, y: 190, label: 'Node 13' } },\n      { id: 'node14', style: { x: 320, y: 210, label: 'Node 14' } },\n    ],\n    edges: [\n      // Upper connections\n      { id: 'edge1', source: 'node1', target: 'node2' },\n      { id: 'edge2', source: 'node2', target: 'node3' },\n      { id: 'edge3', source: 'node3', target: 'node4' },\n\n      // Middle connections\n      { id: 'edge4', source: 'node5', target: 'node6' },\n      { id: 'edge5', source: 'node6', target: 'node7' },\n      { id: 'edge6', source: 'node7', target: 'node8' },\n      { id: 'edge7', source: 'node8', target: 'node9' },\n      { id: 'edge8', source: 'node9', target: 'node10' },\n\n      // Lower connections\n      { id: 'edge9', source: 'node11', target: 'node12' },\n      { id: 'edge10', source: 'node12', target: 'node13' },\n      { id: 'edge11', source: 'node13', target: 'node14' },\n\n      // Cross-region connections\n      { id: 'edge12', source: 'node4', target: 'node8' },\n      { id: 'edge13', source: 'node7', target: 'node11' },\n      { id: 'edge14', source: 'node10', target: 'node13' },\n    ],\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n  },\n  plugins: ['edge-filter-lens'],\n});\n\ngraph.render();\n",paraId:20,tocIndex:7},{value:"You can customize the appearance and behavior of the lens:",paraId:21,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      r: 80,\n      style: {\n        fill: '#f0f5ff', // Fill color of the lens area\n        fillOpacity: 0.6, // Opacity of the fill area\n        stroke: '#7e3feb', // Change lens border to purple\n        strokeOpacity: 0.8, // Opacity of the border\n        lineWidth: 1.5, // Line width of the border\n      },\n      nodeStyle: {\n        size: 24, // Enlarge nodes\n        fill: '#7e3feb', // Purple fill\n        stroke: '#5719c9', // Dark purple stroke\n        lineWidth: 1, // Thin border\n        label: true, // Show label\n        labelFill: '#ffffff', // White text\n        labelFontSize: 14, // Enlarge text\n        labelFontWeight: 'bold', // Bold text\n      },\n      edgeStyle: {\n        stroke: '#8b9baf', // Gray edge\n        lineWidth: 2, // Thicken edge line\n        label: true, // Show label\n        labelFill: '#5719c9', // Dark purple text\n        opacity: 0.8, // Appropriate opacity\n      },\n    },\n  ],\n});\n",paraId:22,tocIndex:8},{value:"The effect is as follows:",paraId:23,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      // Upper evacuation area\n      { id: 'node1', style: { x: 150, y: 60, label: 'Node 1' } },\n      { id: 'node2', style: { x: 100, y: 40, label: 'Node 2' } },\n      { id: 'node3', style: { x: 200, y: 35, label: 'Node 3' } },\n      { id: 'node4', style: { x: 150, y: 30, label: 'Node 4' } },\n\n      // Middle area\n      { id: 'node5', style: { x: 220, y: 140, label: 'Node 5' } },\n      { id: 'node6', style: { x: 280, y: 160, label: 'Node 6' } },\n      { id: 'node7', style: { x: 220, y: 120, label: 'Node 7' } },\n      { id: 'node8', style: { x: 260, y: 100, label: 'Node 8' } },\n      { id: 'node9', style: { x: 240, y: 130, label: 'Node 9' } },\n      { id: 'node10', style: { x: 300, y: 110, label: 'Node 10' } },\n\n      // Lower area\n      { id: 'node11', style: { x: 240, y: 200, label: 'Node 11' } },\n      { id: 'node12', style: { x: 280, y: 220, label: 'Node 12' } },\n      { id: 'node13', style: { x: 300, y: 190, label: 'Node 13' } },\n      { id: 'node14', style: { x: 320, y: 210, label: 'Node 14' } },\n    ],\n    edges: [\n      // Upper connections\n      { id: 'edge1', source: 'node1', target: 'node2' },\n      { id: 'edge2', source: 'node2', target: 'node3' },\n      { id: 'edge3', source: 'node3', target: 'node4' },\n\n      // Middle connections\n      { id: 'edge4', source: 'node5', target: 'node6' },\n      { id: 'edge5', source: 'node6', target: 'node7' },\n      { id: 'edge6', source: 'node7', target: 'node8' },\n      { id: 'edge7', source: 'node8', target: 'node9' },\n      { id: 'edge8', source: 'node9', target: 'node10' },\n\n      // Lower connections\n      { id: 'edge9', source: 'node11', target: 'node12' },\n      { id: 'edge10', source: 'node12', target: 'node13' },\n      { id: 'edge11', source: 'node13', target: 'node14' },\n\n      // Cross-region connections\n      { id: 'edge12', source: 'node4', target: 'node8' },\n      { id: 'edge13', source: 'node7', target: 'node11' },\n      { id: 'edge14', source: 'node10', target: 'node13' },\n    ],\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 1,\n    },\n  },\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      r: 80,\n      style: {\n        fill: '#f0f5ff', // Fill color of the lens area\n        fillOpacity: 0.6, // Opacity of the fill area\n        stroke: '#7e3feb', // Change lens border to purple\n        strokeOpacity: 0.8, // Opacity of the border\n        lineWidth: 1.5, // Line width of the border\n      },\n      nodeStyle: {\n        size: 24, // Enlarge nodes\n        fill: '#7e3feb', // Purple fill\n        stroke: '#5719c9', // Dark purple stroke\n        lineWidth: 1, // Thin border\n        label: true, // Show label\n        labelFill: '#ffffff', // White text\n        labelFontSize: 14, // Enlarge text\n        labelFontWeight: 'bold', // Bold text\n      },\n      edgeStyle: {\n        stroke: '#8b9baf', // Gray edge\n        lineWidth: 2, // Thicken edge line\n        label: true, // Show label\n        labelFill: '#5719c9', // Dark purple text\n        opacity: 0.8, // Appropriate opacity\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:24,tocIndex:8},{value:"Edge Filter Lens",paraId:25,tocIndex:9}]},63995:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78355);const t=[{value:"The Fisheye plugin is designed for focus+context exploration scenarios. It can magnify the area of interest while ensuring that the context and the relationship between the context and the focus center are not lost. It is an important visualization exploration tool.",paraId:0,tocIndex:0},{value:"Highlight certain areas during presentations",paraId:1,tocIndex:1},{value:"Magnify details locally without losing the overall view",paraId:1,tocIndex:1},{value:"Below is a simple example of initializing the Fisheye plugin:",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      trigger: 'drag', // Move fisheye by dragging\n      d: 1.5, // Set distortion factor\n      r: 120, // Set fisheye radius\n      showDPercent: true, // Show distortion degree\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        // 上部节点\n        { id: 'Myriel', style: { x: 197, y: 58 } },\n        { id: 'Napoleon', style: { x: 147, y: 22 } },\n        { id: 'Mlle.Baptistine', style: { x: 225, y: 141 } },\n        { id: 'Mme.Magloire', style: { x: 255, y: 120 } },\n        { id: 'CountessdeLo', style: { x: 151, y: -3 } },\n        { id: 'Geborand', style: { x: 136, y: 41 } },\n        { id: 'Champtercier', style: { x: 227, y: 8 } },\n        { id: 'Cravatte', style: { x: 172, y: -10 } },\n        { id: 'Count', style: { x: 172, y: 12 } },\n        { id: 'OldMan', style: { x: 198, y: -6 } },\n        // 中上部节点\n        { id: 'Labarre', style: { x: 266, y: 203 } },\n        { id: 'Marguerite', style: { x: 265, y: 171 } },\n        { id: 'Mme.deR', style: { x: 299, y: 133 } },\n        { id: 'Isabeau', style: { x: 282, y: 191 } },\n        { id: 'Gervais', style: { x: 334, y: 148 } },\n        { id: 'Simplice', style: { x: 286, y: 227 } },\n        { id: 'Scaufflaire', style: { x: 250, y: 231 } },\n        { id: 'Woman1', style: { x: 375, y: 202 } },\n        { id: 'Judge', style: { x: 370, y: 139 } },\n        { id: 'Champmathieu', style: { x: 404, y: 216 } },\n        // 中部主要节点\n        { id: 'Valjean', style: { x: 322, y: 221 } },\n        { id: 'Fantine', style: { x: 337, y: 187 } },\n        { id: 'Cosette', style: { x: 343, y: 248 } },\n        { id: 'Javert', style: { x: 368, y: 263 } },\n        { id: 'Thenardier', style: { x: 317, y: 300 } },\n        { id: 'Mme.Thenardier', style: { x: 283, y: 267 } },\n        { id: 'Eponine', style: { x: 268, y: 365 } },\n        { id: 'Gavroche', style: { x: 393, y: 380 } },\n        { id: 'Marius', style: { x: 336, y: 350 } },\n        { id: 'Enjolras', style: { x: 376, y: 371 } },\n        // 右侧和右上节点\n        { id: 'Gribier', style: { x: 437, y: 160 } },\n        { id: 'Jondrette', style: { x: 510, y: 327 } },\n        { id: 'Mme.Burgon', style: { x: 466, y: 368 } },\n        { id: 'Brevet', style: { x: 399, y: 183 } },\n        { id: 'Chenildieu', style: { x: 425, y: 194 } },\n        { id: 'Cochepaille', style: { x: 419, y: 148 } },\n        { id: 'Child1', style: { x: 361, y: 387 } },\n        { id: 'Child2', style: { x: 415, y: 432 } },\n        { id: 'Brujon', style: { x: 330, y: 394 } },\n        { id: 'Mme.Hucheloup', style: { x: 394, y: 450 } },\n        // 中部其他节点\n        { id: 'Favourite', style: { x: 284, y: 153 } },\n        { id: 'Dahlia', style: { x: 303, y: 170 } },\n        { id: 'Zephine', style: { x: 286, y: 94 } },\n        { id: 'Tholomyes', style: { x: 359, y: 158 } },\n        { id: 'Listolier', style: { x: 308, y: 80 } },\n        { id: 'Fameuil', style: { x: 329, y: 89 } },\n        { id: 'Blacheville', style: { x: 351, y: 95 } },\n        { id: 'Perpetue', style: { x: 234, y: 195 } },\n        { id: 'Woman2', style: { x: 304, y: 254 } },\n        { id: 'MotherInnocent', style: { x: 350, y: 214 } },\n        // 下部节点\n        { id: 'Pontmercy', style: { x: 375, y: 307 } },\n        { id: 'Boulatruelle', style: { x: 260, y: 279 } },\n        { id: 'Anzelma', style: { x: 234, y: 303 } },\n        { id: 'Gillenormand', style: { x: 338, y: 286 } },\n        { id: 'Magnon', style: { x: 277, y: 317 } },\n        { id: 'Mlle.Gillenormand', style: { x: 257, y: 306 } },\n        { id: 'Mme.Pontmercy', style: { x: 307, y: 318 } },\n        { id: 'Mlle.Vaubois', style: { x: 197, y: 325 } },\n        { id: 'Lt.Gillenormand', style: { x: 294, y: 296 } },\n        { id: 'Toussaint', style: { x: 306, y: 277 } },\n        { id: 'Gueulemer', style: { x: 344, y: 323 } },\n        { id: 'Babet', style: { x: 367, y: 319 } },\n        { id: 'Claquesous', style: { x: 303, y: 347 } },\n        { id: 'Montparnasse', style: { x: 322, y: 330 } },\n        // 最下部节点\n        { id: 'Combeferre', style: { x: 397, y: 416 } },\n        { id: 'Prouvaire', style: { x: 309, y: 426 } },\n        { id: 'Feuilly', style: { x: 314, y: 456 } },\n        { id: 'Courfeyrac', style: { x: 332, y: 435 } },\n        { id: 'Bahorel', style: { x: 343, y: 466 } },\n        { id: 'Bossuet', style: { x: 305, y: 382 } },\n        { id: 'Joly', style: { x: 371, y: 415 } },\n        { id: 'Grantaire', style: { x: 370, y: 466 } },\n        { id: 'MotherPlutarch', style: { x: 424, y: 461 } },\n      ],\n      edges: [\n        // 主要连接\n        { id: 'e1', source: 'Valjean', target: 'Javert' },\n        { id: 'e2', source: 'Valjean', target: 'Cosette' },\n        { id: 'e3', source: 'Javert', target: 'Thenardier' },\n        { id: 'e4', source: 'Cosette', target: 'Marius' },\n        { id: 'e5', source: 'Eponine', target: 'Marius' },\n        { id: 'e6', source: 'Enjolras', target: 'Marius' },\n        { id: 'e7', source: 'Gavroche', target: 'Enjolras' },\n        { id: 'e8', source: 'Valjean', target: 'Fantine' },\n        { id: 'e9', source: 'Cosette', target: 'Thenardier' },\n        { id: 'e10', source: 'Eponine', target: 'Thenardier' },\n        // 上部连接\n        { id: 'e11', source: 'Myriel', target: 'Napoleon' },\n        { id: 'e12', source: 'Myriel', target: 'Mlle.Baptistine' },\n        { id: 'e13', source: 'Mlle.Baptistine', target: 'Mme.Magloire' },\n        { id: 'e14', source: 'CountessdeLo', target: 'Myriel' },\n        { id: 'e15', source: 'Geborand', target: 'Myriel' },\n        // 中部连接\n        { id: 'e16', source: 'Favourite', target: 'Tholomyes' },\n        { id: 'e17', source: 'Dahlia', target: 'Favourite' },\n        { id: 'e18', source: 'Zephine', target: 'Favourite' },\n        { id: 'e19', source: 'Tholomyes', target: 'Listolier' },\n        { id: 'e20', source: 'Fameuil', target: 'Blacheville' },\n        // 下部连接\n        { id: 'e21', source: 'Combeferre', target: 'Enjolras' },\n        { id: 'e22', source: 'Prouvaire', target: 'Combeferre' },\n        { id: 'e23', source: 'Feuilly', target: 'Courfeyrac' },\n        { id: 'e24', source: 'Bahorel', target: 'Bossuet' },\n        { id: 'e25', source: 'Joly', target: 'Grantaire' },\n        // 额外的中部连接\n        { id: 'e26', source: 'Gueulemer', target: 'Thenardier' },\n        { id: 'e27', source: 'Babet', target: 'Gueulemer' },\n        { id: 'e28', source: 'Claquesous', target: 'Montparnasse' },\n        { id: 'e29', source: 'Brujon', target: 'Babet' },\n        { id: 'e30', source: 'Child1', target: 'Gavroche' },\n        // 新增更多连接\n        { id: 'e31', source: 'Valjean', target: 'Simplice' },\n        { id: 'e32', source: 'Fantine', target: 'Simplice' },\n        { id: 'e33', source: 'Javert', target: 'Simplice' },\n        { id: 'e34', source: 'Marius', target: 'Gillenormand' },\n        { id: 'e35', source: 'Cosette', target: 'Gillenormand' },\n        { id: 'e36', source: 'Marius', target: 'Lt.Gillenormand' },\n        { id: 'e37', source: 'Gillenormand', target: 'Lt.Gillenormand' },\n        { id: 'e38', source: 'Cosette', target: 'Toussaint' },\n        { id: 'e39', source: 'Javert', target: 'Toussaint' },\n        { id: 'e40', source: 'Valjean', target: 'Toussaint' },\n        // 随机添加更多连接\n        ...Array.from({ length: 50 }, (_, i) => ({\n          // 从40增加到50个随机连接\n          id: `edge-${i + 41}`,\n          source: [\n            'Valjean',\n            'Javert',\n            'Cosette',\n            'Marius',\n            'Enjolras',\n            'Fantine',\n            'Thenardier',\n            'Eponine',\n            'Gavroche',\n            'Gueulemer',\n            'Babet',\n            'Claquesous',\n            'Favourite',\n            'Tholomyes',\n            'Simplice',\n          ][Math.floor(Math.random() * 15)],\n          target: [\n            'Favourite',\n            'Dahlia',\n            'Tholomyes',\n            'Combeferre',\n            'Prouvaire',\n            'Feuilly',\n            'Courfeyrac',\n            'Bahorel',\n            'Bossuet',\n            'Montparnasse',\n            'Brujon',\n            'Child1',\n            'Simplice',\n            'Toussaint',\n            'Gillenormand',\n          ][Math.floor(Math.random() * 15)],\n        })),\n      ],\n    },\n    autoFit: 'view',\n    node: {\n      style: {\n        size: (datum) => datum.id.length * 2 + 10,\n        label: false,\n        labelText: (datum) => datum.id,\n        labelBackground: true,\n        icon: false,\n        iconFontFamily: 'iconfont',\n        iconText: '\\ue6f6',\n        iconFill: '#fff',\n      },\n      palette: {\n        type: 'group',\n        field: (datum) => datum.id,\n        color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#bfbfbf',\n      },\n    },\n    behaviors: ['drag-canvas'],\n    plugins: [\n      {\n        type: 'fisheye',\n        key: 'fisheye',\n        r: 120,\n        d: 1.5,\n        nodeStyle: {\n          label: true,\n          icon: true,\n        },\n      },\n    ],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const TRIGGER_OPTIONS = ['pointermove', 'drag', 'click'];\n    const SCALE_OPTIONS = ['wheel', 'drag', '-'];\n\n    const options = {\n      type: 'fisheye',\n      trigger: 'pointermove',\n      r: 120,\n      d: 1.5,\n      maxR: 200,\n      minR: 50,\n      maxD: 5,\n      minD: 0.5,\n      scaleRBy: '-',\n      scaleDBy: '-',\n      showDPercent: true,\n      preventDefault: true,\n    };\n\n    const optionFolder = gui.addFolder('Fisheye Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'trigger', TRIGGER_OPTIONS);\n    optionFolder.add(options, 'r', 50, 200, 10);\n    optionFolder.add(options, 'd', 0.5, 5, 0.1);\n    optionFolder.add(options, 'scaleRBy', SCALE_OPTIONS);\n    optionFolder.add(options, 'scaleDBy', SCALE_OPTIONS);\n    optionFolder.add(options, 'showDPercent');\n    optionFolder.add(options, 'preventDefault');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'fisheye',\n        [property]: value === '-' ? undefined : value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default Value",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Plugin type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"fisheye",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"Unique identifier for the plugin, can be used to get the plugin instance or update plugin options",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"trigger",paraId:5,tocIndex:4},{value:"Method to move the fisheye:",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:": The fisheye always follows the mouse movement ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:": Move the fisheye to the click position when clicking on the canvas ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:": Move the fisheye by dragging",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"r",paraId:5,tocIndex:4},{value:"Radius of the fisheye",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"120",paraId:5,tocIndex:4},{value:"maxR",paraId:5,tocIndex:4},{value:"Maximum adjustable radius of the fisheye",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"Half of the smaller dimension of the canvas",paraId:5,tocIndex:4},{value:"minR",paraId:5,tocIndex:4},{value:"Minimum adjustable radius of the fisheye",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"d",paraId:5,tocIndex:4},{value:"Distortion factor",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"1.5",paraId:5,tocIndex:4},{value:"maxD",paraId:5,tocIndex:4},{value:"Maximum adjustable distortion factor of the fisheye",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"5",paraId:5,tocIndex:4},{value:"minD",paraId:5,tocIndex:4},{value:"Minimum adjustable distortion factor of the fisheye",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"scaleRBy",paraId:5,tocIndex:4},{value:"Method to adjust the fisheye radius:",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'wheel'",paraId:5,tocIndex:4},{value:": Adjust by wheel ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'drag'",paraId:5,tocIndex:4},{value:": Adjust by dragging",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"scaleDBy",paraId:5,tocIndex:4},{value:"Method to adjust the fisheye distortion factor:",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'wheel'",paraId:5,tocIndex:4},{value:": Adjust by wheel ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'drag'",paraId:5,tocIndex:4},{value:": Adjust by dragging",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"showDPercent",paraId:5,tocIndex:4},{value:"Whether to show the distortion factor value in the fisheye",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"style",paraId:5,tocIndex:4},{value:"Style of the fisheye, ",paraId:5,tocIndex:4},{value:"configuration options",paraId:6,tocIndex:4},{value:"object",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"nodeStyle",paraId:5,tocIndex:4},{value:"Style of nodes in the fisheye",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:7,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"NodeData",paraId:8,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:9,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: true }",paraId:5,tocIndex:4},{value:"preventDefault",paraId:5,tocIndex:4},{value:"Whether to prevent default events",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"Circular style properties for configuring the appearance of the fisheye.",paraId:10,tocIndex:5},{value:"Property",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"Type",paraId:11,tocIndex:5},{value:"Default Value",paraId:11,tocIndex:5},{value:"fill",paraId:11,tocIndex:5},{value:"Fill color",paraId:11,tocIndex:5},{value:"string | Pattern | null",paraId:11,tocIndex:5},{value:"#ccc",paraId:11,tocIndex:5},{value:"stroke",paraId:11,tocIndex:5},{value:"Stroke color",paraId:11,tocIndex:5},{value:"string | Pattern | null",paraId:11,tocIndex:5},{value:"#000",paraId:11,tocIndex:5},{value:"opacity",paraId:11,tocIndex:5},{value:"Overall opacity",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"fillOpacity",paraId:11,tocIndex:5},{value:"Fill opacity",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"0.1",paraId:11,tocIndex:5},{value:"strokeOpacity",paraId:11,tocIndex:5},{value:"Stroke opacity",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"lineWidth",paraId:11,tocIndex:5},{value:"Line width",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"lineCap",paraId:11,tocIndex:5},{value:"Line cap style",paraId:11,tocIndex:5},{value:"butt",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"round",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"square",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"lineJoin",paraId:11,tocIndex:5},{value:"Line join style",paraId:11,tocIndex:5},{value:"miter",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"round",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"bevel",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowColor",paraId:11,tocIndex:5},{value:"Shadow color",paraId:11,tocIndex:5},{value:"string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowBlur",paraId:11,tocIndex:5},{value:"Shadow blur degree",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowOffsetX",paraId:11,tocIndex:5},{value:"Shadow X offset",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowOffsetY",paraId:11,tocIndex:5},{value:"Shadow Y offset",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"For complete style properties, refer to ",paraId:12,tocIndex:5},{value:"Element - Node - Built-in Node - General Style Properties - style",paraId:13,tocIndex:5},{value:"scaleRBy",paraId:14,tocIndex:6},{value:" and ",paraId:14,tocIndex:6},{value:"scaleDBy",paraId:14,tocIndex:6},{value:" can be used to control the adjustment method of the fisheye's radius and distortion factor respectively:",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      // Adjust radius by wheel\n      scaleRBy: 'wheel',\n      // Adjust distortion factor by dragging\n      scaleDBy: 'drag',\n      // Set range for radius and distortion factor\n      minR: 50,\n      maxR: 200,\n      minD: 1,\n      maxD: 3,\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"Note: When ",paraId:16,tocIndex:6},{value:"trigger",paraId:16,tocIndex:6},{value:", ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:", and ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:" are all set to ",paraId:16,tocIndex:6},{value:"'drag'",paraId:16,tocIndex:6},{value:", the priority order is ",paraId:16,tocIndex:6},{value:"trigger",paraId:16,tocIndex:6},{value:" > ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" > ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:", and only the highest priority configuration item will bind the drag event. Similarly, if ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" and ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:" are both set to ",paraId:16,tocIndex:6},{value:"'wheel'",paraId:16,tocIndex:6},{value:", only ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" will bind the wheel event.",paraId:16,tocIndex:6},{value:"The simplest configuration method:",paraId:17,tocIndex:8},{value:"const graph = new Graph({\n  plugins: ['fisheye'],\n});\n",paraId:18,tocIndex:8},{value:"You can customize the appearance and behavior of the fisheye:",paraId:19,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      r: 150,\n      d: 2,\n      style: {\n        fill: '#2f54eb', // Fill color of the fisheye area\n        fillOpacity: 0.2, // Opacity of the fill area\n        stroke: '#1d39c4', // Color of the fisheye border\n        strokeOpacity: 0.8, // Opacity of the border\n        lineWidth: 1.5, // Line width of the border\n        shadowColor: '#1d39c4', // Shadow color\n        shadowBlur: 10, // Shadow blur radius\n        shadowOffsetX: 0, // Horizontal shadow offset\n        shadowOffsetY: 0, // Vertical shadow offset\n        cursor: 'pointer', // Cursor style when hovering\n      },\n      nodeStyle: {\n        // Basic node style\n        size: 40, // Node size\n        fill: '#d6e4ff', // Node fill color\n        stroke: '#2f54eb', // Node border color\n        lineWidth: 2, // Node border width\n        shadowColor: '#2f54eb', // Node shadow color\n        shadowBlur: 5, // Node shadow blur radius\n        cursor: 'pointer', // Cursor style when hovering\n\n        // Label style\n        label: true, // Show label\n        labelFontSize: 14, // Label font size\n        labelFontWeight: 'bold', // Label font weight\n        labelFill: '#1d39c4', // Label text color\n        labelBackground: true, // Show label background\n        labelBackgroundFill: '#fff', // Label background fill color\n        labelBackgroundStroke: '#1d39c4', // Label background border color\n        labelBackgroundOpacity: 0.8, // Label background opacity\n        labelBackgroundPadding: [4, 8, 4, 8], // Label background padding [top, right, bottom, left]\n\n        // Icon style\n        icon: true, // Show icon\n        iconFontFamily: 'iconfont', // Icon font\n        iconText: '\\ue6f6', // Icon Unicode\n        iconFill: '#1d39c4', // Icon color\n        iconSize: 16, // Icon size\n        iconFontWeight: 'normal', // Icon font weight\n      },\n    },\n  ],\n});\n",paraId:20,tocIndex:9},{value:"The effect is as follows:",paraId:21,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 150, y: 100 } },\n      { id: 'node-2', style: { x: 250, y: 100 } },\n      { id: 'node-3', style: { x: 200, y: 180 } },\n      { id: 'node-4', style: { x: 120, y: 180 } },\n      { id: 'node-5', style: { x: 280, y: 180 } },\n    ],\n    edges: [\n      { id: 'edge-1', source: 'node-1', target: 'node-2' },\n      { id: 'edge-2', source: 'node-1', target: 'node-3' },\n      { id: 'edge-3', source: 'node-2', target: 'node-3' },\n      { id: 'edge-4', source: 'node-3', target: 'node-4' },\n      { id: 'edge-5', source: 'node-3', target: 'node-5' },\n    ],\n  },\n  node: {\n    style: {\n      size: 30,\n      fill: '#e6f7ff',\n      stroke: '#1890ff',\n      lineWidth: 1,\n      label: false,\n      icon: false,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 1,\n    },\n  },\n  plugins: [\n    {\n      type: 'fisheye',\n      key: 'fisheye',\n      r: 100,\n      d: 2,\n      style: {\n        fill: '#2f54eb', // Fill color of the fisheye area\n        fillOpacity: 0.2, // Opacity of the fill area\n        stroke: '#1d39c4', // Color of the fisheye border\n        strokeOpacity: 0.8, // Opacity of the border\n        lineWidth: 1.5, // Line width of the border\n        shadowColor: '#1d39c4', // Shadow color\n        shadowBlur: 10, // Shadow blur radius\n        shadowOffsetX: 0, // Horizontal shadow offset\n        shadowOffsetY: 0, // Vertical shadow offset\n        cursor: 'pointer', // Cursor style when hovering\n      },\n      nodeStyle: {\n        // Basic node style\n        size: 40, // Node size\n        fill: '#d6e4ff', // Node fill color\n        stroke: '#2f54eb', // Node border color\n        lineWidth: 2, // Node border width\n        shadowColor: '#2f54eb', // Node shadow color\n        shadowBlur: 5, // Node shadow blur radius\n        cursor: 'pointer', // Cursor style when hovering\n\n        // Label style\n        label: true, // Show label\n        labelFontSize: 14, // Label font size\n        labelFontWeight: 'bold', // Label font weight\n        labelFill: '#1d39c4', // Label text color\n        labelBackground: true, // Show label background\n        labelBackgroundFill: '#fff', // Label background fill color\n        labelBackgroundStroke: '#1d39c4', // Label background border color\n        labelBackgroundOpacity: 0.8, // Label background opacity\n        labelBackgroundPadding: [4, 8, 4, 8], // Label background padding [top, right, bottom, left]\n\n        // Icon style\n        icon: true, // Show icon\n        iconFontFamily: 'iconfont', // Icon font\n        iconText: '\\ue6f6', // Icon Unicode\n        iconFill: '#1d39c4', // Icon color\n        iconSize: 16, // Icon size\n        iconFontWeight: 'normal', // Icon font weight\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:9}]},15540:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(98292);const t=[{value:"The Fullscreen plugin allows users to expand the graph visualization content to the entire screen, providing a broader view and a better immersive experience.",paraId:0,tocIndex:0},{value:"The Fullscreen plugin is mainly suitable for the following scenarios:",paraId:1,tocIndex:1},{value:"Provide a broader view for viewing complex graph data",paraId:2,tocIndex:1},{value:"Enhance immersive experience, focusing on graph visualization content",paraId:2,tocIndex:1},{value:"Display graph data in presentations or reports",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the Fullscreen plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      autoFit: true,\n      trigger: {\n        request: 'F', // Use shortcut key F to enter fullscreen\n        exit: 'Esc', // Use shortcut key Esc to exit fullscreen\n      },\n      onEnter: () => {\n        console.log('Entered fullscreen mode');\n      },\n      onExit: () => {\n        console.log('Exited fullscreen mode');\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"Property",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:"Type",paraId:5,tocIndex:3},{value:"Default Value",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"Plugin type",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"fullscreen",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"key",paraId:5,tocIndex:3},{value:"Unique identifier for the plugin, can be used to get the plugin instance or update plugin options",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"autoFit",paraId:5,tocIndex:3},{value:"Whether to auto-fit the canvas size, the canvas size will automatically adapt to the screen size when fullscreen",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"trigger",paraId:5,tocIndex:3},{value:"Method to trigger fullscreen, ",paraId:5,tocIndex:3},{value:"example",paraId:6,tocIndex:3},{value:"{ request?: string; exit?: string; }",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"onEnter",paraId:5,tocIndex:3},{value:"Callback after entering fullscreen",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"onExit",paraId:5,tocIndex:3},{value:"Callback after exiting fullscreen",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"The trigger property is used to control the method of triggering fullscreen. It supports two configuration methods:",paraId:7,tocIndex:4},{value:"Use keyboard shortcuts to trigger fullscreen and exit fullscreen.",paraId:8,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      trigger: {\n        request: 'F', // Use shortcut key F to enter fullscreen\n        exit: 'Esc', // Use shortcut key Esc to exit fullscreen\n      },\n    },\n  ],\n});\n",paraId:9,tocIndex:5},{value:"Control fullscreen by calling the request and exit methods.",paraId:10,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// Enter fullscreen\ngraph.getPluginInstance('my-fullscreen').request();\n\n// Exit fullscreen\ngraph.getPluginInstance('my-fullscreen').exit();\n",paraId:11,tocIndex:6},{value:"Whether to auto-fit the canvas size, the canvas size will automatically adapt to the screen size when fullscreen.",paraId:12,tocIndex:7},{value:"When set to true, the canvas will automatically resize to fit the entire screen.",paraId:13,tocIndex:7},{value:"When set to false, the canvas size remains unchanged.",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      autoFit: true,\n    },\n  ],\n});\n",paraId:14,tocIndex:7},{value:"This method is used to enter fullscreen mode programmatically. It can be called on the plugin instance to expand the graph visualization to the entire screen.",paraId:15,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// Enter fullscreen\ngraph.getPluginInstance('my-fullscreen').request();\n",paraId:16,tocIndex:9},{value:"This method is used to exit fullscreen mode programmatically. It can be called on the plugin instance to revert the graph visualization back to its original size.",paraId:17,tocIndex:10},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// Exit fullscreen\ngraph.getPluginInstance('my-fullscreen').exit();\n",paraId:18,tocIndex:10}]},46223:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(61320);const t=[{value:"The GridLine plugin provides visual auxiliary lines for the canvas, helping users precisely position and align graphic elements. It is an indispensable tool in graphic drawing.",paraId:0,tocIndex:0},{value:"The GridLine plugin is mainly suitable for the following scenarios:",paraId:1,tocIndex:1},{value:"Assisting users in precise drawing and element alignment",paraId:2,tocIndex:1},{value:"Providing visual references to enhance spatial awareness",paraId:2,tocIndex:1},{value:"Building a structured reference system when designing and editing graphics",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the GridLine plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      key: 'my-grid-line', // Specify a unique identifier for dynamic updates\n      size: 20,\n      stroke: '#0001',\n      follow: true,\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'grid-line', key: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const LINE_STYLE = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n    const options = {\n      type: 'grid-line',\n      border: true,\n      borderLineWidth: 1,\n      borderStroke: '#eee',\n      borderStyle: 'solid',\n      follow: false,\n      lineWidth: 1,\n      size: 20,\n      stroke: '#eee',\n    };\n    const optionFolder = gui.addFolder('Gird Line Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'size', 1, 50, 1);\n    optionFolder.add(options, 'lineWidth', 1, 10, 1);\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'border');\n    optionFolder.add(options, 'borderLineWidth', 1, 10, 1);\n    optionFolder.add(options, 'borderStyle', LINE_STYLE);\n    optionFolder.addColor(options, 'borderStroke');\n    optionFolder.add(options, 'follow');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'grid-line',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:3},{value:"Property",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:"Type",paraId:6,tocIndex:4},{value:"Default",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:"type",paraId:6,tocIndex:4},{value:"Plugin type",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"grid-line",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"key",paraId:6,tocIndex:4},{value:"Unique identifier for the plugin, used to get the plugin instance or update plugin options",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"border",paraId:6,tocIndex:4},{value:"Whether to display the border",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"borderLineWidth",paraId:6,tocIndex:4},{value:"Border line width",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"1",paraId:6,tocIndex:4},{value:"borderStroke",paraId:6,tocIndex:4},{value:"Border color, see ",paraId:6,tocIndex:4},{value:"CSS border-color",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"#eee",paraId:6,tocIndex:4},{value:"borderStyle",paraId:6,tocIndex:4},{value:"Border style, see ",paraId:6,tocIndex:4},{value:"CSS border-style",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"solid",paraId:6,tocIndex:4},{value:"follow",paraId:6,tocIndex:4},{value:"Whether to follow canvas movements",paraId:6,tocIndex:4},{value:"boolean | {translate ?: boolean, zoom?: boolean}",paraId:6,tocIndex:4},{value:"false",paraId:6,tocIndex:4},{value:"lineWidth",paraId:6,tocIndex:4},{value:"Grid line width",paraId:6,tocIndex:4},{value:"number | string",paraId:6,tocIndex:4},{value:"1",paraId:6,tocIndex:4},{value:"size",paraId:6,tocIndex:4},{value:"Grid unit size in pixels",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"20",paraId:6,tocIndex:4},{value:"stroke",paraId:6,tocIndex:4},{value:"Grid line color",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"#eee",paraId:6,tocIndex:4},{value:"The ",paraId:7,tocIndex:5},{value:"follow",paraId:7,tocIndex:5},{value:" property controls whether the grid lines follow the canvas transformations. It supports two configuration methods:",paraId:7,tocIndex:5},{value:"Boolean Configuration",paraId:8,tocIndex:5},{value:": When set to ",paraId:8,tocIndex:5},{value:"true",paraId:8,tocIndex:5},{value:", the grid lines follow both canvas translation and zoom; when set to ",paraId:8,tocIndex:5},{value:"false",paraId:8,tocIndex:5},{value:", they remain static.",paraId:8,tocIndex:5},{value:"// Enable both translation and zoom following\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true,\n    },\n  ],\n});\n",paraId:9,tocIndex:5},{value:"Object Configuration",paraId:10,tocIndex:5},{value:": Allows more precise control over the grid line following behavior.",paraId:10,tocIndex:5},{value:"// Follow translation only, not zoom\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: {\n        translate: true, // Follow translation\n        zoom: false, // Do not follow zoom\n      },\n    },\n  ],\n});\n\n// Follow zoom only, not translation\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: {\n        translate: false, // Do not follow translation\n        zoom: true, // Follow zoom\n      },\n    },\n  ],\n});\n",paraId:11,tocIndex:5},{value:"When grid lines follow zoom, they maintain a relative position to the canvas content, making alignment references more precise. Following translation allows the grid to move with the canvas content, enhancing the visual experience of spatial continuity.",paraId:12,tocIndex:5},{value:"The simplest way is to use the preset configuration directly:",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: ['grid-line'],\n});\n",paraId:14,tocIndex:7},{value:"The effect is as follows:",paraId:15,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas'],\n  plugins: ['grid-line'],\n});\n\ngraph.render();\n",paraId:16,tocIndex:7},{value:"You can customize the grid line style as needed:",paraId:17,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'grid-line',\n      stroke: '#1890ff33', // Blue semi-transparent grid line\n      lineWidth: 2,\n      size: 40, // Larger grid unit\n      borderStroke: '#1890ff', // Blue border\n      borderLineWidth: 2,\n    },\n  ],\n});\n",paraId:18,tocIndex:8},{value:"The effect is as follows:",paraId:19,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      stroke: '#1890ff33', // Blue semi-transparent grid line\n      lineWidth: 2,\n      size: 40, // Larger grid\n      borderStroke: '#1890ff', // Blue border\n      borderLineWidth: 2,\n    },\n  ],\n});\n\ngraph.render();\n",paraId:20,tocIndex:8},{value:"Enabling the follow option allows the grid to move with the canvas, enhancing user experience:",paraId:21,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true, // Grid follows canvas movement\n    },\n  ],\n});\n",paraId:22,tocIndex:9},{value:"Try dragging/zooming the canvas to observe the grid following effect:",paraId:23,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true, // Grid follows canvas movement\n    },\n  ],\n});\n\ngraph.render();\n",paraId:24,tocIndex:9},{value:"Use the key identifier to dynamically update grid properties at runtime:",paraId:25,tocIndex:10},{value:"// Initial configuration\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'grid-line',\n      key: 'my-grid',\n      size: 20,\n    },\n  ],\n});\n\n// Subsequent dynamic updates\ngraph.updatePlugin({\n  key: 'my-grid',\n  size: 40, // Update grid size\n  stroke: '#ff4d4f', // Update grid color\n});\n",paraId:26,tocIndex:10}]},44226:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(3333);const t=[{value:"This plugin is used to implement the ",paraId:0,tocIndex:0},{value:"Undo",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"Redo",paraId:0,tocIndex:0},{value:" functions in graph editing. By recording the historical state stack of user operations, it supports backtracking or restoring operations during graph interactions. The plugin provides users with comprehensive configuration options and APIs.",paraId:0,tocIndex:0},{value:"The history plugin is suitable for all scenarios involving graph editing.",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    node: {\n      style: {\n        size: 60,\n        labelText: 'Drag Me!',\n        labelPlacement: 'middle',\n        labelFill: '#fff',\n        fill: '#7e3feb',\n      },\n    },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: ['drag-element'],\n    plugins: ['grid-line', { type: 'history', key: 'history' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'history',\n      stackSize: 0,\n    };\n    const optionFolder = gui.addFolder('History Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'stackSize', 0, 10, 1);\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'history',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiFolder = gui.addFolder('History API');\n    const instance = graph.getPluginInstance('history');\n    apiFolder.add(instance, 'undo');\n    apiFolder.add(instance, 'redo');\n    apiFolder.add(instance, 'clear');\n  },\n);\n",paraId:2,tocIndex:2},{value:"Add this plugin in the graph configuration:",paraId:3,tocIndex:3},{value:"1. Quick Configuration (Static)",paraId:4,tocIndex:3},{value:"Declare directly using a string. This method is simple but only supports default configurations and cannot be dynamically modified after configuration:",paraId:5,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: ['history'],\n});\n",paraId:6,tocIndex:3},{value:"2. Object Configuration (Recommended)",paraId:7,tocIndex:3},{value:"Configure using an object form, supporting custom parameters, and allowing dynamic updates at runtime:",paraId:8,tocIndex:3},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history-1',\n      stackSize: 10,\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"Property",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Default Value",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"afterAddCommand",paraId:10,tocIndex:4},{value:"Called after a command is added to the ",paraId:10,tocIndex:4},{value:"Undo/Redo",paraId:10,tocIndex:4},{value:" queue. ",paraId:10,tocIndex:4},{value:"revert",paraId:10,tocIndex:4},{value:" is ",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:" for undo operations and ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:" for redo operations",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:11,tocIndex:4},{value:", revert: boolean) => void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"beforeAddCommand",paraId:10,tocIndex:4},{value:"Called before a command is added to the ",paraId:10,tocIndex:4},{value:"Undo/Redo",paraId:10,tocIndex:4},{value:" queue. If this method returns ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:", the command will not be added to the queue. ",paraId:10,tocIndex:4},{value:"revert",paraId:10,tocIndex:4},{value:" is ",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:" for undo operations and ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:" for redo operations",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:12,tocIndex:4},{value:", revert: boolean) => boolean | void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"executeCommand",paraId:10,tocIndex:4},{value:"Callback function when executing a command",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:13,tocIndex:4},{value:") => void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"stackSize",paraId:10,tocIndex:4},{value:"Maximum length of history records to be recorded",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:"0 (unlimited)",paraId:10,tocIndex:4},{value:"Command",paraId:14},{value:"// Single history command\ninterface Command {\n  current: CommandData; // Current data\n  original: CommandData; // Original data\n  animation: boolean; // Whether to enable animation\n}\n// Single history command data\ninterface CommandData {\n  add: GraphData; // Added data\n  update: GraphData; // Updated data\n  remove: GraphData; // Removed data\n}\n// Graph data\ninterface GraphData {\n  nodes?: NodeData[]; // Node data\n  edges?: EdgeData[]; // Edge data\n  combos?: ComboData[]; // Combo data\n}\n",paraId:15,tocIndex:6},{value:"The history plugin provides the following APIs for users to use as needed. For how to call plugin methods, please refer to the ",paraId:16,tocIndex:7},{value:"Plugin Overview Document",paraId:17,tocIndex:7},{value:"Determines whether a ",paraId:18,tocIndex:8},{value:"redo",paraId:18,tocIndex:8},{value:" operation can be performed. If there are records in the redo stack, it returns ",paraId:18,tocIndex:8},{value:"true",paraId:18,tocIndex:8},{value:"; otherwise, it returns ",paraId:18,tocIndex:8},{value:"false",paraId:18,tocIndex:8},{value:".",paraId:18,tocIndex:8},{value:"canRedo(): boolean;\n",paraId:19,tocIndex:8},{value:"Example:",paraId:20,tocIndex:8},{value:"const canRedo = historyInstance.canRedo();\nif (canRedo) {\n  console.log('Redo operation can be performed');\n} else {\n  console.log('Redo stack is empty, cannot redo');\n}\n",paraId:21,tocIndex:8},{value:"Determines whether an ",paraId:22,tocIndex:9},{value:"undo",paraId:22,tocIndex:9},{value:" operation can be performed. If there are records in the undo stack, it returns ",paraId:22,tocIndex:9},{value:"true",paraId:22,tocIndex:9},{value:"; otherwise, it returns ",paraId:22,tocIndex:9},{value:"false",paraId:22,tocIndex:9},{value:".",paraId:22,tocIndex:9},{value:"canUndo(): boolean;\n",paraId:23,tocIndex:9},{value:"Example:",paraId:24,tocIndex:9},{value:"const canUndo = historyInstance.canUndo();\nif (canUndo) {\n  console.log('Undo operation can be performed');\n} else {\n  console.log('Undo stack is empty, cannot undo');\n}\n",paraId:25,tocIndex:9},{value:"Clears the history records, including the undo and redo stacks.",paraId:26,tocIndex:10},{value:"clear(): void;\n",paraId:27,tocIndex:10},{value:"Example:",paraId:28,tocIndex:10},{value:"historyInstance.clear();\nconsole.log('History records cleared');\n",paraId:29,tocIndex:10},{value:"Listens to history events, allowing users to execute custom logic when specific events occur.",paraId:30,tocIndex:11},{value:"on(event: Loosen<HistoryEvent>, handler: (e: { cmd?: Command | null }) => void): void;\n",paraId:31,tocIndex:11},{value:"Parameter Type Description:",paraId:32,tocIndex:11},{value:"HistoryEvent",paraId:33,tocIndex:11},{value:"enum HistoryEvent {\n  UNDO = 'undo', // When a command is undone\n  REDO = 'redo', // When a command is redone\n  CANCEL = 'cancel', // When a command is canceled\n  ADD = 'add', // When a command is added to the queue\n  CLEAR = 'clear', // When the history queue is cleared\n  CHANGE = 'change', // When the history queue changes\n}\n",paraId:34,tocIndex:11},{value:"Command",paraId:35,tocIndex:11},{value:"Please refer to the previous ",paraId:36,tocIndex:11},{value:"Command",paraId:37,tocIndex:11},{value:" type description",paraId:36,tocIndex:11},{value:"Example:",paraId:38,tocIndex:11},{value:"historyInstance.on(HistoryEvent.UNDO, () => {\n  console.log('Undo operation executed');\n});\n",paraId:39,tocIndex:11},{value:"Performs a ",paraId:40,tocIndex:12},{value:"redo",paraId:40,tocIndex:12},{value:" operation and returns the plugin instance. If the redo stack is empty, no operation is performed.",paraId:40,tocIndex:12},{value:"redo(): History;\n",paraId:41,tocIndex:12},{value:"Example:",paraId:42,tocIndex:12},{value:"historyInstance.redo();\nconsole.log('Redo operation executed');\n",paraId:43,tocIndex:12},{value:"Performs an ",paraId:44,tocIndex:13},{value:"undo",paraId:44,tocIndex:13},{value:" operation and returns the plugin instance. If the undo stack is empty, no operation is performed.",paraId:44,tocIndex:13},{value:"undo(): History;\n",paraId:45,tocIndex:13},{value:"Example:",paraId:46,tocIndex:13},{value:"historyInstance.undo();\nconsole.log('Undo operation executed');\n",paraId:47,tocIndex:13},{value:"Performs an undo operation without recording it in the history and returns the plugin instance. Note that this operation will clear the ",paraId:48,tocIndex:14},{value:"redo",paraId:48,tocIndex:14},{value:" stack.",paraId:48,tocIndex:14},{value:"undoAndCancel(): History;\n",paraId:49,tocIndex:14},{value:"Example:",paraId:50,tocIndex:14},{value:"historyInstance.undoAndCancel();\nconsole.log('Undo and cancel operation executed');\n",paraId:51,tocIndex:14},{value:"This plugin supports two history modes:",paraId:52,tocIndex:15},{value:"In default mode, every time a ",paraId:53,tocIndex:16},{value:"render",paraId:53,tocIndex:16},{value:" is triggered (for example, after updating element data, the user actively executes the ",paraId:53,tocIndex:16},{value:"graph.draw()",paraId:53,tocIndex:16},{value:" method to trigger rendering), the plugin records the data ",paraId:53,tocIndex:16},{value:"before",paraId:53,tocIndex:16},{value:" and ",paraId:53,tocIndex:16},{value:"after",paraId:53,tocIndex:16},{value:" rendering and stacks it as an operation record.",paraId:53,tocIndex:16},{value:"In actual needs, a user's graph editing operation may involve ",paraId:54,tocIndex:18},{value:"multiple renders",paraId:54,tocIndex:18},{value:". For example, in one editing operation, first display nodes A and B, then display the connection from A to B. This involves two renders (i.e., the user needs to perform ",paraId:54,tocIndex:18},{value:"graph.draw()",paraId:54,tocIndex:18},{value:" twice). In this scenario, the default mode will stack two history records, which are:",paraId:54,tocIndex:18},{value:"Display nodes A and B",paraId:55,tocIndex:18},{value:"Display the connection from A to B",paraId:55,tocIndex:18},{value:"Obviously, in actual business, one operation should only require one undo.",paraId:56,tocIndex:18},{value:"But here, when undoing this operation, the user needs to call the ",paraId:57,tocIndex:18},{value:"undo",paraId:57,tocIndex:18},{value:" method twice, which means two undos are required.",paraId:57,tocIndex:18},{value:"To support such scenarios, G6 provides a batch controller (",paraId:58,tocIndex:19},{value:"BatchController",paraId:58,tocIndex:19},{value:", ",paraId:58,tocIndex:19},{value:"refer to the source code",paraId:58,tocIndex:19},{value:"), which is provided in the graph instance context.",paraId:58,tocIndex:19},{value:"The history plugin implements custom operation records based on this batch controller. The code example is as follows:",paraId:59,tocIndex:19},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n  ],\n});\n\ngraph.context.batch.startBatch(); // Start batch operation\ngraph.addNodeData(...); // Display nodes A and B\ngraph.draw(); // First render trigger\ngraph.addEdgeData(...); // Display the connection from A to B\ngraph.draw(); // Second render trigger\ngraph.context.batch.endBatch(); // End batch operation\n",paraId:60,tocIndex:19},{value:"In the example:",paraId:61,tocIndex:19},{value:"By calling the ",paraId:62,tocIndex:19},{value:"startBatch",paraId:62,tocIndex:19},{value:" method of the batch controller instance, the history plugin is informed that batch operations are now being performed. Before the batch operation ends, no matter how many renders are triggered, no history records should be stacked (the history plugin will record the change data for each render trigger).",paraId:62,tocIndex:19},{value:"After completing the last data change, call the ",paraId:62,tocIndex:19},{value:"endBatch()",paraId:62,tocIndex:19},{value:" method. The history plugin listens for the completion of the batch operation and stacks this batch operation as a history record.",paraId:62,tocIndex:19},{value:"Finally, the user only needs to perform one ",paraId:63,tocIndex:19},{value:"undo",paraId:63,tocIndex:19},{value:" to undo.",paraId:63,tocIndex:19},{value:"Below are some common cases with corresponding code references.",paraId:64,tocIndex:20},{value:"In actual business scenarios, you may need to customize the toolbar of the canvas, which involves the enable and disable states of the undo and redo buttons.",paraId:65,tocIndex:21},{value:"const canUndo = false;\nconst canRedo = false;\n\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n  ],\n});\nconst historyInstance = graph.getPluginInstance('history');\n\nhistoryInstance.on(HistoryEvent.CHANGE, () => {\n  canUndo = historyInstance.canUndo();\n  canRedo = historyInstance.canRedo();\n});\n",paraId:66,tocIndex:21},{value:"In the example, by listening to the ",paraId:67,tocIndex:21},{value:"HistoryEvent.CHANGE",paraId:67,tocIndex:21},{value:" event, which is triggered when the history queue changes, it is determined in real-time whether undo and redo operations can be performed.",paraId:67,tocIndex:21},{value:"Here is a simple scenario: only the operation of removing elements is allowed to enter the history queue.",paraId:68,tocIndex:22},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n      beforeAddCommand: (cmd) => {\n        return (\n          cmd.current.remove?.nodes?.length > 0 ||\n          cmd.current.remove?.combos?.length > 0 ||\n          cmd.current.remove?.edges?.length > 0\n        );\n      },\n    },\n  ],\n});\n",paraId:69,tocIndex:22},{value:"In the example, the configuration option ",paraId:70,tocIndex:22},{value:"beforeAddCommand",paraId:71,tocIndex:22},{value:" is used to determine whether there are elements removed in ",paraId:70,tocIndex:22},{value:"cmd.current.remove",paraId:70,tocIndex:22},{value:".",paraId:70,tocIndex:22}]},42983:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(4803);const t=[{value:"Hull is used to process and represent the convex or concave polygon bounding box of a set of points. It can wrap a set of nodes in a minimal geometric shape, helping users better understand and analyze datasets.",paraId:0,tocIndex:0},{value:"Convex Hull",paraId:1,tocIndex:0},{value:": This is a convex polygon that contains all the points and has no indentations.",paraId:1,tocIndex:0},{value:"Concave Hull",paraId:1,tocIndex:0},{value:": This is a concave polygon that also contains all the points but may have indentations. The degree of indentation is controlled by the concavity parameter.",paraId:1,tocIndex:0},{value:"The hull plugin is mainly applicable to the following scenarios:",paraId:2,tocIndex:1},{value:"Wrapping node collections in data visualization",paraId:3,tocIndex:1},{value:"Providing visual references to enhance spatial awareness",paraId:3,tocIndex:1},{value:"Identifying the collection relationship of specific nodes in complex network graphs",paraId:3,tocIndex:1},{value:"Below is a simple example of initializing the Hull plugin:",paraId:4,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      key: 'my-hull', // Specify a unique identifier for subsequent dynamic updates\n      members: ['node-1', 'node-2'], // List of node IDs to be wrapped\n      concavity: Infinity, // Default to convex hull\n    },\n  ],\n});\n",paraId:5,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node-0',\n          data: { cluster: 'a' },\n          style: { x: 555, y: 151 },\n        },\n        {\n          id: 'node-1',\n          data: { cluster: 'a' },\n          style: { x: 532, y: 323 },\n        },\n        {\n          id: 'node-2',\n          data: { cluster: 'a' },\n          style: { x: 473, y: 227 },\n        },\n        {\n          id: 'node-3',\n          data: { cluster: 'a' },\n          style: { x: 349, y: 212 },\n        },\n        {\n          id: 'node-4',\n          data: { cluster: 'b' },\n          style: { x: 234, y: 201 },\n        },\n        {\n          id: 'node-5',\n          data: { cluster: 'b' },\n          style: { x: 338, y: 333 },\n        },\n        {\n          id: 'node-6',\n          data: { cluster: 'b' },\n          style: { x: 365, y: 91 },\n        },\n      ],\n      edges: [\n        {\n          source: 'node-0',\n          target: 'node-2',\n        },\n        {\n          source: 'node-1',\n          target: 'node-2',\n        },\n        {\n          source: 'node-2',\n          target: 'node-3',\n        },\n        {\n          source: 'node-3',\n          target: 'node-4',\n        },\n        {\n          source: 'node-3',\n          target: 'node-5',\n        },\n        {\n          source: 'node-3',\n          target: 'node-6',\n        },\n      ],\n    },\n    node: {\n      style: { labelText: (d) => d.id },\n      palette: { field: 'cluster', color: ['#7e3feb', '#ffa940'] },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'hull',\n        key: 'hull-a',\n        members: ['node-0', 'node-1', 'node-2', 'node-3'],\n        labelText: 'hull-a',\n        fill: '#7e3feb',\n        stroke: '#7e3feb',\n        fillOpacity: 0.1,\n        strokeOpacity: 1,\n        labelFill: '#fff',\n        labelPadding: 2,\n        labelBackgroundFill: '#7e3feb',\n        labelBackgroundRadius: 5,\n      },\n    ],\n  },\n  { width: 600, height: 450 },\n  (gui, graph) => {\n    const options = {\n      type: 'hull',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      concavity: Infinity,\n      corner: 'rounded',\n      padding: 10,\n      // style\n      fill: '#7e3feb',\n      stroke: '#7e3feb',\n      fillOpacity: 0.1,\n      strokeOpacity: 1,\n      // label\n      label: true,\n      labelCloseToPath: true,\n      labelAutoRotate: true,\n      labelOffsetX: 0,\n      labelOffsetY: 0,\n      labelPlacement: 'bottom',\n    };\n\n    const optionFolder = gui.addFolder('Hull Options');\n    optionFolder.add(options, 'type').disable();\n    optionFolder.add(options, 'concavity', 0, 200, 1);\n    optionFolder.add(options, 'corner', ['rounded', 'smooth', 'sharp']);\n    optionFolder.add(options, 'padding', 0, 20, 1);\n    optionFolder.addColor(options, 'fill');\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'fillOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'strokeOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'label');\n    optionFolder.add(options, 'labelCloseToPath');\n    optionFolder.add(options, 'labelAutoRotate');\n    optionFolder.add(options, 'labelOffsetX', 0, 20, 1);\n    optionFolder.add(options, 'labelOffsetY', 0, 20, 1);\n    optionFolder.add(options, 'labelPlacement', ['left', 'right', 'top', 'bottom', 'center']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'hull-a',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiConfig = {\n      member: 'node-1',\n    };\n    const apiFolder = gui.addFolder('Hull API');\n    const instance = graph.getPluginInstance('hull-a');\n    apiFolder.add(\n      apiConfig,\n      'member',\n      new Array(7).fill(0).map((_, index) => `node-${index}`),\n    );\n    apiFolder.add({ addMember: () => instance.addMember(apiConfig.member) }, 'addMember').name('add member');\n    apiFolder\n      .add({ removeMember: () => instance.removeMember(apiConfig.member) }, 'removeMember')\n      .name('remove member');\n    apiFolder\n      .add({ removeMember: () => alert('Members in Hull-a: ' + instance.getMember()) }, 'removeMember')\n      .name('get member');\n  },\n);\n",paraId:6,tocIndex:3},{value:"Property",paraId:7,tocIndex:4},{value:"Description",paraId:7,tocIndex:4},{value:"Type",paraId:7,tocIndex:4},{value:"Default Value",paraId:7,tocIndex:4},{value:"Required",paraId:7,tocIndex:4},{value:"type",paraId:7,tocIndex:4},{value:"Plugin type",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"hull",paraId:7,tocIndex:4},{value:"✓",paraId:7,tocIndex:4},{value:"key",paraId:7,tocIndex:4},{value:"Unique identifier for the plugin, used for subsequent updates",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"members",paraId:7,tocIndex:4},{value:"Elements within the Hull, including nodes and edges",paraId:7,tocIndex:4},{value:"string[]",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"✓",paraId:7,tocIndex:4},{value:"concavity",paraId:7,tocIndex:4},{value:"Concavity, the larger the value, the smaller the concavity; default is Infinity representing Convex Hull",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"Infinity",paraId:7,tocIndex:4},{value:"corner",paraId:7,tocIndex:4},{value:"Corner type, options are ",paraId:7,tocIndex:4},{value:"rounded",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"smooth",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"sharp",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"rounded",paraId:7,tocIndex:4},{value:"padding",paraId:7,tocIndex:4},{value:"Padding",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"10",paraId:7,tocIndex:4},{value:"label",paraId:7,tocIndex:4},{value:"Whether to display the label",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelPlacement",paraId:7,tocIndex:4},{value:"Label position",paraId:7,tocIndex:4},{value:"left",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"right",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"top",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"bottom",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"center",paraId:7,tocIndex:4},{value:"bottom",paraId:7,tocIndex:4},{value:"labelBackground",paraId:7,tocIndex:4},{value:"Whether to display the background",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"false",paraId:7,tocIndex:4},{value:"labelPadding",paraId:7,tocIndex:4},{value:"Label padding",paraId:7,tocIndex:4},{value:"number | number[]",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelCloseToPath",paraId:7,tocIndex:4},{value:"Whether the label is close to the hull",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelAutoRotate",paraId:7,tocIndex:4},{value:"Whether the label rotates with the hull, effective only when closeToPath is true",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelOffsetX",paraId:7,tocIndex:4},{value:"X-axis offset",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelOffsetY",paraId:7,tocIndex:4},{value:"Y-axis offset",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelMaxWidth",paraId:7,tocIndex:4},{value:"Maximum width of the text, exceeding will automatically ellipsis",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"For complete label styles, see ",paraId:8,tocIndex:4},{value:"this link",paraId:8,tocIndex:4},{value:"The concavity attribute is used to control the concavity of the Hull. When set to Infinity, a convex hull is generated; otherwise, a concave hull is generated.",paraId:9,tocIndex:5},{value:"// Convex hull example\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      concavity: Infinity, // Convex hull\n      members: ['node-1', 'node-2'],\n    },\n  ],\n});\n\n// Concave hull example\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      concavity: 50, // Concave hull\n      members: ['node-1', 'node-2'],\n    },\n  ],\n});\n",paraId:10,tocIndex:5},{value:"The simplest way is to use the preset configuration directly:",paraId:11,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'], // List of node IDs to be wrapped\n    },\n  ],\n});\n",paraId:12,tocIndex:7},{value:"The effect is as follows:",paraId:13,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'], // List of node IDs to be wrapped\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:14,tocIndex:7},{value:"You can customize the style of the Hull as needed, such as adjusting color, transparency, and other properties.",paraId:15,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2', 'node-3'],\n      stroke: '#ff000033', // Red semi-transparent border\n      fill: '#7e3feb', // Light purple fill\n      fillOpacity: 0.2,\n      lineWidth: 2,\n      padding: 15, // Larger padding\n    },\n  ],\n});\n",paraId:16,tocIndex:8},{value:"The effect is as follows:",paraId:17,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2', 'node-3'],\n      stroke: '#ff000033', // Red semi-transparent border\n      fill: '#7e3feb', // Light purple fill\n      fillOpacity: 0.2,\n      lineWidth: 2,\n      padding: 15, // Larger padding\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:18,tocIndex:8},{value:"You can configure the position, background, offset, and other properties of the label to enhance the visual effect.",paraId:19,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'],\n      label: true, // Display label\n      labelText: 'hull-a',\n      labelPlacement: 'top', // Label position\n      labelBackground: true, // Display label background\n      labelPadding: 5, // Label padding\n    },\n  ],\n});\n",paraId:20,tocIndex:9},{value:"The effect is as follows:",paraId:21,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'],\n      label: true, // Display label\n      labelText: 'hull-a',\n      labelPlacement: 'top', // Label position\n      labelBackground: true, // Display label background\n      labelPadding: 5, // Label padding\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:22,tocIndex:9}]},38145:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75986);const t=[{value:"The Legend plugin is used to display classification information of elements in the graph, supporting the display of classification information for nodes, edges, and combos. Through the legend, users can quickly perceive the classification information of related elements in the graph and quickly locate elements by clicking on the corresponding legend items, improving user browsing efficiency.",paraId:0,tocIndex:0},{value:"This plugin is mainly used for:",paraId:1,tocIndex:1},{value:"Quickly classifying elements through the legend",paraId:2,tocIndex:1},{value:"Quickly highlighting and locating corresponding elements through the legend",paraId:2,tocIndex:1},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // Other configurations...\n  plugins: [\n    {\n      type: 'legend', // Plugin type is legend\n      nodeField: 'cluster', // Array field name for node grouping\n      edgeField: 'cluster', // Array field name for edge grouping\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default Value",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"Plugin type",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"legend",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"key",paraId:4,tocIndex:3},{value:"Unique identifier for the plugin, used for subsequent updates",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"trigger",paraId:4,tocIndex:3},{value:"How the legend item triggers the corresponding item highlight: ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:": Triggered when the mouse enters the legend item ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:": Triggered when the mouse clicks the legend item",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:"position",paraId:4,tocIndex:3},{value:"Relative position of the legend on the canvas, ",paraId:4,tocIndex:3},{value:"optional values",paraId:5,tocIndex:3},{value:"CardinalPlacement",paraId:6,tocIndex:3},{value:"bottom",paraId:4,tocIndex:3},{value:"container",paraId:4,tocIndex:3},{value:"Container to which the legend is mounted, if not provided, it is mounted to the container where the Graph is located",paraId:4,tocIndex:3},{value:"HTMLElement | string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"className",paraId:4,tocIndex:3},{value:"Legend canvas class name, not effective when an external container is passed",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"containerStyle",paraId:4,tocIndex:3},{value:"Style of the legend container, not effective when an external container is passed",paraId:4,tocIndex:3},{value:"CSSStyleDeclaration",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"nodeField",paraId:4,tocIndex:3},{value:"Node classification identifier",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"edgeField",paraId:4,tocIndex:3},{value:"Edge classification identifier",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"comboField",paraId:4,tocIndex:3},{value:"Combo classification identifier",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"orientation",paraId:4,tocIndex:3},{value:"Layout direction of legend items: ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"horizontal",paraId:4,tocIndex:3},{value:": Horizontal direction ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"vertical",paraId:4,tocIndex:3},{value:": Vertical direction",paraId:4,tocIndex:3},{value:"horizontal",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"vertical",paraId:4,tocIndex:3},{value:"'horizontal'",paraId:4,tocIndex:3},{value:"layout",paraId:4,tocIndex:3},{value:"Layout method: ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:": Flexible layout ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"grid",paraId:4,tocIndex:3},{value:": Grid layout",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"grid",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:"showTitle",paraId:4,tocIndex:3},{value:"Whether to display the title",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"titleText",paraId:4,tocIndex:3},{value:"Title content",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:'""',paraId:4,tocIndex:3},{value:"x",paraId:4,tocIndex:3},{value:"Relative horizontal position of the legend on the canvas, higher priority than position",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"y",paraId:4,tocIndex:3},{value:"Relative vertical position of the legend on the canvas, higher priority than position",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"width",paraId:4,tocIndex:3},{value:"Width of the legend",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"240",paraId:4,tocIndex:3},{value:"height",paraId:4,tocIndex:3},{value:"Height of the legend",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"160",paraId:4,tocIndex:3},{value:"itemSpacing",paraId:4,tocIndex:3},{value:"Spacing between the text of the legend item and the corresponding marker",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"4",paraId:4,tocIndex:3},{value:"rowPadding",paraId:4,tocIndex:3},{value:"Spacing between each row in the legend",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"colPadding",paraId:4,tocIndex:3},{value:"Spacing between each column in the legend",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"itemMarkerSize",paraId:4,tocIndex:3},{value:"Size of the legend item marker",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"16",paraId:4,tocIndex:3},{value:"itemLabelFontSize",paraId:4,tocIndex:3},{value:"Font size of the legend item text",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"16",paraId:4,tocIndex:3},{value:"gridCol",paraId:4,tocIndex:3},{value:"Maximum number of columns allowed for legend items when width permits",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"gridRow",paraId:4,tocIndex:3},{value:"Maximum number of rows allowed for legend items when height permits",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"The ",paraId:7,tocIndex:4},{value:"position",paraId:7,tocIndex:4},{value:" property supports the following values:",paraId:7,tocIndex:4},{value:"'top-left'",paraId:8,tocIndex:4},{value:": Top left corner",paraId:8,tocIndex:4},{value:"'top-right'",paraId:8,tocIndex:4},{value:": Top right corner",paraId:8,tocIndex:4},{value:"'bottom-left'",paraId:8,tocIndex:4},{value:": Bottom left corner",paraId:8,tocIndex:4},{value:"'bottom-right'",paraId:8,tocIndex:4},{value:": Bottom right corner",paraId:8,tocIndex:4},{value:"'left-top'",paraId:8,tocIndex:4},{value:": Left side near the top",paraId:8,tocIndex:4},{value:"'left-bottom'",paraId:8,tocIndex:4},{value:": Left side near the bottom",paraId:8,tocIndex:4},{value:"'right-top'",paraId:8,tocIndex:4},{value:": Right side near the top",paraId:8,tocIndex:4},{value:"'right-bottom'",paraId:8,tocIndex:4},{value:": Right side near the bottom",paraId:8,tocIndex:4},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'legend', // Plugin type is legend\n      nodeField: 'cluster', // Array field name for node grouping\n      edgeField: 'cluster', // Array field name for edge grouping\n    },\n  ],\n});\n",paraId:9,tocIndex:6},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // Other configurations...\n  plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      // You can quickly specify the position through position\n      // position: \"top-left\",\n      // Or you can more flexibly control the position of the legend through x, y\n      x: 20,\n      y: 20,\n    },\n  ],\n});\n",paraId:10,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // Other configurations...\n  plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      layout: 'flex',\n      // Control to display only one row\n      gridRow: 1,\n      // Control to display 10 columns in one row, a page button will be displayed when the column width is insufficient\n      gridCol: 10,\n    },\n  ],\n});\n",paraId:11,tocIndex:8},{value:"orientation",paraId:12,tocIndex:10},{value:" mainly controls the direction of the layout, and the specific display of ",paraId:12,tocIndex:10},{value:"multiple columns in one row",paraId:12,tocIndex:10},{value:" or ",paraId:12,tocIndex:10},{value:"multiple rows in one column",paraId:12,tocIndex:10},{value:" is mainly controlled by ",paraId:12,tocIndex:10},{value:"gridRow",paraId:12,tocIndex:10},{value:" and ",paraId:12,tocIndex:10},{value:"gridCol",paraId:12,tocIndex:10},{value:". For example, if you want it to look like a vertical legend item, you can configure it like this:",paraId:12,tocIndex:10},{value:"   plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      layout: \"flex\",\n      // Control to display 1 column in one row\n      gridCol:1,\n      // Control to display up to 20 rows\n      gridRow: 20,\n    },\n  ],\n",paraId:13,tocIndex:10},{value:"This way, it becomes a legend with only one column, conforming to the visual vertical arrangement.",paraId:14,tocIndex:10},{value:"You can use the ",paraId:15,tocIndex:11},{value:"updatePlugin",paraId:15,tocIndex:11},{value:" method to dynamically update the toolbar:",paraId:15,tocIndex:11},{value:"const graph = new Graph({\n  data,\n  // Other configurations...\n  plugins: [\n    {\n      type: 'legend',\n      key: 'my-legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n    },\n  ],\n});\n\n// Update legend position\ngraph.updatePlugin({\n  key: 'my-legend',\n  position: 'bottom-right',\n});\n",paraId:16,tocIndex:11}]},14472:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(36678);const t=[{value:"The main function of the Minimap is to provide users with an overall layout of the current graph content in the form of a thumbnail, allowing quick positioning of graph operation locations.",paraId:0,tocIndex:0},{value:"⚠️ Note",paraId:1,tocIndex:0},{value:", The Minimap plugin is currently incompatible with React Node rendering mechanism. When using Minimap functionality, it is recommended to implement node rendering through ",paraId:1,tocIndex:0},{value:"built-in nodes",paraId:2,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"custom nodes",paraId:3,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"The Minimap plugin is mainly applicable to the following scenarios:",paraId:4,tocIndex:1},{value:"Providing a global view for quick area positioning",paraId:5,tocIndex:1},{value:"Navigation and interaction assistance, allowing quick positioning to the target location through the minimap",paraId:5,tocIndex:1},{value:"Below is a simple example of initializing the Minimap plugin:",paraId:6,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      key: 'minimap',\n      type: 'minimap',\n      size: [240, 160],\n    },\n  ],\n});\n",paraId:7,tocIndex:2},{value:"minimap.md",paraId:8,tocIndex:3},{value:"createGraph(\n  {\n    data: {\n      nodes: Array.from({ length: 50 }).map((_, i) => ({\n        id: `node-${i}`,\n        x: Math.random() * 500,\n        y: Math.random() * 300,\n      })),\n      edges: Array.from({ length: 100 }).map((_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 50)}`,\n        target: `node-${Math.floor(Math.random() * 50)}`,\n      })),\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'minimap', key: 'minimap', size: [240, 160], position: 'right-bottom' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'minimap',\n      width: 240,\n      height: 160,\n      shape: 'key',\n      padding: 10,\n      position: 'right-bottom',\n      maskStyleBorder: '1px solid #ddd',\n      maskStyleBackground: 'rgba(0, 0, 0, 0.1)',\n      containerStyleBorder: '1px solid #ddd',\n      containerStyleBackground: '#fff',\n      delay: 128,\n    };\n    const optionFolder = gui.addFolder('Minimap Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder\n      .add(options, 'width', 100, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          size: [value, options.height],\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'height', 100, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          size: [options.width, value],\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'shape', ['key'])\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          shape: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'padding', 0, 50, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          padding: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'position', ['right-bottom', 'left-bottom', 'right-top', 'left-top'])\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          position: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'maskStyleBorder')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          maskStyle: { ...options.maskStyle, border: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'maskStyleBackground')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          maskStyle: { ...options.maskStyle, background: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'containerStyleBorder')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          containerStyle: { ...options.containerStyle, border: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'containerStyleBackground')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          containerStyle: { ...options.containerStyle, background: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'delay', 0, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          delay: value,\n        });\n        graph.render();\n      });\n\n    // Update the maskStyle and containerStyle in the options object\n    Object.defineProperty(options, 'maskStyle', {\n      get: () => ({\n        border: options.maskStyleBorder,\n        background: options.maskStyleBackground,\n      }),\n      set: (value) => {\n        options.maskStyleBorder = value.border;\n        options.maskStyleBackground = value.background;\n      },\n    });\n\n    Object.defineProperty(options, 'containerStyle', {\n      get: () => ({\n        border: options.containerStyleBorder,\n        background: options.containerStyleBackground,\n      }),\n      set: (value) => {\n        options.containerStyleBorder = value.border;\n        options.containerStyleBackground = value.background;\n      },\n    });\n  },\n);\n",paraId:9,tocIndex:3},{value:"Property",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Default Value",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"type",paraId:10,tocIndex:4},{value:"Plugin type",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"minimap",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:"Unique identifier for the plugin, used for subsequent updates",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"className",paraId:10,tocIndex:4},{value:"Class name of the thumbnail canvas, not effective when an external container is passed",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"container",paraId:10,tocIndex:4},{value:"Container to which the thumbnail is mounted, if not provided, it is mounted to the container where the Graph is located",paraId:10,tocIndex:4},{value:"HTMLElement | string",paraId:10,tocIndex:4},{value:"containerStyle",paraId:10,tocIndex:4},{value:"Style of the thumbnail container, not effective when an external container is passed",paraId:10,tocIndex:4},{value:"Partial<CSSStyleDeclaration>",paraId:10,tocIndex:4},{value:"delay",paraId:10,tocIndex:4},{value:"Delay update time (milliseconds) for performance optimization",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:"128",paraId:10,tocIndex:4},{value:"filter",paraId:10,tocIndex:4},{value:"Filter for filtering out elements that do not need to be displayed",paraId:10,tocIndex:4},{value:"(id: string, elementType: ",paraId:10,tocIndex:4},{value:"node",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"edge",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"combo",paraId:10,tocIndex:4},{value:") => boolean",paraId:10,tocIndex:4},{value:"maskStyle",paraId:10,tocIndex:4},{value:"Style of the mask",paraId:10,tocIndex:4},{value:"Partial<CSSStyleDeclaration>",paraId:10,tocIndex:4},{value:"padding",paraId:10,tocIndex:4},{value:"Padding",paraId:10,tocIndex:4},{value:"number | number[]",paraId:10,tocIndex:4},{value:"10",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:"Position of the thumbnail relative to the canvas",paraId:10,tocIndex:4},{value:"[number, number] | ",paraId:10,tocIndex:4},{value:"left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"left-top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"left-bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right-top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right-bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top-left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top-right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom-left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom-right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"center",paraId:10,tocIndex:4},{value:"right-bottom",paraId:10,tocIndex:4},{value:"renderer",paraId:10,tocIndex:4},{value:"Renderer, default is Canvas renderer",paraId:10,tocIndex:4},{value:"IRenderer",paraId:10,tocIndex:4},{value:"shape",paraId:10,tocIndex:4},{value:"Method for generating element thumbnails",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:" | ((id: string, elementType: ",paraId:10,tocIndex:4},{value:"node",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"edge",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"combo",paraId:10,tocIndex:4},{value:") => DisplayObject)",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:"size",paraId:10,tocIndex:4},{value:"Width and height",paraId:10,tocIndex:4},{value:"[number, number]",paraId:10,tocIndex:4},{value:"[240, 160]",paraId:10,tocIndex:4},{value:"Set the style of the thumbnail container, not effective when an external container is passed. Inherits all CSS style properties (CSSStyleDeclaration), and you can use any valid CSS property to configure the style of the thumbnail container.",paraId:11,tocIndex:5},{value:"Below are some common configurations:",paraId:12,tocIndex:5},{value:"Property",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:"Type",paraId:13,tocIndex:5},{value:"Default Value",paraId:13,tocIndex:5},{value:"Required",paraId:13,tocIndex:5},{value:"border",paraId:13,tocIndex:5},{value:"Container border style",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"1px solid #ddd",paraId:13,tocIndex:5},{value:"✓",paraId:13,tocIndex:5},{value:"background",paraId:13,tocIndex:5},{value:"Container background color",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"#fff",paraId:13,tocIndex:5},{value:"✓",paraId:13,tocIndex:5},{value:"borderRadius",paraId:13,tocIndex:5},{value:"Container border radius",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"boxShadow",paraId:13,tocIndex:5},{value:"Container shadow effect",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"padding",paraId:13,tocIndex:5},{value:"Container padding",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"margin",paraId:13,tocIndex:5},{value:"Container margin",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"opacity",paraId:13,tocIndex:5},{value:"Opacity",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"Specify the style of the mask. Inherits all CSS style properties (CSSStyleDeclaration), and you can use any valid CSS property to configure the style of the thumbnail container.",paraId:14,tocIndex:6},{value:"Below are some common configurations:",paraId:15,tocIndex:6},{value:"Property",paraId:16,tocIndex:6},{value:"Description",paraId:16,tocIndex:6},{value:"Type",paraId:16,tocIndex:6},{value:"Default Value",paraId:16,tocIndex:6},{value:"Required",paraId:16,tocIndex:6},{value:"border",paraId:16,tocIndex:6},{value:"Container border style",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"1px solid #ddd",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"background",paraId:16,tocIndex:6},{value:"Container background color",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"rgba(0, 0, 0, 0.1)",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"borderRadius",paraId:16,tocIndex:6},{value:"Container border radius",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"boxShadow",paraId:16,tocIndex:6},{value:"Container shadow effect",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"padding",paraId:16,tocIndex:6},{value:"Container padding",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"margin",paraId:16,tocIndex:6},{value:"Container margin",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"opacity",paraId:16,tocIndex:6},{value:"Opacity",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"Position of the thumbnail relative to the canvas, the thumbnail position configuration supports array form and preset value form.",paraId:17,tocIndex:7},{value:"Array form [number, number] represents relative position, with a value range of 0~1. For example: [0, 0] represents the top left corner of the canvas, [1, 1] represents the bottom right corner of the canvas.",paraId:18,tocIndex:7},{value:"Preset value form is used to set the fixed position of the thumbnail on the canvas, optional values are: ",paraId:18,tocIndex:7},{value:"left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"left-top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"left-bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right-top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right-bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top-left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top-right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom-left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom-right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"center",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  plugins:[\n    {\n      ... // Other configurations\n      key: 'minimap',\n      type: 'minimap',\n      position: 'right-bottom'  // Modify the position of the minimap here\n    }\n  ]\n})\n",paraId:19,tocIndex:7},{value:"The effect is as follows:",paraId:20,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `node-${i}`,\n      x: Math.random() * 500,\n      y: Math.random() * 300,\n    })),\n    edges: Array.from({ length: 100 }).map((_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 50)}`,\n      target: `node-${Math.floor(Math.random() * 50)}`,\n    })),\n  },\n  node: { style: { fill: '#7e3feb' } },\n  edge: { style: { stroke: '#8b9baf' } },\n  layout: { type: 'force' },\n  behaviors: ['drag-canvas'],\n  plugins: [{ type: 'minimap', key: 'minimap', size: [240, 160], position: 'right-bottom' }],\n});\n\ngraph.render();\n",paraId:21,tocIndex:7},{value:"Set the width and height of the minimap, default value is [240, 160]",paraId:22,tocIndex:8},{value:"const graph = new Graph({\n  plugins:[\n    {\n      ... // Other configurations\n      key: 'minimap',\n      type: 'minimap',\n      size: [200, 120]  // Set the width and height of the minimap\n    }\n  ]\n})\n",paraId:23,tocIndex:8},{value:"The effect is as follows:",paraId:24,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `node-${i}`,\n      x: Math.random() * 500,\n      y: Math.random() * 300,\n    })),\n    edges: Array.from({ length: 100 }).map((_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 50)}`,\n      target: `node-${Math.floor(Math.random() * 50)}`,\n    })),\n  },\n  node: { style: { fill: '#7e3feb' } },\n  edge: { style: { stroke: '#8b9baf' } },\n  layout: { type: 'force' },\n  behaviors: ['drag-canvas'],\n  plugins: [{ type: 'minimap', key: 'minimap', size: [200, 120], position: 'right-bottom' }],\n});\n\ngraph.render();\n",paraId:25,tocIndex:8}]},61029:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(13934);const t=[{value:"The Snapline plugin provides intelligent alignment guidelines for the canvas, automatically displaying guide lines when moving nodes and supporting automatic snapping. It helps users achieve precise alignment and is an important tool for improving efficiency and accuracy in graphic editing.",paraId:0,tocIndex:0},{value:"The Snapline plugin is mainly suitable for the following scenarios:",paraId:1,tocIndex:1},{value:"When manually adjusting node positions and precise alignment with other nodes is needed",paraId:2,tocIndex:1},{value:"When dragging multiple nodes while maintaining their alignment relationships",paraId:2,tocIndex:1},{value:"When creating standardized graphic layouts to ensure consistency in node spacing and positioning",paraId:2,tocIndex:1},{value:"When improving node layout efficiency through automatic snapping functionality",paraId:2,tocIndex:1},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'snapline',\n      key: 'my-snapline', // Specify unique identifier\n      tolerance: 5, // Alignment snap threshold\n      offset: 20, // Guide line extension distance\n      autoSnap: true, // Enable automatic snapping\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-0' },\n        { id: 'node-1' },\n        { id: 'node-2' },\n        { id: 'node-3' },\n        { id: 'node-4' },\n        { id: 'node-5' },\n      ],\n      edges: [\n        { source: 'node-0', target: 'node-1' },\n        { source: 'node-0', target: 'node-2' },\n        { source: 'node-0', target: 'node-3' },\n        { source: 'node-0', target: 'node-4' },\n        { source: 'node-1', target: 'node-0' },\n        { source: 'node-2', target: 'node-0' },\n        { source: 'node-3', target: 'node-0' },\n        { source: 'node-4', target: 'node-0' },\n        { source: 'node-5', target: 'node-0' },\n      ],\n    },\n    layout: { type: 'grid' },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      { type: 'grid-line', key: 'grid-line', size: 30 },\n      {\n        type: 'snapline',\n        key: 'snapline',\n        tolerance: 5,\n        offset: 20,\n        verticalLineStyle: { stroke: '#F08F56', lineWidth: 2 },\n        horizontalLineStyle: { stroke: '#17C76F', lineWidth: 2 },\n      },\n    ],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'snapline',\n      tolerance: 5,\n      offset: 20,\n      autoSnap: true,\n    };\n    const optionFolder = gui.addFolder('Snapline Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'tolerance', 1, 20, 1);\n    optionFolder.add(options, 'offset', 1, 50, 1);\n    optionFolder.add(options, 'autoSnap');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'snapline',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Plugin type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"'snapline'",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"Plugin unique identifier",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"tolerance",paraId:5,tocIndex:4},{value:"The alignment accuracy, that is, when the distance between the moved node and the target position is less than tolerance, the alignment line is displayed",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"5",paraId:5,tocIndex:4},{value:"offset",paraId:5,tocIndex:4},{value:"The extension distance of the snapline",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"20",paraId:5,tocIndex:4},{value:"autoSnap",paraId:5,tocIndex:4},{value:"Whether to enable automatic snapping",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"shape",paraId:5,tocIndex:4},{value:"Specifies which shape on the element to use as the reference shape:",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'key'",paraId:5,tocIndex:4},{value:": uses the key shape of the element as the reference shape",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"Function",paraId:5,tocIndex:4},{value:": receives the element and returns a shape",paraId:5,tocIndex:4},{value:"string | ((node: Node) => DisplayObject)",paraId:5,tocIndex:4},{value:"'key'",paraId:5,tocIndex:4},{value:"verticalLineStyle",paraId:5,tocIndex:4},{value:"Vertical snapline style",paraId:5,tocIndex:4},{value:"BaseStyleProps",paraId:5,tocIndex:4},{value:"{ stroke: '#1783FF' }",paraId:5,tocIndex:4},{value:"horizontalLineStyle",paraId:5,tocIndex:4},{value:"Horizontal snapline style",paraId:5,tocIndex:4},{value:"BaseStyleProps",paraId:5,tocIndex:4},{value:"{ stroke: '#1783FF' }",paraId:5,tocIndex:4},{value:"filter",paraId:5,tocIndex:4},{value:"Filter nodes that do not need to participate in alignment",paraId:5,tocIndex:4},{value:"(node: Node) => boolean",paraId:5,tocIndex:4},{value:"() => true",paraId:5,tocIndex:4},{value:"The ",paraId:6,tocIndex:5},{value:"shape",paraId:6,tocIndex:5},{value:" property specifies the reference shape for elements and supports the following configurations:",paraId:6,tocIndex:5},{value:"// Use the key shape as reference\n{\n  type: 'snapline',\n  shape: 'key'\n}\n\n// Use custom function to return reference shape\n{\n  type: 'snapline',\n  shape: (node) => {\n    return node.getShape('custom-shape');\n  }\n}\n",paraId:7,tocIndex:5},{value:"Property",paraId:8,tocIndex:6},{value:"Description",paraId:8,tocIndex:6},{value:"Type",paraId:8,tocIndex:6},{value:"Default",paraId:8,tocIndex:6},{value:"stroke",paraId:8,tocIndex:6},{value:"Line color",paraId:8,tocIndex:6},{value:"string | Pattern | null",paraId:8,tocIndex:6},{value:"'#1783FF'",paraId:8,tocIndex:6},{value:"opacity",paraId:8,tocIndex:6},{value:"Overall opacity",paraId:8,tocIndex:6},{value:"number | string",paraId:8,tocIndex:6},{value:"1",paraId:8,tocIndex:6},{value:"strokeOpacity",paraId:8,tocIndex:6},{value:"Stroke opacity",paraId:8,tocIndex:6},{value:"number | string",paraId:8,tocIndex:6},{value:"1",paraId:8,tocIndex:6},{value:"lineWidth",paraId:8,tocIndex:6},{value:"Line width",paraId:8,tocIndex:6},{value:"number | string",paraId:8,tocIndex:6},{value:"1",paraId:8,tocIndex:6},{value:"lineCap",paraId:8,tocIndex:6},{value:"Line end style",paraId:8,tocIndex:6},{value:"'butt'",paraId:8,tocIndex:6},{value:" | ",paraId:8,tocIndex:6},{value:"'round'",paraId:8,tocIndex:6},{value:" | ",paraId:8,tocIndex:6},{value:"'square'",paraId:8,tocIndex:6},{value:"'butt'",paraId:8,tocIndex:6},{value:"lineJoin",paraId:8,tocIndex:6},{value:"Line join style",paraId:8,tocIndex:6},{value:"'miter'",paraId:8,tocIndex:6},{value:" | ",paraId:8,tocIndex:6},{value:"'round'",paraId:8,tocIndex:6},{value:" | ",paraId:8,tocIndex:6},{value:"'bevel'",paraId:8,tocIndex:6},{value:"'miter'",paraId:8,tocIndex:6},{value:"lineDash",paraId:8,tocIndex:6},{value:"Dash line configuration",paraId:8,tocIndex:6},{value:"number | string | (string | number)[]",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"lineDashOffset",paraId:8,tocIndex:6},{value:"Dash line offset",paraId:8,tocIndex:6},{value:"number",paraId:8,tocIndex:6},{value:"0",paraId:8,tocIndex:6},{value:"shadowBlur",paraId:8,tocIndex:6},{value:"Shadow blur",paraId:8,tocIndex:6},{value:"number",paraId:8,tocIndex:6},{value:"0",paraId:8,tocIndex:6},{value:"shadowColor",paraId:8,tocIndex:6},{value:"Shadow color",paraId:8,tocIndex:6},{value:"string",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"shadowOffsetX",paraId:8,tocIndex:6},{value:"Shadow X offset",paraId:8,tocIndex:6},{value:"number",paraId:8,tocIndex:6},{value:"0",paraId:8,tocIndex:6},{value:"shadowOffsetY",paraId:8,tocIndex:6},{value:"Shadow Y offset",paraId:8,tocIndex:6},{value:"number",paraId:8,tocIndex:6},{value:"0",paraId:8,tocIndex:6},{value:"cursor",paraId:8,tocIndex:6},{value:"Mouse cursor style",paraId:8,tocIndex:6},{value:"string",paraId:8,tocIndex:6},{value:"'default'",paraId:8,tocIndex:6},{value:"zIndex",paraId:8,tocIndex:6},{value:"Rendering level",paraId:8,tocIndex:6},{value:"number",paraId:8,tocIndex:6},{value:"0",paraId:8,tocIndex:6},{value:"Example configuration:",paraId:9,tocIndex:6},{value:"{\n  type: 'snapline',\n  horizontalLineStyle: {\n    stroke: '#F08F56',\n    strokeOpacity: 0.8,\n    lineWidth: 2,\n    lineDash: [4, 4],\n    lineDashOffset: 0,\n    opacity: 1,\n    cursor: 'move',\n  },\n  verticalLineStyle: {\n    stroke: '#17C76F',\n    strokeOpacity: 0.8,\n    lineWidth: 2,\n    lineDash: [4, 4],\n    lineDashOffset: 0,\n    opacity: 1,\n    cursor: 'move',\n  },\n}\n",paraId:10,tocIndex:6},{value:"The simplest usage:",paraId:11,tocIndex:8},{value:"const graph = new Graph({\n  plugins: ['snapline'],\n});\n",paraId:12,tocIndex:8},{value:"You can customize the snapline behavior according to your needs:",paraId:13,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'snapline',\n      tolerance: 8, // Larger snap range\n      offset: 30, // Longer extension lines\n      horizontalLineStyle: {\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n      filter: (node) => node.id !== 'node-0', // Filter nodes by id, exclude from alignment\n    },\n  ],\n});\n",paraId:14,tocIndex:9}]},36132:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83466);const t=[{value:"The Timebar plugin is an important tool for exploring time-series data. It can display the time distribution of data in the form of a timeline or trend chart, and supports interactions such as time interval filtering and dynamic playback, helping users better understand the changes in data over time.",paraId:0,tocIndex:0},{value:"Need to display and analyze the time distribution of time-series data",paraId:1,tocIndex:1},{value:"Need to filter and explore graph data through the time dimension",paraId:1,tocIndex:1},{value:"Need to dynamically display the process of data changing over time",paraId:1,tocIndex:1},{value:"Below is a simple example of initializing the Timebar plugin:",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'timebar',\n      data: timeData, // Time data\n      width: 450, // Timebar width\n      height: 60, // Timebar height\n      position: 'bottom', // Position\n      loop: false, // Whether to loop playback\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: new Array(25).fill(0).map((_, index) => ({\n        id: `node-${index}`,\n        data: {\n          timestamp: new Date('2023-08-01').getTime() + (index % 5) * 3600 * 24 * 1000,\n          value: index % 10,\n          label: new Date(new Date('2023-08-01').getTime() + (index % 5) * 3600 * 24 * 1000).toLocaleString(),\n        },\n      })),\n      edges: new Array(25).fill(0).map((_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${i % 12}`,\n        target: `node-${(i % 10) + 15}`,\n        data: {\n          edgeType: 'e1',\n        },\n      })),\n    },\n    layout: { type: 'grid', cols: 5 },\n    node: {\n      style: { size: 24, fill: '#7e3feb' },\n      palette: { field: 'cluster' },\n    },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: ['drag-canvas'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'timebar',\n        key: 'timebar',\n        data: [10, 2, 3, 4, 15].map((value, index) => ({\n          time: new Date(new Date('2023-08-01').getTime() + index * 3600 * 24 * 1000),\n          value,\n          label: new Date(new Date('2023-08-01').getTime() + index * 3600 * 24 * 1000).toLocaleString(),\n        })),\n        timebarType: 'time',\n        height: 100,\n      },\n    ],\n    autoFit: 'view',\n    padding: [10, 0, 100, 0],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'timebar',\n      position: 'bottom',\n      enable: true,\n      timebarType: 'time',\n      className: 'g6-timebar',\n      width: 450,\n      height: 100,\n      zIndex: 3,\n      elementTypes: ['node'],\n      mode: 'modify',\n      loop: false,\n    };\n    const optionFolder = gui.addFolder('Timebar Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'height', 40, 100, 1);\n    optionFolder.add(options, 'width', 200, 800, 1);\n    optionFolder.add(options, 'position', ['bottom', 'top']);\n    optionFolder.add(options, 'timebarType', ['time', 'chart']);\n    optionFolder.add(options, 'loop');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'timebar',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiFolder = gui.addFolder('Timebar API');\n    const instance = graph.getPluginInstance('timebar');\n    apiFolder.add(instance, 'play');\n    apiFolder.add(instance, 'pause');\n    apiFolder.add(instance, 'forward');\n    apiFolder.add(instance, 'backward');\n    apiFolder.add(instance, 'reset');\n  },\n);\n",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default Value",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Plugin type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"timebar",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"Unique identifier for the plugin, can be used to get the plugin instance or update plugin options",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"className",paraId:5,tocIndex:4},{value:"Additional class name for the toolbar DOM",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"g6-timebar",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:"X position (position will be invalid if set)",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"y",paraId:5,tocIndex:4},{value:"Y position (position will be invalid if set)",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:"Timebar width",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"450",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:"Timebar height",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"60",paraId:5,tocIndex:4},{value:"position",paraId:5,tocIndex:4},{value:"Timebar position",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"top",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:"padding",paraId:5,tocIndex:4},{value:"Padding",paraId:5,tocIndex:4},{value:"number | number[]",paraId:5,tocIndex:4},{value:"10",paraId:5,tocIndex:4},{value:"data",paraId:5,tocIndex:4},{value:"Time data",paraId:5,tocIndex:4},{value:"number[] | { time: number; value: number }[]",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"timebarType",paraId:5,tocIndex:4},{value:"Timebar display type",paraId:5,tocIndex:4},{value:"time",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"chart",paraId:5,tocIndex:4},{value:"time",paraId:5,tocIndex:4},{value:"elementTypes",paraId:5,tocIndex:4},{value:"Filter element types",paraId:5,tocIndex:4},{value:"(",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"edge",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"combo",paraId:5,tocIndex:4},{value:")[]",paraId:5,tocIndex:4},{value:"[",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:"]",paraId:5,tocIndex:4},{value:"mode",paraId:5,tocIndex:4},{value:"Control element filtering method, supports the following two configurations: ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:": filter by modifying graph data ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"visibility",paraId:5,tocIndex:4},{value:": filter by modifying element visibility",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"visibility",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:"values",paraId:5,tocIndex:4},{value:"Current time value",paraId:5,tocIndex:4},{value:"number | [number, number] | Date | [Date, Date]",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"loop",paraId:5,tocIndex:4},{value:"Whether to loop playback",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:"getTime",paraId:5,tocIndex:4},{value:"Method to get element time",paraId:5,tocIndex:4},{value:"(datum: ElementDatum) => number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"labelFormatter",paraId:5,tocIndex:4},{value:"Custom time formatting in chart mode",paraId:5,tocIndex:4},{value:"(time: number | Date) => string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onChange",paraId:5,tocIndex:4},{value:"Callback when the time interval changes",paraId:5,tocIndex:4},{value:"(values: number | [number, number]) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onReset",paraId:5,tocIndex:4},{value:"Callback when reset",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onSpeedChange",paraId:5,tocIndex:4},{value:"Callback when playback speed changes",paraId:5,tocIndex:4},{value:"(speed: number) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onPlay",paraId:5,tocIndex:4},{value:"Callback when playback starts",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onPause",paraId:5,tocIndex:4},{value:"Callback when paused",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onBackward",paraId:5,tocIndex:4},{value:"Callback when moving backward",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onForward",paraId:5,tocIndex:4},{value:"Callback when moving forward",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"The ",paraId:6,tocIndex:5},{value:"timebarType",paraId:6,tocIndex:5},{value:" property is used to control the display type of the timebar, supporting the following two configurations:",paraId:6,tocIndex:5},{value:"time",paraId:7,tocIndex:5},{value:": Displayed as a timeline, refer to ",paraId:7,tocIndex:5},{value:"Time Mode Example",paraId:8,tocIndex:5},{value:"chart",paraId:7,tocIndex:5},{value:": Displayed as a trend chart, at this time the ",paraId:7,tocIndex:5},{value:"data",paraId:7,tocIndex:5},{value:" configuration item under ",paraId:7,tocIndex:5},{value:"timebar",paraId:7,tocIndex:5},{value:" needs to pass an additional ",paraId:7,tocIndex:5},{value:"value",paraId:7,tocIndex:5},{value:" field as chart data, refer to ",paraId:7,tocIndex:5},{value:"Chart Mode Example",paraId:9,tocIndex:5},{value:"The simplest configuration method:",paraId:10,tocIndex:7},{value:"const graph = new Graph({\n  layout: { type: 'grid', cols: 5 },\n  plugins: [\n    {\n      type: 'timebar',\n      data: [\n        {\n          time: new Date('2023-08-01').getTime(),\n          value: 5,\n        },\n        {\n          time: new Date('2023-08-02').getTime(),\n          value: 10,\n        },\n        {\n          time: new Date('2023-08-03').getTime(),\n          value: 15,\n        },\n      ],\n    },\n  ],\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        label: 'Node 1',\n        // By default, elementTypes=['node'], so nodes need to set data.timestamp to display sequentially according to the timeline\n        data: {\n          timestamp: new Date('2023-08-01').getTime(),\n        },\n      },\n      {\n        id: 'node2',\n        label: 'Node 2',\n        data: {\n          timestamp: new Date('2023-08-02').getTime(),\n        },\n      },\n      {\n        id: 'node3',\n        label: 'Node 3',\n        data: {\n          timestamp: new Date('2023-08-03').getTime(),\n        },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge1',\n        source: 'node1',\n        target: 'node2',\n        // Scenario 1: By default, elementTypes = ['node']\n        // - Edges do not need to set data.timestamp, the display/hide of edges depends entirely on whether the two connected nodes are visible\n\n        // Scenario 2: If elementTypes includes 'edge', for example, elementTypes = ['node', 'edge']\n        // - At this time, edges must set data.timestamp, and the display of edges is controlled by it\n        // data: {\n        //   timestamp: new Date('2023-08-01').getTime()\n        // }\n      },\n      {\n        id: 'edge2',\n        source: 'node2',\n        target: 'node3',\n      },\n      {\n        id: 'edge3',\n        source: 'node3',\n        target: 'node1',\n      },\n    ],\n  },\n});\n",paraId:11,tocIndex:7},{value:"The effect is as follows:",paraId:12,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  width: 600,\n  height: 400,\n  layout: { type: 'grid', cols: 5 },\n  plugins: [\n    {\n      type: 'timebar',\n      data: [\n        {\n          time: new Date('2023-08-01').getTime(),\n          value: 5,\n        },\n        {\n          time: new Date('2023-08-02').getTime(),\n          value: 10,\n        },\n        {\n          time: new Date('2023-08-03').getTime(),\n          value: 15,\n        },\n      ],\n    },\n  ],\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        label: 'Node 1',\n        data: {\n          timestamp: new Date('2023-08-01').getTime(),\n        },\n      },\n      {\n        id: 'node2',\n        label: 'Node 2',\n        data: {\n          timestamp: new Date('2023-08-02').getTime(),\n        },\n      },\n      {\n        id: 'node3',\n        label: 'Node 3',\n        data: {\n          timestamp: new Date('2023-08-03').getTime(),\n        },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge1',\n        source: 'node1',\n        target: 'node2',\n      },\n      {\n        id: 'edge2',\n        source: 'node2',\n        target: 'node3',\n      },\n      {\n        id: 'edge3',\n        source: 'node3',\n        target: 'node1',\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:13,tocIndex:7},{value:"width",paraId:14,tocIndex:8},{value:", ",paraId:14,tocIndex:8},{value:"height",paraId:14,tocIndex:8},{value:", ",paraId:14,tocIndex:8},{value:"padding",paraId:14,tocIndex:8},{value:", ",paraId:14,tocIndex:8},{value:"className",paraId:14,tocIndex:8},{value:" can customize the display effect of the timebar, but note that ",paraId:14,tocIndex:8},{value:"className",paraId:14,tocIndex:8},{value:" only acts on the outer DOM container and cannot affect the internal Canvas rendering content of the timebar (timeline, chart, play button, etc.).",paraId:14,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'timebar',\n      className: 'custom-timebar', // Note: Since the content is Canvas rendered, CSS styles cannot affect the internal content of the timebar\n      width: 400, // Set timebar width\n      height: 80, // Set timebar height\n      padding: [20, 20, 10, 20], // Set padding [top, right, bottom, left]\n      position: 'bottom', // Keep position at the bottom\n      data: timeData,\n      // labelFormatter: (time) => {\n      //   return new Date(time).toLocaleDateString();\n      // }\n    },\n  ],\n});\n",paraId:15,tocIndex:8},{value:"CSS can only set the style of the timebar container:",paraId:16,tocIndex:8},{value:".custom-timebar {\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n",paraId:17,tocIndex:8},{value:"The effect is as follows:",paraId:18,tocIndex:8},{value:"createGraph(\n  {\n    data: () => {\n      return {\n        nodes: [\n          {\n            id: 'node1',\n            style: { x: 100, y: 100, label: 'Node 1' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime(),\n            },\n          },\n          {\n            id: 'node2',\n            style: { x: 200, y: 100, label: 'Node 2' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime() + 3600 * 24 * 1000,\n            },\n          },\n          {\n            id: 'node3',\n            style: { x: 150, y: 200, label: 'Node 3' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime() + 3600 * 24 * 1000 * 2,\n            },\n          },\n        ],\n        edges: [\n          { id: 'edge1', source: 'node1', target: 'node2' },\n          { id: 'edge2', source: 'node2', target: 'node3' },\n          { id: 'edge3', source: 'node3', target: 'node1' },\n        ],\n      };\n    },\n    node: {\n      style: {\n        size: 20,\n        label: true,\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#91d5ff',\n        lineWidth: 1,\n      },\n    },\n    plugins: [\n      {\n        type: 'timebar',\n        className: 'custom-timebar',\n        width: 400,\n        height: 80,\n        padding: [20, 20, 10, 20],\n        position: 'bottom',\n        data: [\n          {\n            time: new Date('2023-08-01').getTime(),\n            value: 5,\n          },\n          {\n            time: new Date('2023-08-01').getTime() + 3600 * 24 * 1000,\n            value: 10,\n          },\n          {\n            time: new Date('2023-08-01').getTime() + 3600 * 24 * 1000 * 2,\n            value: 15,\n          },\n        ],\n        labelFormatter: (time) => {\n          return new Date(time).toLocaleDateString();\n        },\n      },\n    ],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui?.hide();\n    const style = document.createElement('style');\n    style.innerHTML = `\n      .custom-timebar {\n        background-color: #f0f0f0;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n    `;\n    document.head.appendChild(style);\n  },\n);\n",paraId:19,tocIndex:8},{value:"Time Mode",paraId:20,tocIndex:9},{value:"Chart Mode",paraId:21,tocIndex:9}]},61779:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42806);const t=[{value:"The Toolbar is a plugin in G6 used to provide a collection of operation buttons, supporting common chart operations such as zoom in, zoom out, auto-fit, and reset. Through the toolbar, users can quickly access common functions of the chart, improving operational efficiency and user experience.",paraId:0,tocIndex:0},{value:"This plugin is mainly used for:",paraId:1,tocIndex:1},{value:"Quickly accessing common functions of the chart",paraId:2,tocIndex:1},{value:"Below is a simple example of initializing the Toolbar plugin:",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n        { id: 'auto-fit', value: 'auto-fit' },\n      ],\n      onClick: (value) => {\n        // Handle button click events\n        if (value === 'zoom-in') {\n          graph.zoomTo(1.1);\n        } else if (value === 'zoom-out') {\n          graph.zoomTo(0.9);\n        } else if (value === 'auto-fit') {\n          graph.fitView();\n        }\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"Property",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:"Type",paraId:5,tocIndex:3},{value:"Default Value",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"Plugin type",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"toolbar",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"key",paraId:5,tocIndex:3},{value:"Unique identifier for the plugin, used for updates",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"className",paraId:5,tocIndex:3},{value:"Additional CSS class name for the toolbar DOM element",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"position",paraId:5,tocIndex:3},{value:"Toolbar position relative to the canvas, ",paraId:5,tocIndex:3},{value:"optional values",paraId:6,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"'top-left'",paraId:5,tocIndex:3},{value:"style",paraId:5,tocIndex:3},{value:"Custom style for the toolbar DOM element, ",paraId:5,tocIndex:3},{value:"common values",paraId:7,tocIndex:3},{value:"CSSStyleDeclaration",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:"Returns the list of toolbar items",paraId:5,tocIndex:3},{value:"() => ",paraId:5,tocIndex:3},{value:"ToolbarItem",paraId:8,tocIndex:3},{value:"[] | Promise<",paraId:5,tocIndex:3},{value:"ToolbarItem",paraId:9,tocIndex:3},{value:"[]>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"onClick",paraId:5,tocIndex:3},{value:"Callback function after a toolbar item is clicked",paraId:5,tocIndex:3},{value:"(value: string, target: Element) => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"The ",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:" parameter supports the following values:",paraId:10,tocIndex:4},{value:"'top-left'",paraId:11,tocIndex:4},{value:": Top left corner",paraId:11,tocIndex:4},{value:"'top-right'",paraId:11,tocIndex:4},{value:": Top right corner",paraId:11,tocIndex:4},{value:"'bottom-left'",paraId:11,tocIndex:4},{value:": Bottom left corner",paraId:11,tocIndex:4},{value:"'bottom-right'",paraId:11,tocIndex:4},{value:": Bottom right corner",paraId:11,tocIndex:4},{value:"'left-top'",paraId:11,tocIndex:4},{value:": Left side, top",paraId:11,tocIndex:4},{value:"'left-bottom'",paraId:11,tocIndex:4},{value:": Left side, bottom",paraId:11,tocIndex:4},{value:"'right-top'",paraId:11,tocIndex:4},{value:": Right side, top",paraId:11,tocIndex:4},{value:"'right-bottom'",paraId:11,tocIndex:4},{value:": Right side, bottom",paraId:11,tocIndex:4},{value:"Attribute",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:"Type",paraId:12,tocIndex:5},{value:"Default Value",paraId:12,tocIndex:5},{value:"backgroundColor",paraId:12,tocIndex:5},{value:"Background color",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"#fff",paraId:12,tocIndex:5},{value:"border",paraId:12,tocIndex:5},{value:"Border",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"1px solid #e8e8e8",paraId:12,tocIndex:5},{value:"borderRadius",paraId:12,tocIndex:5},{value:"Border radius",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"4px",paraId:12,tocIndex:5},{value:"height",paraId:12,tocIndex:5},{value:"Height",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"auto",paraId:12,tocIndex:5},{value:"margin",paraId:12,tocIndex:5},{value:"Margin",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"12px",paraId:12,tocIndex:5},{value:"opacity",paraId:12,tocIndex:5},{value:"Opacity",paraId:12,tocIndex:5},{value:"number",paraId:12,tocIndex:5},{value:"0.9",paraId:12,tocIndex:5},{value:"padding",paraId:12,tocIndex:5},{value:"Padding",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"8px",paraId:12,tocIndex:5},{value:"width",paraId:12,tocIndex:5},{value:"Width",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"auto",paraId:12,tocIndex:5},{value:"Each toolbar item (ToolbarItem) includes the following attributes:",paraId:13,tocIndex:6},{value:"Attribute",paraId:14,tocIndex:6},{value:"Description",paraId:14,tocIndex:6},{value:"Type",paraId:14,tocIndex:6},{value:"Required",paraId:14,tocIndex:6},{value:"id",paraId:14,tocIndex:6},{value:"Icon ID of the item, see ",paraId:14,tocIndex:6},{value:"Built-in Icons",paraId:15,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"value",paraId:14,tocIndex:6},{value:"Value returned when the item is clicked",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"The Toolbar provides the following built-in icon IDs:",paraId:16,tocIndex:7},{value:"'zoom-in'",paraId:17,tocIndex:7},{value:": Zoom in",paraId:17,tocIndex:7},{value:"'zoom-out'",paraId:17,tocIndex:7},{value:": Zoom out",paraId:17,tocIndex:7},{value:"'redo'",paraId:17,tocIndex:7},{value:": Redo",paraId:17,tocIndex:7},{value:"'undo'",paraId:17,tocIndex:7},{value:": Undo",paraId:17,tocIndex:7},{value:"'edit'",paraId:17,tocIndex:7},{value:": Edit",paraId:17,tocIndex:7},{value:"'delete'",paraId:17,tocIndex:7},{value:": Delete",paraId:17,tocIndex:7},{value:"'auto-fit'",paraId:17,tocIndex:7},{value:": Auto-fit view",paraId:17,tocIndex:7},{value:"'export'",paraId:17,tocIndex:7},{value:": Export chart",paraId:17,tocIndex:7},{value:"'reset'",paraId:17,tocIndex:7},{value:": Reset view",paraId:17,tocIndex:7},{value:"'request-fullscreen'",paraId:17,tocIndex:7},{value:": Request fullscreen",paraId:17,tocIndex:7},{value:"'exit-fullscreen'",paraId:17,tocIndex:7},{value:": Exit fullscreen",paraId:17,tocIndex:7},{value:"In addition to using built-in icons, you can also use custom icons by introducing third-party icon libraries (such as Alibaba iconfont):",paraId:18,tocIndex:8},{value:"// Introduce iconfont script\nconst iconFont = document.createElement('script');\niconFont.src = '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js'; // Replace with your iconfont script URL\ndocument.head.appendChild(iconFont);\n\n// Use custom icons in the toolbar\nconst graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'icon-xinjian', value: 'new' }, // Use icons from iconfont\n        { id: 'icon-fenxiang', value: 'share' },\n        { id: 'icon-chexiao', value: 'undo' },\n      ],\n      onClick: (value) => {\n        // Handle click events\n      },\n    },\n  ],\n});\n",paraId:19,tocIndex:8},{value:"Note: Custom icon IDs usually start with ",paraId:20,tocIndex:8},{value:"icon-",paraId:20,tocIndex:8},{value:" and need to correspond to the icon names in the introduced iconfont.",paraId:20,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      position: 'top-right',\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n        { id: 'undo', value: 'undo' },\n        { id: 'redo', value: 'redo' },\n        { id: 'auto-fit', value: 'fit' },\n      ],\n      onClick: (value) => {\n        // redo, undo need to be used with the history plugin\n        const history = graph.getPluginInstance('history');\n        switch (value) {\n          case 'zoom-in':\n            graph.zoomTo(1.1);\n            break;\n          case 'zoom-out':\n            graph.zoomTo(0.9);\n            break;\n          case 'undo':\n            history?.undo();\n            break;\n          case 'redo':\n            history?.redo();\n            break;\n          case 'fit':\n            graph.fitView();\n            break;\n          default:\n            break;\n        }\n      },\n    },\n  ],\n});\n",paraId:21,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      className: 'my-custom-toolbar',\n      style: {\n        backgroundColor: '#f5f5f5',\n        padding: '8px',\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n        borderRadius: '8px',\n        border: '1px solid #e8e8e8',\n        opacity: '0.9',\n        marginTop: '12px',\n        marginLeft: '12px',\n      },\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n      ],\n      onClick: (value) => {\n        // Handle click events\n      },\n    },\n  ],\n});\n",paraId:22,tocIndex:11},{value:"Common style attributes include:",paraId:23,tocIndex:11},{value:"backgroundColor",paraId:24,tocIndex:11},{value:": Background color",paraId:24,tocIndex:11},{value:"padding",paraId:24,tocIndex:11},{value:": Padding",paraId:24,tocIndex:11},{value:"margin",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"marginTop",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"marginLeft",paraId:24,tocIndex:11},{value:", etc.: Margin",paraId:24,tocIndex:11},{value:"border",paraId:24,tocIndex:11},{value:": Border",paraId:24,tocIndex:11},{value:"borderRadius",paraId:24,tocIndex:11},{value:": Border radius",paraId:24,tocIndex:11},{value:"boxShadow",paraId:24,tocIndex:11},{value:": Shadow effect",paraId:24,tocIndex:11},{value:"opacity",paraId:24,tocIndex:11},{value:": Opacity",paraId:24,tocIndex:11},{value:"width",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"height",paraId:24,tocIndex:11},{value:": Width and height (default is content adaptive)",paraId:24,tocIndex:11},{value:"zIndex",paraId:24,tocIndex:11},{value:": Layer (default is 100)",paraId:24,tocIndex:11},{value:"display",paraId:24,tocIndex:11},{value:": Display mode (default is flex)",paraId:24,tocIndex:11},{value:"The toolbar container is set to ",paraId:25,tocIndex:11},{value:"display: flex",paraId:25,tocIndex:11},{value:" by default, and child items use row layout by default (or change according to the direction configured by position). You can customize its appearance and position through ",paraId:25,tocIndex:11},{value:"style",paraId:25,tocIndex:11},{value:".",paraId:25,tocIndex:11},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: async () => {\n        // Toolbar configuration can be obtained from the server or other asynchronous sources\n        const response = await fetch('/api/toolbar-config');\n        const items = await response.json();\n        return items;\n      },\n      onClick: (value) => {\n        // Handle click events\n      },\n    },\n  ],\n});\n",paraId:26,tocIndex:12},{value:"Check if the correct built-in icon ID is used",paraId:27,tocIndex:14},{value:"Ensure CSS styles are not overridden or conflicting",paraId:27,tocIndex:14},{value:"The toolbar is often used in conjunction with other plugins (such as history):",paraId:28,tocIndex:15},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'undo', value: 'undo' },\n        { id: 'redo', value: 'redo' },\n      ],\n      onClick: (value) => {\n        const history = graph.getPluginInstance('history');\n        if (value === 'undo') {\n          history.undo();\n        } else if (value === 'redo') {\n          history.redo();\n        }\n      },\n    },\n  ],\n});\n",paraId:29,tocIndex:15},{value:"You can use the ",paraId:30,tocIndex:16},{value:"updatePlugin",paraId:30,tocIndex:16},{value:" method to dynamically update the toolbar:",paraId:30,tocIndex:16},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'toolbar',\n      key: 'my-toolbar',\n    },\n  ],\n});\n\n// Update toolbar position\ngraph.updatePlugin({\n  key: 'my-toolbar',\n  position: 'bottom-right',\n});\n",paraId:31,tocIndex:16}]},74931:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(99152);const t=[{value:"The Tooltip is used to display additional information when the user hovers over elements in the graph. Tooltips can help users better understand the data in the graph and enhance the interactive experience.",paraId:0,tocIndex:0},{value:"When users need to know detailed information about an element, they can use the Tooltip to display this information.",paraId:1,tocIndex:1},{value:"In data visualization, Tooltips can be used to display detailed information about data points in a chart, helping users better understand the data.",paraId:1,tocIndex:1},{value:"Below is a simple example of initializing the Tooltip plugin:",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'tooltip',\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default Value",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"Plugin type",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"tooltip",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"key",paraId:4,tocIndex:3},{value:"Identifier",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"position",paraId:4,tocIndex:3},{value:"Tooltip position",paraId:4,tocIndex:3},{value:"top",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"right",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"top-left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"top-right",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom-left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom-right",paraId:4,tocIndex:3},{value:"top-right",paraId:4,tocIndex:3},{value:"enable",paraId:4,tocIndex:3},{value:"Whether the plugin is enabled",paraId:4,tocIndex:3},{value:"boolean | ((event: ",paraId:4,tocIndex:3},{value:"IElementEvent",paraId:5,tocIndex:3},{value:", items: NodeData | EdgeData | ComboData[]) => boolean)",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"getContent",paraId:4,tocIndex:3},{value:"Custom content",paraId:4,tocIndex:3},{value:"(event: ",paraId:4,tocIndex:3},{value:"IElementEvent",paraId:6,tocIndex:3},{value:", items: NodeData | EdgeData | ComboData[]) => Promise<HTMLElement | string>",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"onOpenChange",paraId:4,tocIndex:3},{value:"Callback for show/hide",paraId:4,tocIndex:3},{value:"(open: boolean) => void",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"trigger",paraId:4,tocIndex:3},{value:"Trigger behavior",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:"container",paraId:4,tocIndex:3},{value:"Custom rendering container for tooltip",paraId:4,tocIndex:3},{value:"string | HTMLElement",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"offset",paraId:4,tocIndex:3},{value:"Offset distance",paraId:4,tocIndex:3},{value:"[number,number]",paraId:4,tocIndex:3},{value:"[10,10]",paraId:4,tocIndex:3},{value:"enterable",paraId:4,tocIndex:3},{value:"Whether the pointer can enter",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"title",paraId:4,tocIndex:3},{value:"Title",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style",paraId:4,tocIndex:3},{value:"Style object",paraId:4,tocIndex:3},{value:"Record<string,any>",paraId:4,tocIndex:3},{value:"{'.tooltip': { visibility: 'hidden'}}",paraId:4,tocIndex:3},{value:"Whether to enable, supports passing a function to dynamically adjust the plugin logic",paraId:7,tocIndex:4},{value:"Only nodes use the tooltip plugin",paraId:8,tocIndex:4},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'tooltip',\n      enable:(e) => e.targetType === 'node';\n    },\n  ],\n});\n",paraId:9,tocIndex:4},{value:"Custom render Tooltip content, supports returning HTMLElement or string",paraId:10,tocIndex:5},{value:"Dynamically render custom HTML content",paraId:11,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'tooltip',\n      trigger: 'click',\n      getContent: (e, items) => {\n        let result = `<h4>Custom Content</h4>`;\n        items.forEach((item) => {\n          result += `<p>Type: ${item.data.description}</p>`;\n        });\n        return result;\n      },\n    },\n  ],\n});\n",paraId:12,tocIndex:5},{value:"Callback for show/hide",paraId:13,tocIndex:6},{value:"Trigger tooltip display, can add custom buried point statistics reporting content",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      trigger: 'click',\n      onOpenChange: (open) => {\n        console.log('Tooltip open change');\n      },\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"Trigger behavior",paraId:16,tocIndex:7},{value:"'hover'",paraId:17,tocIndex:7},{value:": Triggered when the mouse enters the element",paraId:17,tocIndex:7},{value:"'click'",paraId:17,tocIndex:7},{value:": Triggered when the mouse clicks the element",paraId:17,tocIndex:7},{value:"Click the element to trigger the tooltip",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      trigger: 'click',\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"Display position supports the following values",paraId:20,tocIndex:8},{value:"top",paraId:21,tocIndex:8},{value:": Top",paraId:21,tocIndex:8},{value:"bottom",paraId:21,tocIndex:8},{value:": Bottom",paraId:21,tocIndex:8},{value:"left",paraId:21,tocIndex:8},{value:": Left",paraId:21,tocIndex:8},{value:"right",paraId:21,tocIndex:8},{value:": Right",paraId:21,tocIndex:8},{value:"top-left",paraId:21,tocIndex:8},{value:" : Top left",paraId:21,tocIndex:8},{value:"top-right",paraId:21,tocIndex:8},{value:" : Top right",paraId:21,tocIndex:8},{value:"bottom-left",paraId:21,tocIndex:8},{value:" : Bottom left",paraId:21,tocIndex:8},{value:"bottom-right",paraId:21,tocIndex:8},{value:" : Bottom right",paraId:21,tocIndex:8},{value:"Display at the bottom",paraId:22,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      position: 'bottom',\n    },\n  ],\n});\n",paraId:23,tocIndex:8},{value:"Offset of the display position, based on the point where the mouse enters the element",paraId:24,tocIndex:9},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      position: 'bottom',\n    },\n  ],\n});\n",paraId:25,tocIndex:9},{value:"Whether the mouse pointer can enter the tooltip",paraId:26,tocIndex:10},{value:"The mouse can enter the tooltip",paraId:27,tocIndex:10},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      enterable: true,\n    },\n  ],\n});\n",paraId:28,tocIndex:10},{value:"Style object",paraId:29,tocIndex:11},{value:"Black element background color",paraId:30,tocIndex:11},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      style: {\n        ['.tooltip']: {\n          backgroundColor: 'black',\n        },\n      },\n    },\n  ],\n});\n",paraId:31,tocIndex:11},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-0' },\n        { id: 'node-1' },\n        { id: 'node-2' },\n        { id: 'node-3' },\n        { id: 'node-4' },\n        { id: 'node-5' },\n      ],\n      edges: [\n        { source: 'node-0', target: 'node-1' },\n        { source: 'node-0', target: 'node-2' },\n        { source: 'node-0', target: 'node-3' },\n        { source: 'node-0', target: 'node-4' },\n        { source: 'node-1', target: 'node-0' },\n        { source: 'node-2', target: 'node-0' },\n        { source: 'node-3', target: 'node-0' },\n        { source: 'node-4', target: 'node-0' },\n        { source: 'node-5', target: 'node-0' },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'grid' },\n    behaviors: ['drag-canvas'],\n    plugins: ['grid-line', { type: 'tooltip', key: 'tooltip' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'tooltip',\n      trigger: 'hover',\n      enable: 'always',\n      position: 'top-left',\n      enterable: false,\n    };\n    const optionFolder = gui.addFolder('Tooltip Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'trigger', ['click', 'hover']);\n    optionFolder.add(options, 'enable', ['always', 'node', 'edge']);\n    optionFolder.add(options, 'position', [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-left',\n      'top-right',\n      'bottom-left',\n      'bottom-right',\n    ]);\n    optionFolder.add(options, 'enterable');\n\n    optionFolder.onChange((e) => {\n      const { enable, ...rest } = e.object;\n      let enableFn = () => true;\n      if ((enable === 'node') | (enable === 'edge')) {\n        enableFn = (e) => e.targetType === enable;\n      }\n      graph.updatePlugin({\n        key: 'tooltip',\n        enable: enableFn,\n        ...rest,\n      });\n      graph.render();\n    });\n    // const apiFolder = gui.addFolder('Contextmenu API');\n    // const instance = graph.getPluginInstance('contextmenu');\n    // apiFolder.add(instance, 'hide');\n  },\n);\n",paraId:32,tocIndex:12},{value:"Reference Examples",paraId:33,tocIndex:12},{value:":",paraId:33,tocIndex:12},{value:"Tooltip",paraId:34,tocIndex:12},{value:"Click to Trigger Tooltip",paraId:35,tocIndex:12},{value:"Show Different Tooltips When Hovering and Clicking the Same Element",paraId:36,tocIndex:12}]},99024:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(12961);const t=[{value:"The watermark plugin supports using text and images as watermarks. The principle is to add a ",paraId:0,tocIndex:0},{value:"background-image",paraId:0,tocIndex:0},{value:" attribute to the div of the Graph container, and then control the position and style of the watermark through CSS. For text watermarks, a hidden canvas is used to convert the text into an image.",paraId:0,tocIndex:0},{value:"Add copyright or ownership marks to charts",paraId:1,tocIndex:1},{value:"Mark the status of charts during presentations or previews",paraId:1,tocIndex:1},{value:"Add anti-leakage marks to sensitive data",paraId:1,tocIndex:1},{value:"Below is a simple example of initializing the Watermark plugin:",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph', // Watermark text\n      opacity: 0.2, // Opacity\n      rotate: Math.PI / 12, // Rotation angle\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'watermark', key: 'watermark', text: 'G6: Graph Visualization' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'watermark',\n      width: 200,\n      height: 100,\n      opacity: 0.2,\n      rotate: Math.PI / 12,\n      text: 'G6: Graph Visualization',\n    };\n    const optionFolder = gui.addFolder('Watermark Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'width', 1, 1280, 1);\n    optionFolder.add(options, 'height', 1, 800, 1);\n    optionFolder.add(options, 'opacity', 0, 1, 0.1);\n    optionFolder.add(options, 'rotate', 0, 2 * Math.PI, Math.PI / 12);\n    optionFolder.add(options, 'text');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'watermark',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"Property",paraId:5,tocIndex:4},{value:"Description",paraId:5,tocIndex:4},{value:"Type",paraId:5,tocIndex:4},{value:"Default Value",paraId:5,tocIndex:4},{value:"Required",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"Plugin type",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"watermark",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:"Width of a single watermark",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"200",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:"Height of a single watermark",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"100",paraId:5,tocIndex:4},{value:"opacity",paraId:5,tocIndex:4},{value:"Opacity of the watermark",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0.2",paraId:5,tocIndex:4},{value:"rotate",paraId:5,tocIndex:4},{value:"Rotation angle of the watermark",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"Math.PI / 12",paraId:5,tocIndex:4},{value:"imageURL",paraId:5,tocIndex:4},{value:"Image watermark URL, higher priority than text watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"text",paraId:5,tocIndex:4},{value:"Watermark text content",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFill",paraId:5,tocIndex:4},{value:"Color of the text watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"#000",paraId:5,tocIndex:4},{value:"textFontSize",paraId:5,tocIndex:4},{value:"Font size of the text watermark",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"16",paraId:5,tocIndex:4},{value:"textFontFamily",paraId:5,tocIndex:4},{value:"Font of the text watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFontWeight",paraId:5,tocIndex:4},{value:"Font weight of the text watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFontVariant",paraId:5,tocIndex:4},{value:"Font variant of the text watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textAlign",paraId:5,tocIndex:4},{value:"Text alignment of the watermark",paraId:5,tocIndex:4},{value:"center",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"end",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"left",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"right",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"start",paraId:5,tocIndex:4},{value:"center",paraId:5,tocIndex:4},{value:"textBaseline",paraId:5,tocIndex:4},{value:"Baseline alignment of the text watermark",paraId:5,tocIndex:4},{value:"alphabetic",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"hanging",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"ideographic",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"middle",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"top",paraId:5,tocIndex:4},{value:"middle",paraId:5,tocIndex:4},{value:"backgroundRepeat",paraId:5,tocIndex:4},{value:"Repeat mode of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"repeat",paraId:5,tocIndex:4},{value:"backgroundAttachment",paraId:5,tocIndex:4},{value:"Background attachment behavior of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundBlendMode",paraId:5,tocIndex:4},{value:"Background blend mode of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundClip",paraId:5,tocIndex:4},{value:"Background clip of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundColor",paraId:5,tocIndex:4},{value:"Background color of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundImage",paraId:5,tocIndex:4},{value:"Background image of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundOrigin",paraId:5,tocIndex:4},{value:"Background origin of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPosition",paraId:5,tocIndex:4},{value:"Background position of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPositionX",paraId:5,tocIndex:4},{value:"Horizontal position of the watermark background",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPositionY",paraId:5,tocIndex:4},{value:"Vertical position of the watermark background",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundSize",paraId:5,tocIndex:4},{value:"Background size of the watermark",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"The simplest text watermark configuration:",paraId:6,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph',\n    },\n  ],\n});\n",paraId:7,tocIndex:6},{value:"Use an image as a watermark:",paraId:8,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      imageURL: 'https://example.com/logo.png',\n      width: 100,\n      height: 50,\n      opacity: 0.1,\n    },\n  ],\n});\n",paraId:9,tocIndex:7},{value:"You can customize the style and position of the watermark:",paraId:10,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph',\n      textFontSize: 20, // Set font size\n      textFontFamily: 'Arial', // Set font\n      textFontWeight: 'bold', // Set font weight\n      textFill: '#1890ff', // Set text color\n      rotate: Math.PI / 6, // Set rotation angle\n      opacity: 0.15, // Set opacity\n      width: 180, // Set watermark width\n      height: 100, // Set watermark height\n      backgroundRepeat: 'space', // Set repeat mode\n      backgroundPosition: 'center', // Set position\n      textAlign: 'center', // Set text alignment\n      textBaseline: 'middle', // Set baseline alignment\n    },\n  ],\n});\n",paraId:11,tocIndex:8},{value:"Text Watermark",paraId:12,tocIndex:9},{value:"Image Watermark",paraId:13,tocIndex:9}]},49601:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83717);const t=[{value:"Custom plugins can implement additional features, such as adding extra components, rendering logic, etc. Custom plugins can effectively achieve functional decoupling, better manage and orchestrate code, and facilitate subsequent maintenance.",paraId:0,tocIndex:0},{value:"Extra components",paraId:1,tocIndex:2},{value:": Such as built-in plugins like ",paraId:1,tocIndex:2},{value:"Tooltip",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"Minimap",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"Snapline",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"Grid",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"Context Menu",paraId:1,tocIndex:2},{value:", ",paraId:1,tocIndex:2},{value:"Watermark",paraId:1,tocIndex:2},{value:", etc.",paraId:1,tocIndex:2},{value:"Rendering logic",paraId:1,tocIndex:2},{value:": Such as built-in plugins like ",paraId:1,tocIndex:2},{value:"Edge Bundling",paraId:1,tocIndex:2},{value:", and ",paraId:1,tocIndex:2},{value:"Remote Data Loading",paraId:1,tocIndex:2},{value:" (",paraId:1,tocIndex:2},{value:"Example",paraId:2,tocIndex:2},{value:"), etc.",paraId:1,tocIndex:2},{value:"When built-in plugins cannot fully meet business needs, users can also make adjustments and modifications through custom plugins (inheriting built-in plugins).",paraId:3,tocIndex:3},{value:"(If the features supported by built-in plugins are more general, or if there are bugs in built-in plugins, you are welcome to submit issues or PRs on ",paraId:4,tocIndex:3},{value:"Github",paraId:4,tocIndex:3},{value:")",paraId:4,tocIndex:3},{value:"Like interactions, the implementation of plugins is also quite flexible, and you can implement your plugin in your preferred style.",paraId:5,tocIndex:4},{value:"Here are a few simple custom plugin implementations:",paraId:6,tocIndex:4},{value:"Automatically load remote data during graph instantiation:",paraId:7,tocIndex:5},{value:"import { BasePlugin } from '@antv/g6';\nimport type { BasePluginOptions, RuntimeContext } from '@antv/g6';\n\ninterface RemoteDataSourceOptions extends BasePluginOptions {}\n\nclass RemoteDataSource extends BasePlugin<RemoteDataSourceOptions> {\n  constructor(context: RuntimeContext, options: RemoteDataSourceOptions) {\n    super(context, options);\n    this.loadData();\n  }\n\n  private async loadData() {\n    // mock remote data\n    const data = {\n      nodes: [\n        { id: 'node-1', x: 100, y: 100 },\n        { id: 'node-2', x: 200, y: 200 },\n      ],\n      edges: [{ source: 'node-1', target: 'node-2' }],\n    };\n\n    const { graph } = this.context;\n    graph.setData(data);\n    await graph.render();\n  }\n}\n",paraId:8,tocIndex:5},{value:"In this example, we simulate a data loading plugin. After using this plugin, there is no need to pass data when instantiating the Graph, as the plugin will automatically load remote data.",paraId:9,tocIndex:5},{value:"BasePlugin",paraId:10,tocIndex:5},{value:" is the base class for all plugins, and each custom plugin needs to inherit this base class.",paraId:10,tocIndex:5},{value:"import { BasePlugin, Graph, register, ExtensionCategory } from '@antv/g6';\n\nclass RemoteDataSource extends BasePlugin {\n  constructor(context, options) {\n    super(context, options);\n    this.loadData();\n  }\n\n  async loadData() {\n    // mock remote data\n    const data = {\n      nodes: [\n        { id: 'node-1', style: { x: 25, y: 50 } },\n        { id: 'node-2', style: { x: 175, y: 50 } },\n      ],\n      edges: [{ source: 'node-1', target: 'node-2' }],\n    };\n\n    const { graph } = this.context;\n    graph.setData(data);\n    await graph.render();\n  }\n}\n\nregister(ExtensionCategory.PLUGIN, 'remote-data-source', RemoteDataSource);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  plugins: ['remote-data-source'],\n});\n\ngraph.render();\n",paraId:11,tocIndex:5},{value:"import type { BasePluginOptions, RuntimeContext } from '@antv/g6';\nimport { BasePlugin, GraphEvent } from '@antv/g6';\n\ninterface AutoSwitchAnimationOptions extends BasePluginOptions {\n  maxLength: number; // Disable global animation when the number of nodes reaches this value\n}\n\nclass AutoSwitchAnimation extends BasePlugin<AutoSwitchAnimationOptions> {\n  static defaultOptions: Partial<AutoSwitchAnimationOptions> = {\n    maxLength: 1000,\n  };\n  constructor(context: RuntimeContext, options: AutoSwitchAnimationOptions) {\n    super(context, options);\n    this.bindEvents();\n  }\n  private bindEvents() {\n    const { graph } = this.context;\n    graph.on(GraphEvent.BEFORE_RENDER, this.switchAnimation);\n  }\n  private switchAnimation() {\n    const { graph } = this.context;\n    graph.setOptions({\n      animation: graph.getNodeData().length < this.options.maxLength,\n    });\n  }\n  private unbindEvents() {\n    const { graph } = this.context;\n    graph.off(GraphEvent.BEFORE_RENDER, this.switchAnimation);\n  }\n  destroy() {\n    this.unbindEvents();\n    super.destroy();\n  }\n}\n",paraId:12,tocIndex:6},{value:"In this example, we listen to the ",paraId:13,tocIndex:6},{value:"GraphEvent.BEFORE_RENDER",paraId:13,tocIndex:6},{value:" event and determine whether the current number of nodes exceeds a specified value. If so, global animation is disabled; otherwise, it is enabled.",paraId:13,tocIndex:6},{value:"maxLength",paraId:13,tocIndex:6},{value:" is a defined configuration item that can be passed in when initializing the graph instance. ",paraId:13,tocIndex:6},{value:"Plugin Configuration",paraId:14,tocIndex:6},{value:"Register using the method provided by G6",paraId:15,tocIndex:7},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { MyCustomPlugin } from './my-custom-plugin';\n\nregister(ExtensionCategory.PLUGIN, 'my-custom-plugin', MyCustomPlugin);\n",paraId:16,tocIndex:7},{value:"You can pass the plugin type name or configuration parameter object in ",paraId:17,tocIndex:8},{value:"plugins",paraId:17,tocIndex:8},{value:", see ",paraId:17,tocIndex:8},{value:"Configure Plugin",paraId:18,tocIndex:8},{value:"For example, the previous ",paraId:19,tocIndex:8},{value:"Automatically Enable or Disable Animation Based on Node Count",paraId:20,tocIndex:8},{value:" is configured as follows:",paraId:19,tocIndex:8},{value:"const graph = new Graph({\n  // Other configurations\n  plugins: [\n    {\n      type: 'auto-switch-animation',\n      maxLength: 500,\n    },\n  ],\n});\n",paraId:21,tocIndex:8}]},72690:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(97648);const t=[{value:"A Plugin is the most flexible extension mechanism in G6, allowing users to extend G6's functionality, such as adding graphical components to the canvas or implementing undo/redo features.",paraId:0,tocIndex:0},{value:"Most customization needs can be achieved through plugins. G6 comes with some built-in plugins, such as: ",paraId:1,tocIndex:0},{value:"Tooltip",paraId:2,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"Grid",paraId:3,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"History",paraId:4,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"G6 provides a rich set of built-in plugins covering various common functional scenarios:",paraId:5,tocIndex:1},{value:"Category",paraId:6,tocIndex:1},{value:"Plugin Name",paraId:6,tocIndex:1},{value:"Registration Type",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Visual Style Enhancement",paraId:6,tocIndex:1},{value:"Grid Line",paraId:7,tocIndex:1},{value:"grid-line",paraId:6,tocIndex:1},{value:"Displays grid reference lines on the canvas",paraId:6,tocIndex:1},{value:"Background",paraId:8,tocIndex:1},{value:"background",paraId:6,tocIndex:1},{value:"Adds background images or colors to the canvas",paraId:6,tocIndex:1},{value:"Watermark",paraId:9,tocIndex:1},{value:"watermark",paraId:6,tocIndex:1},{value:"Adds a watermark to the canvas to protect copyright",paraId:6,tocIndex:1},{value:"Hull",paraId:10,tocIndex:1},{value:"hull",paraId:6,tocIndex:1},{value:"Creates an outline for a specified set of nodes",paraId:6,tocIndex:1},{value:"Bubble Sets",paraId:11,tocIndex:1},{value:"bubble-sets",paraId:6,tocIndex:1},{value:"Creates smooth bubble-like element outlines",paraId:6,tocIndex:1},{value:"Snapline",paraId:12,tocIndex:1},{value:"snapline",paraId:6,tocIndex:1},{value:"Displays alignment reference lines when dragging elements",paraId:6,tocIndex:1},{value:"Navigation and Overview",paraId:6,tocIndex:1},{value:"Minimap",paraId:13,tocIndex:1},{value:"minimap",paraId:6,tocIndex:1},{value:"Displays a thumbnail preview of the graph, supporting navigation",paraId:6,tocIndex:1},{value:"Fullscreen",paraId:14,tocIndex:1},{value:"fullscreen",paraId:6,tocIndex:1},{value:"Supports full-screen display and exit for charts",paraId:6,tocIndex:1},{value:"Timebar",paraId:15,tocIndex:1},{value:"timebar",paraId:6,tocIndex:1},{value:"Provides filtering and playback control for temporal data",paraId:6,tocIndex:1},{value:"Interactive Controls",paraId:6,tocIndex:1},{value:"Toolbar",paraId:16,tocIndex:1},{value:"toolbar",paraId:6,tocIndex:1},{value:"Provides a collection of common operation buttons",paraId:6,tocIndex:1},{value:"Context Menu",paraId:17,tocIndex:1},{value:"contextmenu",paraId:6,tocIndex:1},{value:"Displays a menu of selectable operations on right-click",paraId:6,tocIndex:1},{value:"Tooltip",paraId:18,tocIndex:1},{value:"tooltip",paraId:6,tocIndex:1},{value:"Displays detailed information about elements on hover",paraId:6,tocIndex:1},{value:"Legend",paraId:19,tocIndex:1},{value:"legend",paraId:6,tocIndex:1},{value:"Displays categories and corresponding style descriptions of chart data",paraId:6,tocIndex:1},{value:"Data Exploration",paraId:6,tocIndex:1},{value:"Fisheye",paraId:20,tocIndex:1},{value:"fisheye",paraId:6,tocIndex:1},{value:"Provides a focus + context exploration experience",paraId:6,tocIndex:1},{value:"Edge Filter Lens",paraId:21,tocIndex:1},{value:"edge-filter-lens",paraId:6,tocIndex:1},{value:"Filters and displays edges within a specified area",paraId:6,tocIndex:1},{value:"Edge Bundling",paraId:22,tocIndex:1},{value:"edge-bundling",paraId:6,tocIndex:1},{value:"Bundles edges with similar paths together to reduce visual clutter",paraId:6,tocIndex:1},{value:"Advanced Features",paraId:6,tocIndex:1},{value:"History",paraId:23,tocIndex:1},{value:"history",paraId:6,tocIndex:1},{value:"Supports undo/redo operations",paraId:6,tocIndex:1},{value:"Camera Setting",paraId:24,tocIndex:1},{value:"camera-setting",paraId:6,tocIndex:1},{value:"Configures camera parameters in a 3D scene",paraId:6,tocIndex:1},{value:"For detailed configuration of each plugin, refer to the ",paraId:25,tocIndex:1},{value:"Built-in Plugin Documentation",paraId:26,tocIndex:1},{value:".",paraId:25,tocIndex:1},{value:"Specify the required plugins through the ",paraId:27,tocIndex:3},{value:"plugins",paraId:27,tocIndex:3},{value:" array when initializing the graph instance:",paraId:27,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // Other configurations...\n  plugins: ['grid', 'minimap', 'tooltip'],\n});\n",paraId:28,tocIndex:3},{value:"For plugins that require custom parameters, you can configure properties using the ",paraId:29,tocIndex:4},{value:"object",paraId:29,tocIndex:4},{value:" form:",paraId:29,tocIndex:4},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    'grid',\n    {\n      type: 'tooltip',\n      key: 'my-tooltip', // Specify a key for the plugin for future updates\n      getContent: (e) => `<div>Node: ${e.target.id}</div>`,\n    },\n  ],\n});\n",paraId:30,tocIndex:4},{value:"G6 supports dynamic management of plugins during the runtime of the graph instance to meet complex interaction needs:",paraId:31,tocIndex:5},{value:"Use the ",paraId:32,tocIndex:5},{value:"getPlugins",paraId:33,tocIndex:5},{value:" method to get the current list of plugins:",paraId:32,tocIndex:5},{value:"// Get the list of plugins\nconst plugins = graph.getPlugins();\n// console.log(plugins) 👉 ['minimap', 'grid']\n",paraId:34,tocIndex:5},{value:"You can adjust plugins using the ",paraId:35,tocIndex:5},{value:"setPlugins",paraId:36,tocIndex:5},{value:" method:",paraId:35,tocIndex:5},{value:"// Add a new plugin\ngraph.setPlugins((plugins) => [...plugins, 'minimap']);\n\n// Remove a plugin\ngraph.setPlugins((plugins) => plugins.filter((p) => p !== 'grid'));\n",paraId:37,tocIndex:5},{value:"You can update the configuration of a plugin using the ",paraId:38,tocIndex:5},{value:"updatePlugin",paraId:39,tocIndex:5},{value:" method:",paraId:38,tocIndex:5},{value:"const graph = new Graph({\n  // Other configurations...\n  plugins: [\n    {\n      type: 'tooltip',\n      key: 'my-tooltip',\n      getContent: (e) => `<div>Node: ${e.target.id}</div>`,\n    },\n  ],\n});\n\n// Update a single plugin\ngraph.updatePlugin({\n  key: 'my-tooltip',\n  getContent: (e) => `<div>Updated content: ${e.target.id}</div>`,\n});\n",paraId:40,tocIndex:5},{value:"When using the ",paraId:41},{value:"updatePlugin",paraId:41},{value:" method, you need to specify a unique ",paraId:41},{value:"key",paraId:41},{value:" for the plugin during initialization.",paraId:41},{value:"Use the ",paraId:42,tocIndex:6},{value:"setPlugins",paraId:43,tocIndex:6},{value:" method to uninstall plugins by setting the plugin configuration list to empty:",paraId:42,tocIndex:6},{value:"// Uninstall all plugins\ngraph.setPlugins([]);\n",paraId:44,tocIndex:6},{value:"Some plugins provide API methods for users to call, such as the ",paraId:45,tocIndex:7},{value:"history",paraId:45,tocIndex:7},{value:" plugin providing ",paraId:45,tocIndex:7},{value:"undo",paraId:45,tocIndex:7},{value:" and ",paraId:45,tocIndex:7},{value:"redo",paraId:45,tocIndex:7},{value:" methods, allowing users to implement undo and redo operations by calling these methods.",paraId:45,tocIndex:7},{value:"To call these methods, you need to first get the plugin instance, which can be obtained through the ",paraId:46,tocIndex:7},{value:"getPluginInstance",paraId:47,tocIndex:7},{value:" method:",paraId:46,tocIndex:7},{value:"// Configure the plugin\nconst graph = new Graph({\n  plugins: [{ type: 'history', key: 'my-history' }],\n});\n\n// Get the plugin instance\nconst history = graph.getPluginInstance('my-history');\n\n// Call plugin methods\nhistory.undo();\nhistory.redo();\n",paraId:48,tocIndex:7},{value:"The ",paraId:49},{value:"graph.getPluginInstance",paraId:49},{value:" method takes the plugin key value as a parameter, so if you need to get the plugin instance, you need to configure the corresponding plugin in the form of an ",paraId:49},{value:"object",paraId:49},{value:" and pass in the ",paraId:49},{value:"key",paraId:49},{value:" value.",paraId:49},{value:"For more plugin-related APIs, please refer to the ",paraId:50},{value:"Plugin API Documentation",paraId:51},{value:".",paraId:50},{value:"When built-in plugins cannot meet your needs, you can:",paraId:52,tocIndex:8},{value:"Inherit and extend existing plugins",paraId:53,tocIndex:8},{value:"Create brand new custom plugins",paraId:53,tocIndex:8},{value:"Custom plugins need to be registered before use. For detailed tutorials, please refer to the ",paraId:54,tocIndex:8},{value:"Custom Plugin",paraId:55,tocIndex:8},{value:" documentation.",paraId:54,tocIndex:8},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { MyCustomPlugin } from './my-custom-plugin';\n\n// Register custom plugin\nregister(ExtensionCategory.PLUGIN, 'my-custom-plugin', MyCustomPlugin);\n\n// Use custom plugin\nconst graph = new Graph({\n  plugins: ['my-custom-plugin'],\n});\n",paraId:56,tocIndex:8},{value:"By reasonably combining and configuring plugins, you can build graph visualization applications with rich features and excellent interactive experiences.",paraId:57,tocIndex:8}]},33514:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(98615);const t=[{value:"Core Concepts - Palette",paraId:0,tocIndex:0},{value:" mentions that G6 supports discrete palettes and continuous palettes. A discrete palette is essentially an array of colors, while a continuous palette is a color interpolator.",paraId:1,tocIndex:0},{value:"Therefore, customizing a palette also adopts these two methods, and the following sections will introduce how to customize discrete and continuous palettes, respectively.",paraId:2,tocIndex:0},{value:"You can simply define a string array that contains color values. Supported color values include: RGB color values, hexadecimal color values, and color names. Below is an example of a discrete palette:",paraId:3,tocIndex:2},{value:"const hex = ['#FF0000', '#00FF00', '#0000FF'];\n\nconst color = ['red', 'green', 'blue'];\n\nconst rgb = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)'];\n",paraId:4,tocIndex:2},{value:"A continuous palette requires the definition of a color interpolator. The interpolator is a function that accepts a numerical value as a parameter and returns a color value. Below is an example of a continuous palette:",paraId:5,tocIndex:3},{value:"const color = (value: number) => `rgb(${value * 255}, 0, 0)`;\n",paraId:6,tocIndex:3},{value:"You can register a palette using the ",paraId:7,tocIndex:4},{value:"register",paraId:7,tocIndex:4},{value:" method provided by G6. For more details, please refer to ",paraId:7,tocIndex:4},{value:"Register Palette",paraId:8,tocIndex:4},{value:"In addition to registration, you can also bypass the registration mechanism and directly pass the palette value at the location where the palette is needed, for example:",paraId:9,tocIndex:5},{value:"{\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#5B8FF9', '#61DDAA', '#F6BD16'], // Pass in a color array.\n    }\n  },\n  edge: {\n    palette: {\n      type: 'value',\n      field: 'value',\n      color: (value) => `rgb(${value * 255}, 0, 0)`, // Pass in an interpolator\n    }\n  }\n}\n",paraId:10,tocIndex:5}]},29535:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83847);const t=[{value:"In G6, the theme is a subset of Graph Options and includes configurations related to the canvas and element styles. A theme can help you quickly switch between different graph styles.",paraId:0,tocIndex:0},{value:"For element styles, the configurations within a theme are static and do not support the use of callback functions to dynamically calculate styles. Additionally, ",paraId:1,tocIndex:1},{value:"type",paraId:1,tocIndex:1},{value:" is also not supported for configuration within a theme. A theme includes the following configurations:",paraId:1,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:": Canvas background color",paraId:2,tocIndex:1},{value:"node",paraId:2,tocIndex:1},{value:": Node style",paraId:2,tocIndex:1},{value:"edge",paraId:2,tocIndex:1},{value:": Edge style",paraId:2,tocIndex:1},{value:"combo",paraId:2,tocIndex:1},{value:": Combo style",paraId:2,tocIndex:1},{value:"Below is a simple example of a theme configuration:",paraId:3,tocIndex:1},{value:"const theme = {\n  background: '#fff',\n  node: {\n    style: {\n      fill: '#e1f3fe',\n      lineWidth: 0,\n    },\n    selected: {\n      style: {\n        fill: '#3b71d6',\n        lineWidth: 1,\n      },\n    },\n  },\n  edge: {\n    // ...\n  },\n  combo: {\n    // ...\n  },\n};\n",paraId:4,tocIndex:1},{value:"❌ Incorrect Example",paraId:5,tocIndex:1},{value:"const theme = {\n  node: {\n    // ❌ The theme does not support configuring element types\n    type: 'rect',\n    style: {\n      // ❌ The theme does not support callback functions\n      fill: (d) => d.style.color,\n    },\n  },\n};\n",paraId:6,tocIndex:1},{value:"For element state styles, please ensure that every property in the state style has a corresponding default style in the default style, otherwise it may result in the inability to clear the state style.",paraId:7},{value:"You can register a theme using the ",paraId:8,tocIndex:2},{value:"register",paraId:8,tocIndex:2},{value:" method provided by G6. Here is an example:",paraId:8,tocIndex:2},{value:"import { register, ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.THEME, 'custom-theme', theme);\n",paraId:9,tocIndex:2},{value:"To enable and configure a theme, you need to pass the ",paraId:10,tocIndex:3},{value:"theme",paraId:10,tocIndex:3},{value:" option when instantiating the ",paraId:10,tocIndex:3},{value:"Graph",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3},{value:"{\n  theme: 'custom-theme',\n}\n",paraId:11,tocIndex:3},{value:"After the ",paraId:12,tocIndex:4},{value:"Graph",paraId:12,tocIndex:4},{value:" instance is created, you can switch themes by using the ",paraId:12,tocIndex:4},{value:"setTheme",paraId:13,tocIndex:4},{value:" method:",paraId:12,tocIndex:4},{value:"graph.setTheme('dark');\n",paraId:14,tocIndex:4},{value:"Additionally, you can also obtain the current theme by using the ",paraId:15,tocIndex:4},{value:"getTheme",paraId:15,tocIndex:4},{value:" method:",paraId:15,tocIndex:4},{value:"graph.getTheme();\n// => 'dark'\n",paraId:16,tocIndex:4}]},51433:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(69694);const t=[]},78317:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(12406);const t=[{value:"A palette refers to a set of predefined color collections that help users more conveniently select colors. In G6, a palette is a common option that allows users to configure the colors of elements such as nodes, edges, and links through the palette.",paraId:0,tocIndex:0},{value:"Palettes are divided into two types: ",paraId:1,tocIndex:0},{value:"discrete palette",paraId:1,tocIndex:0},{value:" and ",paraId:1,tocIndex:0},{value:"continuous palette",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"A discrete palette is an array of colors used to map discrete values within elements to different colors, such as the type of nodes, the relationship of edges, etc. Below is a simple example of a discrete palette:",paraId:2,tocIndex:0},{value:"['#5B8FF9', '#61DDAA', '#F6BD16', '#F6903D', '#F08BB4'];\n",paraId:3,tocIndex:0},{value:"A continuous palette is an interpolator that takes a value between 0 and 1 and returns the corresponding color. It is used to map continuous values within elements to different colors, such as the degree of nodes, the weight of edges, etc. Below is a simple example of a continuous palette:",paraId:4,tocIndex:0},{value:"(value: number) => `rgb(${value * 255}, 0, 0)`;\n",paraId:5,tocIndex:0},{value:"You can directly use the built-in palettes, but if you want to use other palettes, you need to register them first:",paraId:6,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomPalette } from 'package-name/or/path-to-your-custom-palette';\n\nregister(ExtensionCategory.PALETTE, 'custom-palette', CustomPalette);\n",paraId:7,tocIndex:1},{value:"During the process of registering a palette, there is no distinction made between discrete and continuous palettes. It is necessary to ensure the consistency between the palette type and the data type when using the palette.",paraId:8},{value:"Currently, G6 has 5 sets of commonly used discrete palettes that users can directly utilize:",paraId:9,tocIndex:2},{value:"spectral",paraId:10,tocIndex:2},{value:"tableau",paraId:11,tocIndex:2},{value:"oranges",paraId:12,tocIndex:2},{value:"greens",paraId:13,tocIndex:2},{value:"blues",paraId:14,tocIndex:2},{value:"Currently, the configuration of palettes is mainly focused on elements, taking nodes as an example:",paraId:15,tocIndex:3},{value:"Default Configuration: By directly setting the value of ",paraId:16,tocIndex:4},{value:"palette",paraId:16,tocIndex:4},{value:" to the name of the palette, each node will be assigned a different color by default",paraId:16,tocIndex:4},{value:"{\n  node: {\n    palette: 'spectral', // spectral is the Palette Name\n  }\n}\n",paraId:17,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 100,\n  data: {\n    nodes: new Array(30).fill(0).map((_, i) => ({ id: `node-${i}` })),\n  },\n  layout: { type: 'grid', cols: 10, rows: 3 },\n  node: {\n    palette: 'spectral',\n  },\n});\n\ngraph.render();\n",paraId:18,tocIndex:4},{value:"When the number of elements exceeds the number of colors in the palette, the colors in the palette will be reused in a cyclic manner.",paraId:19,tocIndex:4},{value:"Standard Configuration: The attributes for configuring a discrete palette include: ",paraId:20,tocIndex:4},{value:"type: 'group'",paraId:20,tocIndex:4},{value:", ",paraId:20,tocIndex:4},{value:"field",paraId:20,tocIndex:4},{value:", ",paraId:20,tocIndex:4},{value:"color",paraId:20,tocIndex:4},{value:", ",paraId:20,tocIndex:4},{value:"invert",paraId:20,tocIndex:4},{value:".",paraId:20,tocIndex:4},{value:"Among them, ",paraId:21,tocIndex:4},{value:"type: 'group'",paraId:21,tocIndex:4},{value:" explicitly specifies that the current palette type is a discrete palette; ",paraId:21,tocIndex:4},{value:"field",paraId:21,tocIndex:4},{value:" designates the field for grouping in the element data; ",paraId:21,tocIndex:4},{value:"color",paraId:21,tocIndex:4},{value:" is the name of the palette; ",paraId:21,tocIndex:4},{value:"invert",paraId:21,tocIndex:4},{value:" indicates whether to invert the palette.",paraId:21,tocIndex:4},{value:"Given a set of example data:",paraId:22,tocIndex:4},{value:'{\n  "nodes": [\n    { "id": "node-1", "data": { "category": "A" } },\n    { "id": "node-2", "data": { "category": "B" } },\n    { "id": "node-3", "data": { "category": "C" } },\n    { "id": "node-4", "data": { "category": "A" } },\n    { "id": "node-5", "data": { "category": "B" } },\n    { "id": "node-6", "data": { "category": "C" } }\n  ]\n}\n',paraId:23,tocIndex:4},{value:"In the data, ",paraId:24,tocIndex:4},{value:"node-1",paraId:24,tocIndex:4},{value:" and ",paraId:24,tocIndex:4},{value:"node-4",paraId:24,tocIndex:4},{value:" belong to category A, ",paraId:24,tocIndex:4},{value:"node-2",paraId:24,tocIndex:4},{value:" and ",paraId:24,tocIndex:4},{value:"node-5",paraId:24,tocIndex:4},{value:" belong to category B, ",paraId:24,tocIndex:4},{value:"node-3",paraId:24,tocIndex:4},{value:" and ",paraId:24,tocIndex:4},{value:"node-6",paraId:24,tocIndex:4},{value:" belong to category C.",paraId:24,tocIndex:4},{value:"Configure the color of the nodes in such a way that nodes of the same category have the same color:",paraId:25,tocIndex:4},{value:"{\n  node: {\n    palette: {\n      type: 'group', // Specify the palette type as a categorical palette.\n      field: 'category', // Specify the grouping field in the data.\n      color: 'tableau', // Use a Tableau-like palette.\n    }\n  }\n}\n",paraId:26,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C'][i % 3] } })),\n  },\n  layout: { type: 'grid', cols: 6 },\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n});\n\ngraph.render();\n",paraId:27,tocIndex:4},{value:"A continuous palette only supports standard configuration methods, with configuration properties including: ",paraId:28,tocIndex:5},{value:"type: 'value'",paraId:28,tocIndex:5},{value:", ",paraId:28,tocIndex:5},{value:"field",paraId:28,tocIndex:5},{value:", ",paraId:28,tocIndex:5},{value:"color",paraId:28,tocIndex:5},{value:", ",paraId:28,tocIndex:5},{value:"invert",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"Given a set of example data:",paraId:29,tocIndex:5},{value:'{\n  "nodes": [\n    { "id": "node-1", "data": { "value": 0 } },\n    { "id": "node-2", "data": { "value": 20 } },\n    { "id": "node-3", "data": { "value": 40 } },\n    { "id": "node-4", "data": { "value": 60 } },\n    { "id": "node-5", "data": { "value": 80 } },\n    { "id": "node-6", "data": { "value": 100 } }\n  ]\n}\n',paraId:30,tocIndex:5},{value:"Now, create an interpolator that maps the maximum value to red (",paraId:31,tocIndex:5},{value:"rgb(255, 0, 0)",paraId:31,tocIndex:5},{value:") and the minimum value to black (",paraId:31,tocIndex:5},{value:"rgb(0, 0, 0)",paraId:31,tocIndex:5},{value:"):",paraId:31,tocIndex:5},{value:"(value) => `rgb(${value * 255}, 0, 0)`;\n",paraId:32,tocIndex:5},{value:"Configure the following so that the color of the nodes is mapped to different colors based on the value of the ",paraId:33,tocIndex:5},{value:"value",paraId:33,tocIndex:5},{value:" field in the data:",paraId:33,tocIndex:5},{value:"{\n  node: {\n    palette: {\n      type: 'value', // Specify the palette type as a continuous palette\n      field: 'value', // Specify the numerical field in the data\n      color: (value) => `rgb(${value * 255}, 0, 0)`, // Use an interpolator\n    }\n  }\n}\n",paraId:34,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i}`, data: { value: (i + 1) * 20 } })),\n  },\n  layout: { type: 'grid', cols: 6 },\n  node: {\n    palette: {\n      type: 'value',\n      field: 'value',\n      color: (value) => `rgb(${value * 255}, 0, 0)`,\n    },\n  },\n});\n\ngraph.render();\n",paraId:35,tocIndex:5},{value:"The built-in continuous palette does not support specifying a value range. If there is a need for more complex color mapping, it can be customized within the style mapping.",paraId:36},{value:"If the built-in palette does not meet your requirements, you can customize the palette. For details, please refer to ",paraId:37,tocIndex:6},{value:"Custom Palette",paraId:38,tocIndex:6},{value:".",paraId:37,tocIndex:6},{value:"The palette generates styles based on the type of element. For nodes and combos, the color is mapped to the ",paraId:39,tocIndex:7},{value:"fill",paraId:39,tocIndex:7},{value:" attribute; for edges, the color is mapped to the ",paraId:39,tocIndex:7},{value:"stroke",paraId:39,tocIndex:7},{value:" attribute.",paraId:39,tocIndex:7},{value:"If both a palette and a style mapping are configured, the style mapping will override the palette colors. In the following example, the color of the nodes is always red:",paraId:40,tocIndex:7},{value:"{\n  node: {\n    style: {\n      fill: 'red',\n    },\n    palette: 'spectral',\n  }\n}\n",paraId:41,tocIndex:7}]},91721:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(80014);const t=[{value:"In graph visualization, the size of a node is usually used to convey the importance or influence of the node. By adjusting the size of the node based on the centrality of the node, we can more intuitively show the importance of each node in the network, helping users better understand and analyze complex network structures.",paraId:0},{value:"NodeCentralityOptions",paraId:1,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"| ((graphData:",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"GraphData",paraId:3,tocIndex:1},{value:") =>",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"Map**<**string, number>)",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"Default:",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"type: 'eigenvector'",paraId:2,tocIndex:1},{value:"The method of measuring the node centrality",paraId:4,tocIndex:1},{value:"'degree'",paraId:5,tocIndex:1},{value:": Degree centrality, measures centrality by the degree (number of connected edges) of a node. Nodes with high degree centrality usually have more direct connections and may play important roles in the network",paraId:5,tocIndex:1},{value:"'betweenness'",paraId:5,tocIndex:1},{value:": Betweenness centrality, measures centrality by the number of times a node appears in all shortest paths. Nodes with high betweenness centrality usually act as bridges in the network, controlling the flow of information",paraId:5,tocIndex:1},{value:"'closeness'",paraId:5,tocIndex:1},{value:": Closeness centrality, measures centrality by the reciprocal of the average shortest path length from a node to all other nodes. Nodes with high closeness centrality usually can reach other nodes in the network more quickly",paraId:5,tocIndex:1},{value:"'eigenvector'",paraId:5,tocIndex:1},{value:": Eigenvector centrality, measures centrality by the degree of connection between a node and other central nodes. Nodes with high eigenvector centrality usually connect to other important nodes",paraId:5,tocIndex:1},{value:"'pagerank'",paraId:5,tocIndex:1},{value:": PageRank centrality, measures centrality by the number of times a node is referenced by other nodes, commonly used in directed graphs. Nodes with high PageRank centrality usually have high influence in the network, similar to the page ranking algorithm",paraId:5,tocIndex:1},{value:"Custom centrality calculation method: ",paraId:5,tocIndex:1},{value:"(graphData: GraphData) => Map<ID, number>",paraId:5,tocIndex:1},{value:", where ",paraId:5,tocIndex:1},{value:"graphData",paraId:5,tocIndex:1},{value:" is the graph data, and ",paraId:5,tocIndex:1},{value:"Map<ID, number>",paraId:5,tocIndex:1},{value:" is the mapping from node ID to centrality value",paraId:5,tocIndex:1},{value:"type NodeCentralityOptions =\n  | { type: 'degree'; direction?: 'in' | 'out' | 'both' }\n  | { type: 'betweenness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'closeness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'eigenvector'; directed?: boolean }\n  | { type: 'pagerank'; epsilon?: number; linkProb?: number };\n",paraId:6,tocIndex:2},{value:"boolean | [number, number]",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"Default:",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"false",paraId:7,tocIndex:3},{value:"Whether to map label size synchronously",paraId:8,tocIndex:3},{value:"number | [number, number] | Float32Array | [number, number, number]",paraId:9,tocIndex:4},{value:" ",paraId:9,tocIndex:4},{value:"Default:",paraId:9,tocIndex:4},{value:" ",paraId:9,tocIndex:4},{value:"80",paraId:9,tocIndex:4},{value:"The maximum size of the node",paraId:10,tocIndex:4},{value:"number | [number, number] | Float32Array | [number, number, number]",paraId:11,tocIndex:5},{value:" ",paraId:11,tocIndex:5},{value:"Default:",paraId:11,tocIndex:5},{value:" ",paraId:11,tocIndex:5},{value:"20",paraId:11,tocIndex:5},{value:"The minimum size of the node",paraId:12,tocIndex:5},{value:"'linear' | 'log' | 'pow' | 'sqrt' | ((value: number, domain: [number, number], range: [number, number]) => number)",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"Default:",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"'log'",paraId:13,tocIndex:6},{value:"Scale type",paraId:14,tocIndex:6},{value:"'linear'",paraId:15,tocIndex:6},{value:": Linear scale, maps a value from one range to another range linearly, commonly used for cases where the difference in centrality values is small",paraId:15,tocIndex:6},{value:"'log'",paraId:16,tocIndex:6},{value:": Logarithmic scale, maps a value from one range to another range logarithmically, commonly used for cases where the difference in centrality values is large",paraId:16,tocIndex:6},{value:"'pow'",paraId:17,tocIndex:6},{value:": Power-law scale, maps a value from one range to another range using power law, commonly used for cases where the difference in centrality values is large",paraId:17,tocIndex:6},{value:"'sqrt'",paraId:18,tocIndex:6},{value:": Square root scale, maps a value from one range to another range using square root, commonly used for cases where the difference in centrality values is large",paraId:18,tocIndex:6},{value:"Custom scale: ",paraId:19,tocIndex:6},{value:"(value: number, domain: [number, number], range: [number, number]) => number",paraId:19,tocIndex:6},{value:"，where ",paraId:19,tocIndex:6},{value:"value",paraId:19,tocIndex:6},{value:" is the value to be mapped, ",paraId:19,tocIndex:6},{value:"domain",paraId:19,tocIndex:6},{value:" is the input range, and ",paraId:19,tocIndex:6},{value:"range",paraId:19,tocIndex:6},{value:" is the output range",paraId:19,tocIndex:6}]},83209:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(76699);const t=[{value:"number",paraId:0,tocIndex:1},{value:"Offset",paraId:1,tocIndex:1}]},5841:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(90406);const t=[{value:"Parallel Edges refer to multiple edges existing between two nodes in a graph structure. These edges share the same source and target nodes but may represent different relationships or attributes. To avoid edge overlap and confusion, two methods are provided for handling parallel edges: (1) Bundle Mode: Bundles parallel edges together and separates them from other edges by altering their curvature; (2) Merge Mode: Merges parallel edges into a single aggregated edge.",paraId:0},{value:"number",paraId:1,tocIndex:1},{value:"The distance between edges, only valid for bundling mode",paraId:2,tocIndex:1},{value:"string[]",paraId:3,tocIndex:2},{value:"The edges to be handled, all edges by default",paraId:4,tocIndex:2},{value:"Required",paraId:5,tocIndex:2},{value:"'bundle' | 'merge'",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"Default:",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"'bundle'",paraId:6,tocIndex:3},{value:"Processing mode",paraId:7,tocIndex:3},{value:"'",paraId:8,tocIndex:3},{value:"merge",paraId:8,tocIndex:3},{value:"': Merge parallel edges into one edge which is suitable for cases where parallel edges do not need to be distinguished",paraId:8,tocIndex:3},{value:"'",paraId:9,tocIndex:3},{value:"bundle",paraId:9,tocIndex:3},{value:"': Each edge will be bundled with all other parallel edges and separated from them by varying the curvature. If the number of parallel edges in a group is odd, the central edge will be drawn as a straight line, and the others will be drawn as curves",paraId:9,tocIndex:3},{value:"PathStyleProps",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"| ((prev:",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"EdgeData",paraId:11,tocIndex:4},{value:"[]) =>",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"PathStyleProps)",paraId:10,tocIndex:4},{value:"The style of the merged edge, only valid for merging mode",paraId:12,tocIndex:4}]},78589:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(62054);const t=[]},74673:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(87086);const t=[]},16526:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(53732);const t=[{value:"G6 version 5.0 has redesigned the Options specification. While ensuring comprehensive capabilities, it optimizes the options structure to be more intuitive and easier to understand.",paraId:0,tocIndex:0},{value:"You only need to quickly grasp the basic ",paraId:1,tocIndex:0},{value:"core concepts",paraId:2,tocIndex:0},{value:" to get started with G6 quickly and achieve graph visualization without delay.",paraId:1,tocIndex:0},{value:"😰 The 4.0 Options",paraId:3,tocIndex:0},{value:" had a complex nested structure and was less semantically capable",paraId:3,tocIndex:0},{value:"{\n  defaultNode: {\n    size: 30,\n    style: {\n      fill: 'steelblue',\n      stroke: '#666',\n      lineWidth: 1\n    },\n    labelCfg: {\n      style: {\n        fill: '#fff',\n      }\n    }\n  },\n  nodeStateStyles: {\n    hover: {\n      fill: 'lightsteelblue'\n    }\n  },\n  modes: {\n    default: ['zoom-canvas', 'drag-canvas', 'drag-node'],\n  },\n}\n",paraId:4,tocIndex:0},{value:"😄 The 5.0 Options",paraId:5,tocIndex:0},{value:" has a clear structure and is easy to understand",paraId:5,tocIndex:0},{value:"{\n  node: {\n    style: {\n      size: 30,\n      fill: 'steelblue',\n      stroke: '#666',\n      lineWidth: 1\n      labelFill: '#fff',\n    },\n    state: {\n      hover: {\n        fill: 'lightsteelblue'\n      }\n    }\n  },\n  behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n}\n",paraId:6,tocIndex:0},{value:"G6 5.0 features a cleaner, easy-to-use API design that is more in line with modern front-end frameworks.",paraId:7,tocIndex:1},{value:"Tree graphs are essentially a type of directed acyclic graph. G6 5.0 has integrated the design of graphs and tree graphs, reducing the cost of understanding and usage.",paraId:8,tocIndex:2},{value:"Now, you can directly use ",paraId:9,tocIndex:2},{value:"Graph",paraId:9,tocIndex:2},{value:" to instantiate and draw tree graphs in G6, without the need to use ",paraId:9,tocIndex:2},{value:"TreeGraph",paraId:9,tocIndex:2},{value:". You simply need to specify the layout as a tree graph layout.",paraId:9,tocIndex:2},{value:"Additionally, G6 provides the ",paraId:10,tocIndex:2},{value:"treeToGraphData",paraId:10,tocIndex:2},{value:" utility method to help you quickly convert tree graph data into graph data.",paraId:10,tocIndex:2},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nconst data = {\n  id: 'root',\n  children: [\n    { id: 'node1', children: [{ id: 'node1-1' }, { id: 'node1-2' }] },\n    { id: 'node2', children: [{ id: 'node2-1' }, { id: 'node2-2' }] },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  layout: {\n    type: 'compact-box',\n    direction: 'TB',\n  },\n  data: treeToGraphData(data),\n  edge: {\n    type: 'cubic-vertical',\n  },\n});\n\ngraph.render();\n",paraId:11,tocIndex:2},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  autoFit: 'view',\n  data: g6.treeToGraphData({\n    id: 'root',\n    children: [\n      { id: 'node1', children: [{ id: 'node1-1' }, { id: 'node1-2' }] },\n      { id: 'node2', children: [{ id: 'node2-1' }, { id: 'node2-2' }] },\n    ],\n  }),\n  layout: {\n    type: 'compact-box',\n    direction: 'TB',\n  },\n  node: {\n    style: {\n      ports: [{ placement: 'center' }],\n    },\n  },\n  edge: {\n    type: 'cubic-vertical',\n  },\n});\n\ngraph.render();\n",paraId:12,tocIndex:2},{value:"G6 5.0 employs the next-generation @antv/g rendering engine, which has been newly designed. It offers support for multiple renderers such as ",paraId:13,tocIndex:3},{value:"Canvas",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"SVG",paraId:13,tocIndex:3},{value:", and ",paraId:13,tocIndex:3},{value:"WebGL",paraId:13,tocIndex:3},{value:". Additionally, it supports the mixed use of different renderers on layered canvases.",paraId:13,tocIndex:3},{value:"import { Renderer } from '@antv/g-webgl';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... other configurations\n  // Use the WebGL renderer\n  renderer: () => new Renderer(),\n});\n",paraId:14,tocIndex:3},{value:"G6 5.0 has adopted a brand-new layout engine, with some layouts implemented in Rust, providing higher performance for layout calculations. Additionally, there is support for WebGPU acceleration in certain layouts.",paraId:15,tocIndex:4},{value:"🚀 To utilize high-performance layouts, you will need to install the ",paraId:16,tocIndex:4},{value:"@antv/layout-wasm",paraId:16,tocIndex:4},{value:" package",paraId:16,tocIndex:4},{value:"import { FruchtermanLayout } from '@antv/layout-gpu';\nimport { Graph, register, ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-gpu', FruchtermanLayout);\n\nconst graph = new Graph({\n  // ... other configurations\n  layout: {\n    type: 'fruchterman-gpu',\n    // ... Other Layout Configurations\n  },\n});\n",paraId:17,tocIndex:4},{value:"G6 5.0 comes with two built-in themes: light and dark, and allows for flexible customization based on the use case. For details, please refer to ",paraId:18,tocIndex:5},{value:"Custom Theme",paraId:19,tocIndex:5},{value:".",paraId:18,tocIndex:5},{value:"G6 5.0 provides 3D rendering, layout, interaction capabilities, and can be used by import 3d elements, renderer, and behaviors from ",paraId:20,tocIndex:6},{value:"@antv/g6-extension-3D",paraId:20,tocIndex:6},{value:" registration, see: ",paraId:20,tocIndex:6},{value:"Using 3D",paraId:21,tocIndex:6},{value:".",paraId:20,tocIndex:6},{value:"G6 5.0 has optimized and enhanced existing plugins, decoupling Graph from plugins, and providing richer capabilities while optimizing configurations.",paraId:22,tocIndex:7},{value:"Please visit ",paraId:23,tocIndex:7},{value:"Plugin",paraId:24,tocIndex:7},{value:" to experience the capabilities of more plugins.",paraId:23,tocIndex:7},{value:"Thanks to the well-modularized design and extension registration mechanism of G6 5.0, modules that are not used will not be packaged into the final build file, reducing the package size.",paraId:25,tocIndex:8},{value:"Compared to 4.0, the UMD package size has been reduced from 1.8 MB to 0.96 MB, a reduction of nearly 50%.",paraId:26,tocIndex:8}]},58367:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(77981);const t=[{value:"This document will guide you through the process of upgrading from G6 version ",paraId:0},{value:"4.x",paraId:0},{value:" to ",paraId:0},{value:"5.x",paraId:0},{value:". If you are using version ",paraId:0},{value:"3.x",paraId:0},{value:", please upgrade to version ",paraId:0},{value:"4.x",paraId:0},{value:" first.",paraId:0},{value:"Please ensure that your current git branch is clean and there is no uncommitted code.",paraId:1,tocIndex:0},{value:"Refer to the ",paraId:1,tocIndex:0},{value:"Installation",paraId:2,tocIndex:0},{value:" document to install version ",paraId:1,tocIndex:0},{value:"5.x",paraId:1,tocIndex:0},{value:" and remove the dependencies for version ",paraId:1,tocIndex:0},{value:"4.x",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"The data format in the new version has changed as follows:",paraId:3,tocIndex:2},{value:"All style attributes in ",paraId:4,tocIndex:2},{value:"nodes",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"edges",paraId:4,tocIndex:2},{value:", and ",paraId:4,tocIndex:2},{value:"combos",paraId:4,tocIndex:2},{value:" need to be placed within ",paraId:4,tocIndex:2},{value:"style",paraId:4,tocIndex:2},{value:", and data attributes should be stored in ",paraId:4,tocIndex:2},{value:"data",paraId:4,tocIndex:2},{value:":",paraId:4,tocIndex:2},{value:"// 4.x\nconst data = {\n  nodes: [\n    { id: 'node1', label: 'node1', size: 20 },\n    { id: 'node2', label: 'node2', size: 20 },\n  ],\n  edges: [{ source: 'node1', target: 'node2' }],\n};\n\n// 5.x\nconst data = {\n  nodes: [\n    // The label is a non-stylistic attribute, placed in the data, and can be accessed in the style mapping function\n    // The `size` is a stylistic attribute, placed within the `style`\n    { id: 'node1', data: { label: 'node1' }, style: { size: 20 } },\n    { id: 'node2', data: { label: 'node2' }, style: { size: 20 } },\n  ],\n  edges: [{ source: 'node1', target: 'node2' }],\n};\n",paraId:5,tocIndex:2},{value:"Since we have redesigned and implemented the elements, please refer to the corresponding documentation to modify the new element options:",paraId:6,tocIndex:2},{value:"Node",paraId:7,tocIndex:2},{value:"Edge",paraId:8,tocIndex:2},{value:"Combo",paraId:9,tocIndex:2},{value:"If you need to specify the element type in the data, you can use the ",paraId:10,tocIndex:2},{value:"type",paraId:10,tocIndex:2},{value:" attribute:",paraId:10,tocIndex:2},{value:"{\n  nodes: [\n    // Specify the node type as rect\n    { id: 'node1', type: 'rect' },\n  ];\n}\n",paraId:11,tocIndex:2},{value:"Change",paraId:12,tocIndex:3},{value:" ",paraId:13,tocIndex:3},{value:"fitView / fitCenter / fitViewPadding",paraId:13,tocIndex:3},{value:"The ",paraId:14,tocIndex:3},{value:"fitView",paraId:14,tocIndex:3},{value:" and ",paraId:14,tocIndex:3},{value:"fitCenter",paraId:14,tocIndex:3},{value:" options have been merged into ",paraId:14,tocIndex:3},{value:"autoFit",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"To use ",paraId:14,tocIndex:3},{value:"fitView",paraId:14,tocIndex:3},{value:", you can configure it as ",paraId:14,tocIndex:3},{value:"autoFit: 'view'",paraId:14,tocIndex:3},{value:"To use ",paraId:14,tocIndex:3},{value:"fitCenter",paraId:14,tocIndex:3},{value:", you can configure it as ",paraId:14,tocIndex:3},{value:"autoFit: 'center'",paraId:14,tocIndex:3},{value:"You can also pass an object for full configuration:",paraId:14,tocIndex:3},{value:"autoFit: {\n  type: 'view',\n  options: {\n    // ...\n  }\n}\n",paraId:15,tocIndex:3},{value:"The ",paraId:16,tocIndex:3},{value:"fitViewPadding",paraId:16,tocIndex:3},{value:" has been changed to ",paraId:16,tocIndex:3},{value:"padding",paraId:16,tocIndex:3},{value:".",paraId:16,tocIndex:3},{value:"Removed",paraId:17,tocIndex:3},{value:" ",paraId:18,tocIndex:3},{value:"linkCenter",paraId:18,tocIndex:3},{value:"In version 5.x, the edge connection mechanism will attempt to connect to nodes/Combos in the following order:",paraId:19,tocIndex:3},{value:"Connect Port",paraId:20,tocIndex:3},{value:"Outline",paraId:20,tocIndex:3},{value:"Center",paraId:20,tocIndex:3},{value:"Removed",paraId:21,tocIndex:3},{value:" ",paraId:22,tocIndex:3},{value:"groupByTypes",paraId:22,tocIndex:3},{value:"Removed",paraId:23,tocIndex:3},{value:" ",paraId:24,tocIndex:3},{value:"autoPaint",paraId:24,tocIndex:3},{value:"Please manually call the ",paraId:25,tocIndex:3},{value:"render",paraId:25,tocIndex:3},{value:" or ",paraId:25,tocIndex:3},{value:"draw",paraId:25,tocIndex:3},{value:" method to perform rendering.",paraId:25,tocIndex:3},{value:"Changed",paraId:26,tocIndex:3},{value:" ",paraId:27,tocIndex:3},{value:"modes",paraId:27,tocIndex:3},{value:"In version 5.x, interaction modes have been removed. You can switch the currently enabled behaviors by setting ",paraId:28,tocIndex:3},{value:"behaviors",paraId:28,tocIndex:3},{value:".",paraId:28,tocIndex:3},{value:"// 4.x\n{\n  modes: {\n    default: ['drag-canvas', 'zoom-canvas'],\n    preview: ['drag-canvas'],\n  },\n}\n\ngraph.setMode('preview');\n",paraId:29,tocIndex:3},{value:"\n// 5.x\n{\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n}\n\ngraph.setBehaviors(['drag-canvas']);\n\n",paraId:30,tocIndex:3},{value:"Change",paraId:31,tocIndex:3},{value:" ",paraId:32,tocIndex:3},{value:"defaultNode / defaultEdge / defaultCombo",paraId:32,tocIndex:3},{value:"The element styles have been moved to ",paraId:33,tocIndex:3},{value:"[element].style",paraId:33,tocIndex:3},{value:", for example, ",paraId:33,tocIndex:3},{value:"defaultNode",paraId:33,tocIndex:3},{value:" has been changed to ",paraId:33,tocIndex:3},{value:"node.style",paraId:33,tocIndex:3},{value:":",paraId:33,tocIndex:3},{value:"// 4.x\n{\n  defaultNode: {\n    size: 20,\n    fill: 'red',\n  }\n}\n\n// 5.x\n{\n  node: {\n    style: {\n      size: 20,\n      fill: 'red',\n    }\n  }\n}\n",paraId:34,tocIndex:3},{value:"Change",paraId:35,tocIndex:3},{value:" ",paraId:36,tocIndex:3},{value:"nodeStateStyles / edgeStateStyles / comboStateStyle",paraId:36,tocIndex:3},{value:"Element state styles have been moved to ",paraId:37,tocIndex:3},{value:"[element].state",paraId:37,tocIndex:3},{value:", for example, ",paraId:37,tocIndex:3},{value:"nodeStateStyles",paraId:37,tocIndex:3},{value:" has been changed to ",paraId:37,tocIndex:3},{value:"node.stateStyles",paraId:37,tocIndex:3},{value:":",paraId:37,tocIndex:3},{value:"// 4.x\n{\n  nodeStateStyles: {\n    selected: {\n      fill: 'red',\n    }\n  }\n}\n\n// 5.x\n{\n  node: {\n    state: {\n      selected: {\n        fill: 'red',\n      }\n    }\n  }\n}\n",paraId:38,tocIndex:3},{value:"Change",paraId:39,tocIndex:3},{value:" ",paraId:40,tocIndex:3},{value:"animate / animateCfg",paraId:40,tocIndex:3},{value:"The ",paraId:41,tocIndex:3},{value:"animate",paraId:41,tocIndex:3},{value:" options has been changed to ",paraId:41,tocIndex:3},{value:"animation",paraId:41,tocIndex:3},{value:"animate",paraId:41,tocIndex:3},{value:" and ",paraId:41,tocIndex:3},{value:"animateCfg",paraId:41,tocIndex:3},{value:" have been merged into ",paraId:41,tocIndex:3},{value:"animation",paraId:41,tocIndex:3},{value:"// 4.x\n{\n  animate: true,\n}\n\n// 5.x\n{\n  animation: true,\n}\n{\n  animation: {\n    duration: 500,\n    easing: 'easeLinear',\n  }\n}\n",paraId:42,tocIndex:3},{value:"Change",paraId:43,tocIndex:3},{value:" ",paraId:44,tocIndex:3},{value:"minZoom / maxZoom",paraId:44,tocIndex:3},{value:"The ",paraId:45,tocIndex:3},{value:"minZoom",paraId:45,tocIndex:3},{value:" and ",paraId:45,tocIndex:3},{value:"maxZoom",paraId:45,tocIndex:3},{value:" options have been merged into ",paraId:45,tocIndex:3},{value:"zoomRange",paraId:45,tocIndex:3},{value:"// 4.x\n{\n  minZoom: 0.5,\n  maxZoom: 2,\n}\n\n// 5.x\n{\n  zoomRange: [0.5, 2],\n}\n",paraId:46,tocIndex:3},{value:"Change",paraId:47,tocIndex:3},{value:" ",paraId:48,tocIndex:3},{value:"renderer",paraId:48,tocIndex:3},{value:"G6 5.x supports multi-layer canvases and defaults to using the ",paraId:49,tocIndex:3},{value:"canvas",paraId:49,tocIndex:3},{value:" renderer.",paraId:49,tocIndex:3},{value:"The ",paraId:50,tocIndex:3},{value:"renderer",paraId:50,tocIndex:3},{value:" no longer supports the string type and has been changed to a callback function:",paraId:50,tocIndex:3},{value:"// 4.x\nvar options = {\n  renderer: 'svg',\n};\n\n// 5.x\nimport { Renderer } from '@antv/g-svg';\n\n{\n  renderer: () => new Renderer(),\n}\n",paraId:51,tocIndex:3},{value:"Removed",paraId:52,tocIndex:3},{value:" ",paraId:53,tocIndex:3},{value:"enabledStack / maxStep",paraId:53,tocIndex:3},{value:"The built-in undo and redo functionality has been removed in version 5.x. For related capabilities, please use a plugin to implement.",paraId:54,tocIndex:3},{value:"Change",paraId:55,tocIndex:4},{value:" ",paraId:56,tocIndex:4},{value:"data / save / read / changeData",paraId:56,tocIndex:4},{value:"Version 5.x offers a completely new data API. For details, see ",paraId:57,tocIndex:4},{value:"Data API",paraId:58,tocIndex:4},{value:".",paraId:57,tocIndex:4},{value:"The ",paraId:59,tocIndex:4},{value:"data",paraId:59,tocIndex:4},{value:" and ",paraId:59,tocIndex:4},{value:"changeData",paraId:59,tocIndex:4},{value:" methods from 4.x are replaced by ",paraId:59,tocIndex:4},{value:"setData",paraId:59,tocIndex:4},{value:" in 5.x.",paraId:59,tocIndex:4},{value:"The ",paraId:59,tocIndex:4},{value:"save",paraId:59,tocIndex:4},{value:" method from 4.x is replaced by ",paraId:59,tocIndex:4},{value:"getData",paraId:59,tocIndex:4},{value:" in 5.x.",paraId:59,tocIndex:4},{value:"The ",paraId:59,tocIndex:4},{value:"read",paraId:59,tocIndex:4},{value:" method from 4.x is replaced by ",paraId:59,tocIndex:4},{value:"setData",paraId:59,tocIndex:4},{value:" + ",paraId:59,tocIndex:4},{value:"render",paraId:59,tocIndex:4},{value:" in 5.x.",paraId:59,tocIndex:4},{value:"Change",paraId:60,tocIndex:4},{value:" ",paraId:61,tocIndex:4},{value:"get / set",paraId:61,tocIndex:4},{value:"To access Graph options, please use ",paraId:62,tocIndex:4},{value:"getOptions",paraId:62,tocIndex:4},{value:" or the ",paraId:62,tocIndex:4},{value:"getXxx",paraId:62,tocIndex:4},{value:" API, such as ",paraId:62,tocIndex:4},{value:"getZoomRange",paraId:62,tocIndex:4},{value:", ",paraId:62,tocIndex:4},{value:"getBehaviors",paraId:62,tocIndex:4},{value:", etc. The ",paraId:62,tocIndex:4},{value:"set",paraId:62,tocIndex:4},{value:" method is analogous.",paraId:62,tocIndex:4},{value:"Change",paraId:63,tocIndex:4},{value:" ",paraId:64,tocIndex:4},{value:"getContainer",paraId:64,tocIndex:4},{value:"Direct API to obtain the container is not currently supported, but you can obtain it through ",paraId:65,tocIndex:4},{value:"graph.getCanvas().getContainer()",paraId:65,tocIndex:4},{value:".",paraId:65,tocIndex:4},{value:"In most cases, you do not need to directly manipulate the container.",paraId:66,tocIndex:4},{value:"Removed",paraId:67,tocIndex:4},{value:" ",paraId:68,tocIndex:4},{value:"getGroup",paraId:68,tocIndex:4},{value:"Change",paraId:69,tocIndex:4},{value:" ",paraId:70,tocIndex:4},{value:"getMinZoom / getMaxZoom",paraId:70,tocIndex:4},{value:"Use ",paraId:71,tocIndex:4},{value:"getZoomRange",paraId:71,tocIndex:4},{value:" to obtain the values.",paraId:71,tocIndex:4},{value:"Change",paraId:72,tocIndex:4},{value:" ",paraId:73,tocIndex:4},{value:"setMinZoom / setMaxZoom",paraId:73,tocIndex:4},{value:"Use the ",paraId:74,tocIndex:4},{value:"setZoomRange",paraId:74,tocIndex:4},{value:" method to set the values.",paraId:74,tocIndex:4},{value:"Change",paraId:75,tocIndex:4},{value:" ",paraId:76,tocIndex:4},{value:"getWidth / getHeight",paraId:76,tocIndex:4},{value:"Use ",paraId:77,tocIndex:4},{value:"getSize",paraId:77,tocIndex:4},{value:" to get the dimensions.",paraId:77,tocIndex:4},{value:"Change",paraId:78,tocIndex:4},{value:" ",paraId:79,tocIndex:4},{value:"changeSize",paraId:79,tocIndex:4},{value:"Use ",paraId:80,tocIndex:4},{value:"setSize",paraId:80,tocIndex:4},{value:" to set the dimensions.",paraId:80,tocIndex:4},{value:"Change",paraId:81,tocIndex:4},{value:" ",paraId:82,tocIndex:4},{value:"zoom",paraId:82,tocIndex:4},{value:"Changed to ",paraId:83,tocIndex:4},{value:"zoomBy",paraId:83,tocIndex:4},{value:".",paraId:83,tocIndex:4},{value:"Change",paraId:84,tocIndex:4},{value:" ",paraId:85,tocIndex:4},{value:"translate",paraId:85,tocIndex:4},{value:"Changed to ",paraId:86,tocIndex:4},{value:"translateBy",paraId:86,tocIndex:4},{value:".",paraId:86,tocIndex:4},{value:"Change",paraId:87,tocIndex:4},{value:" ",paraId:88,tocIndex:4},{value:"moveTo",paraId:88,tocIndex:4},{value:"Changed to ",paraId:89,tocIndex:4},{value:"translateTo",paraId:89,tocIndex:4},{value:".",paraId:89,tocIndex:4},{value:"Change",paraId:90,tocIndex:4},{value:" ",paraId:91,tocIndex:4},{value:"focusItem",paraId:91,tocIndex:4},{value:"Changed to ",paraId:92,tocIndex:4},{value:"focusElement",paraId:92,tocIndex:4},{value:".",paraId:92,tocIndex:4},{value:"Removed",paraId:93,tocIndex:4},{value:" ",paraId:94,tocIndex:4},{value:"addItem / updateItem / removeItem",paraId:94,tocIndex:4},{value:"To add or remove elements, use the methods ",paraId:95,tocIndex:4},{value:"addData",paraId:95,tocIndex:4},{value:" / ",paraId:95,tocIndex:4},{value:"updateData",paraId:95,tocIndex:4},{value:" / ",paraId:95,tocIndex:4},{value:"removeData",paraId:95,tocIndex:4},{value:" to manipulate data.",paraId:95,tocIndex:4},{value:"Removed",paraId:96,tocIndex:4},{value:" ",paraId:97,tocIndex:4},{value:"refreshItem",paraId:97,tocIndex:4},{value:"Removed",paraId:98,tocIndex:4},{value:" ",paraId:99,tocIndex:4},{value:"refreshPositions",paraId:99,tocIndex:4},{value:"Removed",paraId:100,tocIndex:4},{value:" ",paraId:101,tocIndex:4},{value:"updateCombo",paraId:101,tocIndex:4},{value:"Removed",paraId:102,tocIndex:4},{value:" ",paraId:103,tocIndex:4},{value:"updateCombos",paraId:103,tocIndex:4},{value:"Removed",paraId:104,tocIndex:4},{value:" ",paraId:105,tocIndex:4},{value:"updateComboTree",paraId:105,tocIndex:4},{value:"Change",paraId:106,tocIndex:4},{value:" ",paraId:107,tocIndex:4},{value:"node / edge / combo",paraId:107,tocIndex:4},{value:"Use the ",paraId:108,tocIndex:4},{value:"setNode",paraId:108,tocIndex:4},{value:" / ",paraId:108,tocIndex:4},{value:"setEdge",paraId:108,tocIndex:4},{value:" / ",paraId:108,tocIndex:4},{value:"setCombo",paraId:108,tocIndex:4},{value:" methods as alternatives.",paraId:108,tocIndex:4},{value:"Change",paraId:109,tocIndex:4},{value:" ",paraId:110,tocIndex:4},{value:"showItem / hideItem",paraId:110,tocIndex:4},{value:"Use the ",paraId:111,tocIndex:4},{value:"setElementVisibility",paraId:111,tocIndex:4},{value:" method as an alternative.",paraId:111,tocIndex:4},{value:"Removed",paraId:112,tocIndex:4},{value:" ",paraId:113,tocIndex:4},{value:"getNodes / getEdges / getCombos / getComboChildren / getNeighbors / find / findById / findAll / findAllByState",paraId:113,tocIndex:4},{value:"In version 5.x, direct retrieval of element instances is not supported.",paraId:114,tocIndex:4},{value:"To obtain element data, use the methods ",paraId:115,tocIndex:4},{value:"getData",paraId:115,tocIndex:4},{value:", ",paraId:115,tocIndex:4},{value:"getNodeData",paraId:115,tocIndex:4},{value:", ",paraId:115,tocIndex:4},{value:"getEdgeData",paraId:115,tocIndex:4},{value:", ",paraId:115,tocIndex:4},{value:"getComboData",paraId:115,tocIndex:4},{value:", which support searching by element ID.",paraId:115,tocIndex:4},{value:"To obtain child node data, use the ",paraId:115,tocIndex:4},{value:"getChildrenData",paraId:115,tocIndex:4},{value:" method.",paraId:115,tocIndex:4},{value:"To obtain neighbor node data, use the ",paraId:115,tocIndex:4},{value:"getNeighborNodesData",paraId:115,tocIndex:4},{value:" method.",paraId:115,tocIndex:4},{value:"To find element data based on state, use the ",paraId:115,tocIndex:4},{value:"getElementDataByState",paraId:115,tocIndex:4},{value:" method.",paraId:115,tocIndex:4},{value:"Change",paraId:116,tocIndex:4},{value:" ",paraId:117,tocIndex:4},{value:"collapseCombo / expandCombo",paraId:117,tocIndex:4},{value:"Use the ",paraId:118,tocIndex:4},{value:"collapseElement",paraId:118,tocIndex:4},{value:" / ",paraId:118,tocIndex:4},{value:"expandElement",paraId:118,tocIndex:4},{value:" methods as alternatives.",paraId:118,tocIndex:4},{value:"Removed",paraId:119,tocIndex:4},{value:" ",paraId:120,tocIndex:4},{value:"collapseExpandCombo",paraId:120,tocIndex:4},{value:"Removed",paraId:121,tocIndex:4},{value:" ",paraId:122,tocIndex:4},{value:"createCombo",paraId:122,tocIndex:4},{value:"Combos can now be added using the ",paraId:123,tocIndex:4},{value:"addData",paraId:123,tocIndex:4},{value:" / ",paraId:123,tocIndex:4},{value:"addComboData",paraId:123,tocIndex:4},{value:" methods.",paraId:123,tocIndex:4},{value:"Removed",paraId:124,tocIndex:4},{value:" ",paraId:125,tocIndex:4},{value:"uncombo",paraId:125,tocIndex:4},{value:"Combos can now be removed using the ",paraId:126,tocIndex:4},{value:"removeData",paraId:126,tocIndex:4},{value:" / ",paraId:126,tocIndex:4},{value:"removeComboData",paraId:126,tocIndex:4},{value:" methods.",paraId:126,tocIndex:4},{value:"Change",paraId:127,tocIndex:4},{value:" ",paraId:128,tocIndex:4},{value:"setItemState",paraId:128,tocIndex:4},{value:"Use the ",paraId:129,tocIndex:4},{value:"setElementState",paraId:129,tocIndex:4},{value:" method as an alternative.",paraId:129,tocIndex:4},{value:"Removed",paraId:130,tocIndex:4},{value:" ",paraId:131,tocIndex:4},{value:"clearItemStates",paraId:131,tocIndex:4},{value:"To clear all states of a single element: ",paraId:132,tocIndex:4},{value:"graph.setElementState(id, [])",paraId:132,tocIndex:4},{value:"To clear all states of multiple elements: ",paraId:132,tocIndex:4},{value:"graph.setElementState({ id1: [], id2: [] })",paraId:132,tocIndex:4},{value:"Removed",paraId:133,tocIndex:4},{value:" ",paraId:134,tocIndex:4},{value:"priorityState",paraId:134,tocIndex:4},{value:"When using ",paraId:135,tocIndex:4},{value:"setElementState",paraId:135,tocIndex:4},{value:", the state that appears later in the array has a higher priority.",paraId:135,tocIndex:4},{value:"Removed",paraId:136,tocIndex:4},{value:" ",paraId:137,tocIndex:4},{value:"setMode",paraId:137,tocIndex:4},{value:"Use ",paraId:138,tocIndex:4},{value:"setBehaviors",paraId:138,tocIndex:4},{value:" to set the current behaviors.",paraId:138,tocIndex:4},{value:"Removed",paraId:139,tocIndex:4},{value:" ",paraId:140,tocIndex:4},{value:"setCurrentMode",paraId:140,tocIndex:4},{value:"Change",paraId:141,tocIndex:4},{value:" ",paraId:142,tocIndex:4},{value:"layout",paraId:142,tocIndex:4},{value:"Does not support parameters. To configure the layout, please use ",paraId:143,tocIndex:4},{value:"setLayout",paraId:143,tocIndex:4},{value:".",paraId:143,tocIndex:4},{value:"Change",paraId:144,tocIndex:4},{value:" ",paraId:145,tocIndex:4},{value:"updateLayout",paraId:145,tocIndex:4},{value:"Changed to ",paraId:146,tocIndex:4},{value:"setLayout",paraId:146,tocIndex:4},{value:".",paraId:146,tocIndex:4},{value:"Removed",paraId:147,tocIndex:4},{value:" ",paraId:148,tocIndex:4},{value:"destroyLayout",paraId:148,tocIndex:4},{value:"Change",paraId:149,tocIndex:4},{value:" ",paraId:150,tocIndex:4},{value:"addBehaviors / removeBehaviors",paraId:150,tocIndex:4},{value:"Replaced with ",paraId:151,tocIndex:4},{value:"setBehaviors",paraId:151,tocIndex:4},{value:".",paraId:151,tocIndex:4},{value:"Removed",paraId:152,tocIndex:4},{value:" ",paraId:153,tocIndex:4},{value:"createHull / getHulls / removeHull / removeHulls",paraId:153,tocIndex:4},{value:"For multiple ",paraId:154,tocIndex:4},{value:"Hull",paraId:154,tocIndex:4},{value:" instances, you need to configure multiple ",paraId:154,tocIndex:4},{value:"hull",paraId:154,tocIndex:4},{value:" plugins in ",paraId:154,tocIndex:4},{value:"plugins",paraId:154,tocIndex:4},{value:", such as:",paraId:154,tocIndex:4},{value:"{\n  plugins: ['hull', 'hull'],\n};\n",paraId:155,tocIndex:4},{value:"Operations to retrieve, update, and remove ",paraId:156,tocIndex:4},{value:"Hull",paraId:156,tocIndex:4},{value:" are implemented through ",paraId:156,tocIndex:4},{value:"setPlugins",paraId:156,tocIndex:4},{value:", ",paraId:156,tocIndex:4},{value:"updatePlugin",paraId:156,tocIndex:4},{value:".",paraId:156,tocIndex:4},{value:"Not yet available",paraId:157,tocIndex:4},{value:" ",paraId:158,tocIndex:4},{value:"getNodeDegree",paraId:158,tocIndex:4},{value:"Not yet available",paraId:159,tocIndex:4},{value:" ",paraId:160,tocIndex:4},{value:"getShortestPathMatrix",paraId:160,tocIndex:4},{value:"Not yet available",paraId:161,tocIndex:4},{value:" ",paraId:162,tocIndex:4},{value:"getAdjMatrix",paraId:162,tocIndex:4},{value:"Removed",paraId:163,tocIndex:4},{value:" ",paraId:164,tocIndex:4},{value:"pushStack / getUndoStack / getRedoStack / getStackData / clearStack",paraId:164,tocIndex:4},{value:"All undo and redo related APIs should be called after obtaining the corresponding plugin, for example:",paraId:165,tocIndex:4},{value:"// 'history' is the key configured for use with the plugin\nconst history = graph.getPluginInstance('history');\n\nhistory.redo();\n",paraId:166,tocIndex:4},{value:"Removed",paraId:167,tocIndex:4},{value:" ",paraId:168,tocIndex:4},{value:"positionsAnimate / stopAnimate / isAnimating",paraId:168,tocIndex:4},{value:"Animation-related information is now emitted through events:",paraId:169,tocIndex:4},{value:"Animation start event: ",paraId:170,tocIndex:4},{value:"beforeanimate",paraId:170,tocIndex:4},{value:"Animation end event: ",paraId:170,tocIndex:4},{value:"afteranimate",paraId:170,tocIndex:4},{value:"To stop an animation:",paraId:170,tocIndex:4},{value:"graph.on('beforeanimate', (event) => {\n  event.animation.stop();\n});\n",paraId:171,tocIndex:4},{value:"Change",paraId:172,tocIndex:4},{value:" ",paraId:173,tocIndex:4},{value:"getPointByClient / getClientByPoint / getPointByCanvas / getCanvasByPoint / getGraphCenterPoint / getViewPortCenterPoint",paraId:173,tocIndex:4},{value:"G6 5.x uses a different coordinate system than 4.x. For details, see ",paraId:174,tocIndex:4},{value:"Coordinate",paraId:175,tocIndex:4},{value:".",paraId:174,tocIndex:4},{value:"Removed",paraId:176,tocIndex:4},{value:" ",paraId:177,tocIndex:4},{value:"setTextWaterMarker / setImageWaterMarker",paraId:177,tocIndex:4},{value:"For watermark functionality, please refer to the ",paraId:178,tocIndex:4},{value:"Watermark",paraId:179,tocIndex:4},{value:"plugin.",paraId:178,tocIndex:4},{value:"Change",paraId:180,tocIndex:4},{value:" ",paraId:181,tocIndex:4},{value:"toFullDataURL",paraId:181,tocIndex:4},{value:"Replaced with ",paraId:182,tocIndex:4},{value:"toDataURL",paraId:182,tocIndex:4},{value:", specify the parameter as: ",paraId:182,tocIndex:4},{value:"mode: 'overall'",paraId:182,tocIndex:4},{value:"graph.toDataURL({ mode: 'overall' });\n",paraId:183,tocIndex:4},{value:"Removed",paraId:184,tocIndex:4},{value:" ",paraId:185,tocIndex:4},{value:"downloadFullImage / downloadImage",paraId:185,tocIndex:4},{value:"Only the capability to export as a ",paraId:186,tocIndex:4},{value:"DataURL",paraId:186,tocIndex:4},{value:" is provided. If you need to download an image, please refer to the following example code:",paraId:186,tocIndex:4},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:187,tocIndex:4},{value:"Removed",paraId:188,tocIndex:4},{value:" ",paraId:189,tocIndex:4},{value:"clear",paraId:189,tocIndex:4},{value:"Use ",paraId:190,tocIndex:4},{value:"setData",paraId:190,tocIndex:4},{value:" + ",paraId:190,tocIndex:4},{value:"draw",paraId:190,tocIndex:4},{value:" to clear data and the canvas.",paraId:190,tocIndex:4},{value:"Unlike G6 4.x, G6 5.x uses a unified extension registration function (register). You can refer to the ",paraId:191,tocIndex:5},{value:"Extension Register",paraId:192,tocIndex:5},{value:" to register G6 extensions.",paraId:191,tocIndex:5},{value:"The following G6 4.x registration functions have been deprecated:",paraId:193,tocIndex:5},{value:"registerNode",paraId:194,tocIndex:5},{value:"registerEdge",paraId:194,tocIndex:5},{value:"registerCombo",paraId:194,tocIndex:5},{value:"registerLayout",paraId:194,tocIndex:5},{value:"registerBehavior",paraId:194,tocIndex:5},{value:"Compared to G6 4.x, G6 5.x has the following differences in events:",paraId:195,tocIndex:6},{value:"The ",paraId:196,tocIndex:6},{value:"mouse",paraId:196,tocIndex:6},{value:" and ",paraId:196,tocIndex:6},{value:"touch",paraId:196,tocIndex:6},{value:" events have been removed and are unified under the ",paraId:196,tocIndex:6},{value:"pointer",paraId:196,tocIndex:6},{value:" event.",paraId:196,tocIndex:6},{value:"The naming convention for lifecycle events is usually in the format of: ",paraId:196,tocIndex:6},{value:"before/after",paraId:196,tocIndex:6},{value:" + ",paraId:196,tocIndex:6},{value:"object/property",paraId:196,tocIndex:6},{value:" + ",paraId:196,tocIndex:6},{value:"action",paraId:196,tocIndex:6},{value:", for example: ",paraId:196,tocIndex:6},{value:"beforeelementcreate",paraId:196,tocIndex:6},{value:" is triggered before an element is created.",paraId:196,tocIndex:6},{value:"The following events have been removed:\n",paraId:196,tocIndex:6},{value:"afteractivaterelations",paraId:197,tocIndex:6},{value:"afteradditem",paraId:197,tocIndex:6},{value:"aftercreateedge",paraId:197,tocIndex:6},{value:"aftergraphrefresh",paraId:197,tocIndex:6},{value:"aftergraphrefreshposition",paraId:197,tocIndex:6},{value:"afteritemrefresh",paraId:197,tocIndex:6},{value:"aftermodechange",paraId:197,tocIndex:6},{value:"afterremoveitem",paraId:197,tocIndex:6},{value:"afterupdateitem",paraId:197,tocIndex:6},{value:"beforeadditem",paraId:197,tocIndex:6},{value:"beforecreateedge",paraId:197,tocIndex:6},{value:"beforegraphrefresh",paraId:197,tocIndex:6},{value:"beforegraphrefreshposition",paraId:197,tocIndex:6},{value:"beforeitemrefresh",paraId:197,tocIndex:6},{value:"beforemodechange",paraId:197,tocIndex:6},{value:"beforeremoveitem",paraId:197,tocIndex:6},{value:"beforeupdateitem",paraId:197,tocIndex:6},{value:"dragnodeend",paraId:197,tocIndex:6},{value:"nodeselectchange",paraId:197,tocIndex:6},{value:"stackchange",paraId:197,tocIndex:6},{value:"tooltipchange",paraId:197,tocIndex:6},{value:"The following element change events have been removed, but you can still access them through ",paraId:196,tocIndex:6},{value:"beforeelementupdate",paraId:196,tocIndex:6},{value:" and ",paraId:196,tocIndex:6},{value:"afterelementupdate",paraId:196,tocIndex:6},{value:":\n",paraId:196,tocIndex:6},{value:"afteritemstatechange",paraId:198,tocIndex:6},{value:"afteritemstatesclear",paraId:198,tocIndex:6},{value:"afteritemvisibilitychange",paraId:198,tocIndex:6},{value:"beforeitemstatechange",paraId:198,tocIndex:6},{value:"beforeitemstatesclear",paraId:198,tocIndex:6},{value:"beforeitemvisibilitychange",paraId:198,tocIndex:6},{value:"The following events have been changed:\n",paraId:196,tocIndex:6},{value:"The ",paraId:199,tocIndex:6},{value:"graphstatechange",paraId:199,tocIndex:6},{value:" event has been changed to ",paraId:199,tocIndex:6},{value:"beforeelementstatechange",paraId:199,tocIndex:6},{value:" / ",paraId:199,tocIndex:6},{value:"afterelementstatechange",paraId:199,tocIndex:6},{value:".",paraId:199,tocIndex:6},{value:"The ",paraId:199,tocIndex:6},{value:"viewportchange",paraId:199,tocIndex:6},{value:" event has been changed to ",paraId:199,tocIndex:6},{value:"beforetransform",paraId:199,tocIndex:6},{value:" / ",paraId:199,tocIndex:6},{value:"aftertransform",paraId:199,tocIndex:6},{value:".",paraId:199,tocIndex:6},{value:"For a complete list of events, please refer to ",paraId:200,tocIndex:6},{value:"Event",paraId:201,tocIndex:6},{value:".",paraId:200,tocIndex:6}]}}]);