"use strict";(self.webpackChunk_antv_g6_site=self.webpackChunk_antv_g6_site||[]).push([[9600],{30532:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(52688);var d={}},45135:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(53579);var d={}},79824:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(63720);var d={}},9030:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(73802);var d={}},47203:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(76003);var d={}},71061:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(73251);var d={}},5422:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(75091);var d={}},97431:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(50396);var d={}},12874:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(55968);var d={}},53763:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(74187);var d={}},14951:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(21763);var d={}},45040:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(13351);var d={}},16448:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(36434);var d={}},44632:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(78237);var d={}},7005:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(41190);var d={}},53127:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(57647);var d={}},25756:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(91067);var d={}},15727:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(68442);var d={}},95034:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(34441);var d={}},39297:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(97668);var d={}},29019:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(8368);var d={}},85079:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(90706);var d={}},5729:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(37315);var d={}},554:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(86348);var d={}},68041:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(64040);var d={}},50376:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(76045);var d={}},68099:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(80835);var d={}},52124:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(53293);var d={}},89810:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(2766);var d={}},31586:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(48068);var d={}},49810:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(20908);var d={}},89616:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(19541);var d={}},95303:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(15178);var d={}},56267:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(90915);var d={}},56487:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(22472);var d={}},28203:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(64733);var d={}},37623:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(28278);var d={}},47841:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(69226);var d={}},52782:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(65686);var d={}},78232:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(27111);var d={}},11083:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(70639);var d={}},93843:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(59913);var d={}},48790:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(27972);var d={}},20973:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(20246);var d={}},60210:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(39951);var d={}},25624:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(97434);var d={}},63230:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(30940);var d={}},37126:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(84251);var d={}},61244:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(78011);var d={}},34367:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(91596);var d={}},25510:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(97833);var d={}},51330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(58314);var d={}},10145:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(11930);var d={}},95692:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(10428);var d={}},89842:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(86894);var d={}},12853:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(31838);var d={}},63506:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(69133);var d={}},11518:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(47466);var d={}},8496:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(78118);var d={}},2169:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(89313);var d={}},4205:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(33608);var d={}},47479:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(74306);var d={}},21189:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(42689);var d={}},67565:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(54603);var d={}},27281:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(23533);var d={}},30854:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(82416);var d={}},4201:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(14732);var d={}},77288:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(73707);var d={}},56117:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(18675);var d={}},55788:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(47895);var d={}},9269:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(46118);var d={}},32258:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(37331);var d={}},46078:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(2506);var d={}},81786:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(54284);var d={}},94877:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(99526);var d={}},24847:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(40437);var d={}},54402:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(7379);var d={}},55311:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(99280);var d={}},28419:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(885);var d={}},28845:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(45512);var d={}},8713:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(23461);var d={}},18363:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(14307);var d={}},30224:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(92379);var d={}},51857:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(30792);var d={}},64995:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(70864);var d={}},52361:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(29197);var d={}},44233:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(63237);var d={}},50207:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(95185);var d={}},23608:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(64739);var d={}},78420:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(436);var d={}},75838:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(91031);var d={}},32792:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(39509);var d={}},27681:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(96450);var d={}},24018:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(24655);var d={}},57906:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(18688);var d={}},382:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(53868);var d={}},95277:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(4675);var d={}},92525:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(28925);var d={}},12026:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(5273);var d={}},19268:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(59379);var d={}},13645:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(18129);var d={}},33762:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(22259);var d={}},36039:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(43813);var d={}},70532:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(93602);var d={}},50278:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(22006);var d={}},90658:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(3723);var d={}},5872:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(89334);var d={}},42721:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(67640);var d={}},1728:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(13387);var d={}},34965:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(82545);var d={}},65645:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(67282);var d={}},69863:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(20283);var d={}},13702:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(61818);var d={}},94512:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(71758);var d={}},27409:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(31871);var d={}},1956:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(1008);var d={}},77647:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(16334);var d={}},62189:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(24804);var d={}},7023:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(39738);var d={}},15858:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(8944);var d={}},32016:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(68440);var d={}},26710:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(84230);var d={}},4475:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(21368);var d={}},93667:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(16234);var d={}},67122:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(98880);var d={}},65494:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(35061);var d={}},11302:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(12890);var d={}},92575:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(81283);var d={}},88381:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(46522);var d={}},98359:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(73915);var d={}},3847:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(84660);var d={}},49884:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(63586);var d={}},44336:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(21508);var d={}},76020:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(53414);var d={}},51773:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(29042);var d={}},46951:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(32054);var d={}},56027:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(72320);var d={}},93384:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(78491);var d={}},8517:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(14151);var d={}},25744:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(72138);var d={}},98671:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(65141);var d={}},58778:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(85144);var d={}},10668:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(55826),n(70869);var d={}},78301:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(52688);const d=[{value:"交互（Behavior）是 G6 的核心构建模块，它精确定义了用户与图之间的互动行为。每个 Behavior 插件都是一个高度封装的功能单元，内部集成了特定场景下的事件监听、状态管理和响应处理逻辑。",paraId:0,tocIndex:0},{value:"G6 的内置 Behavior 涵盖了大多数常见交互需求，同时提供了灵活的扩展机制，支持开发者根据业务场景构建定制化交互体验。\n有关完整的交互行为类型、配置选项及开发示例，请参阅 ",paraId:1,tocIndex:0},{value:"交互总览",paraId:2,tocIndex:0},{value:" 章节。",paraId:1,tocIndex:0},{value:"获取当前图表中所有已配置的交互行为。",paraId:3,tocIndex:2},{value:"getBehaviors(): BehaviorOptions;\n",paraId:4,tocIndex:2},{value:"返回值",paraId:5,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:": ",paraId:6,tocIndex:2},{value:"BehaviorOptions",paraId:7,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:": 当前图表中已配置的所有交互行为",paraId:6,tocIndex:2},{value:"示例",paraId:8,tocIndex:2},{value:"// 获取当前所有交互行为\nconst behaviors = graph.getBehaviors();\nconsole.log('当前图表的交互行为:', behaviors);\n",paraId:9,tocIndex:2},{value:"设置图表的交互行为，将替换所有现有的交互行为。",paraId:10,tocIndex:3},{value:"setBehaviors(behaviors: BehaviorOptions | ((prev: BehaviorOptions) => BehaviorOptions)): void;\n",paraId:11,tocIndex:3},{value:"参数",paraId:12,tocIndex:3},{value:"参数",paraId:13,tocIndex:3},{value:"描述",paraId:13,tocIndex:3},{value:"类型",paraId:13,tocIndex:3},{value:"默认值",paraId:13,tocIndex:3},{value:"必选",paraId:13,tocIndex:3},{value:"behaviors",paraId:13,tocIndex:3},{value:"新的交互行为配置，或一个基于当前配置返回新配置的函数",paraId:13,tocIndex:3},{value:"BehaviorOptions",paraId:14,tocIndex:3},{value:" | (prev: BehaviorOptions) => BehaviorOptions",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"说明",paraId:15,tocIndex:3},{value:"设置的交互会全量替换原有的交互，如果需要新增交互可以使用函数式更新：",paraId:16,tocIndex:3},{value:"graph.setBehaviors((behaviors) => [...behaviors, { type: 'zoom-canvas' }]);\n",paraId:17,tocIndex:3},{value:"示例 1",paraId:18,tocIndex:3},{value:": 设置基本交互",paraId:18,tocIndex:3},{value:"// 设置基本交互\ngraph.setBehaviors([\n  'drag-canvas', // 拖拽画布\n  'zoom-canvas', // 缩放画布\n  'drag-element', // 拖拽元素\n]);\n",paraId:19,tocIndex:3},{value:"示例 2",paraId:20,tocIndex:3},{value:": 设置带配置的交互",paraId:20,tocIndex:3},{value:"graph.setBehaviors([\n  // 字符串形式（使用默认配置）\n  'drag-canvas',\n\n  // 对象形式（自定义配置）\n  {\n    type: 'zoom-canvas',\n    key: 'my-zoom', // 指定唯一标识，用于后续更新\n    sensitivity: 1.5, // 缩放灵敏度\n  },\n\n  // 只有节点上启用拖拽\n  {\n    type: 'drag-element',\n    key: 'drag-node-only',\n    enable: (event) => event.targetType === 'node', // 仅在节点上启用拖拽\n  },\n]);\n",paraId:21,tocIndex:3},{value:"示例 3",paraId:22,tocIndex:3},{value:": 使用函数式更新",paraId:22,tocIndex:3},{value:"// 添加新的交互行为\ngraph.setBehaviors((currentBehaviors) => [\n  ...currentBehaviors,\n  {\n    type: 'brush-select',\n    key: 'selection-brush',\n  },\n]);\n\n// 替换特定交互行为\ngraph.setBehaviors((currentBehaviors) => {\n  // 过滤掉现有的缩放交互\n  const filteredBehaviors = currentBehaviors.filter((behavior) => {\n    if (typeof behavior === 'string') return behavior !== 'zoom-canvas';\n    return behavior.type !== 'zoom-canvas';\n  });\n\n  // 添加新的缩放交互配置\n  return [\n    ...filteredBehaviors,\n    {\n      type: 'zoom-canvas',\n      key: 'new-zoom',\n      enableOptimize: true,\n    },\n  ];\n});\n",paraId:23,tocIndex:3},{value:"更新指定的交互行为配置，需要通过 ",paraId:24,tocIndex:4},{value:"key",paraId:24,tocIndex:4},{value:" 标识要更新的交互。",paraId:24,tocIndex:4},{value:"updateBehavior(behavior: UpdateBehaviorOption): void;\n",paraId:25,tocIndex:4},{value:"参数",paraId:26,tocIndex:4},{value:"参数",paraId:27,tocIndex:4},{value:"描述",paraId:27,tocIndex:4},{value:"类型",paraId:27,tocIndex:4},{value:"默认值",paraId:27,tocIndex:4},{value:"必选",paraId:27,tocIndex:4},{value:"behavior",paraId:27,tocIndex:4},{value:"更新的交互行为配置",paraId:27,tocIndex:4},{value:"UpdateBehaviorOption",paraId:28,tocIndex:4},{value:"-",paraId:27,tocIndex:4},{value:"✓",paraId:27,tocIndex:4},{value:"说明",paraId:29,tocIndex:4},{value:"如果要更新一个交互，必须在原始交互配置中指定 ",paraId:30,tocIndex:4},{value:"key",paraId:30,tocIndex:4},{value:" 字段，以便能够准确找到并更新该交互。",paraId:30,tocIndex:4},{value:"示例 1",paraId:31,tocIndex:4},{value:": 更新交互配置",paraId:31,tocIndex:4},{value:"// 初始设置交互时指定 key\ngraph.setBehaviors([\n  {\n    type: 'zoom-canvas',\n    key: 'my-zoom-canvas',\n    sensitivity: 1.0,\n  },\n]);\n\n// 更新交互配置\ngraph.updateBehavior({\n  key: 'my-zoom-canvas', // 指定要更新的交互\n  sensitivity: 2.0, // 新的缩放灵敏度\n  enableOptimize: true, // 添加新配置\n});\n",paraId:32,tocIndex:4},{value:"示例 2",paraId:33,tocIndex:4},{value:": 禁用/启用交互",paraId:33,tocIndex:4},{value:"// 设置带 key 的行为\ngraph.setBehaviors([\n  {\n    type: 'drag-canvas',\n    key: 'main-drag',\n  },\n  {\n    type: 'zoom-canvas',\n    key: 'main-zoom',\n  },\n]);\n\n// 禁用拖拽功能\ngraph.updateBehavior({\n  key: 'main-drag',\n  enable: false,\n});\n\n// 稍后重新启用\nsetTimeout(() => {\n  graph.updateBehavior({\n    key: 'main-drag',\n    enable: true,\n  });\n}, 5000);\n",paraId:34,tocIndex:4},{value:"type BehaviorOptions = (string | CustomBehaviorOption | ((this: Graph) => CustomBehaviorOption))[];\n\ntype CustomBehaviorOption = {\n  // 交互类型\n  type: string;\n\n  // 交互 key，即唯一标识，用于标识交互，从而进一步操作此交互\n  key?: string;\n\n  // 针对不同类型的交互，还可能有其他配置项\n  [configKey: string]: any;\n};\n",paraId:35,tocIndex:6},{value:"type UpdateBehaviorOption = {\n  // 要更新的交互的唯一标识\n  key: string;\n\n  // 其他要更新的配置项\n  [configKey: string]: unknown;\n};\n",paraId:36,tocIndex:7}]},39339:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53579);const d=[{value:"G6 提供了一系列画布操作 API，用于控制和获取画布的基本信息。通过这些 API，你可以：",paraId:0,tocIndex:0},{value:"获取画布实例",paraId:1,tocIndex:0},{value:"获取和设置画布尺寸",paraId:1,tocIndex:0},{value:"操作画布渲染器和图层",paraId:1,tocIndex:0},{value:"获取画布实例，返回的实例可用于进行底层的画布操作。",paraId:2,tocIndex:2},{value:"getCanvas(): Canvas;\n",paraId:3,tocIndex:2},{value:"返回值类型说明",paraId:4,tocIndex:2},{value:"Canvas 实例包含以下主要功能：",paraId:5,tocIndex:2},{value:"getLayer(name?: string)",paraId:6,tocIndex:2},{value:": 获取指定图层",paraId:6,tocIndex:2},{value:"getLayers()",paraId:6,tocIndex:2},{value:": 获取所有图层",paraId:6,tocIndex:2},{value:"getCamera()",paraId:6,tocIndex:2},{value:": 获取相机实例",paraId:6,tocIndex:2},{value:"getRoot()",paraId:6,tocIndex:2},{value:": 获取根节点",paraId:6,tocIndex:2},{value:"setCursor(cursor: string)",paraId:6,tocIndex:2},{value:": 设置鼠标样式",paraId:6,tocIndex:2},{value:"示例",paraId:7,tocIndex:2},{value:"// 获取画布实例\nconst canvas = graph.getCanvas();\n\n// 获取主图层\nconst mainLayer = canvas.getLayer('main');\n\n// 设置鼠标样式\ncanvas.setCursor('pointer');\n\n// 获取画布根节点\nconst root = canvas.getRoot();\n",paraId:8,tocIndex:2},{value:"获取当前画布容器的尺寸。返回一个包含宽度和高度的数组。",paraId:9,tocIndex:3},{value:"getSize(): [number, number];\n",paraId:10,tocIndex:3},{value:"示例",paraId:11,tocIndex:3},{value:"// 获取画布尺寸\nconst [width, height] = graph.getSize();\nconsole.log('画布宽度:', width);\nconsole.log('画布高度:', height);\n\n// 使用尺寸信息进行计算\nconst centerX = width / 2;\nconst centerY = height / 2;\n",paraId:12,tocIndex:3},{value:"设置画布容器的尺寸。这个方法会同时更新画布和容器的大小。",paraId:13,tocIndex:4},{value:"setSize(width: number, height: number): void;\n",paraId:14,tocIndex:4},{value:"参数",paraId:15,tocIndex:4},{value:"参数",paraId:16,tocIndex:4},{value:"描述",paraId:16,tocIndex:4},{value:"类型",paraId:16,tocIndex:4},{value:"默认值",paraId:16,tocIndex:4},{value:"必选",paraId:16,tocIndex:4},{value:"width",paraId:16,tocIndex:4},{value:"画布宽度（像素）",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"✓",paraId:16,tocIndex:4},{value:"height",paraId:16,tocIndex:4},{value:"画布高度（像素）",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"✓",paraId:16,tocIndex:4},{value:"示例",paraId:17,tocIndex:4},{value:"// 设置固定尺寸\ngraph.setSize(800, 600);\n",paraId:18,tocIndex:4}]},27086:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63720);const d=[{value:"在图可视化中，理解不同的坐标系及其转换关系至关重要。G6 中涉及多种坐标系，它们各自用于不同的场景：",paraId:0,tocIndex:0},{value:"Client 坐标系",paraId:1,tocIndex:0},{value:"：浏览器视口左上角为原点，单位为像素。通常用于处理浏览器事件。",paraId:1,tocIndex:0},{value:"Screen 坐标系",paraId:1,tocIndex:0},{value:"：屏幕左上角为原点，会受页面滚动影响。",paraId:1,tocIndex:0},{value:"Page 坐标系",paraId:1,tocIndex:0},{value:"：文档左上角为原点，考虑文档滚动。",paraId:1,tocIndex:0},{value:"Canvas 坐标系",paraId:1,tocIndex:0},{value:"：也称为世界坐标系，图形绘制和布局时使用的坐标系，画布元素左上角为原点。",paraId:1,tocIndex:0},{value:"Viewport 坐标系",paraId:1,tocIndex:0},{value:"：视口坐标系，当前可见的画布区域，视口左上角为原点。视口通过平移、缩放等操作，可以观察不同的 Canvas 区域。",paraId:1,tocIndex:0},{value:"在这个",paraId:2,tocIndex:0},{value:"示例",paraId:2,tocIndex:0},{value:"中，移动鼠标可以看到鼠标所在位置在各个坐标系下的值：",paraId:2,tocIndex:0},{value:"当画布没有发生平移和缩放时，Viewport 坐标系与 Canvas 坐标系重合。随着用户的交互（如拖拽画布、缩放），两个坐标系会出现偏移。",paraId:3,tocIndex:0},{value:"G6 提供了一系列 API 用于在不同坐标系之间进行转换，下面将详细介绍这些 API。",paraId:4,tocIndex:0},{value:"将浏览器坐标（客户端坐标）转换为画布坐标。",paraId:5,tocIndex:2},{value:"getCanvasByClient(point: Point): Point;\n",paraId:6,tocIndex:2},{value:"参数",paraId:7,tocIndex:2},{value:"参数",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"point",paraId:8,tocIndex:2},{value:"浏览器坐标点",paraId:8,tocIndex:2},{value:"[number, number] | [number, number, number]",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"返回值",paraId:9,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:": [number, number] | [number, number, number]",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:": 画布坐标系下的坐标点",paraId:10,tocIndex:2},{value:"将视口坐标转换为画布坐标。",paraId:11,tocIndex:3},{value:"getCanvasByViewport(point: Point): Point;\n",paraId:12,tocIndex:3},{value:"参数",paraId:13,tocIndex:3},{value:"参数",paraId:14,tocIndex:3},{value:"描述",paraId:14,tocIndex:3},{value:"类型",paraId:14,tocIndex:3},{value:"默认值",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"point",paraId:14,tocIndex:3},{value:"视口坐标点",paraId:14,tocIndex:3},{value:"[number, number] | [number, number, number]",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"返回值",paraId:15,tocIndex:3},{value:"类型",paraId:16,tocIndex:3},{value:": [number, number] | [number, number, number]",paraId:16,tocIndex:3},{value:"描述",paraId:16,tocIndex:3},{value:": 画布坐标系下的坐标点",paraId:16,tocIndex:3},{value:"将画布坐标转换为浏览器客户端坐标。",paraId:17,tocIndex:4},{value:"getClientByCanvas(point: Point): Point;\n",paraId:18,tocIndex:4},{value:"参数",paraId:19,tocIndex:4},{value:"参数",paraId:20,tocIndex:4},{value:"描述",paraId:20,tocIndex:4},{value:"类型",paraId:20,tocIndex:4},{value:"默认值",paraId:20,tocIndex:4},{value:"必选",paraId:20,tocIndex:4},{value:"point",paraId:20,tocIndex:4},{value:"画布坐标点",paraId:20,tocIndex:4},{value:"[number, number] | [number, number, number]",paraId:20,tocIndex:4},{value:"-",paraId:20,tocIndex:4},{value:"✓",paraId:20,tocIndex:4},{value:"返回值",paraId:21,tocIndex:4},{value:"类型",paraId:22,tocIndex:4},{value:": [number, number] | [number, number, number]",paraId:22,tocIndex:4},{value:"描述",paraId:22,tocIndex:4},{value:": 浏览器客户端坐标系下的坐标点",paraId:22,tocIndex:4},{value:"将画布坐标转换为视口坐标。",paraId:23,tocIndex:5},{value:"getViewportByCanvas(point: Point): Point;\n",paraId:24,tocIndex:5},{value:"参数",paraId:25,tocIndex:5},{value:"参数",paraId:26,tocIndex:5},{value:"描述",paraId:26,tocIndex:5},{value:"类型",paraId:26,tocIndex:5},{value:"默认值",paraId:26,tocIndex:5},{value:"必选",paraId:26,tocIndex:5},{value:"point",paraId:26,tocIndex:5},{value:"画布坐标点",paraId:26,tocIndex:5},{value:"[number, number] | [number, number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"✓",paraId:26,tocIndex:5},{value:"返回值",paraId:27,tocIndex:5},{value:"类型",paraId:28,tocIndex:5},{value:": [number, number] | [number, number, number]",paraId:28,tocIndex:5},{value:"描述",paraId:28,tocIndex:5},{value:": 视口坐标系下的坐标点",paraId:28,tocIndex:5}]},22567:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73802);const d=[{value:"G6 提供了一套全面的 ",paraId:0,tocIndex:0},{value:"数据",paraId:1,tocIndex:0},{value:" 操作 API，覆盖了图数据从查询、修改到更新的完整生命周期。",paraId:0,tocIndex:0},{value:"获取图的完整数据。",paraId:2,tocIndex:2},{value:"getData(): Required<GraphData>;\n",paraId:3,tocIndex:2},{value:"返回值",paraId:4,tocIndex:2},{value:":",paraId:4,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:": ",paraId:5,tocIndex:2},{value:"GraphData",paraId:6,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:": 返回包含所有节点、边和组合数据的完整图数据",paraId:7,tocIndex:2},{value:"示例",paraId:8,tocIndex:2},{value:":",paraId:8,tocIndex:2},{value:"const graphData = graph.getData();\nconsole.log('节点数据:', graphData.nodes);\nconsole.log('边数据:', graphData.edges);\nconsole.log('组合数据:', graphData.combos);\n",paraId:9,tocIndex:2},{value:"获取节点数据，支持三种调用方式。",paraId:10,tocIndex:3},{value:"// 获取所有节点数据\ngetNodeData(): NodeData[];\n\n// 获取单个节点数据\ngetNodeData(id: ID): NodeData;\n\n// 批量获取多个节点数据\ngetNodeData(ids: ID[]): NodeData[];\n",paraId:11,tocIndex:3},{value:"参数",paraId:12,tocIndex:3},{value:":",paraId:12,tocIndex:3},{value:"参数",paraId:13,tocIndex:3},{value:"描述",paraId:13,tocIndex:3},{value:"类型",paraId:13,tocIndex:3},{value:"默认值",paraId:13,tocIndex:3},{value:"必选",paraId:13,tocIndex:3},{value:"id",paraId:13,tocIndex:3},{value:"节点 ID",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"ids",paraId:13,tocIndex:3},{value:"节点 ID 数组",paraId:13,tocIndex:3},{value:"string[]",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"返回值",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:": ",paraId:15,tocIndex:3},{value:"NodeData",paraId:16,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"NodeData",paraId:17,tocIndex:3},{value:"[]",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:": 返回指定的节点数据或节点数据数组",paraId:15,tocIndex:3},{value:"示例",paraId:18,tocIndex:3},{value:":",paraId:18,tocIndex:3},{value:"// 获取所有节点\nconst nodes = graph.getNodeData();\n\n// 获取单个节点\nconst node = graph.getNodeData('node1');\nconsole.log('节点位置:', node.style.x, node.style.y);\n\n// 获取多个节点\nconst [node1, node2] = graph.getNodeData(['node1', 'node2']);\n",paraId:19,tocIndex:3},{value:"获取边数据，支持三种调用方式。",paraId:20,tocIndex:4},{value:"// 获取所有边数据\ngetEdgeData(): EdgeData[];\n\n// 获取单条边数据\ngetEdgeData(id: ID): EdgeData;\n\n// 批量获取多条边数据\ngetEdgeData(ids: ID[]): EdgeData[];\n",paraId:21,tocIndex:4},{value:"参数",paraId:22,tocIndex:4},{value:":",paraId:22,tocIndex:4},{value:"参数",paraId:23,tocIndex:4},{value:"描述",paraId:23,tocIndex:4},{value:"类型",paraId:23,tocIndex:4},{value:"默认值",paraId:23,tocIndex:4},{value:"必选",paraId:23,tocIndex:4},{value:"id",paraId:23,tocIndex:4},{value:"边 ID",paraId:23,tocIndex:4},{value:"string",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"ids",paraId:23,tocIndex:4},{value:"边 ID 数组",paraId:23,tocIndex:4},{value:"string[]",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"返回值",paraId:24,tocIndex:4},{value:":",paraId:24,tocIndex:4},{value:"类型",paraId:25,tocIndex:4},{value:": ",paraId:25,tocIndex:4},{value:"EdgeData",paraId:26,tocIndex:4},{value:" | ",paraId:25,tocIndex:4},{value:"EdgeData",paraId:27,tocIndex:4},{value:"[]",paraId:25,tocIndex:4},{value:"描述",paraId:25,tocIndex:4},{value:": 返回指定的边数据或边数据数组",paraId:25,tocIndex:4},{value:"示例",paraId:28,tocIndex:4},{value:":",paraId:28,tocIndex:4},{value:"// 获取所有边\nconst edges = graph.getEdgeData();\n\n// 获取单条边\nconst edge = graph.getEdgeData('edge1');\nconsole.log('边的起点和终点:', edge.source, edge.target);\n\n// 获取多条边\nconst [edge1, edge2] = graph.getEdgeData(['edge1', 'edge2']);\n",paraId:29,tocIndex:4},{value:"获取组合数据,支持三种调用方式。",paraId:30,tocIndex:5},{value:"// 获取所有组合数据\ngetComboData(): ComboData[];\n\n// 获取单个组合数据\ngetComboData(id: ID): ComboData;\n\n// 批量获取多个组合数据\ngetComboData(ids: ID[]): ComboData[];\n",paraId:31,tocIndex:5},{value:"参数",paraId:32,tocIndex:5},{value:":",paraId:32,tocIndex:5},{value:"参数",paraId:33,tocIndex:5},{value:"描述",paraId:33,tocIndex:5},{value:"类型",paraId:33,tocIndex:5},{value:"默认值",paraId:33,tocIndex:5},{value:"必选",paraId:33,tocIndex:5},{value:"id",paraId:33,tocIndex:5},{value:"组合 ID",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"ids",paraId:33,tocIndex:5},{value:"组合 ID 数组",paraId:33,tocIndex:5},{value:"string[]",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"返回值",paraId:34,tocIndex:5},{value:":",paraId:34,tocIndex:5},{value:"类型",paraId:35,tocIndex:5},{value:": ",paraId:35,tocIndex:5},{value:"ComboData",paraId:36,tocIndex:5},{value:" | ",paraId:35,tocIndex:5},{value:"ComboData",paraId:37,tocIndex:5},{value:"[]",paraId:35,tocIndex:5},{value:"描述",paraId:35,tocIndex:5},{value:": 返回指定的组合数据或组合数据数组",paraId:35,tocIndex:5},{value:"示例",paraId:38,tocIndex:5},{value:":",paraId:38,tocIndex:5},{value:"// 获取所有组合\nconst combos = graph.getComboData();\n\n// 获取单个组合\nconst combo = graph.getComboData('combo1');\nconsole.log('组合包含的节点:', combo.children);\n\n// 获取多个组合\nconst [combo1, combo2] = graph.getComboData(['combo1', 'combo2']);\n",paraId:39,tocIndex:5},{value:"获取单个元素数据，支持两种调用方式。",paraId:40,tocIndex:6},{value:"⚠️ ",paraId:41,tocIndex:6},{value:"注意",paraId:41,tocIndex:6},{value:": 此 API 直接获取元素的数据而不必考虑元素类型。",paraId:41,tocIndex:6},{value:"// 获取单个元素数据\ngetElementData(id: ID): ElementDatum;\n\n// 批量获取多个元素数据\ngetElementData(ids: ID[]): ElementDatum[];\n",paraId:42,tocIndex:6},{value:"参数",paraId:43,tocIndex:6},{value:":",paraId:43,tocIndex:6},{value:"参数",paraId:44,tocIndex:6},{value:"描述",paraId:44,tocIndex:6},{value:"类型",paraId:44,tocIndex:6},{value:"默认值",paraId:44,tocIndex:6},{value:"必选",paraId:44,tocIndex:6},{value:"id",paraId:44,tocIndex:6},{value:"元素 ID",paraId:44,tocIndex:6},{value:"string",paraId:44,tocIndex:6},{value:"-",paraId:44,tocIndex:6},{value:"ids",paraId:44,tocIndex:6},{value:"元素 ID 数组",paraId:44,tocIndex:6},{value:"string[]",paraId:44,tocIndex:6},{value:"-",paraId:44,tocIndex:6},{value:"返回值",paraId:45,tocIndex:6},{value:":",paraId:45,tocIndex:6},{value:"类型",paraId:46,tocIndex:6},{value:": ElementDatum | ElementDatum[]",paraId:46,tocIndex:6},{value:"描述",paraId:46,tocIndex:6},{value:": 直接获取元素的数据而不必考虑元素类型",paraId:46,tocIndex:6},{value:"示例",paraId:47,tocIndex:6},{value:":",paraId:47,tocIndex:6},{value:"const element = graph.getElementData('node-1');\nconsole.log('元素数据:', element);\n\nconst elements = graph.getElementData(['node-1', 'edge-1']);\nconsole.log('多个元素数据:', elements);\n",paraId:48,tocIndex:6},{value:"获取指定状态下的元素数据，支持三种调用方式。",paraId:49,tocIndex:7},{value:"// 获取指定状态下的节点数据\ngetElementDataByState(elementType: 'node', state: string): NodeData[];\n\n// 获取指定状态下的边数据\ngetElementDataByState(elementType: 'edge', state: string): EdgeData[];\n\n// 获取指定状态下的组合数据\ngetElementDataByState(elementType: 'combo', state: string): ComboData[];\n",paraId:50,tocIndex:7},{value:"参数",paraId:51,tocIndex:7},{value:":",paraId:51,tocIndex:7},{value:"参数",paraId:52,tocIndex:7},{value:"描述",paraId:52,tocIndex:7},{value:"类型",paraId:52,tocIndex:7},{value:"默认值",paraId:52,tocIndex:7},{value:"必选",paraId:52,tocIndex:7},{value:"elementType",paraId:52,tocIndex:7},{value:"元素类型",paraId:52,tocIndex:7},{value:"'node'",paraId:52,tocIndex:7},{value:" | ",paraId:52,tocIndex:7},{value:"'edge'",paraId:52,tocIndex:7},{value:" | ",paraId:52,tocIndex:7},{value:"'combo'",paraId:52,tocIndex:7},{value:"-",paraId:52,tocIndex:7},{value:"✓",paraId:52,tocIndex:7},{value:"state",paraId:52,tocIndex:7},{value:"状态",paraId:52,tocIndex:7},{value:"string",paraId:52,tocIndex:7},{value:"-",paraId:52,tocIndex:7},{value:"✓",paraId:52,tocIndex:7},{value:"返回值",paraId:53,tocIndex:7},{value:":",paraId:53,tocIndex:7},{value:"类型",paraId:54,tocIndex:7},{value:": NodeData[] | EdgeData[] | ComboData[]",paraId:54,tocIndex:7},{value:"描述",paraId:54,tocIndex:7},{value:": 返回指定状态下的节点数据、边数据或组合数据",paraId:54,tocIndex:7},{value:"示例",paraId:55,tocIndex:7},{value:":",paraId:55,tocIndex:7},{value:"const selectedNodes = graph.getElementDataByState('node', 'selected');\nconsole.log('选中的节点:', selectedNodes);\n\nconst selectedEdges = graph.getElementDataByState('edge', 'selected');\nconsole.log('选中的边:', selectedEdges);\n\nconst selectedCombos = graph.getElementDataByState('combo', 'selected');\nconsole.log('选中的组合:', selectedCombos);\n",paraId:56,tocIndex:7},{value:"内置状态",paraId:57,tocIndex:7},{value:":",paraId:57,tocIndex:7},{value:"'selected'",paraId:58,tocIndex:7},{value:"'highlight'",paraId:58,tocIndex:7},{value:"'active'",paraId:58,tocIndex:7},{value:"'inactive'",paraId:58,tocIndex:7},{value:"'disabled'",paraId:58,tocIndex:7},{value:"获取节点或组合的一跳邻居节点数据。",paraId:59,tocIndex:8},{value:"getNeighborNodesData(id: ID): NodeData[];\n",paraId:60,tocIndex:8},{value:"参数",paraId:61,tocIndex:8},{value:":",paraId:61,tocIndex:8},{value:"参数",paraId:62,tocIndex:8},{value:"描述",paraId:62,tocIndex:8},{value:"类型",paraId:62,tocIndex:8},{value:"默认值",paraId:62,tocIndex:8},{value:"必选",paraId:62,tocIndex:8},{value:"id",paraId:62,tocIndex:8},{value:"节点或组合的 ID",paraId:62,tocIndex:8},{value:"string",paraId:62,tocIndex:8},{value:"-",paraId:62,tocIndex:8},{value:"✓",paraId:62,tocIndex:8},{value:"返回值",paraId:63,tocIndex:8},{value:":",paraId:63,tocIndex:8},{value:"类型",paraId:64,tocIndex:8},{value:": NodeData[]",paraId:64,tocIndex:8},{value:"描述",paraId:64,tocIndex:8},{value:": 返回邻居节点数据",paraId:64,tocIndex:8},{value:"示例",paraId:65,tocIndex:8},{value:":",paraId:65,tocIndex:8},{value:"const neighbors = graph.getNeighborNodesData('node-1');\nconsole.log('邻居节点:', neighbors);\n",paraId:66,tocIndex:8},{value:"获取节点或组合关联边的数据。",paraId:67,tocIndex:9},{value:"getRelatedEdgesData(id: ID, direction?: EdgeDirection): EdgeData[];\n",paraId:68,tocIndex:9},{value:"参数",paraId:69,tocIndex:9},{value:":",paraId:69,tocIndex:9},{value:"参数",paraId:70,tocIndex:9},{value:"描述",paraId:70,tocIndex:9},{value:"类型",paraId:70,tocIndex:9},{value:"默认值",paraId:70,tocIndex:9},{value:"必选",paraId:70,tocIndex:9},{value:"id",paraId:70,tocIndex:9},{value:"节点或组合的 ID",paraId:70,tocIndex:9},{value:"string",paraId:70,tocIndex:9},{value:"-",paraId:70,tocIndex:9},{value:"✓",paraId:70,tocIndex:9},{value:"direction",paraId:70,tocIndex:9},{value:"边的方向",paraId:70,tocIndex:9},{value:"'in'",paraId:70,tocIndex:9},{value:" | ",paraId:70,tocIndex:9},{value:"'out'",paraId:70,tocIndex:9},{value:" | ",paraId:70,tocIndex:9},{value:"'both'",paraId:70,tocIndex:9},{value:"-",paraId:70,tocIndex:9},{value:"返回值",paraId:71,tocIndex:9},{value:":",paraId:71,tocIndex:9},{value:"类型",paraId:72,tocIndex:9},{value:": EdgeData[]",paraId:72,tocIndex:9},{value:"描述",paraId:72,tocIndex:9},{value:": 返回与指定节点或组合关联的边数据",paraId:72,tocIndex:9},{value:"示例",paraId:73,tocIndex:9},{value:":",paraId:73,tocIndex:9},{value:"const relatedEdges = graph.getRelatedEdgesData('node-1');\nconsole.log('关联边:', relatedEdges);\n",paraId:74,tocIndex:9},{value:"获取节点或组合的父元素数据。",paraId:75,tocIndex:10},{value:"getParentData(id: ID, hierarchy: HierarchyKey): NodeLikeData | undefined;\n",paraId:76,tocIndex:10},{value:"参数",paraId:77,tocIndex:10},{value:":",paraId:77,tocIndex:10},{value:"参数",paraId:78,tocIndex:10},{value:"描述",paraId:78,tocIndex:10},{value:"类型",paraId:78,tocIndex:10},{value:"默认值",paraId:78,tocIndex:10},{value:"必选",paraId:78,tocIndex:10},{value:"id",paraId:78,tocIndex:10},{value:"节点或组合的 ID",paraId:78,tocIndex:10},{value:"string",paraId:78,tocIndex:10},{value:"-",paraId:78,tocIndex:10},{value:"✓",paraId:78,tocIndex:10},{value:"hierarchy",paraId:78,tocIndex:10},{value:"指定层级关系类型",paraId:78,tocIndex:10},{value:"'tree'",paraId:78,tocIndex:10},{value:" | ",paraId:78,tocIndex:10},{value:"'combo'",paraId:78,tocIndex:10},{value:"-",paraId:78,tocIndex:10},{value:"返回值",paraId:79,tocIndex:10},{value:":",paraId:79,tocIndex:10},{value:"类型",paraId:80,tocIndex:10},{value:": NodeData | ComboData | undefined",paraId:80,tocIndex:10},{value:"描述",paraId:80,tocIndex:10},{value:": 返回父元素数据,如果不存在则返回 undefined",paraId:80,tocIndex:10},{value:"示例",paraId:81,tocIndex:10},{value:":",paraId:81,tocIndex:10},{value:"// 获取树图中节点的父节点\nconst treeParent = graph.getParentData('node1', 'tree');\n\n// 获取组合中节点的父组合\nconst comboParent = graph.getParentData('node1', 'combo');\n",paraId:82,tocIndex:10},{value:"获取节点或组合的子元素数据。",paraId:83,tocIndex:11},{value:"getChildrenData(id: ID):(NodeData \\| ComboData)[];\n",paraId:84,tocIndex:11},{value:"参数",paraId:85,tocIndex:11},{value:":",paraId:85,tocIndex:11},{value:"参数",paraId:86,tocIndex:11},{value:"描述",paraId:86,tocIndex:11},{value:"类型",paraId:86,tocIndex:11},{value:"默认值",paraId:86,tocIndex:11},{value:"必选",paraId:86,tocIndex:11},{value:"id",paraId:86,tocIndex:11},{value:"节点或组合的 ID",paraId:86,tocIndex:11},{value:"string",paraId:86,tocIndex:11},{value:"-",paraId:86,tocIndex:11},{value:"✓",paraId:86,tocIndex:11},{value:"返回值",paraId:87,tocIndex:11},{value:":",paraId:87,tocIndex:11},{value:"类型",paraId:88,tocIndex:11},{value:": (NodeData | ComboData)[]",paraId:88,tocIndex:11},{value:"描述",paraId:88,tocIndex:11},{value:": 返回子元素数据数组",paraId:88,tocIndex:11},{value:"注意",paraId:89,tocIndex:11},{value:":",paraId:89,tocIndex:11},{value:"查询 combo 的子元素",paraId:90,tocIndex:11},{value:"：如果 id 对应的是 combo 元素，可以直接通过此 API 获取其所有子元素。",paraId:90,tocIndex:11},{value:"查询节点的子元素",paraId:90,tocIndex:11},{value:"：如果 id 对应的是节点，只有当图数据为树结构（即节点数据中维护有 ",paraId:90,tocIndex:11},{value:"children",paraId:90,tocIndex:11},{value:" 字段，且 ",paraId:90,tocIndex:11},{value:"children",paraId:90,tocIndex:11},{value:" 为该节点的子节点 ID 数组）时，才能通过此 API 获取到该节点的子元素。否则返回空数组。",paraId:90,tocIndex:11},{value:"示例",paraId:91,tocIndex:11},{value:":",paraId:91,tocIndex:11},{value:"// 获取组合的子元素\nconst children = graph.getChildrenData('combo1');\nconsole.log('子节点数量:', children.length);\n\n// 处理每个子元素\nchildren.forEach((child) => {\n  console.log('子元素ID:', child.id);\n});\n",paraId:92,tocIndex:11},{value:"获取节点或组合的所有祖先元素数据。",paraId:93,tocIndex:12},{value:"getAncestorsData(id: ID, hierarchy: HierarchyKey): NodeLikeData[];\n",paraId:94,tocIndex:12},{value:"参数",paraId:95,tocIndex:12},{value:":",paraId:95,tocIndex:12},{value:"参数",paraId:96,tocIndex:12},{value:"描述",paraId:96,tocIndex:12},{value:"类型",paraId:96,tocIndex:12},{value:"默认值",paraId:96,tocIndex:12},{value:"必选",paraId:96,tocIndex:12},{value:"id",paraId:96,tocIndex:12},{value:"节点或组合的 ID",paraId:96,tocIndex:12},{value:"string",paraId:96,tocIndex:12},{value:"-",paraId:96,tocIndex:12},{value:"✓",paraId:96,tocIndex:12},{value:"hierarchy",paraId:96,tocIndex:12},{value:"指定层级关系类型",paraId:96,tocIndex:12},{value:"'tree'",paraId:96,tocIndex:12},{value:" | ",paraId:96,tocIndex:12},{value:"'combo'",paraId:96,tocIndex:12},{value:"-",paraId:96,tocIndex:12},{value:"✓",paraId:96,tocIndex:12},{value:"返回值",paraId:97,tocIndex:12},{value:":",paraId:97,tocIndex:12},{value:"类型",paraId:98,tocIndex:12},{value:": ",paraId:98,tocIndex:12},{value:"NodeData",paraId:99,tocIndex:12},{value:"[] | ",paraId:98,tocIndex:12},{value:"ComboData",paraId:100,tocIndex:12},{value:"[]",paraId:98,tocIndex:12},{value:"描述",paraId:98,tocIndex:12},{value:": 返回祖先元素数据数组，从父节点到根节点的顺序排列",paraId:98,tocIndex:12},{value:"示例",paraId:101,tocIndex:12},{value:":",paraId:101,tocIndex:12},{value:"// 获取树图中节点的所有祖先节点\nconst treeAncestors = graph.getAncestorsData('node1', 'tree');\nconsole.log(\n  '祖先节点路径:',\n  treeAncestors.map((node) => node.id),\n);\n\n// 获取组合中节点的所有父组合\nconst comboAncestors = graph.getAncestorsData('node1', 'combo');\n",paraId:102,tocIndex:12},{value:"获取节点或组合的所有后代元素数据。",paraId:103,tocIndex:13},{value:"getDescendantsData(id: ID): NodeLikeData[];\n",paraId:104,tocIndex:13},{value:"参数",paraId:105,tocIndex:13},{value:":",paraId:105,tocIndex:13},{value:"参数",paraId:106,tocIndex:13},{value:"描述",paraId:106,tocIndex:13},{value:"类型",paraId:106,tocIndex:13},{value:"默认值",paraId:106,tocIndex:13},{value:"必选",paraId:106,tocIndex:13},{value:"id",paraId:106,tocIndex:13},{value:"节点或组合的 ID",paraId:106,tocIndex:13},{value:"string",paraId:106,tocIndex:13},{value:"-",paraId:106,tocIndex:13},{value:"✓",paraId:106,tocIndex:13},{value:"返回值",paraId:107,tocIndex:13},{value:":",paraId:107,tocIndex:13},{value:"类型",paraId:108,tocIndex:13},{value:": ",paraId:108,tocIndex:13},{value:"NodeData",paraId:109,tocIndex:13},{value:"[] | ",paraId:108,tocIndex:13},{value:"ComboData",paraId:110,tocIndex:13},{value:"[]",paraId:108,tocIndex:13},{value:"描述",paraId:108,tocIndex:13},{value:": 返回后代元素数据数组",paraId:108,tocIndex:13},{value:"示例",paraId:111,tocIndex:13},{value:":",paraId:111,tocIndex:13},{value:"// 获取节点的所有后代\nconst descendants = graph.getDescendantsData('node1');\nconsole.log('后代数量:', descendants.length);\n\n// 处理所有后代元素\ndescendants.forEach((descendant) => {\n  console.log('后代元素ID:', descendant.id);\n});\n",paraId:112,tocIndex:13},{value:"设置图的完整数据。",paraId:113,tocIndex:14},{value:"setData(data: GraphData | ((prev: GraphData) => GraphData)): void;\n",paraId:114,tocIndex:14},{value:"参数",paraId:115,tocIndex:14},{value:":",paraId:115,tocIndex:14},{value:"参数",paraId:116,tocIndex:14},{value:"描述",paraId:116,tocIndex:14},{value:"类型",paraId:116,tocIndex:14},{value:"默认值",paraId:116,tocIndex:14},{value:"必选",paraId:116,tocIndex:14},{value:"data",paraId:116,tocIndex:14},{value:"新的图数据或返回新图数据的函数",paraId:116,tocIndex:14},{value:"GraphData",paraId:117,tocIndex:14},{value:" | ((prev: GraphData) => GraphData)",paraId:116,tocIndex:14},{value:"-",paraId:116,tocIndex:14},{value:"✓",paraId:116,tocIndex:14},{value:"示例",paraId:118,tocIndex:14},{value:":",paraId:118,tocIndex:14},{value:"// 直接设置数据\ngraph.setData({\n  nodes: [\n    { id: 'node1', style: { x: 100, y: 100 } },\n    { id: 'node2', style: { x: 200, y: 200 } },\n  ],\n  edges: [{ id: 'edge1', source: 'node1', target: 'node2' }],\n});\n\n// 使用函数式增量更新：获取当前图数据，并返回新的图数据\ngraph.setData((prev) => ({\n  ...prev,\n  nodes: [...prev.nodes, { id: 'node3', style: { x: 300, y: 300 } }],\n}));\n",paraId:119,tocIndex:14},{value:"新增元素数据。",paraId:120,tocIndex:15},{value:"addData(data: GraphData | ((prev: GraphData) => GraphData)): void;\n",paraId:121,tocIndex:15},{value:"参数",paraId:122,tocIndex:15},{value:":",paraId:122,tocIndex:15},{value:"参数",paraId:123,tocIndex:15},{value:"描述",paraId:123,tocIndex:15},{value:"类型",paraId:123,tocIndex:15},{value:"默认值",paraId:123,tocIndex:15},{value:"必选",paraId:123,tocIndex:15},{value:"data",paraId:123,tocIndex:15},{value:"需要添加的图数据或返回新图数据的函数",paraId:123,tocIndex:15},{value:"GraphData",paraId:124,tocIndex:15},{value:" | ((prev: GraphData) => GraphData)",paraId:123,tocIndex:15},{value:"-",paraId:123,tocIndex:15},{value:"✓",paraId:123,tocIndex:15},{value:"示例",paraId:125,tocIndex:15},{value:":",paraId:125,tocIndex:15},{value:"graph.addData({\n  nodes: [{ id: 'node-1' }, { id: 'node-2' }],\n  edges: [{ source: 'node-1', target: 'node-2' }],\n});\n",paraId:126,tocIndex:15},{value:"新增节点数据。",paraId:127,tocIndex:16},{value:"addNodeData(data: NodeData[] | ((prev: NodeData[]) => NodeData[])): void;\n",paraId:128,tocIndex:16},{value:"参数",paraId:129,tocIndex:16},{value:":",paraId:129,tocIndex:16},{value:"参数",paraId:130,tocIndex:16},{value:"描述",paraId:130,tocIndex:16},{value:"类型",paraId:130,tocIndex:16},{value:"默认值",paraId:130,tocIndex:16},{value:"必选",paraId:130,tocIndex:16},{value:"data",paraId:130,tocIndex:16},{value:"要添加的节点数据或返回节点数据的函数",paraId:130,tocIndex:16},{value:"NodeData",paraId:131,tocIndex:16},{value:"[] | (prev: NodeData[]) => NodeData[]",paraId:130,tocIndex:16},{value:"-",paraId:130,tocIndex:16},{value:"✓",paraId:130,tocIndex:16},{value:"示例",paraId:132,tocIndex:16},{value:":",paraId:132,tocIndex:16},{value:"// 添加单个节点\ngraph.addNodeData([\n  {\n    id: 'node1',\n    style: { x: 100, y: 100 },\n    data: { label: '节点 1' },\n  },\n]);\n\n// 批量添加节点\ngraph.addNodeData([\n  { id: 'node2', style: { x: 200, y: 200 } },\n  { id: 'node3', style: { x: 300, y: 300 } },\n]);\n\n// 函数式添加\ngraph.addNodeData((prev) => [...prev, { id: 'node4', style: { x: 400, y: 400 } }]);\n",paraId:133,tocIndex:16},{value:"新增边数据。",paraId:134,tocIndex:17},{value:"addEdgeData(data: EdgeData[] | ((prev: EdgeData[]) => EdgeData[])): void;\n",paraId:135,tocIndex:17},{value:"参数",paraId:136,tocIndex:17},{value:":",paraId:136,tocIndex:17},{value:"参数",paraId:137,tocIndex:17},{value:"描述",paraId:137,tocIndex:17},{value:"类型",paraId:137,tocIndex:17},{value:"默认值",paraId:137,tocIndex:17},{value:"必选",paraId:137,tocIndex:17},{value:"data",paraId:137,tocIndex:17},{value:"要添加的边数据或返回边数据的函数",paraId:137,tocIndex:17},{value:"EdgeData",paraId:138,tocIndex:17},{value:"[] | ((prev: EdgeData[]) => EdgeData[])",paraId:137,tocIndex:17},{value:"-",paraId:137,tocIndex:17},{value:"✓",paraId:137,tocIndex:17},{value:"示例",paraId:139,tocIndex:17},{value:":",paraId:139,tocIndex:17},{value:"// 添加单条边\ngraph.addEdgeData([\n  {\n    id: 'edge1',\n    source: 'node1',\n    target: 'node2',\n    data: {\n      weight: 1,\n      label: '关系',\n    },\n  },\n]);\n\n// 批量添加边\ngraph.addEdgeData([\n  { id: 'edge2', source: 'node2', target: 'node3' },\n  { id: 'edge3', source: 'node3', target: 'node1' },\n]);\n\n// 函数式添加\ngraph.addEdgeData((prev) => [...prev, { id: 'edge4', source: 'node1', target: 'node4' }]);\n",paraId:140,tocIndex:17},{value:"新增组合数据。",paraId:141,tocIndex:18},{value:"addComboData(data: ComboData[] | ((prev: ComboData[]) => ComboData[])): void;\n",paraId:142,tocIndex:18},{value:"参数",paraId:143,tocIndex:18},{value:":",paraId:143,tocIndex:18},{value:"参数",paraId:144,tocIndex:18},{value:"描述",paraId:144,tocIndex:18},{value:"类型",paraId:144,tocIndex:18},{value:"默认值",paraId:144,tocIndex:18},{value:"必选",paraId:144,tocIndex:18},{value:"data",paraId:144,tocIndex:18},{value:"要添加的组合数据或返回组合数据的函数",paraId:144,tocIndex:18},{value:"ComboData",paraId:145,tocIndex:18},{value:"[] | (prev: ComboData[]) => ComboData[]",paraId:144,tocIndex:18},{value:"-",paraId:144,tocIndex:18},{value:"✓",paraId:144,tocIndex:18},{value:"示例",paraId:146,tocIndex:18},{value:":",paraId:146,tocIndex:18},{value:"graph.addComboData([{ id: 'combo1', children: ['node1', 'node2'] }]);\n",paraId:147,tocIndex:18},{value:"为树图节点添加子节点数据。",paraId:148,tocIndex:19},{value:"⚠️ ",paraId:149,tocIndex:19},{value:"注意",paraId:149,tocIndex:19},{value:": 为组合添加子节点使用 addNodeData / addComboData 方法。",paraId:149,tocIndex:19},{value:"addChildrenData(parentId: ID, childrenData: NodeData[]): void;\n",paraId:150,tocIndex:19},{value:"参数",paraId:151,tocIndex:19},{value:":",paraId:151,tocIndex:19},{value:"参数",paraId:152,tocIndex:19},{value:"描述",paraId:152,tocIndex:19},{value:"类型",paraId:152,tocIndex:19},{value:"默认值",paraId:152,tocIndex:19},{value:"必选",paraId:152,tocIndex:19},{value:"parentId",paraId:152,tocIndex:19},{value:"父节点 ID",paraId:152,tocIndex:19},{value:"string",paraId:152,tocIndex:19},{value:"-",paraId:152,tocIndex:19},{value:"✓",paraId:152,tocIndex:19},{value:"childrenData",paraId:152,tocIndex:19},{value:"子节点数据",paraId:152,tocIndex:19},{value:"NodeData",paraId:153,tocIndex:19},{value:"[]",paraId:152,tocIndex:19},{value:"-",paraId:152,tocIndex:19},{value:"✓",paraId:152,tocIndex:19},{value:"示例",paraId:154,tocIndex:19},{value:":",paraId:154,tocIndex:19},{value:"graph.addChildrenData('node1', [{ id: 'node2' }]);\n",paraId:155,tocIndex:19},{value:"删除元素数据。",paraId:156,tocIndex:20},{value:"removeData(ids: DataID | ((data: GraphData) => DataID)): void;\n",paraId:157,tocIndex:20},{value:"参数",paraId:158,tocIndex:20},{value:":",paraId:158,tocIndex:20},{value:"参数",paraId:159,tocIndex:20},{value:"描述",paraId:159,tocIndex:20},{value:"类型",paraId:159,tocIndex:20},{value:"默认值",paraId:159,tocIndex:20},{value:"必选",paraId:159,tocIndex:20},{value:"ids",paraId:159,tocIndex:20},{value:"要删除的元素 ID 或返回元素 ID 的函数",paraId:159,tocIndex:20},{value:"DataID",paraId:160,tocIndex:20},{value:" | ((data: GraphData) => DataID)",paraId:159,tocIndex:20},{value:"-",paraId:159,tocIndex:20},{value:"✓",paraId:159,tocIndex:20},{value:"返回值",paraId:161,tocIndex:20},{value:":",paraId:161,tocIndex:20},{value:"类型",paraId:162,tocIndex:20},{value:": void",paraId:162,tocIndex:20},{value:"示例",paraId:163,tocIndex:20},{value:":",paraId:163,tocIndex:20},{value:"graph.removeData({\n  nodes: ['node-1', 'node-2'],\n  edges: ['edge-1'],\n});\n",paraId:164,tocIndex:20},{value:"删除节点数据。",paraId:165,tocIndex:21},{value:"removeNodeData(ids: ID[] | ((data: NodeData[]) => ID[])): void;\n",paraId:166,tocIndex:21},{value:"参数",paraId:167,tocIndex:21},{value:":",paraId:167,tocIndex:21},{value:"参数",paraId:168,tocIndex:21},{value:"描述",paraId:168,tocIndex:21},{value:"类型",paraId:168,tocIndex:21},{value:"默认值",paraId:168,tocIndex:21},{value:"必选",paraId:168,tocIndex:21},{value:"ids",paraId:168,tocIndex:21},{value:"要删除的节点 ID 或返回节点 ID 的函数",paraId:168,tocIndex:21},{value:"ID",paraId:169,tocIndex:21},{value:"[] | ((data: ",paraId:168,tocIndex:21},{value:"NodeData",paraId:170,tocIndex:21},{value:"[]) => ",paraId:168,tocIndex:21},{value:"ID",paraId:171,tocIndex:21},{value:"[])",paraId:168,tocIndex:21},{value:"-",paraId:168,tocIndex:21},{value:"✓",paraId:168,tocIndex:21},{value:"返回值",paraId:172,tocIndex:21},{value:":",paraId:172,tocIndex:21},{value:"类型",paraId:173,tocIndex:21},{value:": void",paraId:173,tocIndex:21},{value:"示例",paraId:174,tocIndex:21},{value:":",paraId:174,tocIndex:21},{value:"graph.removeNodeData(['node-1', 'node-2']);\n",paraId:175,tocIndex:21},{value:"删除边数据。",paraId:176,tocIndex:22},{value:"removeEdgeData(ids: ID[] | ((data: EdgeData[]) => ID[])): void;\n",paraId:177,tocIndex:22},{value:"参数",paraId:178,tocIndex:22},{value:":",paraId:178,tocIndex:22},{value:"参数",paraId:179,tocIndex:22},{value:"描述",paraId:179,tocIndex:22},{value:"类型",paraId:179,tocIndex:22},{value:"默认值",paraId:179,tocIndex:22},{value:"必选",paraId:179,tocIndex:22},{value:"ids",paraId:179,tocIndex:22},{value:"要删除的边 ID 或返回边 ID 的函数",paraId:179,tocIndex:22},{value:"ID",paraId:180,tocIndex:22},{value:"[] | ((data: ",paraId:179,tocIndex:22},{value:"EdgeData",paraId:181,tocIndex:22},{value:"[]) => ",paraId:179,tocIndex:22},{value:"ID",paraId:182,tocIndex:22},{value:"[])",paraId:179,tocIndex:22},{value:"-",paraId:179,tocIndex:22},{value:"✓",paraId:179,tocIndex:22},{value:"返回值",paraId:183,tocIndex:22},{value:":",paraId:183,tocIndex:22},{value:"类型",paraId:184,tocIndex:22},{value:": void",paraId:184,tocIndex:22},{value:"示例",paraId:185,tocIndex:22},{value:":",paraId:185,tocIndex:22},{value:"graph.removeEdgeData(['edge-1']);\n",paraId:186,tocIndex:22},{value:"删除组合数据。",paraId:187,tocIndex:23},{value:"removeComboData(ids: ID[] | ((data: ComboData[]) => ID[])): void;\n",paraId:188,tocIndex:23},{value:"参数",paraId:189,tocIndex:23},{value:":",paraId:189,tocIndex:23},{value:"参数",paraId:190,tocIndex:23},{value:"描述",paraId:190,tocIndex:23},{value:"类型",paraId:190,tocIndex:23},{value:"默认值",paraId:190,tocIndex:23},{value:"必选",paraId:190,tocIndex:23},{value:"ids",paraId:190,tocIndex:23},{value:"要删除的组合 ID 或返回组合 ID 的函数",paraId:190,tocIndex:23},{value:"ID",paraId:191,tocIndex:23},{value:"[] | (data: ",paraId:190,tocIndex:23},{value:"ComboData",paraId:192,tocIndex:23},{value:"[]) => ",paraId:190,tocIndex:23},{value:"ID",paraId:193,tocIndex:23},{value:"[]",paraId:190,tocIndex:23},{value:"-",paraId:190,tocIndex:23},{value:"✓",paraId:190,tocIndex:23},{value:"返回值",paraId:194,tocIndex:23},{value:":",paraId:194,tocIndex:23},{value:"类型",paraId:195,tocIndex:23},{value:": void",paraId:195,tocIndex:23},{value:"示例",paraId:196,tocIndex:23},{value:":",paraId:196,tocIndex:23},{value:"graph.removeComboData(['combo-1']);\n",paraId:197,tocIndex:23},{value:"更新元素数据。",paraId:198,tocIndex:24},{value:"⚠️ ",paraId:199,tocIndex:24},{value:"注意",paraId:199,tocIndex:24},{value:": 只需要传入需要更新的数据即可，不必传入完整的数据。",paraId:199,tocIndex:24},{value:"updateData(data: PartialGraphData | ((prev: GraphData) => PartialGraphData)): void;\n",paraId:200,tocIndex:24},{value:"参数",paraId:201,tocIndex:24},{value:":",paraId:201,tocIndex:24},{value:"参数",paraId:202,tocIndex:24},{value:"描述",paraId:202,tocIndex:24},{value:"类型",paraId:202,tocIndex:24},{value:"默认值",paraId:202,tocIndex:24},{value:"必选",paraId:202,tocIndex:24},{value:"data",paraId:202,tocIndex:24},{value:"要更新的元素数据或返回元素数据的函数",paraId:202,tocIndex:24},{value:"PartialGraphData",paraId:203,tocIndex:24},{value:" | ((prev: GraphData) => PartialGraphData)",paraId:202,tocIndex:24},{value:"-",paraId:202,tocIndex:24},{value:"✓",paraId:202,tocIndex:24},{value:"返回值",paraId:204,tocIndex:24},{value:":",paraId:204,tocIndex:24},{value:"类型",paraId:205,tocIndex:24},{value:": void",paraId:205,tocIndex:24},{value:"示例",paraId:206,tocIndex:24},{value:":",paraId:206,tocIndex:24},{value:"graph.updateData({\n  nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  edges: [{ id: 'edge-1', style: { lineWidth: 2 } }],\n});\n",paraId:207,tocIndex:24},{value:"更新节点数据。",paraId:208,tocIndex:25},{value:"⚠️ ",paraId:209,tocIndex:25},{value:"注意",paraId:209,tocIndex:25},{value:": 只需要传入需要更新的数据即可，不必传入完整的数据。",paraId:209,tocIndex:25},{value:"updateNodeData(data: NodeData[] | ((prev: NodeData[]) => NodeData[])): void;\n",paraId:210,tocIndex:25},{value:"参数",paraId:211,tocIndex:25},{value:":",paraId:211,tocIndex:25},{value:"参数",paraId:212,tocIndex:25},{value:"描述",paraId:212,tocIndex:25},{value:"类型",paraId:212,tocIndex:25},{value:"默认值",paraId:212,tocIndex:25},{value:"必选",paraId:212,tocIndex:25},{value:"data",paraId:212,tocIndex:25},{value:"要更新的节点数据或返回节点数据的函数",paraId:212,tocIndex:25},{value:"NodeData[] | (prev: NodeData[]) => NodeData[]",paraId:212,tocIndex:25},{value:"-",paraId:212,tocIndex:25},{value:"✓",paraId:212,tocIndex:25},{value:"返回值",paraId:213,tocIndex:25},{value:":",paraId:213,tocIndex:25},{value:"类型",paraId:214,tocIndex:25},{value:": void",paraId:214,tocIndex:25},{value:"示例",paraId:215,tocIndex:25},{value:":",paraId:215,tocIndex:25},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 100, y: 100 } }]);\n",paraId:216,tocIndex:25},{value:"更新边数据。",paraId:217,tocIndex:26},{value:"⚠️ ",paraId:218,tocIndex:26},{value:"注意",paraId:218,tocIndex:26},{value:": 只需要传入需要更新的数据即可，不必传入完整的数据。",paraId:218,tocIndex:26},{value:"updateEdgeData(data: (PartialEdgeData<EdgeData>[] | ((prev: EdgeData[]) => PartialEdgeData<EdgeData>[]))): void;\n",paraId:219,tocIndex:26},{value:"参数",paraId:220,tocIndex:26},{value:":",paraId:220,tocIndex:26},{value:"| 参数 | 描述 | 类型                             | 默认值                                                                                                                   | 必选 |\n| ---- | ---- | -------------------------------- | ------------------------------------------------------------------------------------------------------------------------ | ---- | --- | --- |\n| ",paraId:221,tocIndex:26},{value:" |",paraId:221,tocIndex:26},{value:"返回值",paraId:222,tocIndex:26},{value:":",paraId:222,tocIndex:26},{value:"类型",paraId:223,tocIndex:26},{value:": void",paraId:223,tocIndex:26},{value:"示例",paraId:224,tocIndex:26},{value:":",paraId:224,tocIndex:26},{value:"graph.updateEdgeData([{ id: 'edge-1', style: { lineWidth: 2 } }]);\n",paraId:225,tocIndex:26},{value:"更新组合数据。",paraId:226,tocIndex:27},{value:"⚠️ ",paraId:227,tocIndex:27},{value:"注意",paraId:227,tocIndex:27},{value:": 只需要传入需要更新的数据即可，不必传入完整的数据。",paraId:227,tocIndex:27},{value:"updateComboData(data: (ComboData[] | ((prev: ComboData[]) => ComboData[]))): void;\n",paraId:228,tocIndex:27},{value:"参数",paraId:229,tocIndex:27},{value:":",paraId:229,tocIndex:27},{value:"参数",paraId:230,tocIndex:27},{value:"描述",paraId:230,tocIndex:27},{value:"类型",paraId:230,tocIndex:27},{value:"默认值",paraId:230,tocIndex:27},{value:"必选",paraId:230,tocIndex:27},{value:"data",paraId:230,tocIndex:27},{value:"要更新的组合数据或返回组合数据的函数",paraId:230,tocIndex:27},{value:"ComboData",paraId:231,tocIndex:27},{value:"[] | (prev: ComboData[]) => ComboData[]",paraId:230,tocIndex:27},{value:"-",paraId:230,tocIndex:27},{value:"✓",paraId:230,tocIndex:27},{value:"返回值",paraId:232,tocIndex:27},{value:":",paraId:232,tocIndex:27},{value:"类型",paraId:233,tocIndex:27},{value:": void",paraId:233,tocIndex:27},{value:"示例",paraId:234,tocIndex:27},{value:":",paraId:234,tocIndex:27},{value:"graph.updateComboData([{ id: 'combo-1', style: { x: 100, y: 100 } }]);\n",paraId:235,tocIndex:27},{value:"元素 ID 类型。",paraId:236,tocIndex:29},{value:"type ID = string;\n",paraId:237,tocIndex:29},{value:"多个元素 ID 类型。",paraId:238,tocIndex:30},{value:"interface DataID {\n  nodes?: ID[];\n  edges?: ID[];\n  combos?: ID[];\n}\n",paraId:239,tocIndex:30},{value:"G6 图数据类型。",paraId:240,tocIndex:31},{value:"interface GraphData {\n  nodes?: NodeData[];\n  edges?: EdgeData[];\n  combos?: ComboData[];\n}\n",paraId:241,tocIndex:31},{value:"节点数据类型。",paraId:242,tocIndex:32},{value:"interface NodeData {\n  id: string; // 节点 ID\n  type?: string; // 节点类型\n  data?: Record<string, any>; // 节点数据\n  style?: Record<string, any>; // 节点样式\n  states?: string[]; // 节点初始状态\n  combo?: string; // 所属组合\n  children?: string[]; // 子节点 ID 数组\n}\n",paraId:243,tocIndex:32},{value:"详细类型定义请参考 ",paraId:244,tocIndex:32},{value:"节点数据",paraId:245,tocIndex:32},{value:"。",paraId:244,tocIndex:32},{value:"边数据类型。",paraId:246,tocIndex:33},{value:"interface EdgeData {\n  source: string; // 起点 ID\n  target: string; // 终点 ID\n  id?: string; // 边 ID\n  type?: string; // 边类型\n  data?: Record<string, any>; // 边数据\n  style?: Record<string, any>; // 边样式\n  states?: string[]; // 边初始状态\n}\n",paraId:247,tocIndex:33},{value:"详细类型定义请参考 ",paraId:248,tocIndex:33},{value:"边数据",paraId:249,tocIndex:33},{value:"。",paraId:248,tocIndex:33},{value:"组合数据类型。",paraId:250,tocIndex:34},{value:"interface ComboData {\n  id: string; // 组合 ID\n  type?: string; // 组合类型\n  data?: Record<string, any>; // 组合数据\n  style?: Record<string, any>; // 组合样式\n  states?: string[]; // 组合初始状态\n  combo?: string; // 父组合 ID\n}\n",paraId:251,tocIndex:34},{value:"详细类型定义请参考 ",paraId:252,tocIndex:34},{value:"组合数据",paraId:253,tocIndex:34},{value:"。",paraId:252,tocIndex:34}]},75270:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(76003);const d=[{value:"G6 中的 ",paraId:0,tocIndex:0},{value:"元素",paraId:1,tocIndex:0},{value:" 操作 API 允许您控制图中节点、边和组合(Combo)等元素的行为和属性。这些 API 可以用于：",paraId:0,tocIndex:0},{value:"元素状态管理",paraId:2,tocIndex:0},{value:"：设置、更新或移除元素的状态",paraId:2,tocIndex:0},{value:"元素显示控制",paraId:2,tocIndex:0},{value:"：控制元素的层级、可见性",paraId:2,tocIndex:0},{value:"元素展开/收起",paraId:2,tocIndex:0},{value:"：操作可折叠元素的展开/收起状态",paraId:2,tocIndex:0},{value:"元素位置操作",paraId:2,tocIndex:0},{value:"：移动、对齐元素位置",paraId:2,tocIndex:0},{value:"元素聚焦",paraId:2,tocIndex:0},{value:"：将视口聚焦到特定元素",paraId:2,tocIndex:0},{value:"通过这些操作，您可以实现丰富的交互效果和视觉呈现。",paraId:3,tocIndex:0},{value:"获取元素位置。",paraId:4,tocIndex:2},{value:"getElementPosition(id: ID): Point;\n",paraId:5,tocIndex:2},{value:"参数",paraId:6,tocIndex:2},{value:":",paraId:6,tocIndex:2},{value:"参数",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"必选",paraId:7,tocIndex:2},{value:"id",paraId:7,tocIndex:2},{value:"元素 ID",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"返回值",paraId:8,tocIndex:2},{value:":",paraId:8,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:": [number, number] | [number, number, number]",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:": 返回元素的坐标位置",paraId:9,tocIndex:2},{value:"示例",paraId:10,tocIndex:2},{value:":",paraId:10,tocIndex:2},{value:"graph.getElementPosition('node1');\n",paraId:11,tocIndex:2},{value:"获取元素自身以及子节点在世界坐标系下的渲染包围盒。",paraId:12,tocIndex:3},{value:"getElementRenderBounds(id: ID): AABB;\n",paraId:13,tocIndex:3},{value:"参数",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"参数",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"id",paraId:15,tocIndex:3},{value:"元素 ID",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓",paraId:15,tocIndex:3},{value:"返回值",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:"类型",paraId:17,tocIndex:3},{value:": ",paraId:17,tocIndex:3},{value:"AABB",paraId:18,tocIndex:3},{value:"描述",paraId:17,tocIndex:3},{value:": 返回元素的渲染包围盒",paraId:17,tocIndex:3},{value:"获取元素的渲染样式。",paraId:19,tocIndex:4},{value:"getElementRenderStyle(id: ID): Record<string, any>;\n",paraId:20,tocIndex:4},{value:"参数",paraId:21,tocIndex:4},{value:":",paraId:21,tocIndex:4},{value:"参数",paraId:22,tocIndex:4},{value:"描述",paraId:22,tocIndex:4},{value:"类型",paraId:22,tocIndex:4},{value:"默认值",paraId:22,tocIndex:4},{value:"必选",paraId:22,tocIndex:4},{value:"id",paraId:22,tocIndex:4},{value:"元素 ID",paraId:22,tocIndex:4},{value:"string",paraId:22,tocIndex:4},{value:"-",paraId:22,tocIndex:4},{value:"✓",paraId:22,tocIndex:4},{value:"返回值",paraId:23,tocIndex:4},{value:":",paraId:23,tocIndex:4},{value:"类型",paraId:24,tocIndex:4},{value:": Record<string, any>",paraId:24,tocIndex:4},{value:"描述",paraId:24,tocIndex:4},{value:": 返回元素的渲染样式",paraId:24,tocIndex:4},{value:"获取元素的状态。",paraId:25,tocIndex:5},{value:"getElementState(id: ID): State[];\n",paraId:26,tocIndex:5},{value:"参数",paraId:27,tocIndex:5},{value:":",paraId:27,tocIndex:5},{value:"参数",paraId:28,tocIndex:5},{value:"描述",paraId:28,tocIndex:5},{value:"类型",paraId:28,tocIndex:5},{value:"默认值",paraId:28,tocIndex:5},{value:"必选",paraId:28,tocIndex:5},{value:"id",paraId:28,tocIndex:5},{value:"元素 ID",paraId:28,tocIndex:5},{value:"string",paraId:28,tocIndex:5},{value:"-",paraId:28,tocIndex:5},{value:"✓",paraId:28,tocIndex:5},{value:"返回值",paraId:29,tocIndex:5},{value:":",paraId:29,tocIndex:5},{value:"类型",paraId:30,tocIndex:5},{value:": ",paraId:30,tocIndex:5},{value:"State",paraId:31,tocIndex:5},{value:"[]",paraId:30,tocIndex:5},{value:"描述",paraId:30,tocIndex:5},{value:": 返回元素的状态",paraId:30,tocIndex:5},{value:"获取元素类型。",paraId:32,tocIndex:6},{value:"getElementType(id: ID): string;\n",paraId:33,tocIndex:6},{value:"参数",paraId:34,tocIndex:6},{value:":",paraId:34,tocIndex:6},{value:"参数",paraId:35,tocIndex:6},{value:"描述",paraId:35,tocIndex:6},{value:"类型",paraId:35,tocIndex:6},{value:"默认值",paraId:35,tocIndex:6},{value:"必选",paraId:35,tocIndex:6},{value:"id",paraId:35,tocIndex:6},{value:"元素 ID",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"✓",paraId:35,tocIndex:6},{value:"返回值",paraId:36,tocIndex:6},{value:":",paraId:36,tocIndex:6},{value:"类型",paraId:37,tocIndex:6},{value:": string",paraId:37,tocIndex:6},{value:"描述",paraId:37,tocIndex:6},{value:": 返回元素的类型",paraId:37,tocIndex:6},{value:"获取元素可见性。",paraId:38,tocIndex:7},{value:"getElementVisibility(id: ID): 'visible' | 'hidden' ;\n",paraId:39,tocIndex:7},{value:"参数",paraId:40,tocIndex:7},{value:":",paraId:40,tocIndex:7},{value:"参数",paraId:41,tocIndex:7},{value:"描述",paraId:41,tocIndex:7},{value:"类型",paraId:41,tocIndex:7},{value:"默认值",paraId:41,tocIndex:7},{value:"必选",paraId:41,tocIndex:7},{value:"id",paraId:41,tocIndex:7},{value:"元素 ID",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"✓",paraId:41,tocIndex:7},{value:"返回值",paraId:42,tocIndex:7},{value:":",paraId:42,tocIndex:7},{value:"类型",paraId:43,tocIndex:7},{value:": 'visible' | 'hidden'",paraId:43,tocIndex:7},{value:"描述",paraId:43,tocIndex:7},{value:": 返回元素的可见性",paraId:43,tocIndex:7},{value:"获取元素层级。",paraId:44,tocIndex:8},{value:"getElementZIndex(id: ID): number;\n",paraId:45,tocIndex:8},{value:"参数",paraId:46,tocIndex:8},{value:":",paraId:46,tocIndex:8},{value:"参数",paraId:47,tocIndex:8},{value:"描述",paraId:47,tocIndex:8},{value:"类型",paraId:47,tocIndex:8},{value:"默认值",paraId:47,tocIndex:8},{value:"必选",paraId:47,tocIndex:8},{value:"id",paraId:47,tocIndex:8},{value:"元素 ID",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"✓",paraId:47,tocIndex:8},{value:"返回值",paraId:48,tocIndex:8},{value:":",paraId:48,tocIndex:8},{value:"类型",paraId:49,tocIndex:8},{value:": number",paraId:49,tocIndex:8},{value:"描述",paraId:49,tocIndex:8},{value:": 返回元素的层级",paraId:49,tocIndex:8},{value:"设置元素状态，支持两种调用方式：",paraId:50,tocIndex:9},{value:"// 设置单个元素状态\nsetElementState(id: ID, state: State | State[], animation?: boolean): Promise<void>;\n\n// 批量设置元素状态\nsetElementState(state: Record<ID, State | State[]>, animation?: boolean): Promise<void>;\n",paraId:51,tocIndex:9},{value:"参数",paraId:52,tocIndex:9},{value:":",paraId:52,tocIndex:9},{value:"单个元素状态设置",paraId:53,tocIndex:9},{value:"参数",paraId:54,tocIndex:9},{value:"描述",paraId:54,tocIndex:9},{value:"类型",paraId:54,tocIndex:9},{value:"默认值",paraId:54,tocIndex:9},{value:"必选",paraId:54,tocIndex:9},{value:"id",paraId:54,tocIndex:9},{value:"要设置状态的元素 ID",paraId:54,tocIndex:9},{value:"string",paraId:54,tocIndex:9},{value:"-",paraId:54,tocIndex:9},{value:"✓",paraId:54,tocIndex:9},{value:"state",paraId:54,tocIndex:9},{value:"要设置的状态",paraId:54,tocIndex:9},{value:"State",paraId:55,tocIndex:9},{value:" | State[]",paraId:54,tocIndex:9},{value:"-",paraId:54,tocIndex:9},{value:"✓",paraId:54,tocIndex:9},{value:"animation",paraId:54,tocIndex:9},{value:"是否启用动画",paraId:54,tocIndex:9},{value:"boolean",paraId:54,tocIndex:9},{value:"-",paraId:54,tocIndex:9},{value:"批量元素状态设置",paraId:56,tocIndex:9},{value:"参数",paraId:57,tocIndex:9},{value:"描述",paraId:57,tocIndex:9},{value:"类型",paraId:57,tocIndex:9},{value:"默认值",paraId:57,tocIndex:9},{value:"必选",paraId:57,tocIndex:9},{value:"state",paraId:57,tocIndex:9},{value:"元素ID到状态的映射",paraId:57,tocIndex:9},{value:"Record<ID, ",paraId:57,tocIndex:9},{value:"State",paraId:58,tocIndex:9},{value:" | State[]>",paraId:57,tocIndex:9},{value:"-",paraId:57,tocIndex:9},{value:"✓",paraId:57,tocIndex:9},{value:"animation",paraId:57,tocIndex:9},{value:"是否启用动画",paraId:57,tocIndex:9},{value:"boolean",paraId:57,tocIndex:9},{value:"-",paraId:57,tocIndex:9},{value:"返回值",paraId:59,tocIndex:9},{value:":",paraId:59,tocIndex:9},{value:"类型",paraId:60,tocIndex:9},{value:": Promise<void>",paraId:60,tocIndex:9},{value:"描述",paraId:60,tocIndex:9},{value:": 返回一个 Promise，状态设置操作完成后 resolve",paraId:60,tocIndex:9},{value:"示例",paraId:61,tocIndex:9},{value:":",paraId:61,tocIndex:9},{value:"// 设置单个元素状态\nawait graph.setElementState('node1', 'selected');\n\n// 设置多个元素状态\nawait graph.setElementState({\n  node1: 'selected',\n  node2: 'hover',\n  node3: ['selected', 'hover'],\n});\n",paraId:62,tocIndex:9},{value:"设置元素的可见性，支持两种调用方式：",paraId:63,tocIndex:10},{value:"// 设置单个元素可见性\nsetElementVisibility(id: ID, visibility: 'visible' | 'hidden', animation?: boolean): Promise<void>;\n\n// 批量设置元素可见性\nsetElementVisibility(visibility: Record<ID, 'visible' | 'hidden'>, animation?: boolean): Promise<void>;\n",paraId:64,tocIndex:10},{value:"参数",paraId:65,tocIndex:10},{value:":",paraId:65,tocIndex:10},{value:"单个元素可见性设置",paraId:66,tocIndex:10},{value:"参数",paraId:67,tocIndex:10},{value:"描述",paraId:67,tocIndex:10},{value:"类型",paraId:67,tocIndex:10},{value:"默认值",paraId:67,tocIndex:10},{value:"必选",paraId:67,tocIndex:10},{value:"id",paraId:67,tocIndex:10},{value:"要设置可见性的元素 ID",paraId:67,tocIndex:10},{value:"string",paraId:67,tocIndex:10},{value:"-",paraId:67,tocIndex:10},{value:"✓",paraId:67,tocIndex:10},{value:"visibility",paraId:67,tocIndex:10},{value:"要设置的可见性",paraId:67,tocIndex:10},{value:"'visible'",paraId:67,tocIndex:10},{value:" | ",paraId:67,tocIndex:10},{value:"'hidden'",paraId:67,tocIndex:10},{value:"-",paraId:67,tocIndex:10},{value:"✓",paraId:67,tocIndex:10},{value:"animation",paraId:67,tocIndex:10},{value:"是否启用动画",paraId:67,tocIndex:10},{value:"boolean",paraId:67,tocIndex:10},{value:"-",paraId:67,tocIndex:10},{value:"批量元素可见性设置",paraId:68,tocIndex:10},{value:"参数",paraId:69,tocIndex:10},{value:"描述",paraId:69,tocIndex:10},{value:"类型",paraId:69,tocIndex:10},{value:"默认值",paraId:69,tocIndex:10},{value:"必选",paraId:69,tocIndex:10},{value:"visibility",paraId:69,tocIndex:10},{value:"元素ID到可见性的映射",paraId:69,tocIndex:10},{value:"Record<ID, ",paraId:69,tocIndex:10},{value:"'visible'",paraId:69,tocIndex:10},{value:" | ",paraId:69,tocIndex:10},{value:"'hidden'",paraId:69,tocIndex:10},{value:">",paraId:69,tocIndex:10},{value:"-",paraId:69,tocIndex:10},{value:"✓",paraId:69,tocIndex:10},{value:"animation",paraId:69,tocIndex:10},{value:"是否启用动画",paraId:69,tocIndex:10},{value:"boolean",paraId:69,tocIndex:10},{value:"-",paraId:69,tocIndex:10},{value:"返回值",paraId:70,tocIndex:10},{value:":",paraId:70,tocIndex:10},{value:"类型",paraId:71,tocIndex:10},{value:": Promise<void>",paraId:71,tocIndex:10},{value:"描述",paraId:71,tocIndex:10},{value:": 返回一个 Promise，可见性设置操作完成后 resolve",paraId:71,tocIndex:10},{value:"示例",paraId:72,tocIndex:10},{value:":",paraId:72,tocIndex:10},{value:"// 设置单个元素可见性\nawait graph.setElementVisibility('node1', 'hidden');\n\n// 设置多个元素可见性\nawait graph.setElementVisibility({\n  node1: 'hidden',\n  node2: 'visibility',\n});\n",paraId:73,tocIndex:10},{value:"设置元素的层级，有两种调用方式：",paraId:74,tocIndex:11},{value:"// 设置单个元素层级\nsetElementZIndex(id: ID, zIndex: number): Promise<void>;\n\n// 批量设置元素层级\nsetElementZIndex(zIndex: Record<ID, number>): Promise<void>;\n",paraId:75,tocIndex:11},{value:"参数",paraId:76,tocIndex:11},{value:":",paraId:76,tocIndex:11},{value:"单个元素层级设置",paraId:77,tocIndex:11},{value:"参数",paraId:78,tocIndex:11},{value:"描述",paraId:78,tocIndex:11},{value:"类型",paraId:78,tocIndex:11},{value:"默认值",paraId:78,tocIndex:11},{value:"必选",paraId:78,tocIndex:11},{value:"id",paraId:78,tocIndex:11},{value:"元素 ID",paraId:78,tocIndex:11},{value:"string",paraId:78,tocIndex:11},{value:"-",paraId:78,tocIndex:11},{value:"✓",paraId:78,tocIndex:11},{value:"zIndex",paraId:78,tocIndex:11},{value:"层级",paraId:78,tocIndex:11},{value:"number",paraId:78,tocIndex:11},{value:"-",paraId:78,tocIndex:11},{value:"✓",paraId:78,tocIndex:11},{value:"批量元素层级设置",paraId:79,tocIndex:11},{value:"参数",paraId:80,tocIndex:11},{value:"描述",paraId:80,tocIndex:11},{value:"类型",paraId:80,tocIndex:11},{value:"默认值",paraId:80,tocIndex:11},{value:"必选",paraId:80,tocIndex:11},{value:"zIndex",paraId:80,tocIndex:11},{value:"元素ID到层级的映射",paraId:80,tocIndex:11},{value:"Record<ID, number>",paraId:80,tocIndex:11},{value:"-",paraId:80,tocIndex:11},{value:"✓",paraId:80,tocIndex:11},{value:"返回值",paraId:81,tocIndex:11},{value:":",paraId:81,tocIndex:11},{value:"类型",paraId:82,tocIndex:11},{value:": Promise<void>",paraId:82,tocIndex:11},{value:"描述",paraId:82,tocIndex:11},{value:": 返回一个 Promise，层级设置操作完成后 resolve",paraId:82,tocIndex:11},{value:"示例",paraId:83,tocIndex:11},{value:":",paraId:83,tocIndex:11},{value:"// 设置单个元素层级\nawait graph.setElementZIndex('node1', 10);\n\n// 设置多个元素层级\nawait graph.setElementZIndex({\n  node1: 10,\n  node2: 20,\n  node3: 30,\n});\n",paraId:84,tocIndex:11},{value:"设置节点样式映射。即 ",paraId:85,tocIndex:12},{value:"options.node",paraId:85,tocIndex:12},{value:" 的值。",paraId:85,tocIndex:12},{value:"setNode(node: NodeOptions): void;\n",paraId:86,tocIndex:12},{value:"参数",paraId:87,tocIndex:12},{value:":",paraId:87,tocIndex:12},{value:"参数",paraId:88,tocIndex:12},{value:"描述",paraId:88,tocIndex:12},{value:"类型",paraId:88,tocIndex:12},{value:"默认值",paraId:88,tocIndex:12},{value:"必选",paraId:88,tocIndex:12},{value:"node",paraId:88,tocIndex:12},{value:"节点配置",paraId:88,tocIndex:12},{value:"NodeOptions",paraId:89,tocIndex:12},{value:"-",paraId:88,tocIndex:12},{value:"✓",paraId:88,tocIndex:12},{value:"示例",paraId:90,tocIndex:12},{value:":",paraId:90,tocIndex:12},{value:"// 设置所有的节点填充色为红色\ngraph.setNode({\n  style: {\n    fill: 'red',\n  },\n});\n",paraId:91,tocIndex:12},{value:"设置边样式映射。即 ",paraId:92,tocIndex:13},{value:"options.edge",paraId:92,tocIndex:13},{value:" 的值。",paraId:92,tocIndex:13},{value:"setEdge(edge: EdgeOptions): void;\n",paraId:93,tocIndex:13},{value:"参数",paraId:94,tocIndex:13},{value:":",paraId:94,tocIndex:13},{value:"参数",paraId:95,tocIndex:13},{value:"描述",paraId:95,tocIndex:13},{value:"类型",paraId:95,tocIndex:13},{value:"默认值",paraId:95,tocIndex:13},{value:"必选",paraId:95,tocIndex:13},{value:"edge",paraId:95,tocIndex:13},{value:"边配置",paraId:95,tocIndex:13},{value:"EdgeOptions",paraId:96,tocIndex:13},{value:"-",paraId:95,tocIndex:13},{value:"✓",paraId:95,tocIndex:13},{value:"设置组合样式映射。即 ",paraId:97,tocIndex:14},{value:"options.combo",paraId:97,tocIndex:14},{value:" 的值。",paraId:97,tocIndex:14},{value:"setCombo(combo: ComboOptions): void;\n",paraId:98,tocIndex:14},{value:"参数",paraId:99,tocIndex:14},{value:":",paraId:99,tocIndex:14},{value:"参数",paraId:100,tocIndex:14},{value:"描述",paraId:100,tocIndex:14},{value:"类型",paraId:100,tocIndex:14},{value:"默认值",paraId:100,tocIndex:14},{value:"必选",paraId:100,tocIndex:14},{value:"combo",paraId:100,tocIndex:14},{value:"组合配置",paraId:100,tocIndex:14},{value:"ComboOptions",paraId:101,tocIndex:14},{value:"-",paraId:100,tocIndex:14},{value:"✓",paraId:100,tocIndex:14},{value:"收起指定元素，通常用于折叠组合(Combo)或具有子元素的节点。",paraId:102,tocIndex:15},{value:"collapseElement(id: ID, options?: boolean | CollapseExpandNodeOptions): Promise<void>;\n",paraId:103,tocIndex:15},{value:"参数",paraId:104,tocIndex:15},{value:":",paraId:104,tocIndex:15},{value:"参数",paraId:105,tocIndex:15},{value:"描述",paraId:105,tocIndex:15},{value:"类型",paraId:105,tocIndex:15},{value:"默认值",paraId:105,tocIndex:15},{value:"必选",paraId:105,tocIndex:15},{value:"id",paraId:105,tocIndex:15},{value:"要收起的元素 ID",paraId:105,tocIndex:15},{value:"string",paraId:105,tocIndex:15},{value:"-",paraId:105,tocIndex:15},{value:"✓",paraId:105,tocIndex:15},{value:"options",paraId:105,tocIndex:15},{value:"是否启用动画或收起节点的详细配置项",paraId:105,tocIndex:15},{value:"boolean | ",paraId:105,tocIndex:15},{value:"CollapseExpandNodeOptions",paraId:106,tocIndex:15},{value:"-",paraId:105,tocIndex:15},{value:"返回值",paraId:107,tocIndex:15},{value:":",paraId:107,tocIndex:15},{value:"类型",paraId:108,tocIndex:15},{value:": Promise<void>",paraId:108,tocIndex:15},{value:"描述",paraId:108,tocIndex:15},{value:": 返回一个 Promise，收起操作完成后 resolve",paraId:108,tocIndex:15},{value:"示例",paraId:109,tocIndex:15},{value:":",paraId:109,tocIndex:15},{value:"// 简单收起，使用默认配置\nawait graph.collapseElement('combo1');\n\n// 收起并启用动画\nawait graph.collapseElement('combo1', true);\n\n// 收起并保证展开/收起的节点位置不变\nawait graph.collapseElement('combo1', {\n  align: true,\n});\n",paraId:110,tocIndex:15},{value:"展开指定元素，通常用于展开先前收起的组合(Combo)或节点。",paraId:111,tocIndex:16},{value:"expandElement(id: ID, options?: boolean | CollapseExpandNodeOptions): Promise<void>;\n",paraId:112,tocIndex:16},{value:"参数",paraId:113,tocIndex:16},{value:":",paraId:113,tocIndex:16},{value:"参数",paraId:114,tocIndex:16},{value:"描述",paraId:114,tocIndex:16},{value:"类型",paraId:114,tocIndex:16},{value:"默认值",paraId:114,tocIndex:16},{value:"必选",paraId:114,tocIndex:16},{value:"id",paraId:114,tocIndex:16},{value:"要展开的元素 ID",paraId:114,tocIndex:16},{value:"string",paraId:114,tocIndex:16},{value:"-",paraId:114,tocIndex:16},{value:"✓",paraId:114,tocIndex:16},{value:"options",paraId:114,tocIndex:16},{value:"是否启用动画或展开节点的详细配置项",paraId:114,tocIndex:16},{value:"boolean | ",paraId:114,tocIndex:16},{value:"CollapseExpandNodeOptions",paraId:115,tocIndex:16},{value:"-",paraId:114,tocIndex:16},{value:"返回值",paraId:116,tocIndex:16},{value:":",paraId:116,tocIndex:16},{value:"类型",paraId:117,tocIndex:16},{value:": Promise<void>",paraId:117,tocIndex:16},{value:"描述",paraId:117,tocIndex:16},{value:": 返回一个 Promise，展开操作完成后 resolve",paraId:117,tocIndex:16},{value:"示例",paraId:118,tocIndex:16},{value:":",paraId:118,tocIndex:16},{value:"// 简单展开，使用默认配置\nawait graph.expandElement('combo1');\n\n// 展开并启用动画\nawait graph.expandElement('combo1', true);\n\n// 展开并保证展开/收起的节点位置不变\nawait graph.expandElement('combo1', {\n  align: true,\n});\n",paraId:119,tocIndex:16},{value:"将指定元素置于最顶层，使其显示在其他重叠元素之上。",paraId:120,tocIndex:17},{value:"frontElement(id: ID | ID[]): void;\n",paraId:121,tocIndex:17},{value:"参数",paraId:122,tocIndex:17},{value:":",paraId:122,tocIndex:17},{value:"参数",paraId:123,tocIndex:17},{value:"描述",paraId:123,tocIndex:17},{value:"类型",paraId:123,tocIndex:17},{value:"默认值",paraId:123,tocIndex:17},{value:"必选",paraId:123,tocIndex:17},{value:"id",paraId:123,tocIndex:17},{value:"元素 ID",paraId:123,tocIndex:17},{value:"string | string[]",paraId:123,tocIndex:17},{value:"-",paraId:123,tocIndex:17},{value:"✓",paraId:123,tocIndex:17},{value:"返回值",paraId:124,tocIndex:17},{value:":",paraId:124,tocIndex:17},{value:"类型",paraId:125,tocIndex:17},{value:": void",paraId:125,tocIndex:17},{value:"示例",paraId:126,tocIndex:17},{value:":",paraId:126,tocIndex:17},{value:"// 将节点置于最顶层\ngraph.frontElement('node1');\n\n// 对于选中的多个节点，都置于最顶层\ngraph.frontElement(['node1', 'node2', 'node3']);\n",paraId:127,tocIndex:17},{value:"显示指定元素。",paraId:128,tocIndex:18},{value:"showElement(id: ID | ID[], animation?: boolean): Promise<void>;\n",paraId:129,tocIndex:18},{value:"参数",paraId:130,tocIndex:18},{value:":",paraId:130,tocIndex:18},{value:"参数",paraId:131,tocIndex:18},{value:"描述",paraId:131,tocIndex:18},{value:"类型",paraId:131,tocIndex:18},{value:"默认值",paraId:131,tocIndex:18},{value:"必选",paraId:131,tocIndex:18},{value:"id",paraId:131,tocIndex:18},{value:"元素 ID",paraId:131,tocIndex:18},{value:"string | string[]",paraId:131,tocIndex:18},{value:"-",paraId:131,tocIndex:18},{value:"✓",paraId:131,tocIndex:18},{value:"animation",paraId:131,tocIndex:18},{value:"是否启用动画",paraId:131,tocIndex:18},{value:"boolean",paraId:131,tocIndex:18},{value:"-",paraId:131,tocIndex:18},{value:"返回值",paraId:132,tocIndex:18},{value:":",paraId:132,tocIndex:18},{value:"类型",paraId:133,tocIndex:18},{value:": Promise<void>",paraId:133,tocIndex:18},{value:"描述",paraId:133,tocIndex:18},{value:": 返回一个 Promise，显示操作完成后 resolve",paraId:133,tocIndex:18},{value:"示例",paraId:134,tocIndex:18},{value:":",paraId:134,tocIndex:18},{value:"// 显示单个元素\nawait graph.showElement('node1');\n\n// 带动画显示元素\nawait graph.showElement('node1', true);\n\n// 显示多个元素\nawait graph.showElement(['node1', 'node2', 'node3']);\n",paraId:135,tocIndex:18},{value:"隐藏指定元素。",paraId:136,tocIndex:19},{value:"hideElement(id: ID | ID[], animation?: boolean): Promise<void>;\n",paraId:137,tocIndex:19},{value:"参数",paraId:138,tocIndex:19},{value:":",paraId:138,tocIndex:19},{value:"参数",paraId:139,tocIndex:19},{value:"描述",paraId:139,tocIndex:19},{value:"类型",paraId:139,tocIndex:19},{value:"默认值",paraId:139,tocIndex:19},{value:"必选",paraId:139,tocIndex:19},{value:"id",paraId:139,tocIndex:19},{value:"元素 ID",paraId:139,tocIndex:19},{value:"string | string[]",paraId:139,tocIndex:19},{value:"-",paraId:139,tocIndex:19},{value:"✓",paraId:139,tocIndex:19},{value:"animation",paraId:139,tocIndex:19},{value:"是否启用动画",paraId:139,tocIndex:19},{value:"boolean",paraId:139,tocIndex:19},{value:"-",paraId:139,tocIndex:19},{value:"返回值",paraId:140,tocIndex:19},{value:":",paraId:140,tocIndex:19},{value:"类型",paraId:141,tocIndex:19},{value:": Promise<void>",paraId:141,tocIndex:19},{value:"描述",paraId:141,tocIndex:19},{value:": 返回一个 Promise，隐藏操作完成后 resolve",paraId:141,tocIndex:19},{value:"示例",paraId:142,tocIndex:19},{value:":",paraId:142,tocIndex:19},{value:"// 无动画隐藏元素\nawait graph.hideElement('node1');\n\n// 带动画隐藏元素\nawait graph.hideElement('node1', true);\n\n// 隐藏多个元素\nawait graph.hideElement(['node1', 'node2', 'node3'], true);\n",paraId:143,tocIndex:19},{value:"相对平移元素指定距离，支持两种调用方式：",paraId:144,tocIndex:20},{value:"// 将元素平移指定距离（相对平移）\ntranslateElement(id: ID, offset: Point, animation?: boolean): Promise<void>;\n\n// 批量将元素平移指定距离（相对平移）\ntranslateElement(offsets: Record<ID, Point>, animation?: boolean): Promise<void>;\n",paraId:145,tocIndex:20},{value:"参数",paraId:146,tocIndex:20},{value:":",paraId:146,tocIndex:20},{value:"单个元素平移",paraId:147,tocIndex:20},{value:"参数",paraId:148,tocIndex:20},{value:"描述",paraId:148,tocIndex:20},{value:"类型",paraId:148,tocIndex:20},{value:"默认值",paraId:148,tocIndex:20},{value:"必选",paraId:148,tocIndex:20},{value:"id",paraId:148,tocIndex:20},{value:"要平移的元素 ID",paraId:148,tocIndex:20},{value:"string",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"✓",paraId:148,tocIndex:20},{value:"offset",paraId:148,tocIndex:20},{value:"平移的相对距离 [dx, dy]",paraId:148,tocIndex:20},{value:"[number, number]",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"✓",paraId:148,tocIndex:20},{value:"animation",paraId:148,tocIndex:20},{value:"是否启用动画",paraId:148,tocIndex:20},{value:"boolean",paraId:148,tocIndex:20},{value:"-",paraId:148,tocIndex:20},{value:"批量元素平移",paraId:149,tocIndex:20},{value:"参数",paraId:150,tocIndex:20},{value:"描述",paraId:150,tocIndex:20},{value:"类型",paraId:150,tocIndex:20},{value:"默认值",paraId:150,tocIndex:20},{value:"必选",paraId:150,tocIndex:20},{value:"offsets",paraId:150,tocIndex:20},{value:"元素ID到平移距离的映射",paraId:150,tocIndex:20},{value:"Record<ID, [number, number]>",paraId:150,tocIndex:20},{value:"-",paraId:150,tocIndex:20},{value:"✓",paraId:150,tocIndex:20},{value:"animation",paraId:150,tocIndex:20},{value:"是否启用动画",paraId:150,tocIndex:20},{value:"boolean",paraId:150,tocIndex:20},{value:"-",paraId:150,tocIndex:20},{value:"返回值",paraId:151,tocIndex:20},{value:":",paraId:151,tocIndex:20},{value:"类型",paraId:152,tocIndex:20},{value:": Promise<void>",paraId:152,tocIndex:20},{value:"描述",paraId:152,tocIndex:20},{value:": 返回一个 Promise，平移操作完成后 resolve",paraId:152,tocIndex:20},{value:"示例",paraId:153,tocIndex:20},{value:":",paraId:153,tocIndex:20},{value:"// 向右平移100像素，向下平移50像素\nawait graph.translateElementBy('node1', [100, 50]);\n\n// 带动画平移\nawait graph.translateElementBy('node1', [100, 50], true);\n\n// 对多个节点应用相同的平移\nawait graph.translateElementBy(\n  {\n    node1: [50, 50],\n    node2: [100, 100],\n    node3: [150, 150],\n  },\n  true,\n);\n",paraId:154,tocIndex:20},{value:"将元素移动到指定位置，支持两种调用方式：",paraId:155,tocIndex:21},{value:"// 将元素移动到指定位置（绝对位置）\ntranslateElementTo(id: ID, position: Point, animation?: boolean): Promise<void>;\n\n// 批量将元素移动到指定位置（绝对位置）\ntranslateElementTo(positions: Record<ID, Point>, animation?: boolean): Promise<void>;\n",paraId:156,tocIndex:21},{value:"参数",paraId:157,tocIndex:21},{value:":",paraId:157,tocIndex:21},{value:"单个元素移动",paraId:158,tocIndex:21},{value:"参数",paraId:159,tocIndex:21},{value:"描述",paraId:159,tocIndex:21},{value:"类型",paraId:159,tocIndex:21},{value:"默认值",paraId:159,tocIndex:21},{value:"必选",paraId:159,tocIndex:21},{value:"id",paraId:159,tocIndex:21},{value:"要移动的元素 ID",paraId:159,tocIndex:21},{value:"string",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"✓",paraId:159,tocIndex:21},{value:"position",paraId:159,tocIndex:21},{value:"目标绝对位置 [x, y]",paraId:159,tocIndex:21},{value:"[number, number]",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"✓",paraId:159,tocIndex:21},{value:"animation",paraId:159,tocIndex:21},{value:"是否启用动画",paraId:159,tocIndex:21},{value:"boolean",paraId:159,tocIndex:21},{value:"-",paraId:159,tocIndex:21},{value:"批量元素移动",paraId:160,tocIndex:21},{value:"参数",paraId:161,tocIndex:21},{value:"描述",paraId:161,tocIndex:21},{value:"类型",paraId:161,tocIndex:21},{value:"默认值",paraId:161,tocIndex:21},{value:"必选",paraId:161,tocIndex:21},{value:"positions",paraId:161,tocIndex:21},{value:"元素ID到目标位置的映射",paraId:161,tocIndex:21},{value:"Record<string, [number, number]>",paraId:161,tocIndex:21},{value:"-",paraId:161,tocIndex:21},{value:"✓",paraId:161,tocIndex:21},{value:"animation",paraId:161,tocIndex:21},{value:"是否启用动画",paraId:161,tocIndex:21},{value:"boolean",paraId:161,tocIndex:21},{value:"-",paraId:161,tocIndex:21},{value:"返回值",paraId:162,tocIndex:21},{value:":",paraId:162,tocIndex:21},{value:"类型",paraId:163,tocIndex:21},{value:": Promise<void>",paraId:163,tocIndex:21},{value:"描述",paraId:163,tocIndex:21},{value:": 返回一个 Promise，移动操作完成后 resolve",paraId:163,tocIndex:21},{value:"示例",paraId:164,tocIndex:21},{value:":",paraId:164,tocIndex:21},{value:"// 将节点移动到画布的 (200, 300) 位置\nawait graph.translateElementTo('node1', [200, 300]);\n\n// 带动画移动\nawait graph.translateElementTo('node1', [200, 300], true);\n\n// 将一组节点整齐排列\nawait graph.translateElementTo(\n  {\n    node1: [100, 100],\n    node2: [200, 200],\n    node3: [300, 100],\n  },\n  true,\n);\n",paraId:165,tocIndex:21},{value:"聚焦到指定元素，使元素居中于视口。",paraId:166,tocIndex:22},{value:"focusElement(id: ID | ID[], animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:167,tocIndex:22},{value:"参数",paraId:168,tocIndex:22},{value:":",paraId:168,tocIndex:22},{value:"参数",paraId:169,tocIndex:22},{value:"描述",paraId:169,tocIndex:22},{value:"类型",paraId:169,tocIndex:22},{value:"默认值",paraId:169,tocIndex:22},{value:"必选",paraId:169,tocIndex:22},{value:"id",paraId:169,tocIndex:22},{value:"要聚焦的一个或多个元素 ID",paraId:169,tocIndex:22},{value:"string | string[]",paraId:169,tocIndex:22},{value:"-",paraId:169,tocIndex:22},{value:"✓",paraId:169,tocIndex:22},{value:"animation",paraId:169,tocIndex:22},{value:"视口动画配置",paraId:169,tocIndex:22},{value:"ViewportAnimationEffectTiming",paraId:170,tocIndex:22},{value:"-",paraId:169,tocIndex:22},{value:"返回值",paraId:171,tocIndex:22},{value:":",paraId:171,tocIndex:22},{value:"类型",paraId:172,tocIndex:22},{value:": Promise<void>",paraId:172,tocIndex:22},{value:"描述",paraId:172,tocIndex:22},{value:": 返回一个 Promise，聚焦操作完成后 resolve",paraId:172,tocIndex:22},{value:"示例",paraId:173,tocIndex:22},{value:":",paraId:173,tocIndex:22},{value:"// 聚焦到单个节点\nawait graph.focusElement('node1');\n\n// 使用自定义动画配置\nawait graph.focusElement('node1', {\n  duration: 800,\n  easing: 'ease-in-out',\n});\n\n// 聚焦到多个节点\nawait graph.focusElement(['node1', 'node2', 'node3']);\n",paraId:174,tocIndex:22},{value:"收起或展开元素的配置选项。",paraId:175,tocIndex:24},{value:"interface CollapseExpandNodeOptions {\n  /**\n   * 是否使用动画\n   */\n  animation?: boolean;\n  /**\n   * 保证展开/收起的节点位置不变\n   */\n  align?: boolean;\n}\n",paraId:176,tocIndex:24},{value:"视口动画配置类型。",paraId:177,tocIndex:25},{value:"type ViewportAnimationEffectTiming =\n  | boolean // 是否启用动画\n  | {\n      easing?: string; // 缓动函数\n      duration?: number; // 动画持续时间(ms)\n    };\n",paraId:178,tocIndex:25},{value:'AABB (Axis-Aligned Bounding Box) 是"轴对齐包围盒"的缩写，是计算机图形学中的一个基础概念。',paraId:179,tocIndex:26},{value:"interface AABB {\n  x: number; // 矩形左上角的 x 坐标\n  y: number; // 矩形左上角的 y 坐标\n  width: number; // 矩形宽度\n  height: number; // 矩形高度\n}\n",paraId:180,tocIndex:26},{value:"元素状态类型。",paraId:181,tocIndex:27},{value:"type State = 'selected' | 'hover' | 'active' | 'inactive' | 'disabled' | string;\n",paraId:182,tocIndex:27}]},62744:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73251);const d=[{value:"G6 提供了强大的事件机制，允许你响应图表中发生的各种交互行为。例如节点点击、边悬停、画布拖拽等。通过事件系统，你可以实现复杂的交互逻辑，提升用户体验。",paraId:0,tocIndex:0},{value:"G6 中的事件大致可分为以下几类：",paraId:1,tocIndex:1},{value:"元素事件",paraId:2,tocIndex:1},{value:"：与节点、边、Combo 相关的事件，如 ",paraId:2,tocIndex:1},{value:"node:click",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"edge:mouseenter",paraId:2,tocIndex:1},{value:"画布事件",paraId:2,tocIndex:1},{value:"：与整个画布相关的事件，如 ",paraId:2,tocIndex:1},{value:"canvas:drag",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"canvas:zoom",paraId:2,tocIndex:1},{value:"生命周期事件",paraId:2,tocIndex:1},{value:"：与图表生命周期相关的事件，如 ",paraId:2,tocIndex:1},{value:"beforerender",paraId:2,tocIndex:1},{value:", ",paraId:2,tocIndex:1},{value:"afterrender",paraId:2,tocIndex:1},{value:"G6 的事件命名遵循 ",paraId:3,tocIndex:2},{value:"[对象]:[事件]",paraId:3,tocIndex:2},{value:" 的格式，例如：",paraId:3,tocIndex:2},{value:"node:click",paraId:4,tocIndex:2},{value:" - 节点点击事件",paraId:4,tocIndex:2},{value:"edge:mouseenter",paraId:4,tocIndex:2},{value:" - 鼠标进入边的事件",paraId:4,tocIndex:2},{value:"canvas:drag",paraId:4,tocIndex:2},{value:" - 画布拖拽事件",paraId:4,tocIndex:2},{value:"G6 提供了完整的事件常量枚举，",paraId:5,tocIndex:3},{value:"强烈建议",paraId:5,tocIndex:3},{value:"使用这些常量而非直接使用字符串事件名：",paraId:5,tocIndex:3},{value:"import { NodeEvent, EdgeEvent, CanvasEvent, GraphEvent } from '@antv/g6';\n\n// 使用常量枚举监听事件\ngraph.on(NodeEvent.CLICK, handleNodeClick);\ngraph.on(EdgeEvent.POINTER_OVER, handleEdgeHover);\ngraph.on(CanvasEvent.DRAG, handleCanvasDrag);\ngraph.on(GraphEvent.AFTER_RENDER, handleAfterRender);\n",paraId:6,tocIndex:3},{value:"优势",paraId:7,tocIndex:3},{value:"：",paraId:7,tocIndex:3},{value:"类型安全，避免字符串拼写错误",paraId:8,tocIndex:3},{value:"提供智能代码提示和自动完成",paraId:8,tocIndex:3},{value:"监听指定的事件，当事件触发时执行回调函数。",paraId:9,tocIndex:5},{value:"on<T extends IEvent = IEvent>(eventName: string, callback: (event: T) => void, once?: boolean): this;\n",paraId:10,tocIndex:5},{value:"参数",paraId:11,tocIndex:6},{value:"描述",paraId:11,tocIndex:6},{value:"类型",paraId:11,tocIndex:6},{value:"默认值",paraId:11,tocIndex:6},{value:"必选",paraId:11,tocIndex:6},{value:"eventName",paraId:11,tocIndex:6},{value:"要监听的事件名称",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"✓",paraId:11,tocIndex:6},{value:"callback",paraId:11,tocIndex:6},{value:"事件触发时执行的回调函数",paraId:11,tocIndex:6},{value:"(event: T) => void",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"✓",paraId:11,tocIndex:6},{value:"once",paraId:11,tocIndex:6},{value:"是否只监听一次",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"类型：",paraId:12,tocIndex:7},{value:" this（Graph 实例）",paraId:12,tocIndex:7},{value:"描述：",paraId:12,tocIndex:7},{value:" 返回图实例本身，支持链式调用",paraId:12,tocIndex:7},{value:"import { NodeEvent, EdgeEvent, CanvasEvent } from '@antv/g6';\n\n// 监听节点点击事件\ngraph.on(NodeEvent.CLICK, (evt) => {\n  const { target } = evt; // 获取被点击节点的 ID\n  console.log(`节点 ${target.id} 被点击了`);\n\n  // 获取节点数据\n  const nodeData = graph.getNodeData(target.id);\n  console.log('节点数据:', nodeData);\n\n  // 修改节点状态\n  graph.setElementState(target.id, 'selected');\n});\n\n// 监听边的鼠标进入事件\ngraph.on(EdgeEvent.POINTER_OVER, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'highlight');\n});\n\n// 监听画布拖拽事件\ngraph.on(CanvasEvent.DRAG, (evt) => {\n  console.log('画布正在被拖拽');\n});\n",paraId:13,tocIndex:8},{value:"一次性监听事件，事件触发一次后自动移除监听器。",paraId:14,tocIndex:9},{value:"once<T extends IEvent = IEvent>(eventName: string, callback: (event: T) => void): this;\n",paraId:15,tocIndex:9},{value:"参数",paraId:16,tocIndex:10},{value:"描述",paraId:16,tocIndex:10},{value:"类型",paraId:16,tocIndex:10},{value:"默认值",paraId:16,tocIndex:10},{value:"必选",paraId:16,tocIndex:10},{value:"eventName",paraId:16,tocIndex:10},{value:"要监听的事件名称",paraId:16,tocIndex:10},{value:"string",paraId:16,tocIndex:10},{value:"-",paraId:16,tocIndex:10},{value:"✓",paraId:16,tocIndex:10},{value:"callback",paraId:16,tocIndex:10},{value:"事件触发时执行的回调函数",paraId:16,tocIndex:10},{value:"(event: T) => void",paraId:16,tocIndex:10},{value:"-",paraId:16,tocIndex:10},{value:"✓",paraId:16,tocIndex:10},{value:"类型：",paraId:17,tocIndex:11},{value:" this（Graph 实例）",paraId:17,tocIndex:11},{value:"描述：",paraId:17,tocIndex:11},{value:" 返回图实例本身，支持链式调用",paraId:17,tocIndex:11},{value:"import { GraphEvent, NodeEvent } from '@antv/g6';\n\n// 监听图表首次加载完成事件，仅执行一次\ngraph.once(GraphEvent.AFTER_RENDER, () => {\n  console.log('图表首次渲染完成');\n  // 执行一次性的初始化操作\n  highlightImportantNodes();\n});\n\n// 等待用户第一次点击某个节点后执行操作\ngraph.once(NodeEvent.CLICK, (evt) => {\n  console.log('用户首次点击了节点:', evt.target.id);\n  showTutorialTip('您可以拖拽节点改变位置');\n});\n",paraId:18,tocIndex:12},{value:"移除全部事件监听器。",paraId:19,tocIndex:13},{value:"off(): this;\n",paraId:20,tocIndex:13},{value:"类型：",paraId:21,tocIndex:14},{value:" this（Graph 实例）",paraId:21,tocIndex:14},{value:"描述：",paraId:21,tocIndex:14},{value:" 返回图实例本身，支持链式调用",paraId:21,tocIndex:14},{value:"// 移除所有事件监听器\ngraph.off();\nconsole.log('已移除所有事件监听器');\n",paraId:22,tocIndex:15},{value:"移除指定事件类型的所有监听器。",paraId:23,tocIndex:16},{value:"off(eventName: string): this;\n",paraId:24,tocIndex:16},{value:"参数",paraId:25,tocIndex:17},{value:"描述",paraId:25,tocIndex:17},{value:"类型",paraId:25,tocIndex:17},{value:"默认值",paraId:25,tocIndex:17},{value:"必选",paraId:25,tocIndex:17},{value:"eventName",paraId:25,tocIndex:17},{value:"要移除的事件名称",paraId:25,tocIndex:17},{value:"string",paraId:25,tocIndex:17},{value:"-",paraId:25,tocIndex:17},{value:"✓",paraId:25,tocIndex:17},{value:"类型：",paraId:26,tocIndex:18},{value:" this（Graph 实例）",paraId:26,tocIndex:18},{value:"描述：",paraId:26,tocIndex:18},{value:" 返回图实例本身，支持链式调用",paraId:26,tocIndex:18},{value:"import { NodeEvent } from '@antv/g6';\n\n// 移除所有节点点击事件的监听器\ngraph.off(NodeEvent.CLICK);\nconsole.log('已移除所有节点点击事件监听器');\n\n// 在某个操作模式结束后，移除相关的临时事件监听\nfunction exitEditMode() {\n  // 移除编辑模式下的所有监听器\n  graph.off(NodeEvent.DRAG_END);\n  graph.off(NodeEvent.DROP);\n  console.log('已退出编辑模式');\n}\n",paraId:27,tocIndex:19},{value:"移除特定事件的特定回调函数。",paraId:28,tocIndex:20},{value:"off(eventName: string, callback: (...args: any[]) => void): this;\n",paraId:29,tocIndex:20},{value:"参数",paraId:30,tocIndex:21},{value:"描述",paraId:30,tocIndex:21},{value:"类型",paraId:30,tocIndex:21},{value:"默认值",paraId:30,tocIndex:21},{value:"必选",paraId:30,tocIndex:21},{value:"eventName",paraId:30,tocIndex:21},{value:"要移除的事件名称",paraId:30,tocIndex:21},{value:"string",paraId:30,tocIndex:21},{value:"-",paraId:30,tocIndex:21},{value:"✓",paraId:30,tocIndex:21},{value:"callback",paraId:30,tocIndex:21},{value:"要移除的回调函数",paraId:30,tocIndex:21},{value:"(...args: any[]) => void",paraId:30,tocIndex:21},{value:"-",paraId:30,tocIndex:21},{value:"✓",paraId:30,tocIndex:21},{value:"类型：",paraId:31,tocIndex:22},{value:" this（Graph 实例）",paraId:31,tocIndex:22},{value:"描述：",paraId:31,tocIndex:22},{value:" 返回图实例本身，支持链式调用",paraId:31,tocIndex:22},{value:"import { NodeEvent } from '@antv/g6';\n\n// 定义回调函数\nconst handleNodeClick = (evt) => {\n  console.log('节点被点击:', evt.target.id);\n};\n\n// 添加监听器\ngraph.on(NodeEvent.CLICK, handleNodeClick);\n\n// 之后在某个时机移除这个特定的监听器\ngraph.off(NodeEvent.CLICK, handleNodeClick);\nconsole.log('已移除特定的节点点击事件监听器');\n",paraId:32,tocIndex:23},{value:"G6 提供了多种事件常量枚举，便于开发者使用规范的事件名称。以下是所有事件常量的详细说明：",paraId:33,tocIndex:24},{value:"常量名",paraId:34,tocIndex:25},{value:"事件名",paraId:34,tocIndex:25},{value:"描述",paraId:34,tocIndex:25},{value:"CLICK",paraId:34,tocIndex:25},{value:"node:click",paraId:34,tocIndex:25},{value:"点击节点时触发",paraId:34,tocIndex:25},{value:"DBLCLICK",paraId:34,tocIndex:25},{value:"node:dblclick",paraId:34,tocIndex:25},{value:"双击节点时触发",paraId:34,tocIndex:25},{value:"POINTER_OVER",paraId:34,tocIndex:25},{value:"node:pointerover",paraId:34,tocIndex:25},{value:"指针移入节点时触发",paraId:34,tocIndex:25},{value:"POINTER_LEAVE",paraId:34,tocIndex:25},{value:"node:pointerleave",paraId:34,tocIndex:25},{value:"指针离开节点时触发",paraId:34,tocIndex:25},{value:"POINTER_ENTER",paraId:34,tocIndex:25},{value:"node:pointerenter",paraId:34,tocIndex:25},{value:"指针进入节点或其子元素时触发(不冒泡)",paraId:34,tocIndex:25},{value:"POINTER_MOVE",paraId:34,tocIndex:25},{value:"node:pointermove",paraId:34,tocIndex:25},{value:"指针在节点上移动时触发",paraId:34,tocIndex:25},{value:"POINTER_OUT",paraId:34,tocIndex:25},{value:"node:pointerout",paraId:34,tocIndex:25},{value:"指针离开节点时触发",paraId:34,tocIndex:25},{value:"POINTER_DOWN",paraId:34,tocIndex:25},{value:"node:pointerdown",paraId:34,tocIndex:25},{value:"指针在节点上按下时触发",paraId:34,tocIndex:25},{value:"POINTER_UP",paraId:34,tocIndex:25},{value:"node:pointerup",paraId:34,tocIndex:25},{value:"指针在节点上抬起时触发",paraId:34,tocIndex:25},{value:"CONTEXT_MENU",paraId:34,tocIndex:25},{value:"node:contextmenu",paraId:34,tocIndex:25},{value:"节点上打开上下文菜单时触发",paraId:34,tocIndex:25},{value:"DRAG_START",paraId:34,tocIndex:25},{value:"node:dragstart",paraId:34,tocIndex:25},{value:"开始拖拽节点时触发",paraId:34,tocIndex:25},{value:"DRAG",paraId:34,tocIndex:25},{value:"node:drag",paraId:34,tocIndex:25},{value:"拖拽节点过程中触发",paraId:34,tocIndex:25},{value:"DRAG_END",paraId:34,tocIndex:25},{value:"node:dragend",paraId:34,tocIndex:25},{value:"拖拽节点结束时触发",paraId:34,tocIndex:25},{value:"DRAG_ENTER",paraId:34,tocIndex:25},{value:"node:dragenter",paraId:34,tocIndex:25},{value:"拖拽物进入节点时触发",paraId:34,tocIndex:25},{value:"DRAG_OVER",paraId:34,tocIndex:25},{value:"node:dragover",paraId:34,tocIndex:25},{value:"拖拽物在节点上方时触发",paraId:34,tocIndex:25},{value:"DRAG_LEAVE",paraId:34,tocIndex:25},{value:"node:dragleave",paraId:34,tocIndex:25},{value:"拖拽物离开节点时触发",paraId:34,tocIndex:25},{value:"DROP",paraId:34,tocIndex:25},{value:"node:drop",paraId:34,tocIndex:25},{value:"在节点上放置拖拽物时触发",paraId:34,tocIndex:25},{value:"常量名",paraId:35,tocIndex:26},{value:"事件名",paraId:35,tocIndex:26},{value:"描述",paraId:35,tocIndex:26},{value:"CLICK",paraId:35,tocIndex:26},{value:"edge:click",paraId:35,tocIndex:26},{value:"点击边时触发",paraId:35,tocIndex:26},{value:"DBLCLICK",paraId:35,tocIndex:26},{value:"edge:dblclick",paraId:35,tocIndex:26},{value:"双击边时触发",paraId:35,tocIndex:26},{value:"POINTER_OVER",paraId:35,tocIndex:26},{value:"edge:pointerover",paraId:35,tocIndex:26},{value:"指针移入边时触发",paraId:35,tocIndex:26},{value:"POINTER_LEAVE",paraId:35,tocIndex:26},{value:"edge:pointerleave",paraId:35,tocIndex:26},{value:"指针离开边时触发",paraId:35,tocIndex:26},{value:"POINTER_ENTER",paraId:35,tocIndex:26},{value:"edge:pointerenter",paraId:35,tocIndex:26},{value:"指针进入边或其子元素时触发(不冒泡)",paraId:35,tocIndex:26},{value:"POINTER_MOVE",paraId:35,tocIndex:26},{value:"edge:pointermove",paraId:35,tocIndex:26},{value:"指针在边上移动时触发",paraId:35,tocIndex:26},{value:"POINTER_OUT",paraId:35,tocIndex:26},{value:"edge:pointerout",paraId:35,tocIndex:26},{value:"指针离开边时触发",paraId:35,tocIndex:26},{value:"POINTER_DOWN",paraId:35,tocIndex:26},{value:"edge:pointerdown",paraId:35,tocIndex:26},{value:"指针在边上按下时触发",paraId:35,tocIndex:26},{value:"POINTER_UP",paraId:35,tocIndex:26},{value:"edge:pointerup",paraId:35,tocIndex:26},{value:"指针在边上抬起时触发",paraId:35,tocIndex:26},{value:"CONTEXT_MENU",paraId:35,tocIndex:26},{value:"edge:contextmenu",paraId:35,tocIndex:26},{value:"边上打开上下文菜单时触发",paraId:35,tocIndex:26},{value:"DRAG_ENTER",paraId:35,tocIndex:26},{value:"edge:dragenter",paraId:35,tocIndex:26},{value:"拖拽物进入边时触发",paraId:35,tocIndex:26},{value:"DRAG_OVER",paraId:35,tocIndex:26},{value:"edge:dragover",paraId:35,tocIndex:26},{value:"拖拽物在边上方时触发",paraId:35,tocIndex:26},{value:"DRAG_LEAVE",paraId:35,tocIndex:26},{value:"edge:dragleave",paraId:35,tocIndex:26},{value:"拖拽物离开边时触发",paraId:35,tocIndex:26},{value:"DROP",paraId:35,tocIndex:26},{value:"edge:drop",paraId:35,tocIndex:26},{value:"在边上放置拖拽物时触发",paraId:35,tocIndex:26},{value:"常量名",paraId:36,tocIndex:27},{value:"事件名",paraId:36,tocIndex:27},{value:"描述",paraId:36,tocIndex:27},{value:"CLICK",paraId:36,tocIndex:27},{value:"combo:click",paraId:36,tocIndex:27},{value:"点击Combo时触发",paraId:36,tocIndex:27},{value:"DBLCLICK",paraId:36,tocIndex:27},{value:"combo:dblclick",paraId:36,tocIndex:27},{value:"双击Combo时触发",paraId:36,tocIndex:27},{value:"POINTER_OVER",paraId:36,tocIndex:27},{value:"combo:pointerover",paraId:36,tocIndex:27},{value:"指针移入Combo时触发",paraId:36,tocIndex:27},{value:"POINTER_LEAVE",paraId:36,tocIndex:27},{value:"combo:pointerleave",paraId:36,tocIndex:27},{value:"指针离开Combo时触发",paraId:36,tocIndex:27},{value:"POINTER_ENTER",paraId:36,tocIndex:27},{value:"combo:pointerenter",paraId:36,tocIndex:27},{value:"指针进入Combo或其子元素时触发(不冒泡)",paraId:36,tocIndex:27},{value:"POINTER_MOVE",paraId:36,tocIndex:27},{value:"combo:pointermove",paraId:36,tocIndex:27},{value:"指针在Combo上移动时触发",paraId:36,tocIndex:27},{value:"POINTER_OUT",paraId:36,tocIndex:27},{value:"combo:pointerout",paraId:36,tocIndex:27},{value:"指针离开Combo时触发",paraId:36,tocIndex:27},{value:"POINTER_DOWN",paraId:36,tocIndex:27},{value:"combo:pointerdown",paraId:36,tocIndex:27},{value:"指针在Combo上按下时触发",paraId:36,tocIndex:27},{value:"POINTER_UP",paraId:36,tocIndex:27},{value:"combo:pointerup",paraId:36,tocIndex:27},{value:"指针在Combo上抬起时触发",paraId:36,tocIndex:27},{value:"CONTEXT_MENU",paraId:36,tocIndex:27},{value:"combo:contextmenu",paraId:36,tocIndex:27},{value:"Combo上打开上下文菜单时触发",paraId:36,tocIndex:27},{value:"DRAG_START",paraId:36,tocIndex:27},{value:"combo:dragstart",paraId:36,tocIndex:27},{value:"开始拖拽Combo时触发",paraId:36,tocIndex:27},{value:"DRAG",paraId:36,tocIndex:27},{value:"combo:drag",paraId:36,tocIndex:27},{value:"拖拽Combo过程中触发",paraId:36,tocIndex:27},{value:"DRAG_END",paraId:36,tocIndex:27},{value:"combo:dragend",paraId:36,tocIndex:27},{value:"拖拽Combo结束时触发",paraId:36,tocIndex:27},{value:"DRAG_ENTER",paraId:36,tocIndex:27},{value:"combo:dragenter",paraId:36,tocIndex:27},{value:"拖拽物进入Combo时触发",paraId:36,tocIndex:27},{value:"DRAG_OVER",paraId:36,tocIndex:27},{value:"combo:dragover",paraId:36,tocIndex:27},{value:"拖拽物在Combo上方时触发",paraId:36,tocIndex:27},{value:"DRAG_LEAVE",paraId:36,tocIndex:27},{value:"combo:dragleave",paraId:36,tocIndex:27},{value:"拖拽物离开Combo时触发",paraId:36,tocIndex:27},{value:"DROP",paraId:36,tocIndex:27},{value:"combo:drop",paraId:36,tocIndex:27},{value:"在Combo上放置拖拽物时触发",paraId:36,tocIndex:27},{value:"常量名",paraId:37,tocIndex:28},{value:"事件名",paraId:37,tocIndex:28},{value:"描述",paraId:37,tocIndex:28},{value:"CLICK",paraId:37,tocIndex:28},{value:"canvas:click",paraId:37,tocIndex:28},{value:"点击画布空白处时触发",paraId:37,tocIndex:28},{value:"DBLCLICK",paraId:37,tocIndex:28},{value:"canvas:dblclick",paraId:37,tocIndex:28},{value:"双击画布空白处时触发",paraId:37,tocIndex:28},{value:"POINTER_OVER",paraId:37,tocIndex:28},{value:"canvas:pointerover",paraId:37,tocIndex:28},{value:"指针移入画布时触发",paraId:37,tocIndex:28},{value:"POINTER_LEAVE",paraId:37,tocIndex:28},{value:"canvas:pointerleave",paraId:37,tocIndex:28},{value:"指针离开画布时触发",paraId:37,tocIndex:28},{value:"POINTER_ENTER",paraId:37,tocIndex:28},{value:"canvas:pointerenter",paraId:37,tocIndex:28},{value:"指针进入画布或其子元素时触发(不冒泡)",paraId:37,tocIndex:28},{value:"POINTER_MOVE",paraId:37,tocIndex:28},{value:"canvas:pointermove",paraId:37,tocIndex:28},{value:"指针在画布上移动时触发",paraId:37,tocIndex:28},{value:"POINTER_OUT",paraId:37,tocIndex:28},{value:"canvas:pointerout",paraId:37,tocIndex:28},{value:"指针离开画布时触发",paraId:37,tocIndex:28},{value:"POINTER_DOWN",paraId:37,tocIndex:28},{value:"canvas:pointerdown",paraId:37,tocIndex:28},{value:"指针在画布上按下时触发",paraId:37,tocIndex:28},{value:"POINTER_UP",paraId:37,tocIndex:28},{value:"canvas:pointerup",paraId:37,tocIndex:28},{value:"指针在画布上抬起时触发",paraId:37,tocIndex:28},{value:"CONTEXT_MENU",paraId:37,tocIndex:28},{value:"canvas:contextmenu",paraId:37,tocIndex:28},{value:"画布上打开上下文菜单时触发",paraId:37,tocIndex:28},{value:"DRAG_START",paraId:37,tocIndex:28},{value:"canvas:dragstart",paraId:37,tocIndex:28},{value:"开始拖拽画布时触发",paraId:37,tocIndex:28},{value:"DRAG",paraId:37,tocIndex:28},{value:"canvas:drag",paraId:37,tocIndex:28},{value:"拖拽画布过程中触发",paraId:37,tocIndex:28},{value:"DRAG_END",paraId:37,tocIndex:28},{value:"canvas:dragend",paraId:37,tocIndex:28},{value:"拖拽画布结束时触发",paraId:37,tocIndex:28},{value:"DRAG_ENTER",paraId:37,tocIndex:28},{value:"canvas:dragenter",paraId:37,tocIndex:28},{value:"拖拽物进入画布时触发",paraId:37,tocIndex:28},{value:"DRAG_OVER",paraId:37,tocIndex:28},{value:"canvas:dragover",paraId:37,tocIndex:28},{value:"拖拽物在画布上方时触发",paraId:37,tocIndex:28},{value:"DRAG_LEAVE",paraId:37,tocIndex:28},{value:"canvas:dragleave",paraId:37,tocIndex:28},{value:"拖拽物离开画布时触发",paraId:37,tocIndex:28},{value:"DROP",paraId:37,tocIndex:28},{value:"canvas:drop",paraId:37,tocIndex:28},{value:"在画布上放置拖拽物时触发",paraId:37,tocIndex:28},{value:"WHEEL",paraId:37,tocIndex:28},{value:"canvas:wheel",paraId:37,tocIndex:28},{value:"在画布上滚动鼠标滚轮时触发",paraId:37,tocIndex:28},{value:"常量名",paraId:38,tocIndex:29},{value:"事件名",paraId:38,tocIndex:29},{value:"描述",paraId:38,tocIndex:29},{value:"BEFORE_CANVAS_INIT",paraId:38,tocIndex:29},{value:"beforecanvasinit",paraId:38,tocIndex:29},{value:"画布初始化之前触发",paraId:38,tocIndex:29},{value:"AFTER_CANVAS_INIT",paraId:38,tocIndex:29},{value:"aftercanvasinit",paraId:38,tocIndex:29},{value:"画布初始化之后触发",paraId:38,tocIndex:29},{value:"BEFORE_SIZE_CHANGE",paraId:38,tocIndex:29},{value:"beforesizechange",paraId:38,tocIndex:29},{value:"视口尺寸变更之前触发",paraId:38,tocIndex:29},{value:"AFTER_SIZE_CHANGE",paraId:38,tocIndex:29},{value:"aftersizechange",paraId:38,tocIndex:29},{value:"视口尺寸变更之后触发",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_CREATE",paraId:38,tocIndex:29},{value:"beforeelementcreate",paraId:38,tocIndex:29},{value:"元素创建之前触发",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_CREATE",paraId:38,tocIndex:29},{value:"afterelementcreate",paraId:38,tocIndex:29},{value:"元素创建之后触发",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_UPDATE",paraId:38,tocIndex:29},{value:"beforeelementupdate",paraId:38,tocIndex:29},{value:"元素更新之前触发",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_UPDATE",paraId:38,tocIndex:29},{value:"afterelementupdate",paraId:38,tocIndex:29},{value:"元素更新之后触发",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_DESTROY",paraId:38,tocIndex:29},{value:"beforeelementdestroy",paraId:38,tocIndex:29},{value:"元素销毁之前触发",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_DESTROY",paraId:38,tocIndex:29},{value:"afterelementdestroy",paraId:38,tocIndex:29},{value:"元素销毁之后触发",paraId:38,tocIndex:29},{value:"BEFORE_ELEMENT_TRANSLATE",paraId:38,tocIndex:29},{value:"beforeelementtranslate",paraId:38,tocIndex:29},{value:"元素平移之前触发",paraId:38,tocIndex:29},{value:"AFTER_ELEMENT_TRANSLATE",paraId:38,tocIndex:29},{value:"afterelementtranslate",paraId:38,tocIndex:29},{value:"元素平移之后触发",paraId:38,tocIndex:29},{value:"BEFORE_DRAW",paraId:38,tocIndex:29},{value:"beforedraw",paraId:38,tocIndex:29},{value:"绘制开始之前触发",paraId:38,tocIndex:29},{value:"AFTER_DRAW",paraId:38,tocIndex:29},{value:"afterdraw",paraId:38,tocIndex:29},{value:"绘制结束之后触发",paraId:38,tocIndex:29},{value:"BEFORE_RENDER",paraId:38,tocIndex:29},{value:"beforerender",paraId:38,tocIndex:29},{value:"渲染开始之前触发",paraId:38,tocIndex:29},{value:"AFTER_RENDER",paraId:38,tocIndex:29},{value:"afterrender",paraId:38,tocIndex:29},{value:"渲染完成之后触发",paraId:38,tocIndex:29},{value:"BEFORE_ANIMATE",paraId:38,tocIndex:29},{value:"beforeanimate",paraId:38,tocIndex:29},{value:"动画开始之前触发",paraId:38,tocIndex:29},{value:"AFTER_ANIMATE",paraId:38,tocIndex:29},{value:"afteranimate",paraId:38,tocIndex:29},{value:"动画结束之后触发",paraId:38,tocIndex:29},{value:"BEFORE_LAYOUT",paraId:38,tocIndex:29},{value:"beforelayout",paraId:38,tocIndex:29},{value:"布局开始之前触发",paraId:38,tocIndex:29},{value:"AFTER_LAYOUT",paraId:38,tocIndex:29},{value:"afterlayout",paraId:38,tocIndex:29},{value:"布局结束之后触发",paraId:38,tocIndex:29},{value:"BEFORE_STAGE_LAYOUT",paraId:38,tocIndex:29},{value:"beforestagelayout",paraId:38,tocIndex:29},{value:"流水线布局过程中每个阶段开始前触发",paraId:38,tocIndex:29},{value:"AFTER_STAGE_LAYOUT",paraId:38,tocIndex:29},{value:"afterstagelayout",paraId:38,tocIndex:29},{value:"流水线布局过程中每个阶段结束后触发",paraId:38,tocIndex:29},{value:"BEFORE_TRANSFORM",paraId:38,tocIndex:29},{value:"beforetransform",paraId:38,tocIndex:29},{value:"可视区域变化之前触发",paraId:38,tocIndex:29},{value:"AFTER_TRANSFORM",paraId:38,tocIndex:29},{value:"aftertransform",paraId:38,tocIndex:29},{value:"可视区域变化之后触发",paraId:38,tocIndex:29},{value:"BATCH_START",paraId:38,tocIndex:29},{value:"batchstart",paraId:38,tocIndex:29},{value:"批处理操作开始时触发",paraId:38,tocIndex:29},{value:"BATCH_END",paraId:38,tocIndex:29},{value:"batchend",paraId:38,tocIndex:29},{value:"批处理操作结束时触发",paraId:38,tocIndex:29},{value:"BEFORE_DESTROY",paraId:38,tocIndex:29},{value:"beforedestroy",paraId:38,tocIndex:29},{value:"图表销毁前触发",paraId:38,tocIndex:29},{value:"AFTER_DESTROY",paraId:38,tocIndex:29},{value:"afterdestroy",paraId:38,tocIndex:29},{value:"图表销毁后触发",paraId:38,tocIndex:29},{value:"BEFORE_RENDERER_CHANGE",paraId:38,tocIndex:29},{value:"beforerendererchange",paraId:38,tocIndex:29},{value:"渲染器变更之前触发",paraId:38,tocIndex:29},{value:"AFTER_RENDERER_CHANGE",paraId:38,tocIndex:29},{value:"afterrendererchange",paraId:38,tocIndex:29},{value:"渲染器变更之后触发",paraId:38,tocIndex:29},{value:"常量名",paraId:39,tocIndex:30},{value:"事件名",paraId:39,tocIndex:30},{value:"描述",paraId:39,tocIndex:30},{value:"KEY_DOWN",paraId:39,tocIndex:30},{value:"keydown",paraId:39,tocIndex:30},{value:"键盘按键按下时触发",paraId:39,tocIndex:30},{value:"KEY_UP",paraId:39,tocIndex:30},{value:"keyup",paraId:39,tocIndex:30},{value:"键盘按键抬起时触发",paraId:39,tocIndex:30},{value:"这些是不带前缀的事件，可用于监听全局事件：",paraId:40,tocIndex:31},{value:"常量名",paraId:41,tocIndex:31},{value:"事件名",paraId:41,tocIndex:31},{value:"描述",paraId:41,tocIndex:31},{value:"CLICK",paraId:41,tocIndex:31},{value:"click",paraId:41,tocIndex:31},{value:"点击任何元素时触发",paraId:41,tocIndex:31},{value:"DBLCLICK",paraId:41,tocIndex:31},{value:"dblclick",paraId:41,tocIndex:31},{value:"双击任何元素时触发",paraId:41,tocIndex:31},{value:"POINTER_OVER",paraId:41,tocIndex:31},{value:"pointerover",paraId:41,tocIndex:31},{value:"指针移入任何元素时触发",paraId:41,tocIndex:31},{value:"POINTER_LEAVE",paraId:41,tocIndex:31},{value:"pointerleave",paraId:41,tocIndex:31},{value:"指针离开任何元素时触发",paraId:41,tocIndex:31},{value:"POINTER_ENTER",paraId:41,tocIndex:31},{value:"pointerenter",paraId:41,tocIndex:31},{value:"指针进入任何元素或其子元素时触发(不冒泡)",paraId:41,tocIndex:31},{value:"POINTER_MOVE",paraId:41,tocIndex:31},{value:"pointermove",paraId:41,tocIndex:31},{value:"指针在任何元素上移动时触发",paraId:41,tocIndex:31},{value:"POINTER_OUT",paraId:41,tocIndex:31},{value:"pointerout",paraId:41,tocIndex:31},{value:"指针离开任何元素时触发",paraId:41,tocIndex:31},{value:"POINTER_DOWN",paraId:41,tocIndex:31},{value:"pointerdown",paraId:41,tocIndex:31},{value:"指针在任何元素上按下时触发",paraId:41,tocIndex:31},{value:"POINTER_UP",paraId:41,tocIndex:31},{value:"pointerup",paraId:41,tocIndex:31},{value:"指针在任何元素上抬起时触发",paraId:41,tocIndex:31},{value:"CONTEXT_MENU",paraId:41,tocIndex:31},{value:"contextmenu",paraId:41,tocIndex:31},{value:"任何元素上打开上下文菜单时触发",paraId:41,tocIndex:31},{value:"DRAG_START",paraId:41,tocIndex:31},{value:"dragstart",paraId:41,tocIndex:31},{value:"开始拖拽任何元素时触发",paraId:41,tocIndex:31},{value:"DRAG",paraId:41,tocIndex:31},{value:"drag",paraId:41,tocIndex:31},{value:"拖拽任何元素过程中触发",paraId:41,tocIndex:31},{value:"DRAG_END",paraId:41,tocIndex:31},{value:"dragend",paraId:41,tocIndex:31},{value:"拖拽任何元素结束时触发",paraId:41,tocIndex:31},{value:"DRAG_ENTER",paraId:41,tocIndex:31},{value:"dragenter",paraId:41,tocIndex:31},{value:"拖拽物进入任何元素时触发",paraId:41,tocIndex:31},{value:"DRAG_OVER",paraId:41,tocIndex:31},{value:"dragover",paraId:41,tocIndex:31},{value:"拖拽物在任何元素上方时触发",paraId:41,tocIndex:31},{value:"DRAG_LEAVE",paraId:41,tocIndex:31},{value:"dragleave",paraId:41,tocIndex:31},{value:"拖拽物离开任何元素时触发",paraId:41,tocIndex:31},{value:"DROP",paraId:41,tocIndex:31},{value:"drop",paraId:41,tocIndex:31},{value:"在任何元素上放置拖拽物时触发",paraId:41,tocIndex:31},{value:"KEY_DOWN",paraId:41,tocIndex:31},{value:"keydown",paraId:41,tocIndex:31},{value:"键盘按键按下时触发",paraId:41,tocIndex:31},{value:"KEY_UP",paraId:41,tocIndex:31},{value:"keyup",paraId:41,tocIndex:31},{value:"键盘按键抬起时触发",paraId:41,tocIndex:31},{value:"WHEEL",paraId:41,tocIndex:31},{value:"wheel",paraId:41,tocIndex:31},{value:"滚动鼠标滚轮时触发",paraId:41,tocIndex:31},{value:"PINCH",paraId:41,tocIndex:31},{value:"pinch",paraId:41,tocIndex:31},{value:"多点触控屏幕上双指捏合或张开时触发",paraId:41,tocIndex:31},{value:"G6 的事件 API 支持链式调用，可以连续注册多个事件：",paraId:42,tocIndex:33},{value:"import { NodeEvent, EdgeEvent, CanvasEvent } from '@antv/g6';\n\n// 使用常量枚举+链式调用\ngraph.on(NodeEvent.CLICK, handleNodeClick).on(EdgeEvent.CLICK, handleEdgeClick).on(CanvasEvent.WHEEL, handleCanvasZoom);\n",paraId:43,tocIndex:33},{value:"你可以利用事件冒泡机制，在父元素上监听所有子元素的事件：",paraId:44,tocIndex:34},{value:"import { CommonEvent } from '@antv/g6';\n\n// 统一处理所有元素的点击事件\ngraph.on(CommonEvent.CLICK, (evt) => {\n  const { targetType, target } = evt;\n  if (targetType === 'node') {\n    console.log('点击了节点:', target.id);\n  } else if (targetType === 'edge') {\n    console.log('点击了边:', target.id);\n  } else {\n    console.log('点击了画布空白处');\n  }\n});\n",paraId:45,tocIndex:34},{value:"大多数事件的回调函数会接收一个事件对象，包含以下常用属性：",paraId:46,tocIndex:35},{value:"target",paraId:47,tocIndex:35},{value:" - 触发事件的元素",paraId:47,tocIndex:35},{value:"targetType",paraId:47,tocIndex:35},{value:" - 触发事件的元素类型（node/edge/combo/canvas）",paraId:47,tocIndex:35},{value:"originalTarget",paraId:47,tocIndex:35},{value:" - 原始的触发事件的图形",paraId:47,tocIndex:35},{value:"currentTarget",paraId:47,tocIndex:35},{value:" - 当前触发事件的对象",paraId:47,tocIndex:35},{value:"originalEvent",paraId:47,tocIndex:35},{value:" - 原始的浏览器事件对象",paraId:47,tocIndex:35},{value:"通过这些属性，你可以精确地控制交互行为。",paraId:48,tocIndex:35}]},95709:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(75091);const d=[{value:"G6 提供了将图导出为图片的功能，可以将当前画布内容导出为 DataURL 格式，方便保存、分享或进一步处理。导出的图片会保留画布上的所有可见元素，包括节点、边、组合以及其他自定义图形。",paraId:0,tocIndex:0},{value:"将当前画布导出为 DataURL 格式的图片。",paraId:1,tocIndex:2},{value:"toDataURL(options?: Partial<DataURLOptions>): Promise<string>;\n",paraId:2,tocIndex:2},{value:"参数",paraId:3,tocIndex:2},{value:"参数",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"必选",paraId:4,tocIndex:2},{value:"options",paraId:4,tocIndex:2},{value:"导出图片配置",paraId:4,tocIndex:2},{value:"Partial<DataURLOptions>",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"返回值",paraId:5,tocIndex:2},{value:"返回一个 Promise，解析为表示图片的 DataURL 字符串。",paraId:6,tocIndex:2},{value:"DataURLOptions 类型定义",paraId:7,tocIndex:2},{value:"参数",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"mode",paraId:8,tocIndex:2},{value:"'viewport' | 'overall'",paraId:8,tocIndex:2},{value:"否",paraId:8,tocIndex:2},{value:"导出模式 ",paraId:8,tocIndex:2},{value:" - viewport: 导出视口内容 ",paraId:8,tocIndex:2},{value:" - overall: 导出整个画布",paraId:8,tocIndex:2},{value:"type",paraId:8,tocIndex:2},{value:"'image/png' | 'image/jpeg' | 'image/webp'",paraId:8,tocIndex:2},{value:"否",paraId:8,tocIndex:2},{value:"图片类型 ",paraId:8,tocIndex:2},{value:" - image/png: PNG 格式 ",paraId:8,tocIndex:2},{value:" - image/jpeg: JPEG 格式 ",paraId:8,tocIndex:2},{value:" - image/webp: WebP 格式",paraId:8,tocIndex:2},{value:"encoderOptions",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"否",paraId:8,tocIndex:2},{value:"图片质量，仅对 image/jpeg 和 image/webp 有效，取值范围 0 ~ 1",paraId:8,tocIndex:2},{value:"G6 5.0 仅提供导出画布为 Base64 图片的 API(",paraId:9,tocIndex:3},{value:"toDataURL",paraId:10,tocIndex:3},{value:")，如果需要下载图片，可以使用以下方法：",paraId:9,tocIndex:3},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:11,tocIndex:3},{value:"导出的图片内容可能不会包含完整的画布内容，导出范围仅包含 Graph 画布中的内容。部分插件使用了自定义的容器、画布等，这部分内容不会出现在导出的图片中。",paraId:12}]},85404:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(50396);const d=[{value:"销毁当前图实例，释放与图实例相关的所有资源。",paraId:0,tocIndex:1},{value:"⚠️ ",paraId:1,tocIndex:1},{value:"注意",paraId:1,tocIndex:1},{value:": 销毁后无法进行任何操作，如果需要重新使用，需要重新创建一个新的图实例。",paraId:1,tocIndex:1},{value:"destroy(): void;\n",paraId:2,tocIndex:1},{value:"使用场景",paraId:3,tocIndex:1},{value:":",paraId:3,tocIndex:1},{value:"当用户关闭图表或切换到其他视图时，可以调用此方法来释放资源。",paraId:4,tocIndex:1},{value:"在需要重新创建图实例时，确保先销毁旧的实例，以避免内存泄漏。",paraId:4,tocIndex:1}]},53223:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(55968);const d=[{value:"布局",paraId:0,tocIndex:0},{value:" 是图可视化中至关重要的一环，它决定了节点在画布上的位置排布。G6 提供了多种布局算法，以满足不同数据结构和可视化需求。通过布局 API，你可以：",paraId:1,tocIndex:0},{value:"设置和更新图的布局配置",paraId:2,tocIndex:0},{value:"执行或停止布局计算",paraId:2,tocIndex:0},{value:"组合多种布局策略",paraId:2,tocIndex:0},{value:"自定义布局算法",paraId:2,tocIndex:0},{value:"合适的布局可以清晰地展示节点间的关系模式，提高图的可读性和美观度。",paraId:3,tocIndex:0},{value:"设置图的布局算法及配置。",paraId:4,tocIndex:2},{value:"⚠️ ",paraId:5,tocIndex:2},{value:"注意",paraId:5,tocIndex:2},{value:": 调用此函数不会自动重新布局，需要单独调用 ",paraId:5,tocIndex:2},{value:"graph.layout()",paraId:5,tocIndex:2},{value:"。",paraId:5,tocIndex:2},{value:"setLayout(layout: LayoutOptions | ((prev: LayoutOptions) => LayoutOptions)): void;\n",paraId:6,tocIndex:2},{value:"参数",paraId:7,tocIndex:2},{value:"参数",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"布局配置对象，或者一个基于之前配置返回新配置的函数",paraId:8,tocIndex:2},{value:"LayoutOptions",paraId:9,tocIndex:2},{value:" | ((prev: LayoutOptions) => LayoutOptions)",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"示例 1",paraId:10,tocIndex:2},{value:": 设置力导向布局",paraId:10,tocIndex:2},{value:"// 设置简单的力导向布局\ngraph.setLayout({\n  type: 'force',\n  preventOverlap: true, // 防止节点重叠\n  nodeStrength: -50, // 节点间斥力，负值为斥力\n  edgeStrength: 0.5, // 边的强度，会影响边的长度\n});\n",paraId:11,tocIndex:2},{value:"示例 2",paraId:12,tocIndex:2},{value:": 使用函数式更新布局",paraId:12,tocIndex:2},{value:"// 基于当前布局配置进行更新\ngraph.setLayout((prevLayout) => {\n  // 如果之前是力导向布局，调整其参数\n  if (prevLayout.type === 'force') {\n    return {\n      ...prevLayout,\n      preventOverlap: true,\n      nodeStrength: -100, // 增加斥力\n      alphaDecay: 0.01, // 降低衰减率，让布局有更多迭代时间\n    };\n  }\n\n  // 否则切换到放射状布局\n  return {\n    type: 'radial',\n    unitRadius: 100,\n    preventOverlap: true,\n  };\n});\n",paraId:13,tocIndex:2},{value:"示例 3",paraId:14,tocIndex:2},{value:": 设置组合布局",paraId:14,tocIndex:2},{value:"// 设置组合布局 - 不同的节点使用不同的布局算法\ngraph.setLayout([\n  {\n    type: 'grid',\n    // 过滤函数：只有type为'main'的节点参与布局\n    nodeFilter: (node) => node.data.type === 'main',\n    rows: 1,\n  },\n  {\n    type: 'circle',\n    nodeFilter: (node) => node.data.type === 'sub',\n    radius: 100,\n  },\n]);\n",paraId:15,tocIndex:2},{value:"获取当前的布局配置。",paraId:16,tocIndex:3},{value:"getLayout(): LayoutOptions;\n",paraId:17,tocIndex:3},{value:"返回值",paraId:18,tocIndex:3},{value:"类型",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"LayoutOptions",paraId:20,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:": 当前的布局配置对象",paraId:19,tocIndex:3},{value:"示例",paraId:21,tocIndex:3},{value:"// 获取当前布局配置\nconst currentLayout = graph.getLayout();\nconsole.log('当前布局类型:', currentLayout.type);\n",paraId:22,tocIndex:3},{value:"执行布局计算。当图数据发生变化后，调用此方法可触发布局算法重新计算节点位置。",paraId:23,tocIndex:4},{value:"layout(layoutOptions?: LayoutOptions): Promise<void>;\n",paraId:24,tocIndex:4},{value:"参数",paraId:25,tocIndex:4},{value:"参数",paraId:26,tocIndex:4},{value:"描述",paraId:26,tocIndex:4},{value:"类型",paraId:26,tocIndex:4},{value:"默认值",paraId:26,tocIndex:4},{value:"必选",paraId:26,tocIndex:4},{value:"layoutOptions",paraId:26,tocIndex:4},{value:"布局配置对象",paraId:26,tocIndex:4},{value:"LayoutOptions",paraId:27,tocIndex:4},{value:" | ((prev: LayoutOptions) => LayoutOptions)",paraId:26,tocIndex:4},{value:"-",paraId:26,tocIndex:4},{value:"如果传入 ",paraId:28,tocIndex:4},{value:"layoutOptions",paraId:28,tocIndex:4},{value:"，则优先考虑传入的布局配置，否则使用图的当前布局配置进行布局。",paraId:28,tocIndex:4},{value:"说明",paraId:29,tocIndex:4},{value:"布局计算是一个异步过程，特别是对于复杂的布局算法（如力导向布局）。此方法返回一个 Promise，可以用于在布局完成后执行后续操作。",paraId:30,tocIndex:4},{value:"示例 1",paraId:31,tocIndex:4},{value:": 基础用法",paraId:31,tocIndex:4},{value:"// 执行布局\nawait graph.layout();\nconsole.log('布局计算完成');\n",paraId:32,tocIndex:4},{value:"示例 2",paraId:33,tocIndex:4},{value:": 添加数据后重新布局",paraId:33,tocIndex:4},{value:"// 添加新节点和边\ngraph.addData({\n  nodes: [{ id: 'newNode1' }, { id: 'newNode2' }],\n  edges: [{ id: 'newEdge', source: 'existingNode', target: 'newNode1' }],\n});\n\n// 绘制新节点和边\nawait graph.draw();\n\n// 重新计算布局\nawait graph.layout();\n",paraId:34,tocIndex:4},{value:"示例 3",paraId:35,tocIndex:4},{value:": 监听布局事件",paraId:35,tocIndex:4},{value:"import { GraphEvent } from '@antv/g6';\n\n// 布局开始前\ngraph.on(GraphEvent.BEFORE_LAYOUT, () => {\n  console.log('布局计算开始...');\n});\n\n// 布局完成后\ngraph.on(GraphEvent.AFTER_LAYOUT, () => {\n  console.log('布局计算完成');\n});\n\n// 执行布局\ngraph.layout();\n",paraId:36,tocIndex:4},{value:"停止正在进行中的布局计算。主要用于停止迭代类型的布局算法，如力导向布局。",paraId:37,tocIndex:5},{value:"stopLayout(): void;\n",paraId:38,tocIndex:5},{value:"说明",paraId:39,tocIndex:5},{value:"适用于带有迭代动画的布局，目前有 ",paraId:40,tocIndex:5},{value:"force",paraId:40,tocIndex:5},{value:" 属于此类布局。当布局计算时间过长时，可以手动停止迭代。",paraId:40,tocIndex:5},{value:"示例 1",paraId:41,tocIndex:5},{value:": 基本使用",paraId:41,tocIndex:5},{value:"// 5秒后停止布局\nsetTimeout(() => {\n  graph.stopLayout();\n  console.log('布局已手动停止');\n}, 5000);\n",paraId:42,tocIndex:5},{value:"示例 2",paraId:43,tocIndex:5},{value:": 结合用户交互停止布局",paraId:43,tocIndex:5},{value:"// 当用户点击画布时停止布局\nimport { CanvasEvent } from '@antv/g6';\n\ngraph.on(CanvasEvent.CLICK, () => {\n  graph.stopLayout();\n  console.log('用户点击画布，布局已停止');\n});\n",paraId:44,tocIndex:5},{value:"布局配置类型，可以是单一布局配置或布局配置数组。",paraId:45,tocIndex:7},{value:"type LayoutOptions = SingleLayoutOptions | SingleLayoutOptions[];\n",paraId:46,tocIndex:7},{value:"单一布局配置，可以是内置布局配置或自定义基础布局配置。",paraId:47,tocIndex:8},{value:"type SingleLayoutOptions = BuiltInLayoutOptions | BaseLayoutOptions;\n",paraId:48,tocIndex:8},{value:"所有布局类型共有的基础配置项。",paraId:49,tocIndex:9},{value:"interface BaseLayoutOptions {\n  // 布局类型\n  type: string;\n\n  // 参与该布局的节点过滤函数\n  nodeFilter?: (node: NodeData) => boolean;\n\n  // 是否在初始化元素前计算布局\n  preLayout?: boolean;\n\n  // 不可见节点是否参与布局（当 preLayout 为 true 时生效）\n  isLayoutInvisibleNodes?: boolean;\n\n  // 启用布局动画，对于迭代布局，会在两次迭代之间进行动画过渡\n  animation?: boolean;\n\n  // 是否在 WebWorker 中运行布局\n  enableWorker?: boolean;\n\n  // 迭代布局的迭代次数\n  iterations?: number;\n\n  // 其他特定布局的配置项\n  [key: string]: any;\n}\n",paraId:50,tocIndex:9},{value:"G6 内置的布局类型配置，具体请查看 ",paraId:51,tocIndex:10},{value:"API - 内置布局",paraId:52,tocIndex:10},{value:"。",paraId:51,tocIndex:10}]},52055:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(74187);const d=[{value:"G6 图实例的 ",paraId:0,tocIndex:0},{value:"配置项",paraId:1,tocIndex:0},{value:" 控制着图的各个方面，包括画布设置、视口属性、数据、布局、样式、交互行为、插件等。通过合理配置这些选项，可以灵活定制图的外观和行为。",paraId:0,tocIndex:0},{value:"配置项可以在图实例创建时指定，也可以通过 API 在运行时动态修改。某些基础配置（如 devicePixelRatio、container）修改后需要销毁并重新创建图实例才能生效。",paraId:2,tocIndex:0},{value:"获取当前图表的所有配置项。",paraId:3,tocIndex:2},{value:"getOptions(): GraphOptions;\n",paraId:4,tocIndex:2},{value:"返回值",paraId:5,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:": ",paraId:6,tocIndex:2},{value:"GraphOptions",paraId:7,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:": 当前图表的完整配置项",paraId:6,tocIndex:2},{value:"示例",paraId:8,tocIndex:2},{value:"// 获取当前图表的配置项\nconst options = graph.getOptions();\nconsole.log('当前图表配置:', options);\n\n// 获取特定配置\nconsole.log('当前画布宽度:', options.width);\nconsole.log('当前布局配置:', options.layout);\n",paraId:9,tocIndex:2},{value:"更新图表的配置项。",paraId:10,tocIndex:3},{value:"setOptions(options: GraphOptions): void;\n",paraId:11,tocIndex:3},{value:"参数",paraId:12,tocIndex:3},{value:"参数",paraId:13,tocIndex:3},{value:"描述",paraId:13,tocIndex:3},{value:"类型",paraId:13,tocIndex:3},{value:"默认值",paraId:13,tocIndex:3},{value:"必选",paraId:13,tocIndex:3},{value:"options",paraId:13,tocIndex:3},{value:"新的配置项",paraId:13,tocIndex:3},{value:"GraphOptions",paraId:14,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"说明",paraId:15,tocIndex:3},{value:"⚠️ ",paraId:16,tocIndex:3},{value:"注意",paraId:16,tocIndex:3},{value:": 要更新 devicePixelRatio、container 等基础属性，需要销毁当前图实例后重新创建。其他大部分配置可以动态更新。",paraId:16,tocIndex:3},{value:"示例 1",paraId:17,tocIndex:3},{value:": 基本用法",paraId:17,tocIndex:3},{value:"// 更新图表配置\ngraph.setOptions({\n  width: 1000, // 更新宽度\n  height: 800, // 更新高度\n  autoFit: true, // 开启自适应\n  animation: true, // 启用动画\n});\n",paraId:18,tocIndex:3},{value:"示例 2",paraId:19,tocIndex:3},{value:": 更新主题",paraId:19,tocIndex:3},{value:"// 更新图表主题配置\ngraph.setOptions({\n  theme: {\n    type: 'dark', // 切换到暗色主题\n    // 自定义主题配置\n    node: {\n      palette: ['#1AAF8B', '#F8E71C', '#8B572A', '#7ED321'],\n    },\n    edge: {\n      palette: ['#F5A623', '#F8E71C', '#8B572A', '#7ED321'],\n    },\n  },\n});\n",paraId:20,tocIndex:3},{value:"示例 3",paraId:21,tocIndex:3},{value:": 更新布局配置",paraId:21,tocIndex:3},{value:"// 更新布局配置\ngraph.setOptions({\n  layout: {\n    type: 'force', // 切换到力导向布局\n    preventOverlap: true,\n    nodeStrength: -50,\n    edgeStrength: 0.7,\n  },\n});\n",paraId:22,tocIndex:3},{value:"示例 4",paraId:23,tocIndex:3},{value:": 更新节点和边的默认配置",paraId:23,tocIndex:3},{value:"// 更新节点和边的默认样式配置\ngraph.setOptions({\n  node: {\n    style: {\n      fill: '#91d5ff',\n      stroke: '#40a9ff',\n      lineWidth: 1,\n      radius: 10,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 2,\n      endArrow: true,\n    },\n  },\n});\n",paraId:24,tocIndex:3}]},124:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(21763);const d=[{value:"插件",paraId:0,tocIndex:0},{value:"（Plugin）是 G6 中扩展功能的重要机制，用于增强图表的功能和交互体验。插件通常提供一些独立的功能模块，如缩略图、工具栏、上下文菜单等，它们可以与图表主体良好集成，同时又保持代码的模块化和可维护性。",paraId:1,tocIndex:0},{value:'插件系统设计遵循"即插即用"的原则，可以根据需要动态添加或移除。',paraId:2,tocIndex:0},{value:"获取指定 key 的插件实例，用于访问和操作插件提供的方法。",paraId:3,tocIndex:2},{value:"getPluginInstance<T extends Plugin>(key: string): T;\n",paraId:4,tocIndex:2},{value:"参数",paraId:5,tocIndex:2},{value:"参数",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"必选",paraId:6,tocIndex:2},{value:"key",paraId:6,tocIndex:2},{value:"插件的唯一标识符",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"返回值",paraId:7,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:": 插件实例",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:": 指定 key 对应的插件实例",paraId:8,tocIndex:2},{value:"说明",paraId:9,tocIndex:2},{value:"许多插件提供了特定的API方法，通过获取插件实例可以直接调用这些方法。例如，全屏插件提供了 ",paraId:10,tocIndex:2},{value:"request()",paraId:10,tocIndex:2},{value:" 和 ",paraId:10,tocIndex:2},{value:"exit()",paraId:10,tocIndex:2},{value:" 方法来控制全屏状态。",paraId:10,tocIndex:2},{value:"示例",paraId:11,tocIndex:2},{value:": 操作全屏插件",paraId:11,tocIndex:2},{value:"// 获取全屏插件实例\nconst fullscreen = graph.getPluginInstance('fullscreen');\n\n// 请求进入全屏\nfullscreen.request();\n\n// 稍后退出全屏\nsetTimeout(() => {\n  fullscreen.exit();\n}, 5000);\n",paraId:12,tocIndex:2},{value:"获取当前图表中所有已配置的插件。",paraId:13,tocIndex:3},{value:"getPlugins(): PluginOptions;\n",paraId:14,tocIndex:3},{value:"返回值",paraId:15,tocIndex:3},{value:"类型",paraId:16,tocIndex:3},{value:": ",paraId:16,tocIndex:3},{value:"PluginOptions",paraId:17,tocIndex:3},{value:"描述",paraId:16,tocIndex:3},{value:": 当前图表中已配置的所有插件",paraId:16,tocIndex:3},{value:"示例",paraId:18,tocIndex:3},{value:"// 获取所有插件配置\nconst plugins = graph.getPlugins();\n\n// 查看当前激活的插件\nconsole.log('当前图表的插件配置:', plugins);\n",paraId:19,tocIndex:3},{value:"设置图表的插件，将替换所有现有的插件配置。",paraId:20,tocIndex:4},{value:"setPlugins(plugins: PluginOptions | ((prev: PluginOptions) => PluginOptions)): void;\n",paraId:21,tocIndex:4},{value:"参数",paraId:22,tocIndex:4},{value:"参数",paraId:23,tocIndex:4},{value:"描述",paraId:23,tocIndex:4},{value:"类型",paraId:23,tocIndex:4},{value:"默认值",paraId:23,tocIndex:4},{value:"必选",paraId:23,tocIndex:4},{value:"plugins",paraId:23,tocIndex:4},{value:"新的插件配置，或一个基于当前配置返回新配置的函数",paraId:23,tocIndex:4},{value:"PluginOptions",paraId:24,tocIndex:4},{value:" | ((prev: PluginOptions) => PluginOptions)",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"✓",paraId:23,tocIndex:4},{value:"说明",paraId:25,tocIndex:4},{value:"设置的插件会全量替换原有的插件配置。如果需要在现有插件基础上添加新插件，可以使用函数式更新方式：",paraId:26,tocIndex:4},{value:"graph.setPlugins((plugins) => [...plugins, { type: 'grid', key: 'grid-line' }]);\n",paraId:27,tocIndex:4},{value:"示例 1",paraId:28,tocIndex:4},{value:": 设置基本插件",paraId:28,tocIndex:4},{value:"// 设置多个基本插件\ngraph.setPlugins([\n  // 字符串形式（使用默认配置）\n  'minimap',\n\n  // 对象形式（自定义配置）\n  {\n    type: 'grid',\n    key: 'grid-line',\n  },\n  {\n    type: 'toolbar',\n    key: 'graph-toolbar',\n    position: 'top-right',\n  },\n]);\n",paraId:29,tocIndex:4},{value:"示例 2",paraId:30,tocIndex:4},{value:": 使用函数式更新",paraId:30,tocIndex:4},{value:"// 添加新插件到现有配置\ngraph.setPlugins((currentPlugins) => [\n  ...currentPlugins,\n  {\n    type: 'grid',\n    key: 'grid-line',\n  },\n]);\n\n// 替换特定插件\ngraph.setPlugins((currentPlugins) => {\n  // 过滤掉现有的网格插件\n  const filteredPlugins = currentPlugins.filter((plugin) => {\n    if (typeof plugin === 'string') return plugin !== 'grid';\n    if (typeof plugin === 'function') return true;\n    return plugin.type !== 'grid';\n  });\n\n  // 添加新的网格插件配置\n  return [\n    ...filteredPlugins,\n    {\n      type: 'grid',\n      key: 'new-grid',\n      follow: true,\n    },\n  ];\n});\n",paraId:31,tocIndex:4},{value:"更新指定的插件配置，需要通过 ",paraId:32,tocIndex:5},{value:"key",paraId:32,tocIndex:5},{value:" 标识要更新的插件。",paraId:32,tocIndex:5},{value:"updatePlugin(plugin: UpdatePluginOption): void;\n",paraId:33,tocIndex:5},{value:"参数",paraId:34,tocIndex:5},{value:"参数",paraId:35,tocIndex:5},{value:"描述",paraId:35,tocIndex:5},{value:"类型",paraId:35,tocIndex:5},{value:"默认值",paraId:35,tocIndex:5},{value:"必选",paraId:35,tocIndex:5},{value:"plugin",paraId:35,tocIndex:5},{value:"更新的插件配置",paraId:35,tocIndex:5},{value:"UpdatePluginOption",paraId:36,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"✓",paraId:35,tocIndex:5},{value:"说明",paraId:37,tocIndex:5},{value:"如果要更新一个插件，必须在原始插件配置中指定 ",paraId:38,tocIndex:5},{value:"key",paraId:38,tocIndex:5},{value:" 字段，以便能够准确找到并更新该插件。",paraId:38,tocIndex:5},{value:"示例 1",paraId:39,tocIndex:5},{value:": 更新插件配置",paraId:39,tocIndex:5},{value:"// 初始设置插件时指定 key\ngraph.setPlugins([\n  {\n    type: 'grid',\n    key: 'main-grid',\n    follow: true,\n  },\n]);\n\n// 更新网格插件配置\ngraph.updatePlugin({\n  key: 'main-grid',\n  follow: false,\n});\n",paraId:40,tocIndex:5},{value:"插件配置类型，表示一组插件配置的数组。",paraId:41,tocIndex:7},{value:"type PluginOptions = (string | CustomPluginOption | ((this: Graph) => CustomPluginOption))[];\n",paraId:42,tocIndex:7},{value:"自定义插件配置接口，用于配置插件参数。",paraId:43,tocIndex:8},{value:"type CustomPluginOption = {\n  // 插件类型\n  type: string;\n\n  // 插件 key，即唯一标识\n  // 用于标识插件，从而进一步操作此插件\n  key?: string;\n\n  // 针对不同类型的插件，还可能有其他配置项\n  [configKey: string]: any;\n};\n",paraId:44,tocIndex:8},{value:"更新插件的配置接口，用于动态修改插件参数。",paraId:45,tocIndex:9},{value:"type UpdatePluginOption = {\n  // 要更新的插件的唯一标识\n  key: string;\n\n  // 其他要更新的配置项\n  [configKey: string]: unknown;\n};\n",paraId:46,tocIndex:9}]},99851:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13351);const d=[{value:"G6 提供了一系列绘制和渲染相关的 API，用于控制图形元素的显示过程。在 G6 中，绘制和渲染是两个不同的概念：",paraId:0,tocIndex:0},{value:"绘制(draw)",paraId:1,tocIndex:0},{value:": 仅负责将图形元素绘制到画布上，不涉及布局计算",paraId:1,tocIndex:0},{value:"渲染(render)",paraId:1,tocIndex:0},{value:": 完整的渲染流程，包括数据处理、布局计算和最终绘制",paraId:1,tocIndex:0},{value:"理解这些 API 的区别对于优化性能和实现特定效果至关重要。",paraId:2,tocIndex:0},{value:"绘制元素，但不执行布局计算。",paraId:3,tocIndex:2},{value:"draw(): Promise<void>;\n",paraId:4,tocIndex:2},{value:"说明",paraId:5,tocIndex:2},{value:"draw",paraId:6,tocIndex:2},{value:" 方法仅执行元素的绘制过程，不会重新计算布局。",paraId:6,tocIndex:2},{value:"⚠️ ",paraId:7,tocIndex:2},{value:"注意",paraId:7,tocIndex:2},{value:": ",paraId:7,tocIndex:2},{value:"draw",paraId:7,tocIndex:2},{value:" 为异步方法，需要使用 ",paraId:7,tocIndex:2},{value:"await",paraId:7,tocIndex:2},{value:" 或 Promise 链式调用来确保绘制完成后再执行后续操作。",paraId:7,tocIndex:2},{value:"示例 1",paraId:8,tocIndex:2},{value:": 基础用法",paraId:8,tocIndex:2},{value:"// 基本用法\nawait graph.draw();\n",paraId:9,tocIndex:2},{value:"示例 2",paraId:10,tocIndex:2},{value:": 修改节点样式后重新绘制",paraId:10,tocIndex:2},{value:"// 修改节点样式后重新绘制\ngraph.updateNodeData([\n  {\n    id: 'node1',\n    style: {\n      fill: 'red',\n      stroke: 'blue',\n      lineWidth: 2,\n    },\n  },\n]);\n\n// 仅绘制更新后的样式，不重新布局\nawait graph.draw();\n",paraId:11,tocIndex:2},{value:"示例 3",paraId:12,tocIndex:2},{value:": 批量更新多个元素后一次性绘制",paraId:12,tocIndex:2},{value:"// 更新多个节点\ngraph.updateNodeData([{ id: 'node1', style: { fill: 'red' } }]);\ngraph.updateNodeData([{ id: 'node2', style: { fill: 'blue' } }]);\n\n// 更新边\ngraph.updateEdgeData([{ id: 'edge1', style: { stroke: 'green' } }]);\n\n// 批量操作完成后绘制\nawait graph.draw();\n",paraId:13,tocIndex:2},{value:"示例 4",paraId:14,tocIndex:2},{value:": 使用事件监听绘制完成",paraId:14,tocIndex:2},{value:"import { GraphEvent } from '@antv/g6';\n\ngraph.on(GraphEvent.AFTER_DRAW, () => {\n  console.log('绘制完成');\n});\n\nawait graph.draw();\n",paraId:15,tocIndex:2},{value:"执行完整的渲染流程，包括数据处理、布局计算和绘制。",paraId:16,tocIndex:3},{value:"render(): Promise<void>;\n",paraId:17,tocIndex:3},{value:"说明",paraId:18,tocIndex:3},{value:"render",paraId:19,tocIndex:3},{value:" 方法会执行完整的渲染流程：",paraId:19,tocIndex:3},{value:"处理数据更新",paraId:20,tocIndex:3},{value:"绘制元素到画布上",paraId:20,tocIndex:3},{value:"执行布局算法",paraId:20,tocIndex:3},{value:"示例 1",paraId:21,tocIndex:3},{value:": 基本用法",paraId:21,tocIndex:3},{value:"// 基本用法\nawait graph.render();\n",paraId:22,tocIndex:3},{value:"示例 2",paraId:23,tocIndex:3},{value:": 添加新数据后渲染",paraId:23,tocIndex:3},{value:"graph.addData({\n  nodes: [{ id: 'node3' }, { id: 'node4' }],\n  edges: [{ id: 'edge2', source: 'node1', target: 'node3' }],\n});\nawait graph.render();\n",paraId:24,tocIndex:3},{value:"示例 3",paraId:25,tocIndex:3},{value:": 监听渲染事件",paraId:25,tocIndex:3},{value:"import { GraphEvent } from '@antv/g6';\n\n// 渲染开始前\ngraph.on(GraphEvent.BEFORE_RENDER, () => {\n  console.log('渲染开始...');\n  // 显示加载指示器\n  showLoadingIndicator();\n});\n\n// 渲染完成后\ngraph.on(GraphEvent.AFTER_RENDER, () => {\n  console.log('渲染完成');\n  // 隐藏加载指示器\n  hideLoadingIndicator();\n});\n\ngraph.render();\n",paraId:26,tocIndex:3},{value:"清空画布上的所有元素，包括节点、边和其他图形元素。",paraId:27,tocIndex:4},{value:"clear(): Promise<void>;\n",paraId:28,tocIndex:4},{value:"说明",paraId:29,tocIndex:4},{value:"此方法会删除图中的所有元素，但保留画布配置和样式。这是一个异步方法，返回一个 Promise。",paraId:30,tocIndex:4},{value:"示例",paraId:31,tocIndex:4},{value:"// 基本用法\nawait graph.clear();\n",paraId:32,tocIndex:4},{value:"使用 ",paraId:33,tocIndex:6},{value:"draw()",paraId:33,tocIndex:6},{value:" 当:\n",paraId:33,tocIndex:6},{value:"仅修改了元素样式或状态，不需要重新计算位置",paraId:34,tocIndex:6},{value:"性能敏感，希望避免不必要的布局计算",paraId:34,tocIndex:6},{value:"使用 ",paraId:33,tocIndex:6},{value:"render()",paraId:33,tocIndex:6},{value:" 当:\n",paraId:33,tocIndex:6},{value:"初始化图表",paraId:35,tocIndex:6},{value:"更改了布局配置",paraId:35,tocIndex:6},{value:"添加或删除了大量节点/边",paraId:35,tocIndex:6},{value:"需要重新计算所有元素位置",paraId:35,tocIndex:6}]},80464:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(36434);const d=[{value:"获取主题",paraId:0,tocIndex:1},{value:"getTheme(): ThemeOptions;\n",paraId:1,tocIndex:1},{value:"相关参数",paraId:2},{value:"返回值",paraId:3,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"类型：",paraId:4,tocIndex:1},{value:" false | 'light' | 'dark' | string",paraId:4,tocIndex:1},{value:"描述：",paraId:5,tocIndex:1},{value:" 当前主题",paraId:5,tocIndex:1},{value:"设置主题",paraId:6,tocIndex:2},{value:"setTheme(theme: ThemeOptions | ((prev: ThemeOptions) => ThemeOptions)): void;\n",paraId:7,tocIndex:2},{value:"示例",paraId:8,tocIndex:2},{value:"graph.setTheme('dark');\n",paraId:9,tocIndex:2},{value:"相关参数",paraId:2},{value:"参数",paraId:10,tocIndex:2},{value:"类型",paraId:11,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"theme",paraId:13,tocIndex:2},{value:"false | 'light' | 'dark' | string | ((prev: false | 'light' | 'dark' | string) => false | 'light' | 'dark' | string)",paraId:14,tocIndex:2},{value:"主题名",paraId:15,tocIndex:2},{value:"返回值",paraId:16,tocIndex:2},{value:"：",paraId:16,tocIndex:2},{value:"类型：",paraId:17,tocIndex:2},{value:" void",paraId:17,tocIndex:2}]},88261:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78237);const d=[{value:"数据处理",paraId:0,tocIndex:0},{value:"（Transform）是 G6 中一项强大的功能，允许在图渲染过程中对数据进行处理和转换。通过数据处理器，您可以实现各种数据处理需求，比如：",paraId:1,tocIndex:0},{value:"数据过滤：根据条件筛选需要显示的节点和边",paraId:2,tocIndex:0},{value:"数据计算：基于原始数据生成新的属性，如根据节点连接数计算节点大小，但不污染原始数据",paraId:2,tocIndex:0},{value:"数据聚合：将大量节点聚合为少量节点，提高大规模图表的性能",paraId:2,tocIndex:0},{value:"数据处理发生在渲染流程的特定阶段，可以灵活地改变最终呈现的结果，而无需修改原始数据源。",paraId:3,tocIndex:0},{value:"获取当前图表中所有已配置的数据处理器。",paraId:4,tocIndex:2},{value:"getTransforms(): TransformOptions;\n",paraId:5,tocIndex:2},{value:"返回值",paraId:6,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:": ",paraId:7,tocIndex:2},{value:"TransformOptions",paraId:8,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:": 当前图表中已配置的所有数据处理器",paraId:7,tocIndex:2},{value:"示例",paraId:9,tocIndex:2},{value:"// 获取当前所有数据处理器\nconst transforms = graph.getTransforms();\nconsole.log('当前图表的数据处理器:', transforms);\n",paraId:10,tocIndex:2},{value:"设置图表的数据处理器，将替换所有现有的数据处理器。",paraId:11,tocIndex:3},{value:"setTransforms(transforms: TransformOptions | ((prev: TransformOptions) => TransformOptions)): void;\n",paraId:12,tocIndex:3},{value:"参数",paraId:13,tocIndex:3},{value:"参数",paraId:14,tocIndex:3},{value:"描述",paraId:14,tocIndex:3},{value:"类型",paraId:14,tocIndex:3},{value:"默认值",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"transforms",paraId:14,tocIndex:3},{value:"新的数据处理器配置，或一个基于当前配置返回新配置的函数",paraId:14,tocIndex:3},{value:"TransformOptions",paraId:15,tocIndex:3},{value:" | (prev: TransformOptions) => TransformOptions",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"说明",paraId:16,tocIndex:3},{value:"数据处理器能够在图渲染过程的不同阶段对数据进行处理。设置的数据处理会全量替换原有的数据处理，如果需要在现有数据处理基础上添加新的数据处理，可以使用函数式更新方式。",paraId:17,tocIndex:3},{value:"示例 1",paraId:18,tocIndex:3},{value:": 设置基本数据处理",paraId:18,tocIndex:3},{value:"graph.setTransforms(['process-parallel-edges', 'map-node-size']);\n",paraId:19,tocIndex:3},{value:"示例 2",paraId:20,tocIndex:3},{value:": 设置带配置的数据处理",paraId:20,tocIndex:3},{value:"graph.setTransforms([\n  // 字符串形式（使用默认配置）\n  'process-parallel-edges',\n\n  // 对象形式（自定义配置）\n  {\n    type: 'process-parallel-edges',\n    key: 'my-process-parallel-edges',\n    distance: 20, // 平行边之间的距离\n  },\n]);\n",paraId:21,tocIndex:3},{value:"示例 3",paraId:22,tocIndex:3},{value:": 使用函数式更新",paraId:22,tocIndex:3},{value:"// 添加新的数据处理到现有配置\ngraph.setTransforms((currentTransforms) => [\n  ...currentTransforms,\n  {\n    type: 'map-node-size',\n    key: 'my-map-node-size',\n    maxSize: 100,\n    minSize: 20,\n  },\n]);\n",paraId:23,tocIndex:3},{value:"更新指定的数据处理器配置，需要通过 ",paraId:24,tocIndex:4},{value:"key",paraId:24,tocIndex:4},{value:" 标识要更新的数据处理。",paraId:24,tocIndex:4},{value:"updateTransform(transform: UpdateTransformOption): void;\n",paraId:25,tocIndex:4},{value:"参数",paraId:26,tocIndex:4},{value:"参数",paraId:27,tocIndex:4},{value:"描述",paraId:27,tocIndex:4},{value:"类型",paraId:27,tocIndex:4},{value:"默认值",paraId:27,tocIndex:4},{value:"必选",paraId:27,tocIndex:4},{value:"transform",paraId:27,tocIndex:4},{value:"更新的数据处理配置",paraId:27,tocIndex:4},{value:"UpdateTransformOption",paraId:28,tocIndex:4},{value:"-",paraId:27,tocIndex:4},{value:"✓",paraId:27,tocIndex:4},{value:"说明",paraId:29,tocIndex:4},{value:"如果要更新一个数据处理器，必须在原始数据处理配置中指定 ",paraId:30,tocIndex:4},{value:"key",paraId:30,tocIndex:4},{value:" 字段，以便能够准确找到并更新该数据处理。",paraId:30,tocIndex:4},{value:"示例",paraId:31,tocIndex:4},{value:": 更新数据处理配置",paraId:31,tocIndex:4},{value:"// 初始设置数据处理时指定 key\ngraph.setTransforms([\n  {\n    type: 'process-parallel-edges',\n    key: 'my-process-parallel-edges',\n    distance: 20,\n  },\n]);\n\n// 更新平行边距离\ngraph.updateTransform({\n  key: 'my-process-parallel-edges',\n  distance: 30,\n});\n",paraId:32,tocIndex:4},{value:"数据处理器配置类型，表示一组数据处理配置的数组。",paraId:33,tocIndex:6},{value:"type TransformOptions = (CustomTransformOption | ((this: Graph) => CustomTransformOption))[];\n",paraId:34,tocIndex:6},{value:"自定义数据处理配置接口，用于配置数据处理参数。",paraId:35,tocIndex:7},{value:"type CustomTransformOption = {\n  // 数据处理类型\n  type: string;\n\n  // 数据处理唯一标识\n  key?: string;\n\n  // 针对不同类型的数据处理，还可能有其他配置项\n  [configKey: string]: any;\n};\n",paraId:36,tocIndex:7},{value:"更新数据处理的配置接口，用于动态修改数据处理参数。",paraId:37,tocIndex:8},{value:"type UpdateTransformOption = {\n  // 要更新的数据处理的唯一标识\n  key: string;\n\n  // 其他要更新的配置项\n  [configKey: string]: unknown;\n};\n",paraId:38,tocIndex:8}]},55468:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(41190);const d=[{value:"G6 提供了一系列视口操作 API，用于控制画布的缩放、平移和旋转。这些操作可以帮助用户更好地查看和交互图形内容。通过视口操作，你可以实现以下功能：",paraId:0,tocIndex:0},{value:"缩放画布以查看细节或全局视图",paraId:1,tocIndex:0},{value:"平移画布以查看不同区域",paraId:1,tocIndex:0},{value:"旋转画布以获得不同视角",paraId:1,tocIndex:0},{value:"自动适配内容到视口",paraId:1,tocIndex:0},{value:"G6 的视口操作主要分为以下几类：",paraId:2,tocIndex:1},{value:"缩放操作",paraId:3,tocIndex:1},{value:"：如 ",paraId:3,tocIndex:1},{value:"zoomTo",paraId:3,tocIndex:1},{value:"、",paraId:3,tocIndex:1},{value:"zoomBy",paraId:3,tocIndex:1},{value:"平移操作",paraId:3,tocIndex:1},{value:"：如 ",paraId:3,tocIndex:1},{value:"translateTo",paraId:3,tocIndex:1},{value:"、",paraId:3,tocIndex:1},{value:"translateBy",paraId:3,tocIndex:1},{value:"旋转操作",paraId:3,tocIndex:1},{value:"：如 ",paraId:3,tocIndex:1},{value:"rotateTo",paraId:3,tocIndex:1},{value:"、",paraId:3,tocIndex:1},{value:"rotateBy",paraId:3,tocIndex:1},{value:"自适应操作",paraId:3,tocIndex:1},{value:"：如 ",paraId:3,tocIndex:1},{value:"fitView",paraId:3,tocIndex:1},{value:"、",paraId:3,tocIndex:1},{value:"fitCenter",paraId:3,tocIndex:1},{value:"视口信息获取",paraId:3,tocIndex:1},{value:"：如 ",paraId:3,tocIndex:1},{value:"getZoom",paraId:3,tocIndex:1},{value:"、",paraId:3,tocIndex:1},{value:"getPosition",paraId:3,tocIndex:1},{value:"缩放画布至指定比例（绝对缩放）。",paraId:4,tocIndex:3},{value:"zoomTo(zoom: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:5,tocIndex:3},{value:"参数",paraId:6,tocIndex:3},{value:"参数",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"必选",paraId:7,tocIndex:3},{value:"zoom",paraId:7,tocIndex:3},{value:"目标缩放比例 (1 = 原始大小, >1 放大, <1 缩小)",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"✓",paraId:7,tocIndex:3},{value:"animation",paraId:7,tocIndex:3},{value:"动画配置",paraId:7,tocIndex:3},{value:"ViewportAnimationEffectTiming",paraId:8,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"origin",paraId:7,tocIndex:3},{value:"缩放中心点(视口坐标)",paraId:7,tocIndex:3},{value:"Point",paraId:9,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"示例",paraId:10,tocIndex:3},{value:"// 放大到2倍\ngraph.zoomTo(2);\n\n// 带动画效果的缩小到0.5倍\ngraph.zoomTo(0.5, {\n  duration: 500,\n  easing: 'ease',\n});\n\n// 以视口中心点为原点放大\ngraph.zoomTo(1.5, false, graph.getCanvasCenter());\n",paraId:11,tocIndex:3},{value:"基于当前缩放比例进行缩放（相对缩放）。",paraId:12,tocIndex:4},{value:"zoomBy(ratio: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:13,tocIndex:4},{value:"参数",paraId:14,tocIndex:4},{value:"参数",paraId:15,tocIndex:4},{value:"描述",paraId:15,tocIndex:4},{value:"类型",paraId:15,tocIndex:4},{value:"默认值",paraId:15,tocIndex:4},{value:"必选",paraId:15,tocIndex:4},{value:"ratio",paraId:15,tocIndex:4},{value:"缩放比例 (>1 放大, <1 缩小)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"✓",paraId:15,tocIndex:4},{value:"animation",paraId:15,tocIndex:4},{value:"动画配置",paraId:15,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:16,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"origin",paraId:15,tocIndex:4},{value:"缩放中心点(视口坐标)",paraId:15,tocIndex:4},{value:"Point",paraId:17,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"示例",paraId:18,tocIndex:4},{value:"// 在当前比例基础上放大1.2倍\ngraph.zoomBy(1.2);\n\n// 在当前比例基础上缩小到0.8倍，带动画\ngraph.zoomBy(0.8, {\n  duration: 300,\n});\n",paraId:19,tocIndex:4},{value:"将图平移至指定位置（绝对平移）。",paraId:20,tocIndex:5},{value:"translateTo(position: Point, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:21,tocIndex:5},{value:"参数",paraId:22,tocIndex:5},{value:"参数",paraId:23,tocIndex:5},{value:"描述",paraId:23,tocIndex:5},{value:"类型",paraId:23,tocIndex:5},{value:"默认值",paraId:23,tocIndex:5},{value:"必选",paraId:23,tocIndex:5},{value:"position",paraId:23,tocIndex:5},{value:"目标位置坐标",paraId:23,tocIndex:5},{value:"Point",paraId:24,tocIndex:5},{value:"-",paraId:23,tocIndex:5},{value:"✓",paraId:23,tocIndex:5},{value:"animation",paraId:23,tocIndex:5},{value:"动画配置",paraId:23,tocIndex:5},{value:"ViewportAnimationEffectTiming",paraId:25,tocIndex:5},{value:"-",paraId:23,tocIndex:5},{value:"示例",paraId:26,tocIndex:5},{value:"// 平移到指定位置\ngraph.translateTo([100, 100]);\n\n// 带动画效果的平移\ngraph.translateTo([200, 200], {\n  duration: 1000,\n  easing: 'ease-in-out',\n});\n",paraId:27,tocIndex:5},{value:"将图相对当前位置平移指定距离（相对平移）。",paraId:28,tocIndex:6},{value:"translateBy(offset: Point, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:29,tocIndex:6},{value:"参数",paraId:30,tocIndex:6},{value:"参数",paraId:31,tocIndex:6},{value:"描述",paraId:31,tocIndex:6},{value:"类型",paraId:31,tocIndex:6},{value:"默认值",paraId:31,tocIndex:6},{value:"必选",paraId:31,tocIndex:6},{value:"offset",paraId:31,tocIndex:6},{value:"平移偏移量",paraId:31,tocIndex:6},{value:"Point",paraId:32,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"✓",paraId:31,tocIndex:6},{value:"animation",paraId:31,tocIndex:6},{value:"动画配置",paraId:31,tocIndex:6},{value:"ViewportAnimationEffectTiming",paraId:33,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"示例",paraId:34,tocIndex:6},{value:"// 向右平移100像素，向下平移50像素\ngraph.translateBy([100, 50]);\n\n// 带动画效果的相对平移\ngraph.translateBy([-50, -50], {\n  duration: 500,\n});\n",paraId:35,tocIndex:6},{value:"旋转画布至指定角度（绝对旋转）。",paraId:36,tocIndex:7},{value:"rotateTo(angle: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:37,tocIndex:7},{value:"参数",paraId:38,tocIndex:7},{value:"参数",paraId:39,tocIndex:7},{value:"描述",paraId:39,tocIndex:7},{value:"类型",paraId:39,tocIndex:7},{value:"默认值",paraId:39,tocIndex:7},{value:"必选",paraId:39,tocIndex:7},{value:"angle",paraId:39,tocIndex:7},{value:"目标旋转角度(弧度制)",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"✓",paraId:39,tocIndex:7},{value:"animation",paraId:39,tocIndex:7},{value:"动画配置",paraId:39,tocIndex:7},{value:"ViewportAnimationEffectTiming",paraId:40,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"origin",paraId:39,tocIndex:7},{value:"旋转中心点(视口坐标)",paraId:39,tocIndex:7},{value:"Point",paraId:41,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"示例",paraId:42,tocIndex:7},{value:"// 旋转到45度\ngraph.rotateTo(Math.PI / 4);\n\n// 带动画效果的旋转到90度\ngraph.rotateTo(Math.PI / 2, {\n  duration: 1000,\n});\n",paraId:43,tocIndex:7},{value:"基于当前角度进行旋转（相对旋转）。",paraId:44,tocIndex:8},{value:"rotateBy(angle: number, animation?: ViewportAnimationEffectTiming, origin?: Point): Promise<void>;\n",paraId:45,tocIndex:8},{value:"参数",paraId:46,tocIndex:8},{value:"参数",paraId:47,tocIndex:8},{value:"描述",paraId:47,tocIndex:8},{value:"类型",paraId:47,tocIndex:8},{value:"默认值",paraId:47,tocIndex:8},{value:"必选",paraId:47,tocIndex:8},{value:"angle",paraId:47,tocIndex:8},{value:"旋转角度增量(弧度制)",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"✓",paraId:47,tocIndex:8},{value:"animation",paraId:47,tocIndex:8},{value:"动画配置",paraId:47,tocIndex:8},{value:"ViewportAnimationEffectTiming",paraId:48,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"origin",paraId:47,tocIndex:8},{value:"旋转中心点(视口坐标)",paraId:47,tocIndex:8},{value:"Point",paraId:49,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"示例",paraId:50,tocIndex:8},{value:"// 相对当前角度顺时针旋转30度\ngraph.rotateBy(Math.PI / 6);\n\n// 带动画效果的相对旋转\ngraph.rotateBy(-Math.PI / 4, {\n  duration: 500,\n  easing: 'ease-out',\n});\n",paraId:51,tocIndex:8},{value:"将图缩放至合适大小并平移至视口中心。",paraId:52,tocIndex:9},{value:"fitView(options?: FitViewOptions, animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:53,tocIndex:9},{value:"参数",paraId:54,tocIndex:9},{value:"参数",paraId:55,tocIndex:9},{value:"描述",paraId:55,tocIndex:9},{value:"类型",paraId:55,tocIndex:9},{value:"默认值",paraId:55,tocIndex:9},{value:"必选",paraId:55,tocIndex:9},{value:"options",paraId:55,tocIndex:9},{value:"适配选项",paraId:55,tocIndex:9},{value:"FitViewOptions",paraId:55,tocIndex:9},{value:"-",paraId:55,tocIndex:9},{value:"animation",paraId:55,tocIndex:9},{value:"动画配置",paraId:55,tocIndex:9},{value:"ViewportAnimationEffectTiming",paraId:56,tocIndex:9},{value:"-",paraId:55,tocIndex:9},{value:"FitViewOptions 类型说明",paraId:57,tocIndex:9},{value:"属性",paraId:58,tocIndex:9},{value:"类型",paraId:58,tocIndex:9},{value:"默认值",paraId:58,tocIndex:9},{value:"描述",paraId:58,tocIndex:9},{value:"when",paraId:58,tocIndex:9},{value:"'overflow' | 'always'",paraId:58,tocIndex:9},{value:"'overflow'",paraId:58,tocIndex:9},{value:"适配时机：仅溢出时或始终适配",paraId:58,tocIndex:9},{value:"direction",paraId:58,tocIndex:9},{value:"'x' | 'y' | 'both'",paraId:58,tocIndex:9},{value:"'both'",paraId:58,tocIndex:9},{value:"适配方向：x轴、y轴或两个方向",paraId:58,tocIndex:9},{value:"示例",paraId:59,tocIndex:9},{value:"// 基本使用\ngraph.fitView();\n\n// 配置适配选项\ngraph.fitView(\n  {\n    when: 'always', // 始终进行适配\n    direction: 'both', // 在两个方向上适配\n  },\n  {\n    duration: 1000, // 带动画效果\n  },\n);\n\n// 仅在内容溢出时适配x方向\ngraph.fitView({\n  when: 'overflow',\n  direction: 'x',\n});\n",paraId:60,tocIndex:9},{value:"将图平移至视口中心。",paraId:61,tocIndex:10},{value:"fitCenter(animation?: ViewportAnimationEffectTiming): Promise<void>;\n",paraId:62,tocIndex:10},{value:"参数",paraId:63,tocIndex:10},{value:"参数",paraId:64,tocIndex:10},{value:"描述",paraId:64,tocIndex:10},{value:"类型",paraId:64,tocIndex:10},{value:"默认值",paraId:64,tocIndex:10},{value:"必选",paraId:64,tocIndex:10},{value:"animation",paraId:64,tocIndex:10},{value:"动画配置",paraId:64,tocIndex:10},{value:"ViewportAnimationEffectTiming",paraId:65,tocIndex:10},{value:"-",paraId:64,tocIndex:10},{value:"示例",paraId:66,tocIndex:10},{value:"// 居中显示\ngraph.fitCenter();\n\n// 带动画效果的居中\ngraph.fitCenter({\n  duration: 500,\n  easing: 'ease-in',\n});\n",paraId:67,tocIndex:10},{value:"获取当前缩放比例。",paraId:68,tocIndex:11},{value:"getZoom(): number;\n",paraId:69,tocIndex:11},{value:"示例",paraId:70,tocIndex:11},{value:"const currentZoom = graph.getZoom();\nconsole.log('当前缩放比例:', currentZoom);\n",paraId:71,tocIndex:11},{value:"获取图的位置（画布原点在视口坐标系下的位置）。",paraId:72,tocIndex:12},{value:"getPosition(): Point;\n",paraId:73,tocIndex:12},{value:"示例",paraId:74,tocIndex:12},{value:"const position = graph.getPosition();\nconsole.log('当前位置:', position);\n",paraId:75,tocIndex:12},{value:"获取当前旋转角度。",paraId:76,tocIndex:13},{value:"getRotation(): number;\n",paraId:77,tocIndex:13},{value:"示例",paraId:78,tocIndex:13},{value:"const rotation = graph.getRotation();\nconsole.log('当前旋转角度(弧度):', rotation);\nconsole.log('当前旋转角度(度):', (rotation * 180) / Math.PI);\n",paraId:79,tocIndex:13},{value:"获取视口中心的视口坐标。",paraId:80,tocIndex:14},{value:"getCanvasCenter(): Point;\n",paraId:81,tocIndex:14},{value:"示例",paraId:82,tocIndex:14},{value:"const center = graph.getCanvasCenter();\nconsole.log('视口中心坐标:', center);\n",paraId:83,tocIndex:14},{value:"获取视口中心的画布坐标。",paraId:84,tocIndex:15},{value:"getViewportCenter(): Point;\n",paraId:85,tocIndex:15},{value:"示例",paraId:86,tocIndex:15},{value:"const viewportCenter = graph.getViewportCenter();\nconsole.log('视口中心的画布坐标:', viewportCenter);\n",paraId:87,tocIndex:15},{value:"设置当前图的缩放区间。",paraId:88,tocIndex:16},{value:"setZoomRange(zoomRange: [number, number]): void;\n",paraId:89,tocIndex:16},{value:"参数",paraId:90,tocIndex:16},{value:"参数",paraId:91,tocIndex:16},{value:"描述",paraId:91,tocIndex:16},{value:"类型",paraId:91,tocIndex:16},{value:"默认值",paraId:91,tocIndex:16},{value:"必选",paraId:91,tocIndex:16},{value:"zoomRange",paraId:91,tocIndex:16},{value:"缩放区间",paraId:91,tocIndex:16},{value:"[number, number] | undefined",paraId:91,tocIndex:16},{value:"-",paraId:91,tocIndex:16},{value:"✓",paraId:91,tocIndex:16},{value:"示例",paraId:92,tocIndex:16},{value:"// 限制缩放范围在0.5到2倍之间\ngraph.setZoomRange([0.5, 2]);\n\n// 移除缩放限制\ngraph.setZoomRange(undefined);\n",paraId:93,tocIndex:16},{value:"获取当前图的缩放区间。",paraId:94,tocIndex:17},{value:"getZoomRange(): GraphOptions['zoomRange'];\n",paraId:95,tocIndex:17},{value:"示例",paraId:96,tocIndex:17},{value:"const range = graph.getZoomRange();\nconsole.log('当前缩放区间:', range);\n",paraId:97,tocIndex:17},{value:"调整画布大小为图容器大小。",paraId:98,tocIndex:18},{value:"resize(): void;\n",paraId:99,tocIndex:18},{value:"调整画布大小为指定宽高。",paraId:100,tocIndex:19},{value:"resize(width: number, height: number): void;\n",paraId:101,tocIndex:19},{value:"参数",paraId:102,tocIndex:19},{value:"参数",paraId:103,tocIndex:19},{value:"描述",paraId:103,tocIndex:19},{value:"类型",paraId:103,tocIndex:19},{value:"默认值",paraId:103,tocIndex:19},{value:"必选",paraId:103,tocIndex:19},{value:"width",paraId:103,tocIndex:19},{value:"目标宽度",paraId:103,tocIndex:19},{value:"number",paraId:103,tocIndex:19},{value:"-",paraId:103,tocIndex:19},{value:"✓",paraId:103,tocIndex:19},{value:"height",paraId:103,tocIndex:19},{value:"目标高度",paraId:103,tocIndex:19},{value:"number",paraId:103,tocIndex:19},{value:"-",paraId:103,tocIndex:19},{value:"✓",paraId:103,tocIndex:19},{value:"示例",paraId:104,tocIndex:19},{value:"// 设置画布大小为800x600\ngraph.resize(800, 600);\n",paraId:105,tocIndex:19},{value:"视口动画配置类型。",paraId:106,tocIndex:21},{value:"type ViewportAnimationEffectTiming =\n  | boolean // 是否启用动画\n  | {\n      easing?: string; // 缓动函数\n      duration?: number; // 动画持续时间(ms)\n    };\n",paraId:107,tocIndex:21},{value:"坐标点类型。",paraId:108,tocIndex:22},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:109,tocIndex:22},{value:"视图适配选项。",paraId:110,tocIndex:23},{value:"interface FitViewOptions {\n  when?: 'overflow' | 'always'; // 适配时机\n  direction?: 'x' | 'y' | 'both'; // 适配方向\n}\n",paraId:111,tocIndex:23}]},93249:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(57647);const d=[{value:"Required",paraId:0,tocIndex:0},{value:"camera-setting",paraId:1,tocIndex:1},{value:" | string",paraId:1,tocIndex:1},{value:"⚠️ ",paraId:2,tocIndex:1},{value:"注意",paraId:2,tocIndex:1},{value:"：",paraId:2,tocIndex:1},{value:"相机设置插件必须在 3D 场景下使用",paraId:3,tocIndex:1},{value:"此插件在使用前需要自行注册：",paraId:3,tocIndex:1},{value:"import { register, CameraSetting, ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.PLUGIN, 'camera-setting', CameraSetting); // type: 'camera-setting'\n",paraId:4,tocIndex:1},{value:"number | ",paraId:5,tocIndex:2},{value:"'auto'",paraId:5,tocIndex:2},{value:"相机视口宽高比，仅在透视相机下有效",paraId:6,tocIndex:2},{value:"number : 具体的宽高比",paraId:7,tocIndex:2},{value:"'auto'",paraId:8,tocIndex:2},{value:" : 自动设置为画布的宽高比",paraId:8,tocIndex:2},{value:"number",paraId:9,tocIndex:3},{value:"方位角",paraId:10,tocIndex:3},{value:"'orbiting' | 'exploring' | 'tracking'",paraId:11,tocIndex:4},{value:"相机类型",paraId:12,tocIndex:4},{value:"'orbiting'",paraId:13,tocIndex:4},{value:": 固定视点，改变相机位置",paraId:13,tocIndex:4},{value:"'exploring'",paraId:13,tocIndex:4},{value:": 类似 orbiting，但允许相机在北极和南极之间旋转",paraId:13,tocIndex:4},{value:"'tracking'",paraId:13,tocIndex:4},{value:": 固定相机位置，改变视点",paraId:13,tocIndex:4},{value:"number",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"Default:",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"500",paraId:14,tocIndex:5},{value:"相机距离目标的距离",paraId:15,tocIndex:5},{value:"number",paraId:16,tocIndex:6},{value:"仰角",paraId:17,tocIndex:6},{value:"number",paraId:18,tocIndex:7},{value:"远平面位置",paraId:19,tocIndex:7},{value:"number",paraId:20,tocIndex:8},{value:"相机视角，仅在透视相机下有效",paraId:21,tocIndex:8},{value:"number",paraId:22,tocIndex:9},{value:"最大视距",paraId:23,tocIndex:9},{value:"number",paraId:24,tocIndex:10},{value:"最小视距",paraId:25,tocIndex:10},{value:"number",paraId:26,tocIndex:11},{value:"近平面位置",paraId:27,tocIndex:11},{value:"'perspective' | 'orthographic'",paraId:28,tocIndex:12},{value:"投影模式，透视投影仅在 3D 场景下有效",paraId:29,tocIndex:12},{value:"'perspective'",paraId:30,tocIndex:12},{value:" : 透视投影",paraId:30,tocIndex:12},{value:"'orthographic'",paraId:30,tocIndex:12},{value:" : 正交投影",paraId:30,tocIndex:12},{value:"number",paraId:31,tocIndex:13},{value:"滚转角",paraId:32,tocIndex:13}]},21219:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91067);const d=[{value:"动画是指元素在一段时间内的状态变化，例如节点的位置、大小、颜色等。在 G6 中，动画通常用于增强用户体验，提升图更新过程的连贯性和流畅度。",paraId:0,tocIndex:0},{value:"G6 提供了一套动画范式来描述元素动画，并内置了一些常用的动画效果，用户可以通过配置动画参数来实现不同的动画效果。",paraId:1,tocIndex:0},{value:"一个动画范式的实现如下：",paraId:2,tocIndex:0},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n];\n",paraId:3,tocIndex:0},{value:"上述动画范式表示当元素的 ",paraId:4,tocIndex:0},{value:"x",paraId:4,tocIndex:0},{value:" 和 ",paraId:4,tocIndex:0},{value:"y",paraId:4,tocIndex:0},{value:" 属性发生变化时，会执行动画。",paraId:4,tocIndex:0},{value:"G6 中动画配置分为全局配置和局部配置，全局配置主要用于配置全局是否开启动画、动画时长等参数，局部配置主要用于配置元素的动画效果。",paraId:5,tocIndex:1},{value:"若要关闭全局动画，可以在实例化 ",paraId:6,tocIndex:2},{value:"Graph",paraId:6,tocIndex:2},{value:" 时传入 ",paraId:6,tocIndex:2},{value:"animation",paraId:6,tocIndex:2},{value:" 配置项：",paraId:6,tocIndex:2},{value:"{\n  animation: false,\n}\n",paraId:7,tocIndex:2},{value:"如果要启用动画且同时配置动画的默认播放时长，可以传入 ",paraId:8,tocIndex:3},{value:"animation",paraId:8,tocIndex:3},{value:" 配置项：",paraId:8,tocIndex:3},{value:"{\n  animation: {\n    duration: 500,\n  },\n}\n",paraId:9,tocIndex:3},{value:"对于单个元素，可以配置其在不同阶段的动画。例如希望元素在进场和退场时具有淡入淡出效果，可以以如下方式配置：",paraId:10,tocIndex:4},{value:"{\n  node: {\n    animation: {\n      enter: 'fade',\n      exit: 'fade'\n    }\n  }\n}\n",paraId:11,tocIndex:4},{value:"如果希望更新元素位置时是以平移过渡的方式，可以配置如下：",paraId:12,tocIndex:4},{value:"{\n  node: {\n    animation: {\n      update: 'translate',\n    }\n  }\n}\n",paraId:13,tocIndex:4},{value:"如果希望关闭元素的动画，可以配置如下：",paraId:14,tocIndex:4},{value:"{\n  node: {\n    animation: false,\n  }\n}\n",paraId:15,tocIndex:4},{value:"上一节中提到的动画配置实际上使用了内置的动画范式，本节介绍如何自定义动画范式。",paraId:16,tocIndex:5},{value:"在编写动画范式之前需要了解元素的组成结构，具体请参考",paraId:17},{value:"元素",paraId:18},{value:"一节",paraId:17},{value:"元素",paraId:19},{value:"一节中提到：G6 中的元素是由一个或多个原子图形组合而成。因此元素的动画本质上是这些原子图形动画的组合。",paraId:20},{value:"因此动画范式是一个数组，用于描述元素中各原子图形的动画效果。对于元素本身来说，其也是一个特殊的复合图形，因此具有基本的图形属性，如 ",paraId:21},{value:"x",paraId:21},{value:"、",paraId:21},{value:"y",paraId:21},{value:" 等。",paraId:21},{value:"因此可以直接为元素本身编写动画范式：",paraId:22},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n];\n",paraId:23},{value:"如果内置动画无法满足需求，可以自定义动画，具体请参考",paraId:24,tocIndex:6},{value:"自定义动画",paraId:25,tocIndex:6},{value:"。",paraId:24,tocIndex:6},{value:"动画优先级是指全局动画配置和元素动画配置之前的优先级，可以归纳如下：",paraId:26,tocIndex:7},{value:"全局动画配置",paraId:27,tocIndex:7},{value:"局部动画配置",paraId:27,tocIndex:7},{value:"是否执行动画",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ 执行动画，以默认动画配置执行",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ 不执行该类元素动画",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"✅ 执行动画，以局部动画配置执行",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"❌ 不执行任何动画",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ 不执行任何动画",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"❌ 不执行任何动画",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"✅ true",paraId:27,tocIndex:7},{value:"✅ 执行动画，以全局动画配置执行",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"✅ 执行动画，将局部动画配置覆盖全局动画配置后执行",paraId:27,tocIndex:7},{value:"✅ 配置动画",paraId:27,tocIndex:7},{value:"❌ false",paraId:27,tocIndex:7},{value:"❌ 不执行该类元素动画",paraId:27,tocIndex:7},{value:"如果希望元素具有持续动画，例如节点的波动效果、边的蚂蚁线效果等，可以通过自定义元素方式实现，下面提供一个具有蚂蚁线(Ant Line)动画的边的实现：",paraId:28,tocIndex:8},{value:"import { Line } from '@antv/g6';\n\nclass AntLine extends Line {\n  onCreate() {\n    this.shapeMap.key.animate([{ lineDashOffset: -20 }, { lineDashOffset: 0 }], {\n      duration: 500,\n      iterations: Infinity,\n    });\n  }\n}\n",paraId:29,tocIndex:8},{value:"其中 ",paraId:30,tocIndex:8},{value:"onCreate",paraId:30,tocIndex:8},{value:" 是一个生命周期钩子，用于在元素创建时执行动画。",paraId:30,tocIndex:8},{value:"在 options 中配置边样式：",paraId:31,tocIndex:8},{value:"{\n  edge: {\n    type: 'ant-line',\n    style:{\n      lineDash: [10, 10]\n    }\n  }\n}\n",paraId:32,tocIndex:8},{value:"import { register, Line, Graph } from '@antv/g6';\n\nclass AntLine extends Line {\n  onCreate() {\n    this.shapeMap.key.animate([{ lineDashOffset: 20 }, { lineDashOffset: 0 }], {\n      duration: 500,\n      iterations: Infinity,\n    });\n  }\n}\n\nregister('edge', 'ant-line', AntLine);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 25, y: 25 } },\n      { id: 'node-2', style: { x: 175, y: 25 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2', style: { lineDash: [10, 10] } }],\n  },\n  edge: {\n    type: 'ant-line',\n  },\n});\n\ngraph.render();\n",paraId:33,tocIndex:8},{value:"其中 ",paraId:34,tocIndex:8},{value:"lineDash",paraId:34,tocIndex:8},{value:" 是 ",paraId:34,tocIndex:8},{value:"lineDashOffset",paraId:34,tocIndex:8},{value:" 的数组，通过不断变化 ",paraId:34,tocIndex:8},{value:"lineDashOffset",paraId:34,tocIndex:8},{value:" 来实现飞线效果。",paraId:34,tocIndex:8},{value:"同样的，还可以实现节点的呼吸效果：",paraId:35,tocIndex:8},{value:"import { Circle } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {}\n}\n",paraId:36,tocIndex:8},{value:"其中 ",paraId:37,tocIndex:8},{value:"lineDashOffset",paraId:37,tocIndex:8},{value:" 是 ",paraId:37,tocIndex:8},{value:"lineDash",paraId:37,tocIndex:8},{value:" 的偏移量，通过不断变化 ",paraId:37,tocIndex:8},{value:"lineDashOffset",paraId:37,tocIndex:8},{value:" 来实现飞线效果。",paraId:37,tocIndex:8},{value:"同样的，还可以实现节点的呼吸效果：",paraId:38,tocIndex:8},{value:"import { Circle } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {\n    this.shapeMap.halo.animate([{ lineWidth: 5 }, { lineWidth: 10 }], {\n      duration: 1000,\n      iterations: Infinity,\n      direction: 'alternate',\n    });\n  }\n}\n",paraId:39,tocIndex:8},{value:"节点样式配置：",paraId:40,tocIndex:8},{value:"{\n  node: {\n    type: 'breathing-circle',\n    style: {\n      halo: true,\n      haloLineWidth: 5,\n    },\n  },\n}\n",paraId:41,tocIndex:8},{value:"import { register, Circle, Graph } from '@antv/g6';\n\nclass BreathingCircle extends Circle {\n  onCreate() {\n    this.shapeMap.halo.animate([{ lineWidth: 5 }, { lineWidth: 10 }], {\n      duration: 1000,\n      iterations: Infinity,\n      direction: 'alternate',\n    });\n  }\n}\n\nregister('node', 'breathing-circle', BreathingCircle);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 50,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25 } }],\n  },\n  node: {\n    type: 'breathing-circle',\n    style: {\n      halo: true,\n      haloLineWidth: 5,\n    },\n  },\n});\n\ngraph.render();\n",paraId:42,tocIndex:8}]},94696:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(68442);const d=[{value:"对于圆形节点（Circle）元素，其主图形是一个圆形，现在为其编写一个动画，当节点的尺寸发生变化时，能够以缩放的方式进行过渡动画：",paraId:0,tocIndex:1},{value:"[\n  {\n    fields: ['r'],\n    shape: 'key',\n  },\n];\n",paraId:1,tocIndex:1},{value:"下面我们创建一个图实例并更新元素尺寸来触发更新动画：",paraId:2,tocIndex:1},{value:"const graph = new Graph({\n  container: 'container',\n  width: 50,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [{ fields: ['r'], shape: 'key' }],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\n  graph.draw();\n});\n",paraId:3,tocIndex:1},{value:"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放",paraId:4,tocIndex:1},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  width: 50,\n  height: 50,\n  container,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['r'],\n          shape: 'key',\n        },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { size: 40 } }]);\n  graph.draw();\n});\n",paraId:5,tocIndex:1},{value:"当对一个元素执行动画时，该元素会将其动画帧参数转化为其各个子图形上的动画帧参数，并执行对应的动画。",paraId:6,tocIndex:2},{value:"在上面的例子中，通过更新节点尺寸(size)，对该节点执行了动画，其动画帧参数为：",paraId:7,tocIndex:2},{value:'[{ "size": 20 }, { "size": 40 }]\n',paraId:8,tocIndex:2},{value:"节点元素拿到该属性后，将其转化为主图形（圆形）的动画帧参数：",paraId:9,tocIndex:2},{value:'[{ "r": 10 }, { "r": 20 }]\n',paraId:10,tocIndex:2},{value:"因此这里最终是对圆形执行了半径从 10 到 20 的过渡动画。",paraId:11,tocIndex:2},{value:"直接将位置变化动画和尺寸变化动画合并到一个动画范式即可得到复合动画范式：",paraId:12,tocIndex:3},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n  {\n    fields: ['r'],\n    shape: 'key',\n  },\n];\n",paraId:13,tocIndex:3},{value:"并同时更新该节点的位置和尺寸：",paraId:14,tocIndex:3},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\ngraph.draw();\n",paraId:15,tocIndex:3},{value:"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放",paraId:16,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['x', 'y'],\n        },\n        { fields: ['r'], shape: 'key' },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40 } }]);\n  graph.draw();\n});\n",paraId:17,tocIndex:3},{value:"加入颜色过渡：",paraId:18,tocIndex:3},{value:"[\n  {\n    fields: ['x', 'y'],\n  },\n  {\n    fields: ['r', 'fill'],\n    shape: 'key',\n  },\n];\n",paraId:19,tocIndex:3},{value:"执行节点更新：",paraId:20,tocIndex:3},{value:"graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\ngraph.draw();\n",paraId:21,tocIndex:3},{value:"⬇️ 指针移动至下方图中，并点击左侧播放按钮进行重新播放",paraId:22,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 25, y: 25, size: 20 } }],\n  },\n  node: {\n    animation: {\n      update: [\n        {\n          fields: ['x', 'y'],\n        },\n        { fields: ['r', 'fill'], shape: 'key' },\n      ],\n    },\n  },\n});\n\ngraph.draw().then(() => {\n  graph.updateNodeData([{ id: 'node-1', style: { x: 175, size: 40, fill: 'pink' } }]);\n  graph.draw();\n});\n",paraId:23,tocIndex:3}]},87472:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(34441);const d=[{value:"标签自适应显示是一种动态标签管理策略，旨在根据当前可视范围的空间分配、节点重要性等因素，智能调整哪些标签应显示或隐藏。通过对可视区域的实时分析，确保用户在不同的交互场景下获得最相关最清晰的信息展示，同时避免视觉过载和信息冗余。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"节点尺寸变化",paraId:2,tocIndex:1},{value:"图形缩放",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', style: { x: 200, y: 100, labelText: '短标签' } },\n        { id: 'node2', style: { x: 360, y: 100, labelText: '中等长度的标签' } },\n        { id: 'node3', style: { x: 280, y: 220, labelText: '这是一个非常非常长的标签，需要自适应显示' } },\n      ],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node2', target: 'node3' },\n      ],\n    },\n    node: {\n      style: { label: true, fill: '#7e3feb', labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'auto-adapt-label', type: 'auto-adapt-label' }],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'auto-adapt-label',\n      type: 'auto-adapt-label',\n      animation: true,\n      enable: true,\n      throttle: 100,\n      padding: 0,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'throttle', 0, 900, 100);\n    optionFolder.add(options, 'padding', 0, 20, 1);\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'auto-adapt-label',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['auto-adapt-label'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'auto-adapt-label',\n      throttle: 200, // 节流时间\n      padding: 10, // 检测重叠时的额外间距\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"auto-adapt-label",paraId:11,tocIndex:4},{value:"√",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用该交互",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"throttle",paraId:11,tocIndex:4},{value:"标签更新节流时间（ms）",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"100",paraId:11,tocIndex:4},{value:"padding",paraId:11,tocIndex:4},{value:"标签检测重叠时的额外间距",paraId:11,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:"自定义排序函数，根据元素的重要性从高到低排序，重要性越高的元素其标签显示优先级越高。一般情况下 combo > node > edge",paraId:11,tocIndex:4},{value:"(a: ElementDatum, b: ElementDatum) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"sortNode",paraId:11,tocIndex:4},{value:"根据节点的重要性从高到低排序，重要性越高的节点其标签显示优先级越高。内置几种",paraId:11,tocIndex:4},{value:"中心性算法",paraId:13,tocIndex:4},{value:"，也可以自定义排序函数。需要注意，如果设置了 ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:"，则 ",paraId:11,tocIndex:4},{value:"sortNode",paraId:11,tocIndex:4},{value:" 不会生效",paraId:11,tocIndex:4},{value:"NodeCentralityOptions",paraId:14,tocIndex:4},{value:" | (nodeA: ",paraId:11,tocIndex:4},{value:"NodeData",paraId:15,tocIndex:4},{value:", nodeB: NodeData => -1 | 0 | 1)",paraId:11,tocIndex:4},{value:"type: 'degree'",paraId:11,tocIndex:4},{value:"sortEdge",paraId:11,tocIndex:4},{value:"根据边的重要性从高到低排序，重要性越高的边其标签显示优先级越高。默认按照数据先后进行排序。需要注意，如果设置了 ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:"，则 ",paraId:11,tocIndex:4},{value:"sortEdge",paraId:11,tocIndex:4},{value:" 不会生效",paraId:11,tocIndex:4},{value:"(edgeA: ",paraId:11,tocIndex:4},{value:"EdgeData",paraId:16,tocIndex:4},{value:", edgeB: EdgeData) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"sortCombo",paraId:11,tocIndex:4},{value:"根据群组的重要性从高到低排序，重要性越高的群组其标签显示优先级越高。默认按照数据先后进行排序。需要注意，如果设置了 ",paraId:11,tocIndex:4},{value:"sort",paraId:11,tocIndex:4},{value:"，则 ",paraId:11,tocIndex:4},{value:"sortCombo",paraId:11,tocIndex:4},{value:" 不会生效",paraId:11,tocIndex:4},{value:"(comboA: ",paraId:11,tocIndex:4},{value:"ComboData",paraId:17,tocIndex:4},{value:", comboB: ComboData) => -1 | 0 | 1",paraId:11,tocIndex:4},{value:"节点中心性的度量方法",paraId:18,tocIndex:5},{value:"'degree'",paraId:19,tocIndex:5},{value:"：度中心性，通过节点的度数（连接的边的数量）来衡量其重要性。度中心性高的节点通常具有较多的直接连接，在网络中可能扮演着重要的角色",paraId:19,tocIndex:5},{value:"'betweenness'",paraId:19,tocIndex:5},{value:"：介数中心性，通过节点在所有最短路径中出现的次数来衡量其重要性。介数中心性高的节点通常在网络中起到桥梁作用，控制着信息的流动",paraId:19,tocIndex:5},{value:"'closeness'",paraId:19,tocIndex:5},{value:"：接近中心性，通过节点到其他所有节点的最短路径长度总和的倒数来衡量其重要性。接近中心性高的节点通常能够更快地到达网络中的其他节点",paraId:19,tocIndex:5},{value:"'eigenvector'",paraId:19,tocIndex:5},{value:"：特征向量中心性，通过节点与其他中心节点的连接程度来衡量其重要性。特征向量中心性高的节点通常连接着其他重要节点",paraId:19,tocIndex:5},{value:"'pagerank'",paraId:19,tocIndex:5},{value:"：PageRank 中心性，通过节点被其他节点引用的次数来衡量其重要性，常用于有向图。PageRank 中心性高的节点通常在网络中具有较高的影响力，类似于网页排名算法",paraId:19,tocIndex:5},{value:"type NodeCentralityOptions =\n  | { type: 'degree'; direction?: 'in' | 'out' | 'both' }\n  | { type: 'betweenness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'closeness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'eigenvector'; directed?: boolean }\n  | { type: 'pagerank'; epsilon?: number; linkProb?: number };\n",paraId:20,tocIndex:5}]},97821:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97668);const d=[{value:"鼠标点击拖一个框笼罩元素，框选范围内的元素会被选中。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"快速选中一批元素",paraId:2,tocIndex:1},{value:"快速取消选中一批元素",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'brush-select',\n        key: 'brush-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'brush-select',\n      type: 'brush-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      immediately: false,\n      mode: 'default',\n      state: 'selected',\n      trigger: 'shift+drag',\n    };\n    const optionFolder = gui.addFolder('BrushSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'enableElements', [\n      ['node', 'edge', 'combo'],\n      ['node', 'edge'],\n      ['node', 'combo'],\n      ['combo', 'edge'],\n      ['node'],\n      ['edge'],\n      ['combo'],\n    ]);\n    optionFolder.add(options, 'trigger', {\n      'shift+drag': ['shift'],\n      drag: [],\n    });\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']).onChange((e) => {\n      immediately.show(e === 'default');\n    });\n    const immediately = optionFolder.add(options, 'immediately');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'brush-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['brush-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select-1',\n      immediately: true, // 可以看到框框笼罩过去时，元素立即被框选了\n      trigger: ['shift', 'alt', 'control'], // 配合多种按键进行框选\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称。此插件已内置，你可以通过 ",paraId:11,tocIndex:4},{value:"type: 'brush-select'",paraId:11,tocIndex:4},{value:" 来使用它。",paraId:11,tocIndex:4},{value:"brush-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"brush-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"是否启用动画",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用框选功能",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enableElements",paraId:11,tocIndex:4},{value:"可框选的元素类型",paraId:11,tocIndex:4},{value:"( ",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:" )[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"immediately",paraId:11,tocIndex:4},{value:"是否及时框选, 仅在 ",paraId:11,tocIndex:4},{value:"框选模式 mode",paraId:13,tocIndex:4},{value:" 为 ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:" 时生效，",paraId:11,tocIndex:4},{value:"示例",paraId:14,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"mode",paraId:11,tocIndex:4},{value:"框选的选择模式，",paraId:11,tocIndex:4},{value:"示例",paraId:15,tocIndex:4},{value:"union",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"intersect",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"diff",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"onSelect",paraId:11,tocIndex:4},{value:"框选元素状态回调",paraId:11,tocIndex:4},{value:"(states:Record<string,string|string[]>) =>Record<string,string|string[]>",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"被选中时切换到该状态",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:"指定框选时的框样式，",paraId:11,tocIndex:4},{value:"配置项",paraId:16,tocIndex:4},{value:"见下文",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"按下该快捷键配合鼠标点击进行框选 ",paraId:11,tocIndex:4},{value:"按键参考：",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:" 。若设为",paraId:11,tocIndex:4},{value:"空数组",paraId:11,tocIndex:4},{value:"时则表示鼠标点击进行框选，不需要按下其他按键配合 ",paraId:11,tocIndex:4},{value:" ⚠️ 注意，",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:" 设置为 ",paraId:11,tocIndex:4},{value:"['drag']",paraId:11,tocIndex:4},{value:" 时会导致 ",paraId:11,tocIndex:4},{value:"drag-canvas",paraId:11,tocIndex:4},{value:" 行为失效。两者不可同时配置。",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"shift",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"是否及时框选, 仅在框选模式为 ",paraId:17,tocIndex:5},{value:"default",paraId:17,tocIndex:5},{value:" 时生效",paraId:17,tocIndex:5},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      immediately: true, // 可以看到框框笼罩过去时，元素立即被框选了\n      trigger: [], // 不需要配合其他按键，点击鼠标拖动即可框选\n    },\n  ],\n});\n",paraId:18,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 100, y: 50 } },\n      { id: 'node-2', style: { x: 260, y: 50 } },\n      { id: 'node-3', style: { x: 280, y: 100 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      immediately: true, // 立即框选\n      trigger: [],\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n});\n\ngraph.render();\n",paraId:19,tocIndex:5},{value:"内置支持四种框选的选择模式：",paraId:20,tocIndex:6},{value:"union",paraId:21,tocIndex:6},{value:"：保持已选元素的当前状态，并添加指定的 state 状态。",paraId:21,tocIndex:6},{value:"intersect",paraId:21,tocIndex:6},{value:"：如果已选元素已有指定的 state 状态，则保留；否则清除该状态。",paraId:21,tocIndex:6},{value:"diff",paraId:21,tocIndex:6},{value:"：对已选元素的指定 state 状态进行取反操作。",paraId:21,tocIndex:6},{value:"default",paraId:21,tocIndex:6},{value:"：清除已选元素的当前状态，并添加指定的 state 状态。",paraId:21,tocIndex:6},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      mode: 'default', // 框选模式, 默认框选模式\n    },\n  ],\n});\n",paraId:22,tocIndex:6},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'brush-select',\n        key: 'brush-select',\n        trigger: [],\n        immediately: true,\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'brush-select',\n      type: 'brush-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      mode: 'default',\n      state: 'selected',\n    };\n    const optionFolder = gui.addFolder('BrushSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']);\n    // .onChange((e) => {\n    //   immediately.show(e === 'default');\n    // });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'brush-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:23,tocIndex:6},{value:"属性",paraId:24,tocIndex:7},{value:"描述",paraId:24,tocIndex:7},{value:"类型",paraId:24,tocIndex:7},{value:"默认值",paraId:24,tocIndex:7},{value:"cursor",paraId:24,tocIndex:7},{value:"鼠标样式",paraId:24,tocIndex:7},{value:"string",paraId:24,tocIndex:7},{value:"fill",paraId:24,tocIndex:7},{value:"填充颜色",paraId:24,tocIndex:7},{value:"string | Pattern | null",paraId:24,tocIndex:7},{value:"#1677FF",paraId:24,tocIndex:7},{value:"fillOpacity",paraId:24,tocIndex:7},{value:"填充透明度",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"0.1",paraId:24,tocIndex:7},{value:"isBillboard",paraId:24,tocIndex:7},{value:"是否启用公告牌模式",paraId:24,tocIndex:7},{value:"boolean",paraId:24,tocIndex:7},{value:"isSizeAttenuation",paraId:24,tocIndex:7},{value:"是否启用大小衰减",paraId:24,tocIndex:7},{value:"boolean",paraId:24,tocIndex:7},{value:"lineCap",paraId:24,tocIndex:7},{value:"线段端点样式",paraId:24,tocIndex:7},{value:"butt",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"round",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"square",paraId:24,tocIndex:7},{value:"lineDash",paraId:24,tocIndex:7},{value:"虚线配置",paraId:24,tocIndex:7},{value:"number | string | (string | number)[]",paraId:24,tocIndex:7},{value:"lineDashOffset",paraId:24,tocIndex:7},{value:"虚线偏移量",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"lineJoin",paraId:24,tocIndex:7},{value:"线段连接处样式",paraId:24,tocIndex:7},{value:"miter",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"round",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"bevel",paraId:24,tocIndex:7},{value:"lineWidth",paraId:24,tocIndex:7},{value:"线宽度",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"1",paraId:24,tocIndex:7},{value:"opacity",paraId:24,tocIndex:7},{value:"整体透明度",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"radius",paraId:24,tocIndex:7},{value:"矩形圆角半径",paraId:24,tocIndex:7},{value:"number | string | number[]",paraId:24,tocIndex:7},{value:"shadowBlur",paraId:24,tocIndex:7},{value:"阴影模糊程度",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"shadowColor",paraId:24,tocIndex:7},{value:"阴影颜色",paraId:24,tocIndex:7},{value:"string",paraId:24,tocIndex:7},{value:"shadowOffsetX",paraId:24,tocIndex:7},{value:"阴影 X 方向偏移",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"shadowOffsetY",paraId:24,tocIndex:7},{value:"阴影 Y 方向偏移",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"stroke",paraId:24,tocIndex:7},{value:"描边颜色",paraId:24,tocIndex:7},{value:"string | Pattern | null",paraId:24,tocIndex:7},{value:"#1677FF",paraId:24,tocIndex:7},{value:"strokeOpacity",paraId:24,tocIndex:7},{value:"描边透明度",paraId:24,tocIndex:7},{value:"number | string",paraId:24,tocIndex:7},{value:"visibility",paraId:24,tocIndex:7},{value:"可见性",paraId:24,tocIndex:7},{value:"visible",paraId:24,tocIndex:7},{value:" | ",paraId:24,tocIndex:7},{value:"hidden",paraId:24,tocIndex:7},{value:"zIndex",paraId:24,tocIndex:7},{value:"渲染层级",paraId:24,tocIndex:7},{value:"number",paraId:24,tocIndex:7},{value:"2",paraId:24,tocIndex:7},{value:"示例",paraId:25,tocIndex:7},{value:"：",paraId:25,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // 虚线外框\n        // rgb超级炫彩框框\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n});\n",paraId:26,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 200, y: 100 } },\n      { id: 'node-2', style: { x: 360, y: 100 } },\n      { id: 'node-3', style: { x: 280, y: 220 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'brush-select',\n      key: 'brush-select',\n      trigger: [],\n      immediately: true,\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // 虚线外框\n        // rgb超级炫彩框框\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n  animation: true,\n});\n\ngraph.render();\n",paraId:27,tocIndex:7}]},92347:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(8368);const d=[{value:"当鼠标点击元素时，会使元素高亮。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"聚焦元素",paraId:2,tocIndex:1},{value:"查看元素详情",paraId:2,tocIndex:1},{value:"查看元素关系",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 280, y: 60, fill: '#E4504D', labelText: 'degree: 0' } },\n        { id: 'node-2-1', style: { x: 330, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-2-2', style: { x: 230, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-3-1', style: { x: 380, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n        { id: 'node-3-2', style: { x: 180, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n\n        {\n          id: 'degree引导',\n          style: {\n            x: 525,\n            y: 110,\n            fill: null,\n            labelText: '这里可以修改degree ->',\n            labelFontWeight: 700,\n            labelFontSize: 10,\n          },\n        },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2-1' },\n        { source: 'node-1', target: 'node-2-2' },\n        { source: 'node-2-1', target: 'node-3-1' },\n        { source: 'node-2-2', target: 'node-3-2' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'click-select',\n        key: 'click-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'click-select',\n      type: 'click-select',\n      animation: true,\n      enable: true,\n      multiple: false,\n      trigger: 'shift+click',\n      state: 'selected',\n      unselectedState: undefined,\n      degree: 0,\n    };\n    const optionFolder = gui.addFolder('Click Select Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 2, 1);\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'unselectedState', [undefined, 'inactive']);\n    const trigger = optionFolder\n      .add(options, 'trigger', {\n        'shift+click': ['shift'],\n        'meta+click': ['Meta'],\n      })\n      .hide();\n    optionFolder.add(options, 'multiple').onChange((v) => trigger.show(v));\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'click-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['click-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'click-select',\n      key: 'click-select-1',\n      degree: 2, // 选中扩散范围\n      state: 'active', // 选中的状态\n      neighborState: 'neighborActive', // 相邻节点附着状态\n      unselectedState: 'inactive', // 未选中节点状态\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称。此交互已内置，你可以通过 ",paraId:11,tocIndex:4},{value:"type: 'click-select'",paraId:11,tocIndex:4},{value:" 来使用它。",paraId:11,tocIndex:4},{value:"click-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"click-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"是否在元素状态切换时启用动画效果",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"degree",paraId:11,tocIndex:4},{value:"控制了高亮扩散范围，",paraId:11,tocIndex:4},{value:"示例",paraId:12,tocIndex:4},{value:"number | (event:",paraId:11,tocIndex:4},{value:"Event",paraId:13,tocIndex:4},{value:") => number",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用点击元素的功能，支持通过函数的方式动态控制是否启用，",paraId:11,tocIndex:4},{value:"示例",paraId:14,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:15,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"multiple",paraId:11,tocIndex:4},{value:"是否允许多选",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"当元素被选中时应用的状态",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"neighborState",paraId:11,tocIndex:4},{value:"当有元素选中时，其相邻 n 度关系的元素应用的状态。n 的值由属性 degree 控制，例如 degree 为 1 时表示直接相邻的元素，",paraId:11,tocIndex:4},{value:"示例",paraId:16,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"unselectedState",paraId:11,tocIndex:4},{value:"当有元素被选中时，除了选中元素及其受影响的邻居元素外，其他所有元素应用的状态，",paraId:11,tocIndex:4},{value:"示例",paraId:17,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"onClick",paraId:11,tocIndex:4},{value:"点击元素时的回调",paraId:11,tocIndex:4},{value:"(event: ",paraId:11,tocIndex:4},{value:"Event",paraId:18,tocIndex:4},{value:") => void",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"按下该快捷键配合鼠标点击进行多选，按键参考： ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"['shift']",paraId:11,tocIndex:4},{value:"控制了高亮扩散范围",paraId:19,tocIndex:5},{value:"对于节点来说，",paraId:20,tocIndex:5},{value:"0",paraId:20,tocIndex:5},{value:" 表示只选中当前节点，",paraId:20,tocIndex:5},{value:"1",paraId:20,tocIndex:5},{value:" 表示选中当前节点及其直接相邻的节点和边，以此类推。",paraId:20,tocIndex:5},{value:"对于边来说，",paraId:20,tocIndex:5},{value:"0",paraId:20,tocIndex:5},{value:" 表示只选中当前边，",paraId:20,tocIndex:5},{value:"1",paraId:20,tocIndex:5},{value:" 表示选中当前边及其直接相邻的节点，以此类推。",paraId:20,tocIndex:5},{value:"如下示例，当 ",paraId:21,tocIndex:5},{value:"degree: 0",paraId:21,tocIndex:5},{value:" 仅高亮",paraId:21,tocIndex:5},{value:"红色",paraId:21,tocIndex:5},{value:"点;\n当 ",paraId:21,tocIndex:5},{value:"degree: 1",paraId:21,tocIndex:5},{value:" 高亮",paraId:21,tocIndex:5},{value:"红色",paraId:21,tocIndex:5},{value:"和",paraId:21,tocIndex:5},{value:"橙色",paraId:21,tocIndex:5},{value:"点。",paraId:21,tocIndex:5},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 280, y: 60, fill: '#E4504D', labelText: 'degree: 0' } },\n        { id: 'node-2-1', style: { x: 330, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-2-2', style: { x: 230, y: 140, fill: '#FFC40C', labelText: 'degree: 1' } },\n        { id: 'node-3-1', style: { x: 380, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n        { id: 'node-3-2', style: { x: 180, y: 220, fill: '#0f0', labelText: 'degree: 2' } },\n\n        {\n          id: 'degree引导',\n          style: {\n            x: 525,\n            y: 110,\n            fill: null,\n            labelText: '这里可以修改degree ->',\n            labelFontWeight: 700,\n            labelFontSize: 10,\n          },\n        },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2-1' },\n        { source: 'node-1', target: 'node-2-2' },\n        { source: 'node-2-1', target: 'node-3-1' },\n        { source: 'node-2-2', target: 'node-3-2' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'click-select',\n        key: 'click-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'click-select',\n      type: 'click-select',\n      animation: true,\n      enable: true,\n      multiple: false,\n      trigger: 'shift+click',\n      state: 'selected',\n      unselectedState: undefined,\n      degree: 0,\n    };\n    const optionFolder = gui.addFolder('Click Select Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 2, 1);\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'unselectedState', [undefined, 'inactive']);\n    const trigger = optionFolder\n      .add(options, 'trigger', {\n        'shift+click': ['shift'],\n        'meta+click': ['Meta'],\n      })\n      .hide();\n    optionFolder.add(options, 'multiple').onChange((v) => trigger.show(v));\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'click-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:22,tocIndex:5},{value:"是否启用点击元素的功能",paraId:23,tocIndex:6},{value:"可以通过函数的方式动态控制是否启用，例如只有节点被选中时才启用。",paraId:24,tocIndex:6},{value:"{\n  //⚠️ 注意，这里需要同时设置节点和画布，否则用户点击画布时将不会监听到事件\n  enable: (event) => ['node', 'canvas'].includes(event.targetType);\n}\n",paraId:25,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 60 } },\n      { id: 'node2', style: { x: 200, y: 60 } },\n      { id: 'node3', style: { x: 300, y: 60 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      enable: (event) => ['node', 'canvas'].includes(event.targetType),\n    },\n  ],\n});\n\ngraph.render();\n",paraId:26,tocIndex:6},{value:"同理，如果只希望边能被选中：",paraId:27,tocIndex:6},{value:"{\n  enable: (event) => ['edge', 'canvas'].includes(event.targetType);\n}\n",paraId:28,tocIndex:6},{value:"当有元素选中时，其相邻 n 度关系的元素应用的状态。n 的值由属性 degree 控制，例如 degree 为 1 时表示直接相邻的元素",paraId:29,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      // 被直接点击的节点附着的状态\n      state: 'active',\n      // 相邻的节点附着的状态\n      neighborState: 'neighborActive',\n    },\n  ],\n});\n",paraId:30,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n        halo: true,\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:31,tocIndex:7},{value:"当有元素被选中时，除了被选中元素和扩散的邻居元素外，其他所有元素应用的状态。",paraId:32,tocIndex:8},{value:"内置状态： ",paraId:33,tocIndex:8},{value:"selected",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"active",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"inactive",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"disabled",paraId:33,tocIndex:8},{value:" ",paraId:33,tocIndex:8},{value:"highlight",paraId:33,tocIndex:8},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      unselectedState: 'inactive',\n    },\n  ],\n});\n",paraId:34,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      unselectedState: 'inactive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:35,tocIndex:8},{value:"点击节点",paraId:36,tocIndex:10},{value:" 会从 ",paraId:36,tocIndex:10},{value:"默认状态",paraId:36,tocIndex:10},{value:" 切换为 ",paraId:36,tocIndex:10},{value:"active",paraId:36,tocIndex:10},{value:"相邻节点",paraId:36,tocIndex:10},{value:" 会从 ",paraId:36,tocIndex:10},{value:"默认状态",paraId:36,tocIndex:10},{value:" 切换为 ",paraId:36,tocIndex:10},{value:"neighborActive",paraId:36,tocIndex:10},{value:"const graph = new Graph({\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      // 选中节点状态\n      active: {\n        fill: '#0f0',\n      },\n      // 相邻节点状态\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      // 相邻节点附着状态\n      neighborState: 'neighborActive',\n      // 未选中节点状态\n      unselectedState: 'inactive',\n    },\n  ],\n});\n",paraId:37,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  layout: {\n    type: 'grid',\n  },\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#E4504D',\n    },\n    state: {\n      active: {\n        fill: '#0f0',\n      },\n      neighborActive: {\n        fill: '#FFC40C',\n      },\n    },\n  },\n  behaviors: [\n    {\n      type: 'click-select',\n      degree: 1,\n      state: 'active',\n      neighborState: 'neighborActive',\n      unselectedState: 'inactive',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:38,tocIndex:10}]},36220:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(90706);const d=[{value:"CollapseExpand 是 G6 中用于实现节点或组合（Combo）展开/收起功能的内置交互。通过双击（默认）或单击操作，用户可以灵活控制图元素的展开与收起状态，有效管理图结构的可视化层次，降低视觉复杂度。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"管理大型层次结构图，实现树状图或网络图的分层浏览",paraId:2,tocIndex:1},{value:"简化复杂图的展示，按需展开关注区域",paraId:2,tocIndex:1},{value:"隐藏暂时不需要查看的分支节点，聚焦于重要信息",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'collapse-expand',\n        key: 'collapse-expand',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'collapse-expand',\n      type: 'collapse-expand',\n      animation: true,\n      enable: true,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'collapse-expand',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一 behavior：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['collapse-expand'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      key: 'collapse-expand-1',\n      trigger: 'click', // 修改触发方式为单击\n      animation: true, // 启用动画效果\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"collapse-expand",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"collapse-expand",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"是否启用展开/收起动画效果",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用展开/收起功能",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"IPointerEvent",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"触发方式，可选单击或双击",paraId:11,tocIndex:4},{value:"click",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"dblclick",paraId:11,tocIndex:4},{value:"dblclick",paraId:11,tocIndex:4},{value:"onCollapse",paraId:11,tocIndex:4},{value:"完成收起时的回调函数",paraId:11,tocIndex:4},{value:"(id: string) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onExpand",paraId:11,tocIndex:4},{value:"完成展开时的回调函数",paraId:11,tocIndex:4},{value:"(id: string) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"align",paraId:11,tocIndex:4},{value:"是否对准目标元素，避免视图偏移",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['collapse-expand'],\n  // 其他配置...\n});\n",paraId:13,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      trigger: 'click', // 将默认的双击触发改为单击触发\n    },\n  ],\n});\n",paraId:14,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      onCollapse: (id) => {\n        console.log(`节点 ${id} 已收起`);\n        // 执行自定义逻辑\n      },\n      onExpand: (id) => {\n        console.log(`节点 ${id} 已展开`);\n        // 执行自定义逻辑\n      },\n    },\n  ],\n});\n",paraId:15,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      // 只有当目标是节点类型时才启用展开/收起功能\n      enable: (event) => event.targetType === 'node',\n    },\n  ],\n});\n",paraId:16,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'collapse-expand',\n      animation: false, // 关闭展开/收起动画效果\n    },\n  ],\n});\n",paraId:17,tocIndex:10},{value:"可以通过检查节点数据中的 ",paraId:18,tocIndex:12},{value:"collapsed",paraId:18,tocIndex:12},{value:" 属性：",paraId:18,tocIndex:12},{value:"const isCollapsed = (nodeId) => {\n  const nodeData = graph.getNodeData(nodeId);\n  return nodeData?.style?.collapsed === true;\n};\n",paraId:19,tocIndex:12},{value:"除了通过用户交互触发，你还可以使用 ",paraId:20,tocIndex:13},{value:"collapseElement",paraId:21,tocIndex:13},{value:" 或 ",paraId:20,tocIndex:13},{value:"expandElement",paraId:22,tocIndex:13},{value:" 直接控制：",paraId:20,tocIndex:13},{value:"// 收起节点\ngraph.collapseElement('nodeId', { animation: true });\n\n// 展开节点\ngraph.expandElement('nodeId', { animation: true });\n",paraId:23,tocIndex:13}]},39581:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(37315);const d=[{value:"CreateEdge 是 G6 中用于实现画布中交互式创建边（Edge）的内置交互。用户触发交互（点击或拖拽）后，边会随鼠标移动，连接到目标节点即完成创建，若取消则自动移除。",paraId:0,tocIndex:0},{value:"此外，该交互支持自定义边的样式，如颜色、线条样式、箭头等，以适应不同的可视化需求。",paraId:1,tocIndex:0},{value:"该交互支持连接的元素为 ",paraId:2,tocIndex:0},{value:"node",paraId:2,tocIndex:0},{value:" 和 ",paraId:2,tocIndex:0},{value:"combo",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"这一交互主要用于：",paraId:3,tocIndex:1},{value:"需要交互式创建节点间连接关系的可视化场景，如流程图、知识图谱等",paraId:4,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'create-edge',\n        key: 'create-edge',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'create-edge',\n      type: 'create-edge',\n      animation: true,\n      enable: true,\n      trigger: 'drag',\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'trigger', ['drag', 'click']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'create-edge',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:2},{value:"在图配置中添加这一交互",paraId:6,tocIndex:3},{value:"// 使用默认配置\nconst graph = new Graph({\n  // 其他配置...\n  behaviors: ['create-edge'], // 直接添加，使用默认配置\n});\n\n// 或使用自定义配置\nconst graph = new Graph({\n  // 其他配置\n  behaviors: [\n    {\n      type: 'create-edge',\n      trigger: 'click', // 交互配置，通过点击创建边\n      style: {}, // 边自定义样式\n    },\n  ],\n});\n",paraId:7,tocIndex:3},{value:"配置项",paraId:8,tocIndex:4},{value:"说明",paraId:8,tocIndex:4},{value:"类型",paraId:8,tocIndex:4},{value:"默认值",paraId:8,tocIndex:4},{value:"必选",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:"交互类型名称",paraId:8,tocIndex:4},{value:"string",paraId:8,tocIndex:4},{value:"create-edge",paraId:8,tocIndex:4},{value:"√",paraId:8,tocIndex:4},{value:"trigger",paraId:8,tocIndex:4},{value:"触发新建边的方式：",paraId:8,tocIndex:4},{value:"click",paraId:8,tocIndex:4},{value:" 表示点击触发；",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:" 表示拖拽触发",paraId:8,tocIndex:4},{value:"click",paraId:8,tocIndex:4},{value:" | ",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:"drag",paraId:8,tocIndex:4},{value:"enable",paraId:8,tocIndex:4},{value:"是否启用该交互",paraId:8,tocIndex:4},{value:"boolean | ((event: ",paraId:8,tocIndex:4},{value:"Event",paraId:9,tocIndex:4},{value:") => boolean)",paraId:8,tocIndex:4},{value:"true",paraId:8,tocIndex:4},{value:"onCreate",paraId:8,tocIndex:4},{value:"创建边回调函数，返回边数据",paraId:8,tocIndex:4},{value:"(edge: ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:10,tocIndex:4},{value:") => ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:11,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"onFinish",paraId:8,tocIndex:4},{value:"成功创建边回调函数",paraId:8,tocIndex:4},{value:"(edge: ",paraId:8,tocIndex:4},{value:"EdgeData",paraId:12,tocIndex:4},{value:") => void",paraId:8,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"style",paraId:8,tocIndex:4},{value:"新建边的样式，",paraId:8,tocIndex:4},{value:"配置项",paraId:13,tocIndex:4},{value:"见下面",paraId:8,tocIndex:4},{value:"-",paraId:8,tocIndex:4},{value:"配置新创建边的样式，详细配置项请参考 ",paraId:14,tocIndex:5},{value:"元素 - 边 - 通用边属性 - 样式",paraId:15,tocIndex:5},{value:'{\n  "style": {\n    "stroke": "red",\n    "lineWidth": 2\n  }\n}\n',paraId:16,tocIndex:5},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['create-edge'],\n});\n",paraId:17,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置,\n  behaviors: [\n    {\n      type: 'create-edge',\n      style: {\n        stroke: red,\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n",paraId:18,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置\n  behaviors: [\n    {\n      type: 'create-edge',\n      trigger: 'click',\n    },\n  ],\n});\n",paraId:19,tocIndex:9}]},70218:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(86348);const d=[{value:"DragCanvas 是 G6 中用于实现画布拖拽功能的内置交互，支持通过鼠标或触摸屏幕拖动来平移整个画布。这是图可视化中最基础且常用的导航交互，让用户能够自由探索超出当前视口的图内容。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"导航和浏览大型图表，查看当前视口外的内容",paraId:2,tocIndex:1},{value:"调整视图焦点，将感兴趣的区域移动到视口中心",paraId:2,tocIndex:1},{value:"与缩放交互结合，实现完整的画布导航体验",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'drag-canvas',\n        key: 'drag-canvas',\n      },\n    ],\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'drag-canvas',\n      type: 'drag-canvas',\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use cursor by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use cursor by default': [],\n      'Shift+Arrow Key': {\n        up: ['Shift', 'ArrowUp'],\n        down: ['Shift', 'ArrowDown'],\n        left: ['Shift', 'ArrowLeft'],\n        right: ['Shift', 'ArrowRight'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'drag-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      key: 'drag-canvas-1',\n      direction: 'x', // 只允许水平方向拖拽\n      key: 'drag-behavior', // 为交互指定标识符，方便动态更新\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"drag-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用该交互",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"KeyboardEvent",paraId:11,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"(event) => 'eventType' in event ? event.targetType === 'canvas': true",paraId:11,tocIndex:4},{value:"(仅在点击画布时启用)",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"拖拽动画配置，仅在使用按键移动时有效",paraId:11,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:13,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"允许的拖拽方向，可选值有：",paraId:11,tocIndex:4},{value:"- 设为 ",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:"（默认）：允许在任意方向拖拽 ",paraId:11,tocIndex:4},{value:"- 设为 ",paraId:11,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:"：只允许水平方向拖拽 ",paraId:11,tocIndex:4},{value:"- 设为 ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:"：只允许垂直方向拖拽",paraId:11,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:"'both'",paraId:11,tocIndex:4},{value:" (不限制方向)",paraId:11,tocIndex:4},{value:"range",paraId:11,tocIndex:4},{value:"可拖拽的视口范围(以视口大小为单位)，",paraId:11,tocIndex:4},{value:"示例",paraId:14,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"Infinity",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"触发一次按键移动的距离",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"10",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"触发拖拽的键盘按键，",paraId:11,tocIndex:4},{value:"示例",paraId:15,tocIndex:4},{value:"object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"拖拽完成时的回调函数",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"range",paraId:16,tocIndex:5},{value:" 用于控制画布可拖拽的范围：",paraId:16,tocIndex:5},{value:"设置为单个数字：四个方向使用相同的值",paraId:17,tocIndex:5},{value:"设置为数组：分别指定 [上, 右, 下, 左] 四个方向的范围",paraId:17,tocIndex:5},{value:"例如：",paraId:18,tocIndex:5},{value:"range: 2; // 在任何方向上都可以拖拽2个视口的距离\nrange: [1, 2, 1, 2]; // 上下方向可拖拽1个视口，左右方向可拖拽2个视口\n",paraId:19,tocIndex:5},{value:"每个方向的取值范围是 [0, Infinity]，0表示不能拖拽，Infinity表示无限拖拽。",paraId:20,tocIndex:5},{value:"trigger",paraId:21,tocIndex:6},{value:" 允许你配置键盘按键来控制画布移动：",paraId:21,tocIndex:6},{value:"{\n  trigger: {\n    up: ['ArrowUp'],     // 向上移动的快捷键\n    down: ['ArrowDown'], // 向下移动的快捷键\n    left: ['ArrowLeft'], // 向左移动的快捷键\n    right: ['ArrowRight'] // 向右移动的快捷键\n  }\n}\n",paraId:22,tocIndex:6},{value:"你也可以配置组合键：",paraId:23,tocIndex:6},{value:"{\n  trigger: {\n    up: ['Control', 'ArrowUp'],     // Ctrl + 上箭头\n    down: ['Control', 'ArrowDown'], // Ctrl + 下箭头\n    left: ['Control', 'ArrowLeft'], // Ctrl + 左箭头\n    right: ['Control', 'ArrowRight'] // Ctrl + 右箭头\n  }\n}\n",paraId:24,tocIndex:6},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['drag-canvas'],\n});\n",paraId:25,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      direction: 'x', // 只允许水平拖拽\n    },\n  ],\n});\n",paraId:26,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      range: 1.5, // 限制拖拽范围为1.5个视口大小\n    },\n  ],\n});\n",paraId:27,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-canvas',\n      trigger: {\n        up: ['ArrowUp'],\n        down: ['ArrowDown'],\n        left: ['ArrowLeft'],\n        right: ['ArrowRight'],\n      },\n      animation: {\n        duration: 100, // 添加平滑动画效果\n      },\n    },\n  ],\n});\n",paraId:28,tocIndex:11},{value:"DragCanvas",paraId:29,tocIndex:13},{value:" 用于拖拽整个画布视图",paraId:29,tocIndex:13},{value:"DragElement",paraId:29,tocIndex:13},{value:" 用于拖拽单个图元素（节点/边/组合）",paraId:29,tocIndex:13},{value:"ScrollCanvas",paraId:29,tocIndex:13},{value:" 用于滚轮滚动画布，不改变缩放比例",paraId:29,tocIndex:13}]},28933:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(64040);const d=[{value:"DragElement 是 G6 中用于实现 ",paraId:0,tocIndex:0},{value:"元素拖拽",paraId:0,tocIndex:0},{value:" 功能的内置交互。它具有以下核心特性：",paraId:0,tocIndex:0},{value:"多元素类型支持",paraId:1,tocIndex:0},{value:"：可以同时支持节点（Node）和组合（Combo）的拖拽",paraId:1,tocIndex:0},{value:"智能多选",paraId:1,tocIndex:0},{value:"：支持同时拖拽多个选中状态的元素",paraId:1,tocIndex:0},{value:"视觉反馈",paraId:1,tocIndex:0},{value:"：提供幽灵节点、边的显隐、鼠标样式等多种视觉反馈机制",paraId:1,tocIndex:0},{value:"灵活的拖拽效果",paraId:1,tocIndex:0},{value:"：支持移动、链接、自由拖拽等多种拖拽操作效果",paraId:1,tocIndex:0},{value:"父子关系处理",paraId:1,tocIndex:0},{value:"：自动处理拖拽过程中的元素层级关系，特别是在处理 Combo 结构时",paraId:1,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      edges: [],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'drag-element',\n        key: 'drag-element',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'drag-element',\n      type: 'drag-element',\n      animation: true,\n      enable: 'node,combo',\n      dropEffect: 'move',\n      state: 'selected',\n      hideEdge: 'none',\n      shadow: false,\n    };\n    const optionFolder = gui.addFolder('DragElement Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable', {\n      'node,combo': (event) => ['node', 'combo'].includes(event.targetType),\n      node: (event) => ['node'].includes(event.targetType),\n      combo: (event) => ['combo'].includes(event.targetType),\n      none: false,\n    });\n    optionFolder.add(options, 'dropEffect', ['link', 'move', 'none']);\n    optionFolder.add(options, 'hideEdge', ['none', 'all', 'in', 'out', 'both']);\n    optionFolder.add(options, 'shadow');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'drag-element',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:2,tocIndex:1},{value:"在图配置中添加这一交互：",paraId:3,tocIndex:2},{value:"1. 快速配置（静态）",paraId:4,tocIndex:2},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:5,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-element'],\n});\n",paraId:6,tocIndex:2},{value:"2. 对象配置（推荐）",paraId:7,tocIndex:2},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-element',\n      key: 'drag-element-1',\n      enableAnimation: true,\n      dropEffect: 'move',\n      shadow: true, // 启用拖拽幽灵节点\n    },\n  ],\n});\n",paraId:9,tocIndex:2},{value:"配置项",paraId:10,tocIndex:3},{value:"说明",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"必选",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"交互类型名称",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"drag-element",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"key",paraId:10,tocIndex:3},{value:"交互唯一标识符，用于后续操作交互",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"enable",paraId:10,tocIndex:3},{value:"是否启用拖拽功能，默认可以拖拽节点和 Combo",paraId:10,tocIndex:3},{value:"boolean | ((event: IElementDragEvent) => boolean)",paraId:10,tocIndex:3},{value:"['node', 'combo'].includes(event.targetType)",paraId:10,tocIndex:3},{value:"animation",paraId:10,tocIndex:3},{value:"是否启用拖拽动画",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"state",paraId:10,tocIndex:3},{value:"节点选中状态的标识，启用多选时会基于该状态查找选中的节点",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"selected",paraId:10,tocIndex:3},{value:"dropEffect",paraId:10,tocIndex:3},{value:"定义拖拽结束后的操作效果，可选值有：",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"link",paraId:10,tocIndex:3},{value:": 将拖拽元素设置为目标元素的子元素 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:": 移动元素并自动更新父元素（如 Combo）的尺寸 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:": 仅更新拖拽目标的位置，不执行其他操作",paraId:10,tocIndex:3},{value:"link",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:"move",paraId:10,tocIndex:3},{value:"hideEdge",paraId:10,tocIndex:3},{value:"控制拖拽过程中边的显示状态，可选值有： ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:": 不隐藏任何边 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"out",paraId:10,tocIndex:3},{value:": 隐藏以当前节点为源节点的边 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"in",paraId:10,tocIndex:3},{value:": 隐藏以当前节点为目标节点的边 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"both",paraId:10,tocIndex:3},{value:": 隐藏与当前节点相关的所有边 ",paraId:10,tocIndex:3},{value:"- ",paraId:10,tocIndex:3},{value:"all",paraId:10,tocIndex:3},{value:": 隐藏图中所有边 ",paraId:10,tocIndex:3},{value:"⚠️ 注意：当启用 ",paraId:10,tocIndex:3},{value:"shadow",paraId:10,tocIndex:3},{value:"（幽灵节点）时，",paraId:10,tocIndex:3},{value:"hideEdge",paraId:10,tocIndex:3},{value:" 配置将不生效。",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"all",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"in",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"out",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"both",paraId:10,tocIndex:3},{value:"none",paraId:10,tocIndex:3},{value:"shadow",paraId:10,tocIndex:3},{value:"是否启用幽灵节点，即用一个图形代替节点跟随鼠标移动。",paraId:10,tocIndex:3},{value:"自定义幽灵节点样式",paraId:11,tocIndex:3},{value:" ⚠️注意：React 节点不支持启用",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"cursor",paraId:10,tocIndex:3},{value:"自定义鼠标样式，",paraId:10,tocIndex:3},{value:"配置项",paraId:12,tocIndex:3},{value:"{ default?: Cursor; grab: Cursor; grabbing: Cursor }",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"cursor",paraId:13,tocIndex:4},{value:" 用于自定义拖拽过程中的鼠标指针样式：",paraId:13,tocIndex:4},{value:"default",paraId:14,tocIndex:4},{value:": 默认状态下的指针样式",paraId:14,tocIndex:4},{value:"grab",paraId:14,tocIndex:4},{value:": 鼠标悬停在可拖拽元素上时的指针样式",paraId:14,tocIndex:4},{value:"grabbing",paraId:14,tocIndex:4},{value:": 正在拖拽时的指针样式",paraId:14,tocIndex:4},{value:"可选值有：",paraId:15,tocIndex:4},{value:"auto",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"default",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"none",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"context-menu",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"help",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"pointer",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"progress",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"wait",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"cell",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"crosshair",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"text",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"vertical-text",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"alias",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"copy",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"move",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"no-drop",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"not-allowed",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"grab",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"grabbing",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"all-scroll",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"col-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"row-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"n-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"e-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"s-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"w-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ne-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"se-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"sw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ew-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"ns-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nesw-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"nwse-resize",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"zoom-in",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"zoom-out",paraId:15,tocIndex:4},{value:"示例配置：",paraId:16,tocIndex:4},{value:"cursor: {\n  default: 'default',    // 默认使用普通指针\n  grab: 'grab',         // 可拖拽时显示抓取指针\n  grabbing: 'grabbing'  // 拖拽中显示抓取中指针\n}\n",paraId:17,tocIndex:4},{value:"当启用 ",paraId:18,tocIndex:5},{value:"shadow: true",paraId:18,tocIndex:5},{value:" 时，可以通过以下属性自定义幽灵节点的样式：",paraId:18,tocIndex:5},{value:"配置项",paraId:19,tocIndex:5},{value:"说明",paraId:19,tocIndex:5},{value:"类型",paraId:19,tocIndex:5},{value:"默认值",paraId:19,tocIndex:5},{value:"shadowFill",paraId:19,tocIndex:5},{value:"幽灵节点填充色",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"#F3F9FF",paraId:19,tocIndex:5},{value:"shadowFillOpacity",paraId:19,tocIndex:5},{value:"幽灵节点填充色透明度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"0.5",paraId:19,tocIndex:5},{value:"shadowStroke",paraId:19,tocIndex:5},{value:"幽灵节点描边颜色",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"#1890FF",paraId:19,tocIndex:5},{value:"shadowStrokeOpacity",paraId:19,tocIndex:5},{value:"幽灵节点描边透明度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"0.9",paraId:19,tocIndex:5},{value:"shadowLineDash",paraId:19,tocIndex:5},{value:"幽灵节点虚线配置",paraId:19,tocIndex:5},{value:"number[]",paraId:19,tocIndex:5},{value:"[5, 5]",paraId:19,tocIndex:5},{value:"shadowZIndex",paraId:19,tocIndex:5},{value:"幽灵节点渲染层级",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"100",paraId:19,tocIndex:5},{value:"shadowWidth",paraId:19,tocIndex:5},{value:"幽灵节点宽度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"目标元素的包围盒宽度",paraId:19,tocIndex:5},{value:"shadowHeight",paraId:19,tocIndex:5},{value:"幽灵节点高度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"目标元素的包围盒高度",paraId:19,tocIndex:5},{value:"shadowOpacity",paraId:19,tocIndex:5},{value:"幽灵节点整体透明度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowLineWidth",paraId:19,tocIndex:5},{value:"幽灵节点线宽度",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowLineCap",paraId:19,tocIndex:5},{value:"幽灵节点线段端点样式",paraId:19,tocIndex:5},{value:"'butt'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'round'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'square'",paraId:19,tocIndex:5},{value:"shadowLineJoin",paraId:19,tocIndex:5},{value:"幽灵节点线段连接处样式",paraId:19,tocIndex:5},{value:"'miter'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'round'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'bevel'",paraId:19,tocIndex:5},{value:"shadowLineDashOffset",paraId:19,tocIndex:5},{value:"幽灵节点虚线偏移量",paraId:19,tocIndex:5},{value:"number",paraId:19,tocIndex:5},{value:"shadowCursor",paraId:19,tocIndex:5},{value:"幽灵节点鼠标样式",paraId:19,tocIndex:5},{value:"string",paraId:19,tocIndex:5},{value:"shadowVisibility",paraId:19,tocIndex:5},{value:"幽灵节点可见性",paraId:19,tocIndex:5},{value:"'visible'",paraId:19,tocIndex:5},{value:" | ",paraId:19,tocIndex:5},{value:"'hidden'",paraId:19,tocIndex:5},{value:"示例配置：",paraId:20,tocIndex:5},{value:"{\n  type: 'drag-element',\n  shadow: true,\n  // 自定义幽灵节点样式\n  shadowFill: '#E8F3FF',\n  shadowFillOpacity: 0.4,\n  shadowStroke: '#1890FF',\n  shadowStrokeOpacity: 0.8,\n  shadowLineDash: [4, 4],\n  shadowZIndex: 99\n}\n",paraId:21,tocIndex:5},{value:"注意：幽灵节点样式继承自 ",paraId:22,tocIndex:5},{value:"BaseStyleProps",paraId:23,tocIndex:5},{value:"，上述配置项是在属性名前添加 ",paraId:22,tocIndex:5},{value:"shadow",paraId:22,tocIndex:5},{value:" 前缀得到的。",paraId:22,tocIndex:5},{value:"需要配合 ",paraId:24,tocIndex:7},{value:"click-select",paraId:24,tocIndex:7},{value:" 行为实现多选，然后通过 ",paraId:24,tocIndex:7},{value:"state",paraId:24,tocIndex:7},{value:" 参数关联选中状态：",paraId:24,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'click-select',\n      multiple: true,\n      state: 'selected',\n    },\n    {\n      type: 'drag-element',\n      state: 'selected', // 拖拽时会同时移动所有 selected 状态的节点\n    },\n  ],\n});\n",paraId:25,tocIndex:7}]},55299:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(76045);const d=[{value:"DragElementForce 是 G6 中用于实现 ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:" 和 ",paraId:0,tocIndex:0},{value:"d3-force-3d",paraId:0,tocIndex:0},{value:" 布局下节点拖拽的内置交互。在拖拽过程中会 ",paraId:0,tocIndex:0},{value:"实时重新计算布局",paraId:0,tocIndex:0},{value:"，使得图的布局能够动态调整以适应节点的新位置。",paraId:0,tocIndex:0},{value:"在图配置中添加这一交互：",paraId:1,tocIndex:1},{value:"1. 快速配置（静态）",paraId:2,tocIndex:1},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:3,tocIndex:1},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-element-force'],\n});\n",paraId:4,tocIndex:1},{value:"2. 对象配置（推荐）",paraId:5,tocIndex:1},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:6,tocIndex:1},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'drag-element-force',\n      key: 'drag-element-force-1',\n      fixed: true, // 拖拽后固定节点位置\n    },\n  ],\n});\n",paraId:7,tocIndex:1},{value:"配置项",paraId:8,tocIndex:2},{value:"说明",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"type",paraId:8,tocIndex:2},{value:"交互类型名称，这里设置 ",paraId:8,tocIndex:2},{value:"type: 'drag-element-force'",paraId:8,tocIndex:2},{value:" 启用此交互",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"drag-element-force",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"key",paraId:8,tocIndex:2},{value:"交互唯一标识符，用于后续操作交互",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fixed",paraId:8,tocIndex:2},{value:"在拖拽结束后，节点是否保持固定位置，布尔值代表：",paraId:8,tocIndex:2},{value:"- true: 在拖拽结束后，节点的位置将保持固定，不受布局算法的影响 ",paraId:8,tocIndex:2},{value:"- false: 在拖拽结束后，节点的位置将继续受到布局算法的影响",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"enable",paraId:8,tocIndex:2},{value:"是否启用拖拽功能，默认可以拖拽节点和 Combo",paraId:8,tocIndex:2},{value:"boolean | ((event: IElementDragEvent) => boolean)",paraId:8,tocIndex:2},{value:"['node', 'combo'].includes(event.targetType)",paraId:8,tocIndex:2},{value:"state",paraId:8,tocIndex:2},{value:"节点选中状态的标识，启用多选时会基于该状态查找选中的节点",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"selected",paraId:8,tocIndex:2},{value:"hideEdge",paraId:8,tocIndex:2},{value:"控制拖拽过程中边的显示状态，可选值有：",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:": 不隐藏任何边 ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"out",paraId:8,tocIndex:2},{value:": 隐藏以当前节点为源节点的边 ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"in",paraId:8,tocIndex:2},{value:": 隐藏以当前节点为目标节点的边 ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"both",paraId:8,tocIndex:2},{value:": 隐藏与当前节点相关的所有边 ",paraId:8,tocIndex:2},{value:"- ",paraId:8,tocIndex:2},{value:"all",paraId:8,tocIndex:2},{value:": 隐藏图中所有边 ",paraId:8,tocIndex:2},{value:"⚠️ 注意：当启用 ",paraId:8,tocIndex:2},{value:"shadow",paraId:8,tocIndex:2},{value:"（幽灵节点）时，",paraId:8,tocIndex:2},{value:"hideEdge",paraId:8,tocIndex:2},{value:" 配置将不生效。",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"all",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"in",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"out",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"both",paraId:8,tocIndex:2},{value:"none",paraId:8,tocIndex:2},{value:"cursor",paraId:8,tocIndex:2},{value:"自定义鼠标样式，",paraId:8,tocIndex:2},{value:"示例",paraId:9,tocIndex:2},{value:"{ default?: Cursor; grab: Cursor; grabbing: Cursor }",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"cursor",paraId:10,tocIndex:3},{value:" 用于自定义拖拽过程中的鼠标指针样式：",paraId:10,tocIndex:3},{value:"default",paraId:11,tocIndex:3},{value:": 默认状态下的指针样式",paraId:11,tocIndex:3},{value:"grab",paraId:11,tocIndex:3},{value:": 鼠标悬停在可拖拽元素上时的指针样式",paraId:11,tocIndex:3},{value:"grabbing",paraId:11,tocIndex:3},{value:": 正在拖拽时的指针样式",paraId:11,tocIndex:3},{value:"可选值有：",paraId:12,tocIndex:3},{value:"auto",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"default",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"none",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"context-menu",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"help",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"pointer",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"progress",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"wait",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"cell",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"crosshair",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"vertical-text",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"alias",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"copy",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"move",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"no-drop",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"not-allowed",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"grab",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"grabbing",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"all-scroll",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"col-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"row-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"n-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"e-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"s-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"w-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ne-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"se-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"sw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ew-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"ns-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nesw-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"nwse-resize",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"zoom-in",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"zoom-out",paraId:12,tocIndex:3},{value:"示例配置：",paraId:13,tocIndex:3},{value:"cursor: {\n  default: 'default',    // 默认使用普通指针\n  grab: 'grab',         // 可拖拽时显示抓取指针\n  grabbing: 'grabbing'  // 拖拽中显示抓取中指针\n}\n",paraId:14,tocIndex:3},{value:"DragElementForce",paraId:15,tocIndex:5},{value:" 专门用于 ",paraId:15,tocIndex:5},{value:"d3-force",paraId:15,tocIndex:5},{value:" 或 ",paraId:15,tocIndex:5},{value:"d3-force-3d",paraId:15,tocIndex:5},{value:" 布局，拖拽时会实时重新计算布局",paraId:15,tocIndex:5},{value:"DragElement",paraId:15,tocIndex:5},{value:" 是通用的拖拽交互，不会触发布局重新计算",paraId:15,tocIndex:5}]},88414:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(80835);const d=[{value:"FixElementSize 是 G6 提供的一种内置交互，用于在视图缩放过程中，",paraId:0,tocIndex:0},{value:"保持节点中某些元素的尺寸不随缩放变化。",paraId:0,tocIndex:0},{value:" 提升缩放过程中的视觉一致性与可操作性。\n通过监听视口变化，自动对标记为“固定尺寸”的元素进行缩放补偿，确保它们在不同缩放级别下保持相对恒定的显示尺寸。支持全局启用，也支持按需控制具体元素或节点的适配行为。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"需要固定视觉大小的图形元素或嵌入式组件（按钮、标签等）",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', style: { x: 200, y: 100, labelText: 'node1' } },\n        { id: 'node2', style: { x: 360, y: 100, labelText: 'node2' } },\n        { id: 'node3', style: { x: 280, y: 220, labelText: 'node3' } },\n      ],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node2', target: 'node3' },\n      ],\n    },\n    node: {\n      style: { label: true, labelFill: '#666', labelFontSize: 14, labelPlacement: 'bottom' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'fix-element-size', type: 'fix-element-size' }],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 800, height: 400 },\n  (gui, graph) => {\n    const options = {\n      key: 'fix-element-size',\n      type: 'fix-element-size',\n      animation: true,\n      enable: true,\n      reset: true,\n    };\n    const optionFolder = gui.addFolder('CollapseExpand Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'reset');\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'fix-element-size',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['fix-element-size'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'fix-element-size',\n      enable: true, // 开启该交互\n      state: 'selected', // 要固定大小的元素状态\n      reset: true, // 元素重绘时还原样式\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"fix-element-size",paraId:11,tocIndex:4},{value:"√",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用该交互，",paraId:11,tocIndex:4},{value:"示例",paraId:12,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:13,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"reset",paraId:11,tocIndex:4},{value:"元素重绘时是否还原样式",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"指定要固定大小的元素状态",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:'""',paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:"节点配置项，用于定义哪些属性在视觉上保持固定大小。若未指定（即为 undefined），则整个节点将被固定，",paraId:11,tocIndex:4},{value:"示例",paraId:14,tocIndex:4},{value:"FixShapeConfig",paraId:15,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"nodeFilter",paraId:11,tocIndex:4},{value:"节点过滤器，用于过滤哪些节点在缩放过程中保持固定大小",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"NodeData",paraId:16,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"边配置项，用于定义哪些属性在视觉上保持固定大小。默认固定 lineWidth、labelFontSize 属性，用法同",paraId:11,tocIndex:4},{value:"node配置项",paraId:17,tocIndex:4},{value:"FixShapeConfig",paraId:18,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"[ shape: 'key', fields: ['lineWidth'] ,  shape: 'halo', fields: ['lineWidth'] ,  shape: 'label' ]",paraId:11,tocIndex:4},{value:"edgeFilter",paraId:11,tocIndex:4},{value:"边过滤器，用于过滤哪些边在缩放过程中保持固定大小",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"EdgeData",paraId:19,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:"Combo 配置项，用于定义哪些属性在视觉上保持固定大小。默认整个 Combo 将被固定，用法同",paraId:11,tocIndex:4},{value:"node配置项",paraId:20,tocIndex:4},{value:"FixShapeConfig",paraId:21,tocIndex:4},{value:" | FixShapeConfig[]",paraId:11,tocIndex:4},{value:"comboFilter",paraId:11,tocIndex:4},{value:"Combo 过滤器，用于过滤哪些 Combo 在缩放过程中保持固定大小",paraId:11,tocIndex:4},{value:"(datum: ",paraId:11,tocIndex:4},{value:"ComboData",paraId:22,tocIndex:4},{value:") => boolean",paraId:11,tocIndex:4},{value:"() => true",paraId:11,tocIndex:4},{value:"是否启用固定元素大小交互。默认在缩小画布时启用",paraId:23,tocIndex:5},{value:"默认在缩小画布时启用，设置 ",paraId:24,tocIndex:5},{value:"enable: (event) => event.data.scale < 1",paraId:24,tocIndex:5},{value:"；如果希望在放大画布时启用，设置 ",paraId:24,tocIndex:5},{value:"enable: (event) => event.data.scale > 1",paraId:24,tocIndex:5},{value:"；如果希望在放大缩小画布时都启用，设置 ",paraId:24,tocIndex:5},{value:"enable: true",paraId:24,tocIndex:5},{value:"节点配置项，用于定义哪些属性在视觉上保持固定大小。若未指定（即为 undefined），则整个节点将被固定",paraId:25,tocIndex:6},{value:"示例",paraId:26,tocIndex:6},{value:"如果在缩放过程中希望固定节点主图形的 lineWidth，可以这样配置：",paraId:27,tocIndex:6},{value:"{\n  node: [{ shape: 'key', fields: ['lineWidth'] }];\n}\n",paraId:28,tocIndex:6},{value:"如果在缩放过程中想保持元素标签大小不变，可以这样配置：",paraId:29,tocIndex:6},{value:"{\n  shape: 'label';\n}\n",paraId:30,tocIndex:6},{value:"参数",paraId:31,tocIndex:7},{value:"描述",paraId:31,tocIndex:7},{value:"类型",paraId:31,tocIndex:7},{value:"默认值",paraId:31,tocIndex:7},{value:"必选",paraId:31,tocIndex:7},{value:"shape",paraId:31,tocIndex:7},{value:"指定要固定大小的图形，可以是图形的类名字，或者是一个函数，该函数接收构成元素的所有图形并返回目标图形",paraId:31,tocIndex:7},{value:"string | ((shapes: DisplayObject[]) => DisplayObject)",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"✓",paraId:31,tocIndex:7},{value:"fields",paraId:31,tocIndex:7},{value:"指定要固定大小的图形属性字段。如果未指定，则默认固定整个图形的大小",paraId:31,tocIndex:7},{value:"string[]",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"✘",paraId:31,tocIndex:7}]},91188:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53293);const d=[{value:"FocusElement 是 G6 中用于实现元素聚焦功能的内置交互，支持通过点击元素将其聚焦到视图中心。这个交互可以帮助用户快速定位和关注特定的图元素。",paraId:0,tocIndex:0},{value:"快速将关注的节点或边居中显示",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: [\n      {\n        type: 'focus-element',\n        key: 'focus-element',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'focus-element',\n      type: 'focus-element',\n      animation: true,\n      enable: true,\n    };\n    const optionFolder = gui.addFolder('FocusElement Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'focus-element',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:3,tocIndex:3},{value:"1. 快速配置（静态）",paraId:4,tocIndex:3},{value:"使用字符串形式直接声明：",paraId:5,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['focus-element'],\n});\n",paraId:6,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:7,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数：",paraId:8,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'focus-element',\n      animation: {\n        duration: 500,\n        easing: 'ease-in',\n      },\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"配置项",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"默认值",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"type",paraId:10,tocIndex:4},{value:"交互类型名称",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"focus-element",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"animation",paraId:10,tocIndex:4},{value:"聚焦动画效果设置",paraId:10,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:11,tocIndex:4},{value:"{ duration: 500, easing: 'ease-in' }",paraId:10,tocIndex:4},{value:"enable",paraId:10,tocIndex:4},{value:"是否启用聚焦功能",paraId:10,tocIndex:4},{value:"boolean | ((event: IElementEvent) => boolean)",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:"type ViewportAnimationEffectTiming =\n  | boolean // true 启用默认动画，false 禁用动画\n  | {\n      easing?: string; // 动画缓动函数：'ease-in-out'、'ease-in'、'ease-out'、'linear'\n      duration?: number; // 动画持续时间(毫秒)\n    };\n",paraId:12,tocIndex:5},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['focus-element'],\n});\n",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'focus-element',\n      animation: {\n        duration: 800,\n        easing: 'ease-in-out',\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'focus-element',\n      enable: (event) => {\n        // 只对节点启用聚焦，边不聚焦\n        return event.target.type === 'node';\n      },\n    },\n  ],\n});\n",paraId:15,tocIndex:9}]},9399:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(2766);const d=[{value:"HoverActivate 是 G6 中用于实现元素悬停激活效果的内置交互，当鼠标悬停在节点或边上时，会自动触发高亮、显示等视觉反馈。该交互是图可视化中增强数据探索的重要手段，有助于用户快速聚焦目标元素并获取相关信息。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"在复杂关系图中快速定位关注元素",paraId:2,tocIndex:1},{value:"通过悬停信息展示节点额外信息",paraId:2,tocIndex:1},{value:"分析节点间关联关系时，通过激活边凸显连接路径",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node0', size: 50, label: '0', style: { x: 326, y: 268 } },\n        { id: 'node1', size: 30, label: '1', style: { x: 280, y: 384 } },\n        { id: 'node2', size: 30, label: '2', style: { x: 234, y: 167 } },\n        { id: 'node3', size: 30, label: '3', style: { x: 391, y: 368 } },\n        { id: 'node4', size: 30, label: '4', style: { x: 444, y: 209 } },\n        { id: 'node5', size: 30, label: '5', style: { x: 378, y: 157 } },\n        { id: 'node6', size: 15, label: '6', style: { x: 229, y: 400 } },\n        { id: 'node7', size: 15, label: '7', style: { x: 281, y: 440 } },\n        { id: 'node8', size: 15, label: '8', style: { x: 188, y: 119 } },\n        { id: 'node9', size: 15, label: '9', style: { x: 287, y: 157 } },\n        { id: 'node10', size: 15, label: '10', style: { x: 185, y: 200 } },\n        { id: 'node11', size: 15, label: '11', style: { x: 238, y: 110 } },\n        { id: 'node12', size: 15, label: '12', style: { x: 239, y: 221 } },\n        { id: 'node13', size: 15, label: '13', style: { x: 176, y: 160 } },\n        { id: 'node14', size: 15, label: '14', style: { x: 389, y: 423 } },\n        { id: 'node15', size: 15, label: '15', style: { x: 441, y: 341 } },\n        { id: 'node16', size: 15, label: '16', style: { x: 442, y: 398 } },\n      ],\n      edges: [\n        { source: 'node0', target: 'node1', label: '0-1' },\n        { source: 'node0', target: 'node2', label: '0-2' },\n        { source: 'node0', target: 'node3', label: '0-3' },\n        { source: 'node0', target: 'node4', label: '0-4' },\n        { source: 'node0', target: 'node5', label: '0-5' },\n        { source: 'node1', target: 'node6', label: '1-6' },\n        { source: 'node1', target: 'node7', label: '1-7' },\n        { source: 'node2', target: 'node8', label: '2-8' },\n        { source: 'node2', target: 'node9', label: '2-9' },\n        { source: 'node2', target: 'node10', label: '2-10' },\n        { source: 'node2', target: 'node11', label: '2-11' },\n        { source: 'node2', target: 'node12', label: '2-12' },\n        { source: 'node2', target: 'node13', label: '2-13' },\n        { source: 'node3', target: 'node14', label: '3-14' },\n        { source: 'node3', target: 'node15', label: '3-15' },\n        { source: 'node3', target: 'node16', label: '3-16' },\n      ],\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', { key: 'hover-activate', type: 'hover-activate' }],\n    autoFit: 'center',\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'hover-activate',\n      type: 'hover-activate',\n      animation: true,\n      enable: true,\n      degree: 1,\n      direction: 'both',\n    };\n    const optionFolder = gui.addFolder('Hover Activate Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'degree', 0, 10, 1);\n    optionFolder.add(options, 'direction', {\n      both: ['both'],\n      in: ['in'],\n      out: ['out'],\n    });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'hover-activate',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['hover-activate'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      key: 'hover-activate-1', // 为交互指定标识符，方便动态更新\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"hover-activate",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"是否开启动画效果",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否开启悬浮元素功能",paraId:11,tocIndex:4},{value:"boolean | ((event: IPointerEvent) => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"degree",paraId:11,tocIndex:4},{value:"激活元素的n度关系",paraId:11,tocIndex:4},{value:"number | ((event: IPointerEvent) => number);",paraId:11,tocIndex:4},{value:"0",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"指定边方向",paraId:11,tocIndex:4},{value:"both",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"in",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"out",paraId:11,tocIndex:4},{value:"both",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"激活元素的状态",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:"inactiveState",paraId:11,tocIndex:4},{value:"不激活元素的状态",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onHover",paraId:11,tocIndex:4},{value:"当元素被悬停时的回调",paraId:11,tocIndex:4},{value:"(event: IPointerEvent) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onHoverEnd",paraId:11,tocIndex:4},{value:"当悬停结束时的回调",paraId:11,tocIndex:4},{value:"(event: IPointerEvent) => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"enable",paraId:12,tocIndex:5},{value:" 用于控制是否开启元素的悬浮高亮，可接收一个函数来动态控制",paraId:12,tocIndex:5},{value:"例如：只有节点开启悬浮高亮",paraId:13,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['hover-activate'],\n});\n",paraId:15,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:16,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'hover-activate',\n      degree: 1,\n      direction: 'out',\n      enable: (e) => {\n        if (e.targetType === 'node') {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n});\n",paraId:17,tocIndex:9}]},16589:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(48068);const d=[{value:"鼠标点击拖出一个 ",paraId:0,tocIndex:0},{value:"不规则的",paraId:0,tocIndex:0},{value:" 框框笼罩元素，精准框选范围内的元素会被选中。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"快速选中一批元素，并且更容易的避开不想选的元素",paraId:2,tocIndex:1},{value:"快速取消选中一批元素，并且更容易的避开想保留的元素",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'lasso-select',\n        key: 'lasso-select',\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'lasso-select',\n      type: 'lasso-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      immediately: false,\n      mode: 'default',\n      state: 'selected',\n      trigger: 'shift+drag',\n    };\n    const optionFolder = gui.addFolder('LassoSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'enableElements', [\n      ['node', 'edge', 'combo'],\n      ['node', 'edge'],\n      ['node', 'combo'],\n      ['combo', 'edge'],\n      ['node'],\n      ['edge'],\n      ['combo'],\n    ]);\n    optionFolder.add(options, 'trigger', {\n      'shift+drag': ['shift'],\n      drag: [],\n    });\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']).onChange((e) => {\n      immediately.show(e === 'default');\n    });\n    const immediately = optionFolder.add(options, 'immediately');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'lasso-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['lasso-select'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // 可以看到框框笼罩过去时，元素立即被框选了\n      trigger: ['shift', 'alt', 'control'], // 配合多种按键进行框选\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称。此插件已内置，你可以通过 ",paraId:11,tocIndex:4},{value:"type: 'lasso-select'",paraId:11,tocIndex:4},{value:" 来使用它。",paraId:11,tocIndex:4},{value:"lasso-select",paraId:11,tocIndex:4},{value:" | string",paraId:11,tocIndex:4},{value:"lasso-select",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"是否启用动画",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用框选功能",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"Event",paraId:12,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"enableElements",paraId:11,tocIndex:4},{value:"可框选的元素类型",paraId:11,tocIndex:4},{value:"( ",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:" )[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"node",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"combo",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"edge",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"immediately",paraId:13,tocIndex:4},{value:"是否及时框选, 仅在",paraId:11,tocIndex:4},{value:"框选模式 mode",paraId:14,tocIndex:4},{value:"为 ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:" 时生效",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"false",paraId:11,tocIndex:4},{value:"mode",paraId:15,tocIndex:4},{value:"框选的选择模式",paraId:11,tocIndex:4},{value:"union",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"intersect",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"diff",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"default",paraId:11,tocIndex:4},{value:"onSelect",paraId:11,tocIndex:4},{value:"框选元素状态回调",paraId:11,tocIndex:4},{value:"(states:Record<string,string|string[]>) =>Record<string,string|string[]>",paraId:11,tocIndex:4},{value:"state",paraId:11,tocIndex:4},{value:"被选中时切换到该状态",paraId:11,tocIndex:4},{value:"string | ",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"active",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"inactive",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"disabled",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"highlight",paraId:11,tocIndex:4},{value:"selected",paraId:11,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:"框选时的 框样式",paraId:11,tocIndex:4},{value:"RectStyleProps extends BaseStyleProps",paraId:11,tocIndex:4},{value:"默认值",paraId:17,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"按下该快捷键配合鼠标点击进行框选 ",paraId:11,tocIndex:4},{value:"按键参考：",paraId:11,tocIndex:4},{value:" ",paraId:11,tocIndex:4},{value:"MDN Key Values",paraId:11,tocIndex:4},{value:"string[] | (",paraId:11,tocIndex:4},{value:"Control",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"Shift",paraId:11,tocIndex:4},{value:"| ",paraId:11,tocIndex:4},{value:"Alt",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"......",paraId:11,tocIndex:4},{value:")[]",paraId:11,tocIndex:4},{value:"[",paraId:11,tocIndex:4},{value:"shift",paraId:11,tocIndex:4},{value:"]",paraId:11,tocIndex:4},{value:"是否及时框选, 仅在框选模式为 ",paraId:18,tocIndex:5},{value:"default",paraId:18,tocIndex:5},{value:" 时生效",paraId:18,tocIndex:5},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // 可以看到框框笼罩过去时，元素立即被框选了\n      trigger: [], // 不需要配合其他按键，点击鼠标拖动即可框选\n    },\n  ],\n});\n",paraId:19,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 100, y: 50 } },\n      { id: 'node-2', style: { x: 260, y: 50 } },\n      { id: 'node-3', style: { x: 280, y: 100 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      immediately: true, // 立即框选\n      trigger: [],\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n});\n\ngraph.render();\n",paraId:20,tocIndex:5},{value:"框选的选择模式",paraId:21,tocIndex:6},{value:"union",paraId:22,tocIndex:6},{value:"：保持已选元素的当前状态，并添加指定的 state 状态。",paraId:22,tocIndex:6},{value:"intersect",paraId:22,tocIndex:6},{value:"：如果已选元素已有指定的 state 状态，则保留；否则清除该状态。",paraId:22,tocIndex:6},{value:"diff",paraId:22,tocIndex:6},{value:"：对已选元素的指定 state 状态进行取反操作。",paraId:22,tocIndex:6},{value:"default",paraId:22,tocIndex:6},{value:"：清除已选元素的当前状态，并添加指定的 state 状态。",paraId:22,tocIndex:6},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      mode: 'default', // 框选模式, 默认框选模式\n    },\n  ],\n});\n",paraId:23,tocIndex:6},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-1', style: { x: 200, y: 100 } },\n        { id: 'node-2', style: { x: 360, y: 100 } },\n        { id: 'node-3', style: { x: 280, y: 220 } },\n      ],\n      edges: [\n        { source: 'node-1', target: 'node-2' },\n        { source: 'node-1', target: 'node-3' },\n        { source: 'node-2', target: 'node-3' },\n      ],\n    },\n    node: {\n      style: { fill: '#7e3feb' },\n      state: {\n        custom: { fill: '#ffa940' },\n      },\n    },\n    edge: {\n      stroke: '#8b9baf',\n      state: {\n        custom: { stroke: '#ffa940' },\n      },\n    },\n    behaviors: [\n      {\n        type: 'lasso-select',\n        key: 'lasso-select',\n        trigger: [],\n        immediately: true,\n      },\n    ],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'lasso-select',\n      type: 'lasso-select',\n      animation: false,\n      enable: true,\n      enableElements: ['node', 'edge', 'combo'],\n      mode: 'default',\n      state: 'selected',\n    };\n    const optionFolder = gui.addFolder('lassoSelect Options');\n    optionFolder.add(options, 'type').disable(true);\n\n    optionFolder.add(options, 'state', ['active', 'selected', 'custom']);\n    optionFolder.add(options, 'mode', ['union', 'intersect', 'diff', 'default']);\n    // .onChange((e) => {\n    //   immediately.show(e === 'default');\n    // });\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'lasso-select',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:24,tocIndex:6},{value:"属性",paraId:25,tocIndex:7},{value:"描述",paraId:25,tocIndex:7},{value:"类型",paraId:25,tocIndex:7},{value:"默认值",paraId:25,tocIndex:7},{value:"cursor",paraId:25,tocIndex:7},{value:"鼠标样式",paraId:25,tocIndex:7},{value:"string",paraId:25,tocIndex:7},{value:"fill",paraId:25,tocIndex:7},{value:"填充颜色",paraId:25,tocIndex:7},{value:"string | Pattern | null",paraId:25,tocIndex:7},{value:"#1677FF",paraId:25,tocIndex:7},{value:"fillOpacity",paraId:25,tocIndex:7},{value:"填充透明度",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"0.1",paraId:25,tocIndex:7},{value:"isBillboard",paraId:25,tocIndex:7},{value:"是否启用公告牌模式",paraId:25,tocIndex:7},{value:"boolean",paraId:25,tocIndex:7},{value:"isSizeAttenuation",paraId:25,tocIndex:7},{value:"是否启用大小衰减",paraId:25,tocIndex:7},{value:"boolean",paraId:25,tocIndex:7},{value:"lineCap",paraId:25,tocIndex:7},{value:"线段端点样式",paraId:25,tocIndex:7},{value:"butt",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"round",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"square",paraId:25,tocIndex:7},{value:"lineDash",paraId:25,tocIndex:7},{value:"虚线配置",paraId:25,tocIndex:7},{value:"number | string | (string | number)[]",paraId:25,tocIndex:7},{value:"lineDashOffset",paraId:25,tocIndex:7},{value:"虚线偏移量",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"lineJoin",paraId:25,tocIndex:7},{value:"线段连接处样式",paraId:25,tocIndex:7},{value:"miter",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"round",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"bevel",paraId:25,tocIndex:7},{value:"lineWidth",paraId:25,tocIndex:7},{value:"线宽度",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"1",paraId:25,tocIndex:7},{value:"opacity",paraId:25,tocIndex:7},{value:"整体透明度",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"radius",paraId:25,tocIndex:7},{value:"矩形圆角半径",paraId:25,tocIndex:7},{value:"number | string | number[]",paraId:25,tocIndex:7},{value:"shadowBlur",paraId:25,tocIndex:7},{value:"阴影模糊程度",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"shadowColor",paraId:25,tocIndex:7},{value:"阴影颜色",paraId:25,tocIndex:7},{value:"string",paraId:25,tocIndex:7},{value:"shadowOffsetX",paraId:25,tocIndex:7},{value:"阴影 X 方向偏移",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"shadowOffsetY",paraId:25,tocIndex:7},{value:"阴影 Y 方向偏移",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"stroke",paraId:25,tocIndex:7},{value:"描边颜色",paraId:25,tocIndex:7},{value:"string | Pattern | null",paraId:25,tocIndex:7},{value:"#1677FF",paraId:25,tocIndex:7},{value:"strokeOpacity",paraId:25,tocIndex:7},{value:"描边透明度",paraId:25,tocIndex:7},{value:"number | string",paraId:25,tocIndex:7},{value:"visibility",paraId:25,tocIndex:7},{value:"可见性",paraId:25,tocIndex:7},{value:"visible",paraId:25,tocIndex:7},{value:" | ",paraId:25,tocIndex:7},{value:"hidden",paraId:25,tocIndex:7},{value:"zIndex",paraId:25,tocIndex:7},{value:"渲染层级",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"2",paraId:25,tocIndex:7},{value:"示例",paraId:26,tocIndex:7},{value:"：",paraId:26,tocIndex:7},{value:"const graph = new Graph({\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // 虚线外框\n        // rgb超级炫彩框框\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n});\n",paraId:27,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 200, y: 100 } },\n      { id: 'node-2', style: { x: 360, y: 100 } },\n      { id: 'node-3', style: { x: 280, y: 220 } },\n    ],\n    edges: [\n      { source: 'node-1', target: 'node-2' },\n      { source: 'node-1', target: 'node-3' },\n      { source: 'node-2', target: 'node-3' },\n    ],\n  },\n  node: {\n    style: { fill: '#7e3feb' },\n  },\n  edge: {\n    stroke: '#8b9baf',\n  },\n  behaviors: [\n    {\n      type: 'lasso-select',\n      key: 'lasso-select',\n      trigger: [],\n      immediately: true,\n      style: {\n        width: 0,\n        height: 0,\n        lineWidth: 4,\n        lineDash: [2, 2], // 虚线外框\n        // rgb超级炫彩框框\n        fill: 'linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%)',\n        stroke: 'pink',\n        fillOpacity: 0.2,\n        zIndex: 2,\n        pointerEvents: 'none',\n      },\n    },\n  ],\n  plugins: [{ type: 'grid-line', size: 30 }],\n  animation: true,\n});\n\ngraph.render();\n",paraId:28,tocIndex:7},{value:"按下该快捷键配合鼠标点击进行框选，若设为",paraId:29,tocIndex:8},{value:"空数组",paraId:29,tocIndex:8},{value:"时则表示鼠标点击进行框选，不需要按下其他按键配合。",paraId:29,tocIndex:8},{value:"注意，",paraId:30,tocIndex:8},{value:"trigger",paraId:30,tocIndex:8},{value:" 设置为 ",paraId:30,tocIndex:8},{value:"['drag']",paraId:30,tocIndex:8},{value:" 时会导致 ",paraId:30,tocIndex:8},{value:"drag-canvas",paraId:30,tocIndex:8},{value:" 行为失效。两者不可同时配置。",paraId:30,tocIndex:8}]},54630:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(20908);const d=[{value:"OptimizeViewportTransform 是 G6 中用于提升大规模图表交互性能的内置交互。",paraId:0,tocIndex:0},{value:"该交互通过实现",paraId:1,tocIndex:0},{value:"选择性渲染策略",paraId:1,tocIndex:0},{value:"，在视口变换过程中（即用户进行拖拽、缩放、滚动等操作时）临时隐藏非关键视觉元素，从而显著降低渲染计算负载，提高帧率和响应速度。当视口变换操作结束后，系统会在设定的延迟时间后自动恢复所有元素的可见性，确保完整的视觉呈现。",paraId:1,tocIndex:0},{value:"此交互基于 ",paraId:2,tocIndex:0},{value:"事件系统",paraId:3,tocIndex:0},{value:" 实现，通过监听 ",paraId:2,tocIndex:0},{value:"GraphEvent.BEFORE_TRANSFORM",paraId:2,tocIndex:0},{value:" 和 ",paraId:2,tocIndex:0},{value:"GraphEvent.AFTER_TRANSFORM",paraId:2,tocIndex:0},{value:" 事件，精确捕捉视口变换的开始和结束时机，进而执行元素可见性的动态控制。因此，必须与视口操作类交互（如 ",paraId:2,tocIndex:0},{value:"drag-canvas",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"zoom-canvas",paraId:2,tocIndex:0},{value:" 或 ",paraId:2,tocIndex:0},{value:"scroll-canvas",paraId:2,tocIndex:0},{value:"）配合使用才能发挥作用。",paraId:2,tocIndex:0},{value:"这一交互主要用于：",paraId:4,tocIndex:1},{value:"大规模图表（上千节点/边）的流畅交互",paraId:5,tocIndex:1},{value:"性能敏感的应用场景",paraId:5,tocIndex:1},{value:"在图配置中添加这一交互：",paraId:6,tocIndex:2},{value:"1. 快速配置（静态）",paraId:7,tocIndex:2},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['optimize-viewport-transform'],\n});\n",paraId:9,tocIndex:2},{value:"2. 对象配置（推荐）",paraId:10,tocIndex:2},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:11,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'optimize-viewport-transform',\n      key: 'optimize-viewport-transform-1', // 为交互指定标识符，方便动态更新\n      debounce: 300, // 设置更长的防抖时间\n    },\n  ],\n});\n",paraId:12,tocIndex:2},{value:"配置项",paraId:13,tocIndex:3},{value:"说明",paraId:13,tocIndex:3},{value:"类型",paraId:13,tocIndex:3},{value:"默认值",paraId:13,tocIndex:3},{value:"必选",paraId:13,tocIndex:3},{value:"type",paraId:13,tocIndex:3},{value:"交互类型名称",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:"optimize-viewport-transform",paraId:13,tocIndex:3},{value:"✓",paraId:13,tocIndex:3},{value:"enable",paraId:13,tocIndex:3},{value:"是否启用该交互",paraId:13,tocIndex:3},{value:"boolean | ((event: Event) => boolean)",paraId:13,tocIndex:3},{value:"true",paraId:13,tocIndex:3},{value:"debounce",paraId:13,tocIndex:3},{value:"操作结束后多长时间恢复显示所有元素（毫秒）",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"200",paraId:13,tocIndex:3},{value:"shapes",paraId:13,tocIndex:3},{value:"指定在操作画布过程中始终保持可见的图形元素，",paraId:13,tocIndex:3},{value:"配置项",paraId:14,tocIndex:3},{value:"function",paraId:13,tocIndex:3},{value:"(type) => type === 'node'",paraId:13,tocIndex:3},{value:"shapes",paraId:15,tocIndex:4},{value:" 用于指定在画布操作过程中需要保持可见的图形元素。默认情况下，节点始终可见，而边和组合在操作画布时会被临时隐藏以提升性能。",paraId:15,tocIndex:4},{value:"{\n  shapes: (type, shape) => {\n    // 根据元素类型和图形对象动态决定是否保持可见\n    if (type === 'node') return true; // 所有节点保持可见\n    if (type === 'edge' && shape.get('importante')) return true; // 重要的边保持可见\n    return false; // 其他图形隐藏\n  };\n}\n",paraId:16,tocIndex:4},{value:"示例",paraId:17},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['drag-canvas', 'zoom-canvas', 'optimize-viewport-transform'],\n});\n",paraId:18,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      debounce: 500, // 设置更长的防抖时间，在操作停止后0.5秒才恢复显示所有元素\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  node: {\n    style: {\n      labelText: 'Drag Canvas!',\n    },\n  },\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      shapes: (type, shape) => {\n        if (type === 'node' && shape.className === 'key') return true;\n        return false;\n      },\n    },\n  ],\n});\n",paraId:20,tocIndex:8},{value:"👇 试试拖拽一下画布，看看效果吧",paraId:21,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  },\n  node: {\n    style: {\n      labelText: 'Drag Canvas!',\n    },\n  },\n  behaviors: [\n    'drag-canvas',\n    {\n      type: 'optimize-viewport-transform',\n      shapes: (type, shape) => {\n        if (type === 'node' && shape.className === 'key') return true;\n        return false;\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:8},{value:"可以根据图表元素数量动态决定是否启用优化：",paraId:23,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    'drag-canvas',\n    'zoom-canvas',\n    function () {\n      // 超出500个元素时启用优化\n      const enable = graph.getNodeData().length + graph.getEdgeData().length > 500;\n      return {\n        type: 'optimize-viewport-transform',\n        key: 'optimize-behavior',\n        enable,\n      };\n    },\n  ],\n});\n",paraId:24,tocIndex:9},{value:"当图表包含大量节点和边（通常超过500个元素）时，使用此交互可以显著提升操作流畅度。在性能要求高或硬件性能有限的环境中尤其有用。",paraId:25,tocIndex:11}]},32655:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(19541);const d=[{value:"ScrollCanvas 是 G6 中用于实现画布滚动功能的内置交互，支持通过鼠标滚轮或键盘方向键平移画布。这种交互方式对于浏览较大的图表特别有用，能让用户在不改变缩放比例的情况下探索图表的不同区域。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"浏览超出可视区域的大型图表内容",paraId:2,tocIndex:1},{value:"在保持当前缩放比例的情况下探索图的不同部分",paraId:2,tocIndex:1},{value:"精确调整查看位置，尤其是在一维方向上需要精确滚动时",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'scroll-canvas',\n        key: 'scroll-canvas',\n      },\n    ],\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'scroll-canvas',\n      type: 'scroll-canvas',\n      direction: 'No limit',\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use wheel by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'direction', {\n      'No limit': '',\n      'Only allow horizontal scrolling': 'x',\n      'Only allow vertical scrolling': 'y',\n    });\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use wheel by default': [],\n      'Shift+Arrow Key': {\n        up: ['Shift', 'ArrowUp'],\n        down: ['Shift', 'ArrowDown'],\n        left: ['Shift', 'ArrowLeft'],\n        right: ['Shift', 'ArrowRight'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'scroll-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['scroll-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      key: 'scroll-canvas-1', // 为交互指定标识符，方便动态更新\n      sensitivity: 1.5, // 设置灵敏度\n      direction: 'y', // 只允许垂直方向滚动\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"scroll-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用该交互",paraId:11,tocIndex:4},{value:"boolean | ((event: ",paraId:11,tocIndex:4},{value:"WheelEvent",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"KeyboardEvent",paraId:11,tocIndex:4},{value:") => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"direction",paraId:11,tocIndex:4},{value:"允许的滚动方向，",paraId:11,tocIndex:4},{value:"配置项",paraId:12,tocIndex:4},{value:"'x'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"'y'",paraId:11,tocIndex:4},{value:" | ",paraId:11,tocIndex:4},{value:"undefined",paraId:11,tocIndex:4},{value:"undefined",paraId:11,tocIndex:4},{value:" (不限制方向)",paraId:11,tocIndex:4},{value:"range",paraId:11,tocIndex:4},{value:"可滚动的视口范围(以视口大小为单位)，",paraId:11,tocIndex:4},{value:"配置项",paraId:13,tocIndex:4},{value:"number | number[]",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"滚动灵敏度，值越大滚动速度越快",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"触发滚动的键盘快捷键，",paraId:11,tocIndex:4},{value:"配置项",paraId:14,tocIndex:4},{value:"object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"滚动完成时的回调函数",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"preventDefault",paraId:11,tocIndex:4},{value:"是否阻止浏览器默认事件",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"direction",paraId:15,tocIndex:5},{value:" 用于限制滚动的方向：",paraId:15,tocIndex:5},{value:"不设置或设为 ",paraId:16,tocIndex:5},{value:"undefined",paraId:16,tocIndex:5},{value:"：允许在任意方向滚动",paraId:16,tocIndex:5},{value:"设为 ",paraId:16,tocIndex:5},{value:"'x'",paraId:16,tocIndex:5},{value:"：只允许水平方向滚动",paraId:16,tocIndex:5},{value:"设为 ",paraId:16,tocIndex:5},{value:"'y'",paraId:16,tocIndex:5},{value:"：只允许垂直方向滚动",paraId:16,tocIndex:5},{value:"这在特定的可视化场景下很有用，例如在时间轴图表中可能只需要水平滚动。",paraId:17,tocIndex:5},{value:"range",paraId:18,tocIndex:6},{value:" 用于控制画布可滚动的范围：",paraId:18,tocIndex:6},{value:"设置为单个数字：四个方向使用相同的值",paraId:19,tocIndex:6},{value:"设置为数组：分别指定 [上, 右, 下, 左] 四个方向的范围",paraId:19,tocIndex:6},{value:"例如：",paraId:20,tocIndex:6},{value:"range: 2; // 在任何方向上都可以滚动2个视口的距离\nrange: [1, 2, 1, 2]; // 上下方向可滚动1个视口，左右方向可滚动2个视口\n",paraId:21,tocIndex:6},{value:"每个方向的取值范围是 [0, Infinity]，0表示不能滚动，Infinity表示无限滚动。",paraId:22,tocIndex:6},{value:"trigger",paraId:23,tocIndex:7},{value:" 允许你配置键盘方向键来控制画布滚动：",paraId:23,tocIndex:7},{value:"{\n  trigger: {\n    up: ['ArrowUp'],     // 向上滚动的快捷键\n    down: ['ArrowDown'], // 向下滚动的快捷键\n    left: ['ArrowLeft'], // 向左滚动的快捷键\n    right: ['ArrowRight'] // 向右滚动的快捷键\n  }\n}\n",paraId:24,tocIndex:7},{value:"你也可以配置组合键：",paraId:25,tocIndex:7},{value:"{\n  trigger: {\n    up: ['Control', 'ArrowUp'],     // Ctrl + 上箭头\n    down: ['Control', 'ArrowDown'], // Ctrl + 下箭头\n    left: ['Control', 'ArrowLeft'], // Ctrl + 左箭头\n    right: ['Control', 'ArrowRight'] // Ctrl + 右箭头\n  }\n}\n",paraId:26,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['scroll-canvas'],\n});\n",paraId:27,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      direction: 'x', // 只允许水平滚动\n    },\n  ],\n});\n",paraId:28,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      sensitivity: 1.8, // 提高滚动灵敏度\n      range: [0.5, 2, 0.5, 2], // 上下方向限制较小，左右方向限制较大\n    },\n  ],\n});\n",paraId:29,tocIndex:11},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'scroll-canvas',\n      trigger: {\n        up: ['ArrowUp'],\n        down: ['ArrowDown'],\n        left: ['ArrowLeft'],\n        right: ['ArrowRight'],\n      },\n    },\n  ],\n});\n",paraId:30,tocIndex:12},{value:"ScrollCanvas",paraId:31,tocIndex:14},{value:" 用于平移画布，不改变缩放比例",paraId:31,tocIndex:14},{value:"ZoomCanvas",paraId:31,tocIndex:14},{value:" 用于缩放画布，改变视图的缩放比例",paraId:31,tocIndex:14},{value:"两者常结合使用，提供完整的画布导航功能：",paraId:32,tocIndex:14},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-canvas', 'zoom-canvas', 'scroll-canvas'],\n});\n",paraId:33,tocIndex:14}]},32027:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(15178);const d=[{value:"ZoomCanvas 是 G6 中用于实现画布缩放功能的内置交互，支持通过鼠标滚轮或键盘快捷键调整画布缩放比例。这是图可视化中最常用的交互之一，能帮助用户查看图的整体结构和局部细节。",paraId:0,tocIndex:0},{value:"这一交互主要用于：",paraId:1,tocIndex:1},{value:"浏览大规模图数据，在整体与细节之间自由切换",paraId:2,tocIndex:1},{value:"聚焦到特定区域进行详细分析",paraId:2,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    behaviors: [\n      {\n        type: 'zoom-canvas',\n        key: 'zoom-canvas',\n      },\n    ],\n    node: { style: { fill: '#873bf4' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      key: 'zoom-canvas',\n      type: 'zoom-canvas',\n      animation: true,\n      enable: true,\n      sensitivity: 1,\n      trigger: 'Use wheel by default',\n    };\n    const optionFolder = gui.addFolder('ZoomCanvas Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'animation');\n    optionFolder.add(options, 'enable');\n    optionFolder.add(options, 'sensitivity', 0, 10, 1);\n    optionFolder.add(options, 'trigger', {\n      'Use wheel by default': [],\n      'Control+Wheel': ['Control'],\n      'zoomIn:Ctrl+1 zoomOut:Ctrl+2 reset:Ctrl+0': {\n        zoomIn: ['Control', '1'],\n        zoomOut: ['Control', '2'],\n        reset: ['Control', '0'],\n      },\n    });\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateBehavior({\n        key: 'zoom-canvas',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:2},{value:"在图配置中添加这一交互：",paraId:4,tocIndex:3},{value:"1. 快速配置（静态）",paraId:5,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['zoom-canvas'],\n});\n",paraId:7,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:8,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:9,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      key: 'zoom-canvas-1', // 为交互指定标识符，方便动态更新\n      sensitivity: 1.5, // 设置灵敏度\n    },\n  ],\n});\n",paraId:10,tocIndex:3},{value:"配置项",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"默认值",paraId:11,tocIndex:4},{value:"必选",paraId:11,tocIndex:4},{value:"type",paraId:11,tocIndex:4},{value:"交互类型名称",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"zoom-canvas",paraId:11,tocIndex:4},{value:"✓",paraId:11,tocIndex:4},{value:"animation",paraId:11,tocIndex:4},{value:"缩放动画效果设置",paraId:11,tocIndex:4},{value:"ViewportAnimationEffectTiming",paraId:12,tocIndex:4},{value:"{ duration: 200 }",paraId:11,tocIndex:4},{value:"enable",paraId:11,tocIndex:4},{value:"是否启用该交互",paraId:11,tocIndex:4},{value:"boolean | ((event: Event) => boolean)",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"origin",paraId:11,tocIndex:4},{value:"缩放中心点(视口坐标)",paraId:11,tocIndex:4},{value:"Point",paraId:13,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"onFinish",paraId:11,tocIndex:4},{value:"缩放完成时的回调函数",paraId:11,tocIndex:4},{value:"() => void",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"preventDefault",paraId:11,tocIndex:4},{value:"是否阻止浏览器默认事件",paraId:11,tocIndex:4},{value:"boolean",paraId:11,tocIndex:4},{value:"true",paraId:11,tocIndex:4},{value:"sensitivity",paraId:11,tocIndex:4},{value:"缩放灵敏度，值越大缩放速度越快",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"1",paraId:11,tocIndex:4},{value:"trigger",paraId:11,tocIndex:4},{value:"触发缩放的方式，支持滚轮和键盘快捷键，",paraId:11,tocIndex:4},{value:"配置项",paraId:14,tocIndex:4},{value:"string[] | object",paraId:11,tocIndex:4},{value:"-",paraId:11,tocIndex:4},{value:"trigger",paraId:15,tocIndex:5},{value:"有两种使用方式，分别适用于不同场景：",paraId:15,tocIndex:5},{value:"当你希望只有在按下某些键的同时滚动滚轮才触发缩放时，可以这样配置：",paraId:16,tocIndex:6},{value:"{\n  trigger: ['Control']; // 按住 Control 键同时滚动鼠标滚轮才能缩放\n}\n",paraId:17,tocIndex:6},{value:"常见的修饰键有：",paraId:18,tocIndex:6},{value:"Control",paraId:19,tocIndex:6},{value:"Shift",paraId:19,tocIndex:6},{value:"Alt",paraId:19,tocIndex:6},{value:"不知道键盘按键对应什么值？请参考 ",paraId:20,tocIndex:6},{value:"MDN Key Values",paraId:20,tocIndex:6},{value:"。",paraId:20,tocIndex:6},{value:"当你希望完全使用键盘控制缩放操作时，可以设置组合键：",paraId:21,tocIndex:7},{value:"{\n  trigger: {\n    zoomIn: ['Control', '+'],  // 放大快捷键\n    zoomOut: ['Control', '-'], // 缩小快捷键\n    reset: ['Control', '0']    // 重置缩放比例快捷键\n  }\n}\n",paraId:22,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  width: 800,\n  height: 600,\n  behaviors: ['zoom-canvas'],\n});\n",paraId:23,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    function () {\n      return {\n        type: 'zoom-canvas',\n        origin: this.getCanvasCenter(), // 以视口中心为原点进行缩放\n      };\n    },\n  ],\n});\n",paraId:24,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      sensitivity: 0.8, // 降低灵敏度，缩放变化更平缓\n    },\n  ],\n});\n",paraId:25,tocIndex:11},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      trigger: ['Shift'], // 按住 Shift 键同时滚动才能缩放\n    },\n  ],\n});\n",paraId:26,tocIndex:12},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      trigger: {\n        zoomIn: ['Control', '='], // Ctrl + = 放大\n        zoomOut: ['Control', '-'], // Ctrl + - 缩小\n        reset: ['Control', '0'], // Ctrl + 0 重置\n      },\n    },\n  ],\n});\n",paraId:27,tocIndex:13},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    {\n      type: 'zoom-canvas',\n      // PC 端其他配置...\n    },\n    function () {\n      return {\n        type: 'zoom-canvas',\n        trigger: ['pinch'],\n        sensitivity: 0.8, // 降低灵敏度，缩放变化更平缓\n        origin: this.getCanvasCenter(), // 以视口中心为原点进行缩放\n      };\n    },\n  ],\n});\n",paraId:28,tocIndex:14},{value:"为避免缩放过大或过小，可以设置缩放限制：",paraId:29,tocIndex:16},{value:"const graph = new Graph({\n  // 其他配置...\n  zoomRange: [0.5, 3], // 允许缩小到50%和放大到300%\n  behaviors: ['zoom-canvas'],\n});\n",paraId:30,tocIndex:16},{value:"缩放与拖拽是常见的组合，实现完整的导航体验：",paraId:31,tocIndex:17},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n",paraId:32,tocIndex:17}]},59042:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(90915);const d=[{value:"自定义交互允许用户基于 G6 提供的完善的",paraId:0,tocIndex:0},{value:"事件机制",paraId:1,tocIndex:0},{value:"，把一个或多个相关的交互行为定义为一个完整的交互，以此实现符合业务场景的交互逻辑。",paraId:0,tocIndex:0},{value:"通常为：",paraId:2,tocIndex:1},{value:"监听用户交互事件",paraId:3,tocIndex:1},{value:"根据事件更新画布或执行其他操作",paraId:4,tocIndex:1},{value:"例如 ",paraId:5,tocIndex:1},{value:"DragCanvas",paraId:5,tocIndex:1},{value:" 交互监听指针拖拽事件，根据拖拽的距离更新相机的位置。",paraId:5,tocIndex:1},{value:"交互和插件的基类都是由 G6 内部的 ",paraId:6,tocIndex:2},{value:"BaseExtension",paraId:6,tocIndex:2},{value:" 基类派生而来，因此交互和插件的实现方式基本相同",paraId:6,tocIndex:2},{value:"但基于可视化的概念区分，交互通常用于处理用户交互事件，而插件通常用于处理画布的渲染逻辑、额外组件渲染等",paraId:6,tocIndex:2},{value:"因概念上的区分，交互实例不可获取，插件实例可获取（ ",paraId:7},{value:"getPluginInstance",paraId:8},{value:" ）",paraId:7},{value:"目的",paraId:9,tocIndex:3},{value:"：",paraId:9,tocIndex:3},{value:"当用户在实现符合业务场景的交互逻辑时，我们通常需要配合 G6 的事件系统，对相关事件作出响应，执行需要的交互逻辑。",paraId:10,tocIndex:3},{value:"不使用自定义交互",paraId:11,tocIndex:3},{value:"：",paraId:11,tocIndex:3},{value:"如果不使用自定义交互，用户需要在创建 Graph 实例后，通过 ",paraId:12,tocIndex:3},{value:"graph.on",paraId:12,tocIndex:3},{value:" 进行一系列的事件监听和响应处理，代码逻辑处理和编排会显得异常艰难。",paraId:12,tocIndex:3},{value:"交互的优势",paraId:13,tocIndex:3},{value:"：",paraId:13,tocIndex:3},{value:"每个交互行为都是独立的代码模块，交互系统的存在方便用户解耦业务逻辑、避免代码臃肿以及方便用户后续维护等。",paraId:14,tocIndex:3},{value:"结论",paraId:15,tocIndex:3},{value:"：",paraId:15,tocIndex:3},{value:"1、当用户需要实现任何交互逻辑时，应当首先考虑自定义交互。",paraId:16,tocIndex:3},{value:"2、当内置交互无法完全满足业务需求时，用户也可以通过自定义交互（继承内置交互）进行调整和修改。",paraId:17,tocIndex:3},{value:"（如果需要内置交互支持的特性是较通用的，或者内置交互存在 Bug ，这种时候欢迎大家到 ",paraId:18,tocIndex:3},{value:"Github",paraId:18,tocIndex:3},{value:" 提 Issue 或者 PR ）",paraId:18,tocIndex:3},{value:"一个交互的实现相当灵活，你可以以你喜欢的风格实现你的交互。",paraId:19,tocIndex:4},{value:"下面是一个简单的自定义交互实现，当用户点击画布时，会在画布上添加一个节点（可通过交互配置定义所添加节点的填充颜色）：",paraId:20,tocIndex:4},{value:"import type { BaseBehaviorOptions, RuntimeContext, IPointerEvent } from '@antv/g6';\nimport { BaseBehavior, CanvasEvent } from '@antv/g6';\n\ninterface ClickAddNodeOptions extends BaseBehaviorOptions {\n  fill: string;\n}\n\nexport class ClickAddNode extends BaseBehavior<ClickAddNodeOptions> {\n  static defaultOptions: Partial<ClickAddNodeOptions> = {\n    fill: 'red',\n  };\n  constructor(context: RuntimeContext, options: ClickAddNodeOptions) {\n    super(context, Object.assign({}, ClickAddNode.defaultOptions, options));\n    this.bindEvents();\n  }\n  private bindEvents() {\n    const { graph } = this.context;\n    graph.on(CanvasEvent.CLICK, this.addNode);\n  }\n  private addNode = (event: IPointerEvent) => {\n    const { graph } = this.context;\n    const { layerX, layerY } = event.nativeEvent as PointerEvent;\n    graph.addNodeData([\n      {\n        id: 'node-' + Date.now(),\n        style: { x: layerX, y: layerY, fill: this.options.fill },\n      },\n    ]);\n    graph.draw();\n  };\n  private unbindEvents() {\n    const { graph } = this.context;\n    graph.off(CanvasEvent.CLICK, this.addNode);\n  }\n  public destroy() {\n    // 销毁时解绑事件\n    this.unbindEvents();\n    super.destroy();\n  }\n}\n",paraId:21,tocIndex:4},{value:"在示例代码中，我们实现了一个 ",paraId:22,tocIndex:4},{value:"ClickAddNode",paraId:22,tocIndex:4},{value:" 交互，该交互在构造函数中添加了 Graph 的事件监听，当用户点击画布时，会在点击位置添加一个节点，并且支持配置所添加节点的填充颜色。",paraId:22,tocIndex:4},{value:"BaseBehavior",paraId:22,tocIndex:4},{value:" 是所有交互的基类，每个自定义交互都需要继承这个基类实现。",paraId:22,tocIndex:4},{value:"点击下面画布中的空白位置以添加一个节点，可切换右侧面板配置节点颜色",paraId:23,tocIndex:4},{value:"(async () => {\n  const { BaseBehavior, CanvasEvent, register, ExtensionCategory, Graph } = window.g6;\n\n  class ClickAddNode extends BaseBehavior {\n    constructor(context, options) {\n      super(context, options);\n\n      const { graph } = this.context;\n      graph.on(CanvasEvent.CLICK, (event) => {\n        const { layerX, layerY } = event.nativeEvent;\n        graph.addNodeData([\n          {\n            id: 'node-' + Date.now(),\n            style: { x: layerX, y: layerY, fill: options.fill },\n          },\n        ]);\n        graph.draw();\n      });\n    }\n  }\n\n  register(ExtensionCategory.BEHAVIOR, 'click-add-node', ClickAddNode);\n\n  const wrapEl = await createGraph(\n    {\n      data: {\n        nodes: [],\n      },\n      behaviors: [\n        {\n          type: 'click-add-node',\n          key: 'click-add-node',\n          fill: 'red',\n        },\n      ],\n    },\n    { width: 600, height: 300 },\n    (gui, graph) => {\n      const options = {\n        key: 'click-add-node',\n        type: 'click-add-node',\n        fill: 'red',\n      };\n      const optionFolder = gui.addFolder('ClickAddNode Options');\n      optionFolder.add(options, 'fill', ['red', 'black', 'blue', 'green', 'yellow', 'purple']);\n\n      optionFolder.onChange(({ property, value }) => {\n        graph.updateBehavior({\n          key: 'click-add-node',\n          [property]: value,\n        });\n        graph.render();\n      });\n    },\n  );\n\n  return wrapEl;\n})();\n",paraId:24,tocIndex:4},{value:"上述示例是一个最简单的交互实现，实际开发过程中，你可能还需要处理交互的启用与禁用等逻辑。",paraId:25},{value:"此外，多个交互之间可能会有事件冲突，你需要小心处理这些冲突。",paraId:26},{value:"通过 G6 提供的 register 方法注册即可",paraId:27,tocIndex:5},{value:"import { ExtensionCategory, register } from '@antv/g6';\nimport { ClickAddNode } from 'your-custom-behavior-path';\n\nregister(ExtensionCategory.BEHAVIOR, 'click-add-node', ClickAddNode);\n",paraId:28,tocIndex:5},{value:"可在 ",paraId:29,tocIndex:6},{value:"behaviors",paraId:29,tocIndex:6},{value:" 中传入交互类型名称或配置参数对象，比如上面的 ClickAddNode ，详见",paraId:29,tocIndex:6},{value:"配置交互",paraId:30,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置\n  behaviors: [\n    {\n      type: 'click-add-node',\n      fill: 'blue',\n    },\n  ],\n});\n",paraId:31,tocIndex:6}]},63710:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(22472);const d=[{value:"交互(Behavior)是指用户与图表元素之间的互动操作，如拖拽画布、选择节点、缩放视图等。良好的交互设计能让用户更直观地探索和理解图数据。",paraId:0,tocIndex:0},{value:"合理配置交互是构建高效可用图表的关键环节",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:'G6 5.0 移除了 "交互模式"(Mode) 概念，直接在 ',paraId:1,tocIndex:1},{value:"behaviors",paraId:1,tocIndex:1},{value:" 中列出需要的交互行为，简化了配置方式。这使得交互配置更加直观，上手更加简单。",paraId:1,tocIndex:1},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  behaviors: ['drag-canvas', 'zoom-canvas', 'click-select'],\n});\n",paraId:2,tocIndex:1},{value:"G6 提供了多种开箱即用的内置交互，",paraId:3,tocIndex:2},{value:"无需注册，直接配置即可使用",paraId:3,tocIndex:2},{value:"：",paraId:3,tocIndex:2},{value:"分类",paraId:4,tocIndex:2},{value:"交互名称",paraId:4,tocIndex:2},{value:"注册类型",paraId:4,tocIndex:2},{value:"功能描述",paraId:4,tocIndex:2},{value:"导航",paraId:4,tocIndex:2},{value:"拖拽画布",paraId:5,tocIndex:2},{value:"drag-canvas",paraId:4,tocIndex:2},{value:"拖动整个画布视图",paraId:4,tocIndex:2},{value:"缩放画布",paraId:6,tocIndex:2},{value:"zoom-canvas",paraId:4,tocIndex:2},{value:"缩放画布视图",paraId:4,tocIndex:2},{value:"滚动画布",paraId:7,tocIndex:2},{value:"scroll-canvas",paraId:4,tocIndex:2},{value:"使用滚轮滚动画布",paraId:4,tocIndex:2},{value:"优化视口变换",paraId:8,tocIndex:2},{value:"optimize-viewport-transform",paraId:4,tocIndex:2},{value:"优化视图变换性能",paraId:4,tocIndex:2},{value:"选择",paraId:4,tocIndex:2},{value:"点击选择",paraId:9,tocIndex:2},{value:"click-select",paraId:4,tocIndex:2},{value:"点击选择图元素",paraId:4,tocIndex:2},{value:"框选",paraId:10,tocIndex:2},{value:"brush-select",paraId:4,tocIndex:2},{value:"通过拖拽矩形区域选择元素",paraId:4,tocIndex:2},{value:"套索选择",paraId:11,tocIndex:2},{value:"lasso-select",paraId:4,tocIndex:2},{value:"自由绘制区域选择元素",paraId:4,tocIndex:2},{value:"编辑",paraId:4,tocIndex:2},{value:"创建边",paraId:12,tocIndex:2},{value:"create-edge",paraId:4,tocIndex:2},{value:"交互式创建新的边",paraId:4,tocIndex:2},{value:"拖拽元素",paraId:13,tocIndex:2},{value:"drag-element",paraId:4,tocIndex:2},{value:"拖动节点或组合",paraId:4,tocIndex:2},{value:"力导向拖拽",paraId:14,tocIndex:2},{value:"drag-element-force",paraId:4,tocIndex:2},{value:"力导向布局中拖动节点",paraId:4,tocIndex:2},{value:"数据探索",paraId:4,tocIndex:2},{value:"折叠/展开",paraId:15,tocIndex:2},{value:"collapse-expand",paraId:4,tocIndex:2},{value:"展开或收起子树节点",paraId:4,tocIndex:2},{value:"聚焦元素",paraId:16,tocIndex:2},{value:"focus-element",paraId:4,tocIndex:2},{value:"聚焦特定元素，自动调整视图",paraId:4,tocIndex:2},{value:"悬停激活",paraId:17,tocIndex:2},{value:"hover-activate",paraId:4,tocIndex:2},{value:"鼠标悬停时高亮元素",paraId:4,tocIndex:2},{value:"视觉优化",paraId:4,tocIndex:2},{value:"固定元素大小",paraId:18,tocIndex:2},{value:"fix-element-size",paraId:4,tocIndex:2},{value:"将元素大小固定为指定值",paraId:4,tocIndex:2},{value:"自适应标签",paraId:19,tocIndex:2},{value:"auto-adapt-label",paraId:4,tocIndex:2},{value:"自动调整标签位置",paraId:4,tocIndex:2},{value:"各交互的详细配置可参考 ",paraId:20,tocIndex:2},{value:"内置交互文档",paraId:21,tocIndex:2},{value:"。",paraId:20,tocIndex:2},{value:"某些交互在触发机制上可能存在重叠，如 ",paraId:22},{value:"brush-select",paraId:22},{value:" 和 ",paraId:22},{value:"drag-canvas",paraId:22},{value:" 都使用鼠标拖拽。这种情况下可以通过修改触发按键（如按住 ",paraId:22},{value:"Shift",paraId:22},{value:" 拖拽选择）来避免冲突。",paraId:22},{value:"当内置交互无法满足需求时，G6 提供了强大的自定义能力：",paraId:23,tocIndex:3},{value:"继承内置交互进行扩展",paraId:24,tocIndex:3},{value:"创建全新的交互行为",paraId:24,tocIndex:3},{value:"与内置交互不同，",paraId:25,tocIndex:3},{value:"自定义交互需要先注册后使用",paraId:25,tocIndex:3},{value:"。详细教程请参考 ",paraId:25,tocIndex:3},{value:"自定义交互",paraId:26,tocIndex:3},{value:" 文档。",paraId:25,tocIndex:3},{value:"最简单的方式是在图实例初始化时，通过 ",paraId:27,tocIndex:5},{value:"behaviors",paraId:27,tocIndex:5},{value:" 数组直接指定需要的交互：",paraId:27,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-canvas', 'zoom-canvas', 'click-select'],\n});\n",paraId:28,tocIndex:5},{value:"对于需要自定义参数的交互，可以使用 ",paraId:29,tocIndex:6},{value:"object",paraId:29,tocIndex:6},{value:" 的形式配置属性：",paraId:29,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: [\n    'drag-canvas',\n    {\n      type: 'zoom-canvas',\n      sensitivity: 1.5, // 配置灵敏度\n      key: 'zoom-behavior', // 为交互指定key，便于后续更新\n    },\n  ],\n});\n",paraId:30,tocIndex:6},{value:"G6 支持在图实例运行期间动态管理交互行为，满足复杂交互需求：",paraId:31,tocIndex:7},{value:"可以通过 ",paraId:32,tocIndex:7},{value:"setBehaviors",paraId:33,tocIndex:7},{value:" 方法调整交互：",paraId:32,tocIndex:7},{value:"// 添加新交互\ngraph.setBehaviors((behaviors) => [...behaviors, 'lasso-select']);\n\n// 移除交互\ngraph.setBehaviors((behaviors) => behaviors.filter((b) => b !== 'click-select'));\n",paraId:34,tocIndex:7},{value:"可以使用 ",paraId:35,tocIndex:7},{value:"updateBehavior",paraId:36,tocIndex:7},{value:" 方法更新交互的配置：",paraId:35,tocIndex:7},{value:"// 更新单个交互\ngraph.updateBehavior({\n  key: 'zoom-behavior',\n  sensitivity: 2,\n  enable: false, // 禁用该交互\n});\n",paraId:37,tocIndex:7},{value:"使用",paraId:38},{value:"updateBehavior",paraId:38},{value:"方法时，需要在初始化时为交互指定唯一的",paraId:38},{value:"key",paraId:38},{value:"。",paraId:38},{value:"使用 ",paraId:39,tocIndex:8},{value:"setBehaviors",paraId:40,tocIndex:8},{value:" 方法同样可以卸载交互，将交互配置列表置为空即可：",paraId:39,tocIndex:8},{value:"graph.setBehaviors([]);\n",paraId:41,tocIndex:8},{value:"更多与交互相关的 API 请参考 ",paraId:42,tocIndex:8},{value:"交互 API 文档",paraId:43,tocIndex:8},{value:"。",paraId:42,tocIndex:8},{value:"交互本质上是通过事件监听和响应来实现的。虽然内置交互已经封装了常见的交互行为，但你也可以通过事件 API 直接实现自定义交互逻辑。",paraId:44,tocIndex:9},{value:"// 使用事件常量（推荐）\nimport { NodeEvent, EdgeEvent } from '@antv/g6';\n\n// 监听节点点击\ngraph.on(NodeEvent.CLICK, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'selected');\n});\n\n// 监听边悬停\ngraph.on(EdgeEvent.POINTER_OVER, (evt) => {\n  const { target } = evt;\n  graph.setElementState(target.id, 'highlight');\n});\n",paraId:45,tocIndex:10},{value:"事件系统是实现交互的基础，掌握事件 API 对于理解和扩展交互行为至关重要。更多事件相关信息，请参考 ",paraId:46,tocIndex:10},{value:"事件文档",paraId:47,tocIndex:10},{value:"。",paraId:46,tocIndex:10}]},96218:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(64733);const d=[{value:"要参与贡献，你需要了解 G6 的代码结构和开发流程。G6 的代码仓库地址是：",paraId:0},{value:"https://github.com/antvis/G6",paraId:0},{value:"如果你想要修复一个 bug 或者增加一个新功能，你需要先 fork 一份代码到你的仓库，然后在你的仓库中进行修改，最后提交 PR 到 G6 的仓库。",paraId:1},{value:"\n  ",paraId:2},{value:"\n    ",paraId:3},{value:"\n      packages\n      ",paraId:3},{value:"\n        ",paraId:4},{value:"\n          g6\n          ",paraId:4},{value:"G6 核心实现",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:5},{value:"\n              __tests__\n              ",paraId:5},{value:"测试及开发环境",paraId:5},{value:"\n              ",paraId:5},{value:"\n                ",paraId:6},{value:"\n                  assets\n                  ",paraId:6},{value:"测试静态资源",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  bugs\n                  ",paraId:6},{value:"Bug 修复测试用例",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  dataset\n                  ",paraId:6},{value:"测试数据集",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  demos\n                  ",paraId:6},{value:"开发示例",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  snapshots\n                  ",paraId:6},{value:"测试截图",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  perf\n                  ",paraId:6},{value:"性能测试用例",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  perf-report\n                  ",paraId:6},{value:"性能测试报告",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  unit\n                  ",paraId:6},{value:"测试用例",paraId:6},{value:"\n                ",paraId:6},{value:"\n                ",paraId:6},{value:"\n                  utils\n                  ",paraId:6},{value:"测试工具函数",paraId:6},{value:"\n                ",paraId:6},{value:"\n              ",paraId:6},{value:"\n            ",paraId:5},{value:"\n            ",paraId:5},{value:"\n              src\n              ",paraId:5},{value:"\n                ",paraId:7},{value:"\n                  animations\n                  ",paraId:7},{value:"动画执行器及内置动画",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  behaviors\n                  ",paraId:7},{value:"内置交互",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  constants\n                  ",paraId:7},{value:"常量及枚举值",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  elements\n                  ",paraId:7},{value:"内置元素",paraId:7},{value:"\n                  ",paraId:7},{value:"\n                    ",paraId:8},{value:"\n                      combos\n                      ",paraId:8},{value:"内置组合",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      edges\n                      ",paraId:8},{value:"内置边",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      nodes\n                      ",paraId:8},{value:"内置节点",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                      shapes\n                      ",paraId:8},{value:"复合图形",paraId:8},{value:"\n                    ",paraId:8},{value:"\n                  ",paraId:8},{value:"\n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  layouts\n                  ",paraId:7},{value:"布局引用及封装",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  palettes\n                  ",paraId:7},{value:"内置色板",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  plugins\n                  ",paraId:7},{value:"内置插件",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  registry\n                  ",paraId:7},{value:"注册模块",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  runtime\n                  ",paraId:7},{value:"Graph 及核心控制器",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  spec\n                  ",paraId:7},{value:"Specification 类型定义",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  themes\n                  ",paraId:7},{value:"内置主题",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  transforms\n                  ",paraId:7},{value:"内置数据转换",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  types\n                  ",paraId:7},{value:"类型定义",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  utils\n                  ",paraId:7},{value:"工具函数",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  exports.ts\n                  ",paraId:7},{value:"导出项",paraId:7},{value:"   \n                ",paraId:7},{value:"\n                ",paraId:7},{value:"\n                  preset.ts\n                  ",paraId:7},{value:"预操作",paraId:7},{value:"\n                ",paraId:7},{value:"\n              ",paraId:7},{value:"\n            ",paraId:5},{value:"\n            ",paraId:5},{value:"\n              vite.config.js\n              ",paraId:5},{value:"开发环境 Vite 配置",paraId:5},{value:"\n            ",paraId:5},{value:"\n          ",paraId:5},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          g6-extension-3d/src\n          ",paraId:4},{value:"3D 扩展",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:9},{value:"\n              behaviors\n              ",paraId:9},{value:"3D 交互",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              elements\n              ",paraId:9},{value:"3D 元素",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              plugins\n              ",paraId:9},{value:"3D 插件",paraId:9},{value:"\n            ",paraId:9},{value:"\n            ",paraId:9},{value:"\n              renderer.ts\n              ",paraId:9},{value:"3D 渲染器",paraId:9},{value:"\n            ",paraId:9},{value:"\n          ",paraId:9},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          g6-extension-react/src\n          ",paraId:4},{value:"React 节点扩展",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:10},{value:"\n              elements\n              ",paraId:10},{value:"React 元素",paraId:10},{value:"\n            ",paraId:10},{value:"\n            ",paraId:10},{value:"\n              graph\n              ",paraId:10},{value:"React Graph 封装",paraId:10},{value:"\n            ",paraId:10},{value:"\n          ",paraId:10},{value:"\n        ",paraId:4},{value:"\n        ",paraId:4},{value:"\n          site\n          ",paraId:4},{value:"官网及文档",paraId:4},{value:"\n          ",paraId:4},{value:"\n            ",paraId:11},{value:"\n              docs\n              ",paraId:11},{value:"教程及 API",paraId:11},{value:"\n            ",paraId:11},{value:"\n            ",paraId:11},{value:"\n              examples\n              ",paraId:11},{value:"图表示例",paraId:11},{value:"\n            ",paraId:11},{value:"\n            ",paraId:11},{value:"\n              .dumirc.ts\n              ",paraId:11},{value:"配置文件",paraId:11},{value:"\n            ",paraId:11},{value:"\n          ",paraId:11},{value:"\n        ",paraId:4},{value:"\n      ",paraId:4},{value:"\n    ",paraId:3},{value:"\n  ",paraId:3},{value:"Fork 并拉取代码",paraId:12,tocIndex:1},{value:"在 Github 中 Fork ",paraId:13,tocIndex:1},{value:"G6",paraId:13,tocIndex:1},{value:" 到你的仓库，并拉取到本地。",paraId:13,tocIndex:1},{value:"# 进入你的工作目录\ncd /path/to/your/workspace\n\n# 克隆 G6 代码\ngit clone git@github.com:[your username]/G6.git\n",paraId:14,tocIndex:1},{value:"安装依赖",paraId:15,tocIndex:1},{value:"请验证你的本地环境是否符合要求：",paraId:16},{value:"Node.js",paraId:17},{value:" 版本 >= 18",paraId:17},{value:"pnpm",paraId:17},{value:" 版本 >= 8",paraId:17},{value:"# 进入 G6 代码目录\ncd G6\n\n# 安装依赖\npnpm install\n",paraId:18},{value:"启动开发环境",paraId:19},{value:"# 进入 G6 代码目录\ncd ./packages/g6\n\n# 启动开发环境\npnpm dev\n",paraId:20},{value:"此时，你可以在浏览器中访问 ",paraId:21},{value:"http://127.0.0.1:8080",paraId:21},{value:" 查看 G6 的开发环境并预览开发示例。",paraId:21},{value:"开发新功能或修复 bug",paraId:22},{value:"切换到开发分支：",paraId:23},{value:"git checkout -b [branch name]\n",paraId:24},{value:"根据你的需求，修改代码并在本地测试。",paraId:25},{value:"编写测试用例",paraId:26},{value:"在 ",paraId:27},{value:"packages/g6/__tests__/unit",paraId:27},{value:" 目录下编写测试用例，确保你的代码符合预期。",paraId:27},{value:"确保你的代码通过测试：",paraId:28},{value:"pnpm test\n",paraId:29},{value:"提交 PR",paraId:30},{value:'# 添加修改\ngit add .\n\n# 提交修改\ngit commit -m "[commit type]: commit message"\n\n# 推送到你的仓库\ngit push\n',paraId:31},{value:"在 Github 中提交 PR 到 G6 仓库。",paraId:32},{value:"G6 使用 Jest 进行单元测试，测试用例位于 ",paraId:33,tocIndex:2},{value:"packages/g6/__tests__/unit",paraId:33,tocIndex:2},{value:" 目录下。",paraId:33,tocIndex:2},{value:"我们要求所有的代码提交都需要通过测试，确保代码质量。",paraId:34,tocIndex:2},{value:"当前 PR 提交的覆盖率不建议低于当前代码库的覆盖率，且",paraId:35,tocIndex:2},{value:"不得低于 90%",paraId:35,tocIndex:2},{value:"。",paraId:35,tocIndex:2},{value:"G6 扩展了 Jest 测试，提供了 ",paraId:36,tocIndex:3},{value:"toMatchSnapshot",paraId:36,tocIndex:3},{value:" 断言用于生成以及对比快照。",paraId:36,tocIndex:3},{value:"如果当前可能修改影响了部分截图的生成，需要通过执行 ",paraId:37,tocIndex:3},{value:"pnpm test",paraId:37,tocIndex:3},{value:" 检查是否有测试用例失败。",paraId:37,tocIndex:3},{value:"当发现测试失败的用例时，控制台会打印出失败的测试路径，以及基准截图和当前截图的路径信息。你可以按住 ",paraId:38,tocIndex:3},{value:"Ctrl",paraId:38,tocIndex:3},{value:" 或 ",paraId:38,tocIndex:3},{value:"Command",paraId:38,tocIndex:3},{value:" 键并点击路径，查看具体的测试用例或截图。",paraId:38,tocIndex:3},{value:"如果确认本次修改是正确的，那么请手动删除对应的基准截图，并重新生成截图：",paraId:39,tocIndex:3},{value:"重新生成全部截图",paraId:40,tocIndex:3},{value:"：",paraId:40,tocIndex:3},{value:"删除 ",paraId:41,tocIndex:3},{value:"packages/g6/__tests__/unit/snapshots",paraId:41,tocIndex:3},{value:" 目录下的所有文件",paraId:41,tocIndex:3},{value:"执行 ",paraId:41,tocIndex:3},{value:"pnpm test",paraId:41,tocIndex:3},{value:"重新生成单个截图",paraId:42,tocIndex:3},{value:"：",paraId:42,tocIndex:3},{value:"删除 ",paraId:43,tocIndex:3},{value:"packages/g6/__tests__/snapshots",paraId:43,tocIndex:3},{value:" 目录下对应的文件（",paraId:43,tocIndex:3},{value:"unit",paraId:43,tocIndex:3},{value:"目录下测试用例会在",paraId:43,tocIndex:3},{value:"snapshots",paraId:43,tocIndex:3},{value:"下生成对应的目录）",paraId:43,tocIndex:3},{value:"执行 ",paraId:43,tocIndex:3},{value:"npx jest __tests__/unit/xx/xxx.spec.ts",paraId:43,tocIndex:3},{value:"G6 编码尊循以下规范：",paraId:44,tocIndex:4},{value:"eslint:recommended",paraId:45,tocIndex:4},{value:"@typescript-eslint/recommended",paraId:45,tocIndex:4},{value:"jsdoc/recommended-error",paraId:45,tocIndex:4},{value:"G6 采用 ",paraId:46,tocIndex:5},{value:"Conventional Commits",paraId:46,tocIndex:5},{value:" 规范，提交信息格式如下：",paraId:46,tocIndex:5},{value:"<type>[optional scope]: <description>\n",paraId:47,tocIndex:5},{value:"type 有以下几种：",paraId:48,tocIndex:5},{value:"feat: 新功能",paraId:49,tocIndex:5},{value:"fix: 修复 bug",paraId:49,tocIndex:5},{value:"docs: 文档更新",paraId:49,tocIndex:5},{value:"style: 代码格式（不影响代码运行的变动）",paraId:49,tocIndex:5},{value:"refactor: 重构",paraId:49,tocIndex:5},{value:"perf: 性能优化",paraId:49,tocIndex:5},{value:"test: 测试",paraId:49,tocIndex:5},{value:"build: 构建工具相关的变动",paraId:49,tocIndex:5},{value:"ci: CI 配置",paraId:49,tocIndex:5},{value:"chore: 其他无关紧要的变动",paraId:49,tocIndex:5},{value:"revert: 撤销",paraId:49,tocIndex:5},{value:"例如：",paraId:50,tocIndex:5},{value:"feat: add new feature\nrefactor(behavior): refactor drag-canvas behavior\n",paraId:51,tocIndex:5},{value:"请确保你的提交信息符合规范，并尽量使用英文描述，这样有助于我们更好地管理代码。",paraId:52,tocIndex:5},{value:"完成上述步骤后，你可以提交 PR 到 G6 仓库。请确保你的 PR 符合以下规范：",paraId:53,tocIndex:6},{value:"一个 PR 只解决一个问题",paraId:54,tocIndex:6},{value:"PR 的标题简洁明了",paraId:54,tocIndex:6},{value:"PR 的描述清晰详细，涉及视图的变动请附上截图",paraId:54,tocIndex:6},{value:"PR 必需能够通过 CI 检查",paraId:54,tocIndex:6},{value:"PR 提交后，我们会对你的代码进行 Review。请耐心等待 Review 结果，如果有需要修改的地方，我们会在 PR 中提出。",paraId:55,tocIndex:7},{value:"我们会定期发布新版本，如果你的 PR 是非紧急缺陷修复，我们会在下一个版本中发布。如果你的 PR 是紧急缺陷修复，我们会尽快发布新版本。",paraId:56,tocIndex:8},{value:"本项目通过 changeset 来管理版本发布，具体的发布流程如下：",paraId:57,tocIndex:8},{value:"完成相关的开发工作",paraId:58,tocIndex:8},{value:"从 v5 分支创建一个分支（任意分支名均可）",paraId:58,tocIndex:8},{value:"根目录执行 ",paraId:58,tocIndex:8},{value:"npm run version",paraId:58,tocIndex:8},{value:" 命令，根据提示填写相关信息，会自动更新版本号",paraId:58,tocIndex:8},{value:"将变更提交到远程仓库",paraId:58,tocIndex:8},{value:"在 GitHub 上创建一个 PR，并添加 ",paraId:58,tocIndex:8},{value:"publish",paraId:58,tocIndex:8},{value:" 标签，将该分支合并到 v5 分支",paraId:58,tocIndex:8},{value:"分支合并后，会自动触发 GitHub Actions，发布到 npm",paraId:58,tocIndex:8},{value:"发布后，需更新 Release note，在 packages/g6 目录下执行 pnpm tag",paraId:58,tocIndex:8},{value:"在新打开的 Github 链接填写 tag 信息，先选择前一个 tag, 然后选择当前 tag 后得到变更，确认没有问题后发布",paraId:58,tocIndex:8}]},2523:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(28278);const d=[{value:"G6 是一款数据驱动的图可视化引擎，数据是 G6 中最重要的概念之一。",paraId:0,tocIndex:0},{value:"G6 使用标准的 JSON 格式描述图数据结构。以下是一个基础的图数据示例：",paraId:1,tocIndex:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n});\n",paraId:2,tocIndex:0},{value:"图数据包含三部分：",paraId:3,tocIndex:1},{value:"nodes",paraId:3,tocIndex:1},{value:"（节点数据）、",paraId:3,tocIndex:1},{value:"edges",paraId:3,tocIndex:1},{value:"（边数据）、",paraId:3,tocIndex:1},{value:"combos",paraId:3,tocIndex:1},{value:"（组合数据）。每一部分对应图中的不同元素，它们的类型和数据决定了图如何展示。",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"必选",paraId:4,tocIndex:2},{value:"nodes",paraId:4,tocIndex:2},{value:"节点数据",paraId:4,tocIndex:2},{value:"NodeData",paraId:5,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"edges",paraId:4,tocIndex:2},{value:"边数据",paraId:4,tocIndex:2},{value:"EdgeData",paraId:6,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"combos",paraId:4,tocIndex:2},{value:"组合数据",paraId:4,tocIndex:2},{value:"ComboData",paraId:7,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"节点是图中的基本构成单元，它代表图中的实体。每个节点都有一个唯一的 ",paraId:8,tocIndex:3},{value:"id",paraId:8,tocIndex:3},{value:"，用于标识节点，同时节点也可以有数据、样式和状态。",paraId:8,tocIndex:3},{value:"属性",paraId:9,tocIndex:3},{value:"描述",paraId:9,tocIndex:3},{value:"类型",paraId:9,tocIndex:3},{value:"默认值",paraId:9,tocIndex:3},{value:"必选",paraId:9,tocIndex:3},{value:"id",paraId:9,tocIndex:3},{value:"节点的唯一标识符，用于区分不同的节点",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"✓",paraId:9,tocIndex:3},{value:"type",paraId:9,tocIndex:3},{value:"节点类型，内置节点类型名称或者自定义节点的名称",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"data",paraId:9,tocIndex:3},{value:"节点数据，用于存储节点的自定义数据，例如节点的名称、描述等。可以在样式映射中通过回调函数获取",paraId:9,tocIndex:3},{value:"object",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"style",paraId:9,tocIndex:3},{value:"节点样式，包括位置、大小、颜色等视觉属性",paraId:9,tocIndex:3},{value:"object",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"states",paraId:9,tocIndex:3},{value:"节点初始状态，如选中、激活、悬停等",paraId:9,tocIndex:3},{value:"string[]",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"combo",paraId:9,tocIndex:3},{value:"所属的组合 ID，用于组织节点的层级关系，如果没有则为 null",paraId:9,tocIndex:3},{value:"string | null",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"children",paraId:9,tocIndex:3},{value:"子节点 ID 集合，仅在树图场景下使用",paraId:9,tocIndex:3},{value:"string[]",paraId:9,tocIndex:3},{value:"-",paraId:9,tocIndex:3},{value:"示例：",paraId:10,tocIndex:3},{value:'{\n  "id": "node-1",\n  "type": "circle",\n  "data": { "name": "alice", "role": "Admin" },\n  "style": { "x": 100, "y": 200, "size": 32, "fill": "violet" },\n  "states": ["selected"],\n  "combo": null\n}\n',paraId:11,tocIndex:3},{value:"边是连接节点的元素，表示节点之间的关系。每条边都与两个节点（起始节点和目标节点）关联，并且边本身可以有数据、样式和状态。边的数据常用于表示节点之间的逻辑或关系，如社交网络中的用户关系、流程图中的步骤流转等。",paraId:12,tocIndex:4},{value:"属性",paraId:13,tocIndex:4},{value:"描述",paraId:13,tocIndex:4},{value:"类型",paraId:13,tocIndex:4},{value:"默认值",paraId:13,tocIndex:4},{value:"必选",paraId:13,tocIndex:4},{value:"source",paraId:13,tocIndex:4},{value:"边起始节点 ID",paraId:13,tocIndex:4},{value:"string",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"✓",paraId:13,tocIndex:4},{value:"target",paraId:13,tocIndex:4},{value:"边目标节点 ID",paraId:13,tocIndex:4},{value:"string",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"✓",paraId:13,tocIndex:4},{value:"id",paraId:13,tocIndex:4},{value:"边的唯一标识符",paraId:13,tocIndex:4},{value:"string",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"type",paraId:13,tocIndex:4},{value:"边类型，内置边类型名称或者自定义边的名称",paraId:13,tocIndex:4},{value:"string",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"data",paraId:13,tocIndex:4},{value:"边数据，用于存储边的自定义数据，可以在样式映射中通过回调函数获取",paraId:13,tocIndex:4},{value:"object",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"style",paraId:13,tocIndex:4},{value:"边样式，包括线条颜色、宽度、箭头等视觉属性",paraId:13,tocIndex:4},{value:"object",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"states",paraId:13,tocIndex:4},{value:"边初始状态",paraId:13,tocIndex:4},{value:"string[]",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"示例：",paraId:14,tocIndex:4},{value:'{\n  "source": "alice",\n  "target": "bob",\n  "type": "line",\n  "data": { "relationship": "friend", "strength": 5 },\n  "style": { "stroke": "green", "lineWidth": 2 },\n  "states": ["hover"]\n}\n',paraId:15,tocIndex:4},{value:"通过组合，可以为多个节点创建一个逻辑单元，用于图形的分层、分组或其他结构化需求。组合可以包含子节点或其他组合，从而形成嵌套层次。",paraId:16,tocIndex:5},{value:"属性",paraId:17,tocIndex:5},{value:"描述",paraId:17,tocIndex:5},{value:"类型",paraId:17,tocIndex:5},{value:"默认值",paraId:17,tocIndex:5},{value:"必选",paraId:17,tocIndex:5},{value:"id",paraId:17,tocIndex:5},{value:"组合的唯一标识符",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"✓",paraId:17,tocIndex:5},{value:"type",paraId:17,tocIndex:5},{value:"组合类型，内置组合类型名称或者自定义组合名称",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"data",paraId:17,tocIndex:5},{value:"组合数据，用于存储组合的自定义数据，可以在样式映射中通过回调函数获取",paraId:17,tocIndex:5},{value:"object",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"style",paraId:17,tocIndex:5},{value:"组合样式",paraId:17,tocIndex:5},{value:"object",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"states",paraId:17,tocIndex:5},{value:"组合初始状态",paraId:17,tocIndex:5},{value:"string[]",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"combo",paraId:17,tocIndex:5},{value:"组合的父组合 ID。如果没有父组合，则为 null",paraId:17,tocIndex:5},{value:"string | null",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"示例：",paraId:18,tocIndex:5},{value:'{\n  "id": "combo1",\n  "type": "circle",\n  "data": { "groupName": "Group A" },\n  "style": { "fill": "lightblue", "stroke": "blue", "collapsed": true },\n  "states": [],\n  "combo": null\n}\n',paraId:19,tocIndex:5},{value:"G6 提供了丰富的 API 来操作图数据，下面展示一些常见的数据操作示例。",paraId:20,tocIndex:6},{value:"在创建图实例时，可以直接传入数据：",paraId:21,tocIndex:7},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', data: { label: '节点1' } },\n      { id: 'node2', data: { label: '节点2' } },\n    ],\n    edges: [{ source: 'node1', target: 'node2', data: { label: '关系' } }],\n  },\n});\n",paraId:22,tocIndex:7},{value:"或者通过 ",paraId:23,tocIndex:7},{value:"setData",paraId:23,tocIndex:7},{value:" 方法设置数据：",paraId:23,tocIndex:7},{value:"graph.setData({\n  nodes: [\n    { id: 'node3', data: { label: '节点3' } },\n    { id: 'node4', data: { label: '节点4' } },\n  ],\n  edges: [{ source: 'node3', target: 'node4', data: { label: '新关系' } }],\n});\n",paraId:24,tocIndex:7},{value:"// 添加单个节点\ngraph.addNodeData([\n  {\n    id: 'node5',\n    data: {\n      label: '新节点',\n      category: 'person',\n    },\n    style: {\n      fill: '#6395F9',\n      stroke: '#5B8FF9',\n    },\n  },\n]);\n\n// 批量添加多个节点\ngraph.addNodeData([\n  { id: 'node6', data: { label: '批量节点1' } },\n  { id: 'node7', data: { label: '批量节点2' } },\n]);\n\n// 添加连接新节点的边\ngraph.addEdgeData([\n  {\n    source: 'node1',\n    target: 'node5',\n    data: {\n      label: '连接到新节点',\n      weight: 2,\n    },\n    style: {\n      stroke: '#F6BD16',\n      lineWidth: 3,\n    },\n  },\n]);\n",paraId:25,tocIndex:9},{value:"// 更新单个节点\ngraph.updateNodeData([\n  {\n    id: 'node1',\n    data: {\n      label: '已更新的节点1',\n      status: 'updated',\n    },\n    style: {\n      fill: '#F6BD16',\n      stroke: '#EBEBEB',\n      lineWidth: 2,\n    },\n  },\n]);\n\n// 更新多个节点\ngraph.updateNodeData([\n  {\n    id: 'node2',\n    style: { size: 40, fill: '#5AD8A6' },\n  },\n  {\n    id: 'node3',\n    data: { importance: 'high' },\n  },\n]);\n\n// 更新边\ngraph.updateEdgeData([\n  {\n    source: 'node1',\n    target: 'node2',\n    style: {\n      stroke: '#5B8FF9',\n      lineWidth: 2,\n      lineDash: [5, 5],\n    },\n  },\n]);\n",paraId:26,tocIndex:10},{value:"// 删除单个节点（以及与该节点相连的所有边）\ngraph.removeNodeData(['node7']);\n\n// 删除多个节点\ngraph.removeNodeData(['node5', 'node6']);\n\n// 删除边\ngraph.removeEdgeData(['node1-node2']);\n",paraId:27,tocIndex:11},{value:"// 获取所有节点数据\nconst nodes = graph.getNodeData();\n\n// 获取所有边数据\nconst edges = graph.getEdgeData();\n\n// 获取特定节点数据\nconst node1 = graph.getNodeData('node1');\n\n// 获取特定边数据\nconst edge1 = graph.getEdgeData('node1-node2');\n",paraId:28,tocIndex:12},{value:"下面是创建和操作嵌套组合的示例：",paraId:29,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: 'node1', data: { label: '节点1' }, combo: 'combo1' },\n    { id: 'node2', data: { label: '节点2' }, combo: 'combo1' },\n    { id: 'node3', data: { label: '节点3' }, combo: 'combo2' },\n    { id: 'node4', data: { label: '节点4' }, combo: 'combo2' },\n    { id: 'node5', data: { label: '节点5' }, combo: 'combo3' },\n  ],\n  edges: [\n    { source: 'node1', target: 'node3' },\n    { source: 'node2', target: 'node4' },\n    { source: 'node4', target: 'node5' },\n  ],\n  combos: [\n    { id: 'combo1', data: { label: '组1' } },\n    { id: 'combo2', data: { label: '组2' } },\n    { id: 'combo3', data: { label: '组3' }, combo: 'combo1' }, // 嵌套组合\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  layout: {\n    type: 'force',\n  },\n});\n\n// 添加新的组合\ngraph.addComboData([\n  {\n    id: 'combo4',\n    data: { label: '新组' },\n    combo: 'combo2', // 添加到现有组合中\n  },\n]);\n\n// 将节点移动到不同的组合\ngraph.updateNodeData([\n  {\n    id: 'node5',\n    combo: 'combo4', // 将节点5移动到新组合\n  },\n]);\n\n// 展开/折叠组合\ngraph.updateComboData([\n  {\n    id: 'combo1',\n    style: { collapsed: true }, // 折叠组合1\n  },\n]);\n\ngraph.render();\n",paraId:30,tocIndex:14},{value:"对于树形结构，G6 支持使用 ",paraId:31,tocIndex:15},{value:"children",paraId:31,tocIndex:15},{value:" 属性表示层次关系：",paraId:31,tocIndex:15},{value:"// 树形结构数据\nimport { Graph, treeToGraphData } from '@antv/g6';\n\nconst treeData = {\n  id: 'root',\n  children: [\n    {\n      id: 'child1',\n      children: [{ id: 'grandchild1' }],\n    },\n    {\n      id: 'child2',\n      children: [{ id: 'grandchild2' }],\n    },\n  ],\n};\n\nconst data = treeToGraphData(treeData);\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  layout: {\n    type: 'dendrogram', // 或 'compactBox', 'mindmap' 等树布局\n    direction: 'TB', // 从上到下布局\n    nodeSep: 50, // 节点间距\n    rankSep: 100, // 层级间距\n  },\n});\n\ngraph.render();\n",paraId:32,tocIndex:15},{value:"通过 ",paraId:33,tocIndex:15},{value:"treeToGraphData",paraId:33,tocIndex:15},{value:" 方法，可以将树形结构数据转换为 G6 的标准数据结构，实际传入到 ",paraId:33,tocIndex:15},{value:"data",paraId:33,tocIndex:15},{value:" 中的数据结构如下：",paraId:33,tocIndex:15},{value:'{\n  "nodes": [\n    { "id": "root", "depth": 0, "children": ["child1", "child2"] },\n    { "id": "child1", "depth": 1, "children": ["grandchild1"] },\n    { "id": "grandchild1", "depth": 2 },\n    { "id": "child2", "depth": 1, "children": ["grandchild2"] },\n    { "id": "grandchild2", "depth": 2 }\n  ],\n  "edges": [\n    { "source": "root", "target": "child1" },\n    { "source": "root", "target": "child2" },\n    { "source": "child1", "target": "grandchild1" },\n    { "source": "child2", "target": "grandchild2" }\n  ]\n}\n',paraId:34,tocIndex:15},{value:"为了确保图的正确渲染和交互，建议按照 G6 标准数据结构组织数据。每个元素（节点、边、组合）应包含一个 ",paraId:35,tocIndex:16},{value:"data",paraId:35,tocIndex:16},{value:" 字段，用于存放业务数据和自定义属性。",paraId:35,tocIndex:16},{value:"避免使用与 G6 内部字段名称相同的标识符",paraId:36,tocIndex:16},{value:"，如 ",paraId:36,tocIndex:16},{value:"id",paraId:36,tocIndex:16},{value:"、",paraId:36,tocIndex:16},{value:"type",paraId:36,tocIndex:16},{value:"、",paraId:36,tocIndex:16},{value:"style",paraId:36,tocIndex:16},{value:" 等，防止发生命名冲突。",paraId:36,tocIndex:16},{value:"将业务数据（如用户信息、社交网络关系等）存储在 ",paraId:36,tocIndex:16},{value:"data",paraId:36,tocIndex:16},{value:" 字段中，这样可以确保数据的灵活性和可扩展性。",paraId:36,tocIndex:16},{value:"使用样式映射",paraId:36,tocIndex:16},{value:"来根据业务数据动态设置视觉属性，而不是直接修改样式对象。",paraId:36,tocIndex:16},{value:"良好的做法是将数据和样式分离，通过映射函数将数据属性转换为视觉属性：",paraId:37,tocIndex:17},{value:"import { Graph } from '@antv/g6';\n\n// 使用数据驱动样式\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node1', data: { value: 10, category: 'A' } },\n      { id: 'node2', data: { value: 5, category: 'B' } },\n    ],\n  },\n  node: {\n    style: {\n      // 根据数据中的 value 字段动态设置节点大小\n      size: (node) => 20 + node.data.value * 2,\n      // 根据数据中的 category 字段设置不同颜色\n      fill: (node) => {\n        const categoryColors = { A: '#F6BD16', B: '#5B8FF9' };\n        return categoryColors[node.data.category] || '#CCC';\n      },\n    },\n  },\n});\n",paraId:38,tocIndex:17},{value:"G6 提供了一系列的 API 来访问和操作数据，包括：",paraId:39,tocIndex:18},{value:"getData",paraId:40,tocIndex:18},{value:"setData",paraId:41,tocIndex:18},{value:"getNodeData",paraId:42,tocIndex:18},{value:"getEdgeData",paraId:43,tocIndex:18},{value:"getComboData",paraId:44,tocIndex:18},{value:"addData",paraId:45,tocIndex:18},{value:"addNodeData",paraId:46,tocIndex:18},{value:"addEdgeData",paraId:47,tocIndex:18},{value:"addComboData",paraId:48,tocIndex:18},{value:"updateData",paraId:49,tocIndex:18},{value:"updateNodeData",paraId:50,tocIndex:18},{value:"updateEdgeData",paraId:51,tocIndex:18},{value:"updateComboData",paraId:52,tocIndex:18},{value:"removeData",paraId:53,tocIndex:18},{value:"removeNodeData",paraId:54,tocIndex:18},{value:"removeEdgeData",paraId:55,tocIndex:18},{value:"removeComboData",paraId:56,tocIndex:18},{value:"通过不同的 API，你可以方便地访问和操作图数据，实现图的增删改查等操作。",paraId:57,tocIndex:18},{value:"G6 并不提供数据的获取和解析功能，对于本地 JSON 数据，你可以直接引入使用：",paraId:58,tocIndex:19},{value:"import data from './path/to/data.json' assert { type: 'json' };\n",paraId:59,tocIndex:19},{value:"对于远程数据，你可以使用 ",paraId:60,tocIndex:19},{value:"fetch",paraId:60,tocIndex:19},{value:" 或者其他网络请求库来获取数据：",paraId:60,tocIndex:19},{value:"fetch('https://path/to/data.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // 使用 data\n    const graph = new Graph({\n      container: 'container',\n      data,\n    });\n    // 触发布局和渲染\n    graph.render();\n  })\n  .catch((error) => {\n    console.error('加载数据失败:', error);\n  });\n",paraId:61,tocIndex:19}]},91341:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69226);const d=[{value:"本文介绍组合属性配置，配置位置如下：",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // 其他配置...\n  combo: {\n    type: 'circle', // 组合类型\n    style: {}, // 组合样式\n    state: {}, // 状态样式\n    palette: {}, // 色板配置\n    animation: {}, // 动画配置\n  },\n});\n",paraId:1},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"必选",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"组合类型，内置组合类型名称或自定义组合的名称",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"circle",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"组合样式，包括颜色、大小等",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"定义组合在不同状态下的样式",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"定义组合的色板，用于根据不同数据映射颜色",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"定义组合的动画效果",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"指定组合类型，内置组合类型名称或自定义组合的名称。默认为 ",paraId:8,tocIndex:1},{value:"circle",paraId:8,tocIndex:1},{value:"（圆形组合）。",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    type: 'circle',\n  },\n});\n",paraId:9,tocIndex:1},{value:"可选值有：",paraId:10,tocIndex:1},{value:"circle",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"圆形组合",paraId:12,tocIndex:1},{value:"rect",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"矩形组合",paraId:13,tocIndex:1},{value:"在此处定义组合的样式，包括颜色、大小等。",paraId:14,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {},\n  },\n});\n",paraId:15,tocIndex:2},{value:"key",paraId:16,tocIndex:2},{value:" ：组合的主图形，表示组合的主要形状，例如圆形、矩形等；",paraId:16,tocIndex:2},{value:"halo",paraId:16,tocIndex:2},{value:" ：主图形周围展示的光晕效果的图形；",paraId:16,tocIndex:2},{value:"label",paraId:16,tocIndex:2},{value:" ：文本标签，通常用于展示组合的名称或描述；",paraId:16,tocIndex:2},{value:"以下样式配置将按原子图形依次说明：",paraId:17,tocIndex:2},{value:"组合展开时的主图形样式",paraId:18,tocIndex:3},{value:"属性",paraId:19,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:"类型",paraId:19,tocIndex:3},{value:"默认值",paraId:19,tocIndex:3},{value:"必选",paraId:19,tocIndex:3},{value:"collapsed",paraId:19,tocIndex:3},{value:"当前组合是否收起",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"cursor",paraId:19,tocIndex:3},{value:"组合鼠标移入样式，",paraId:19,tocIndex:3},{value:"配置项",paraId:20,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"default",paraId:19,tocIndex:3},{value:"fill",paraId:19,tocIndex:3},{value:"组合填充色",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"#99ADD1",paraId:19,tocIndex:3},{value:"fillOpacity",paraId:19,tocIndex:3},{value:"组合填充色透明度",paraId:19,tocIndex:3},{value:"number | string",paraId:19,tocIndex:3},{value:"0.04",paraId:19,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:19,tocIndex:3},{value:"当 lineWidth 较小时，可交互区域也随之变小，有时我们想增大这个区域，让“细线”更容易被拾取到",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"lineCap",paraId:19,tocIndex:3},{value:"组合描边端点样式",paraId:19,tocIndex:3},{value:"round",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"square",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"butt",paraId:19,tocIndex:3},{value:"butt",paraId:19,tocIndex:3},{value:"lineDash",paraId:19,tocIndex:3},{value:"组合描边虚线样式",paraId:19,tocIndex:3},{value:"number[]",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"lineDashOffset",paraId:19,tocIndex:3},{value:"组合描边虚线偏移量",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"lineJoin",paraId:19,tocIndex:3},{value:"组合描边连接处样式",paraId:19,tocIndex:3},{value:"round",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"bevel",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"miter",paraId:19,tocIndex:3},{value:"miter",paraId:19,tocIndex:3},{value:"lineWidth",paraId:19,tocIndex:3},{value:"组合描边宽度",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"opacity",paraId:19,tocIndex:3},{value:"组合透明度",paraId:19,tocIndex:3},{value:"number | string",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"shadowBlur",paraId:19,tocIndex:3},{value:"组合阴影模糊度",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowColor",paraId:19,tocIndex:3},{value:"组合阴影颜色",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowOffsetX",paraId:19,tocIndex:3},{value:"组合阴影在 x 轴方向上的偏移量",paraId:19,tocIndex:3},{value:"number | string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowOffsetY",paraId:19,tocIndex:3},{value:"组合阴影在 y 轴方向上的偏移量",paraId:19,tocIndex:3},{value:"number | string",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"shadowType",paraId:19,tocIndex:3},{value:"组合阴影类型",paraId:19,tocIndex:3},{value:"inner",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"outer",paraId:19,tocIndex:3},{value:"outer",paraId:19,tocIndex:3},{value:"stroke",paraId:19,tocIndex:3},{value:"组合描边色",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"#99add1",paraId:19,tocIndex:3},{value:"strokeOpacity",paraId:19,tocIndex:3},{value:"组合描边色透明度",paraId:19,tocIndex:3},{value:"number | string",paraId:19,tocIndex:3},{value:"1",paraId:19,tocIndex:3},{value:"visibility",paraId:19,tocIndex:3},{value:"组合是否可见",paraId:19,tocIndex:3},{value:"visible",paraId:19,tocIndex:3},{value:" | ",paraId:19,tocIndex:3},{value:"hidden",paraId:19,tocIndex:3},{value:"visible",paraId:19,tocIndex:3},{value:"x",paraId:19,tocIndex:3},{value:"组合 x 坐标",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"y",paraId:19,tocIndex:3},{value:"组合 y 坐标",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"z",paraId:19,tocIndex:3},{value:"组合 z 坐标",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"zIndex",paraId:19,tocIndex:3},{value:"组合渲染层级",paraId:19,tocIndex:3},{value:"number",paraId:19,tocIndex:3},{value:"0",paraId:19,tocIndex:3},{value:"{styleProps}",paraId:19,tocIndex:3},{value:"更多图形配置，参考 ",paraId:19,tocIndex:3},{value:"BaseStyleProps",paraId:19,tocIndex:3},{value:" 配置项",paraId:19,tocIndex:3},{value:"BaseStyleProps",paraId:19,tocIndex:3},{value:"-",paraId:19,tocIndex:3},{value:"可选值有：",paraId:21,tocIndex:4},{value:"auto",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"default",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"none",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"context-menu",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"help",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"pointer",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"progress",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"wait",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"cell",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"crosshair",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"text",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"vertical-text",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"alias",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"copy",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"move",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"no-drop",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"not-allowed",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"grab",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"grabbing",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"all-scroll",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"col-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"row-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"n-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"e-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"s-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"w-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ne-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"se-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"sw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ew-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"ns-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nesw-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"nwse-resize",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"zoom-in",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"zoom-out",paraId:21,tocIndex:4},{value:"示例：",paraId:22,tocIndex:4},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      fill: '#1783FF', // 填充色\n      stroke: '#000', // 描边色\n      lineWidth: 2, // 描边宽度\n    },\n  },\n});\n",paraId:23,tocIndex:4},{value:"效果如下：",paraId:24,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: { fill: '#1783FF', stroke: '#000', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:4},{value:"当 ",paraId:26,tocIndex:5},{value:"collapsed",paraId:26,tocIndex:5},{value:" 为 ",paraId:26,tocIndex:5},{value:"true",paraId:26,tocIndex:5},{value:" 时生效",paraId:26,tocIndex:5},{value:"属性",paraId:27,tocIndex:5},{value:"描述",paraId:27,tocIndex:5},{value:"类型",paraId:27,tocIndex:5},{value:"默认值",paraId:27,tocIndex:5},{value:"必选",paraId:27,tocIndex:5},{value:"collapsedCursor",paraId:27,tocIndex:5},{value:"组合收起时的鼠标移入样式，",paraId:27,tocIndex:5},{value:"配置项",paraId:28,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"默认与展开时的 cursor 一致",paraId:27,tocIndex:5},{value:"collapsedFill",paraId:27,tocIndex:5},{value:"组合收起时的填充色",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"默认与展开时的 fill 一致",paraId:27,tocIndex:5},{value:"collapsedFillOpacity",paraId:27,tocIndex:5},{value:"组合收起时的填充色透明度",paraId:27,tocIndex:5},{value:"number | string",paraId:27,tocIndex:5},{value:"1",paraId:27,tocIndex:5},{value:"collapsedIncreasedLineWidthForHitTesting",paraId:27,tocIndex:5},{value:"组合收起时，当 lineWidth 较小时，可交互区域也随之变小，有时我们想增大这个区域，让“细线”更容易被拾取到",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"0",paraId:27,tocIndex:5},{value:"collapsedLineCap",paraId:27,tocIndex:5},{value:"组合收起时的描边端点样式",paraId:27,tocIndex:5},{value:"round",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"square",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"butt",paraId:27,tocIndex:5},{value:"默认与展开时的 lineCap 一致",paraId:27,tocIndex:5},{value:"collapsedLineDash",paraId:27,tocIndex:5},{value:"组合收起时的描边虚线样式",paraId:27,tocIndex:5},{value:"number[]",paraId:27,tocIndex:5},{value:"默认与展开时的 lineDash 一致",paraId:27,tocIndex:5},{value:"collapsedLineDashOffset",paraId:27,tocIndex:5},{value:"组合收起时的描边虚线偏移量",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"默认与展开时的 lineDashOffset 一致",paraId:27,tocIndex:5},{value:"collapsedLineJoin",paraId:27,tocIndex:5},{value:"组合收起时的描边连接处样式",paraId:27,tocIndex:5},{value:"round",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"bevel",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"miter",paraId:27,tocIndex:5},{value:"默认与展开时的 lineJoin 一致",paraId:27,tocIndex:5},{value:"collapsedLineWidth",paraId:27,tocIndex:5},{value:"组合收起时的描边宽度",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"默认与展开时的 lineWidth 一致",paraId:27,tocIndex:5},{value:"collapsedMarker",paraId:27,tocIndex:5},{value:"组合收起时是否显示标记，",paraId:27,tocIndex:5},{value:"配置项",paraId:29,tocIndex:5},{value:"boolean",paraId:27,tocIndex:5},{value:"true",paraId:27,tocIndex:5},{value:"collapsedOpacity",paraId:27,tocIndex:5},{value:"组合收起时的透明度",paraId:27,tocIndex:5},{value:"number | string",paraId:27,tocIndex:5},{value:"默认与展开时的 opacity 一致",paraId:27,tocIndex:5},{value:"collapsedShadowBlur",paraId:27,tocIndex:5},{value:"组合收起时的阴影模糊度",paraId:27,tocIndex:5},{value:"number",paraId:27,tocIndex:5},{value:"默认与展开时的 shadowBlur 一致",paraId:27,tocIndex:5},{value:"collapsedShadowColor",paraId:27,tocIndex:5},{value:"组合收起时的阴影颜色",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"默认与展开时的 shadowColor 一致",paraId:27,tocIndex:5},{value:"collapsedShadowOffsetX",paraId:27,tocIndex:5},{value:"组合收起时的阴影在 x 轴方向上的偏移量",paraId:27,tocIndex:5},{value:"number | string",paraId:27,tocIndex:5},{value:"默认与展开时的 shadowOffsetX 一致",paraId:27,tocIndex:5},{value:"collapsedShadowOffsetY",paraId:27,tocIndex:5},{value:"组合收起时的阴影在 y 轴方向上的偏移量",paraId:27,tocIndex:5},{value:"number | string",paraId:27,tocIndex:5},{value:"默认与展开时的 shadowOffsetY 一致",paraId:27,tocIndex:5},{value:"collapsedShadowType",paraId:27,tocIndex:5},{value:"组合收起时的阴影类型",paraId:27,tocIndex:5},{value:"inner",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"outer",paraId:27,tocIndex:5},{value:"默认与展开时的 shadowType 一致",paraId:27,tocIndex:5},{value:"collapsedSize",paraId:27,tocIndex:5},{value:"组合收起时的大小",paraId:27,tocIndex:5},{value:"number | [number, number] | [number, number, number]",paraId:27,tocIndex:5},{value:"32",paraId:27,tocIndex:5},{value:"collapsedStroke",paraId:27,tocIndex:5},{value:"组合收起时的描边色",paraId:27,tocIndex:5},{value:"string",paraId:27,tocIndex:5},{value:"默认与展开时的 stroke 一致",paraId:27,tocIndex:5},{value:"collapsedStrokeOpacity",paraId:27,tocIndex:5},{value:"组合收起时的描边色透明度",paraId:27,tocIndex:5},{value:"number | string",paraId:27,tocIndex:5},{value:"默认与展开时的 strokeOpacity 一致",paraId:27,tocIndex:5},{value:"collapsedVisibility",paraId:27,tocIndex:5},{value:"组合收起时是否可见",paraId:27,tocIndex:5},{value:"visible",paraId:27,tocIndex:5},{value:" | ",paraId:27,tocIndex:5},{value:"hidden",paraId:27,tocIndex:5},{value:"默认与展开时的 visibility 一致",paraId:27,tocIndex:5},{value:"collapsed{styleProps}",paraId:27,tocIndex:5},{value:"更多图形配置，参考 ",paraId:27,tocIndex:5},{value:"BaseStyleProps",paraId:27,tocIndex:5},{value:" 配置项",paraId:27,tocIndex:5},{value:"BaseStyleProps",paraId:27,tocIndex:5},{value:"-",paraId:27,tocIndex:5},{value:"示例：",paraId:30,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      collapsedFill: '#1783FF', // 填充色\n      collapsedStroke: '#000', // 描边色\n      collapsedLineWidth: 2, // 描边宽度\n    },\n  },\n});\n",paraId:31,tocIndex:5},{value:"效果如下：",paraId:32,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1', style: { collapsed: true } }],\n  },\n  combo: {\n    style: { collapsedFill: '#1783FF', collapsedStroke: '#000', collapsedLineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:33,tocIndex:5},{value:"当 ",paraId:34,tocIndex:6},{value:"collapsedMarker",paraId:34,tocIndex:6},{value:" 为 ",paraId:34,tocIndex:6},{value:"true",paraId:34,tocIndex:6},{value:" 时生效",paraId:34,tocIndex:6},{value:"属性",paraId:35,tocIndex:6},{value:"描述",paraId:35,tocIndex:6},{value:"类型",paraId:35,tocIndex:6},{value:"默认值",paraId:35,tocIndex:6},{value:"必选",paraId:35,tocIndex:6},{value:"collapsedMarkerType",paraId:35,tocIndex:6},{value:"组合收起时显示的标记类型 ",paraId:35,tocIndex:6},{value:" - ",paraId:35,tocIndex:6},{value:"'child-count'",paraId:35,tocIndex:6},{value:": 子元素数量（包括 Node 和 Combo）",paraId:35,tocIndex:6},{value:"- ",paraId:35,tocIndex:6},{value:"'descendant-count'",paraId:35,tocIndex:6},{value:": 后代元素数量（包括 Node 和 Combo）",paraId:35,tocIndex:6},{value:"- ",paraId:35,tocIndex:6},{value:"'node-count'",paraId:35,tocIndex:6},{value:": 后代元素数量（只包括 Node）",paraId:35,tocIndex:6},{value:" - ",paraId:35,tocIndex:6},{value:"(children: NodeLikeData[]) => string",paraId:35,tocIndex:6},{value:": 自定义处理逻辑",paraId:35,tocIndex:6},{value:"child-count",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"descendant-count",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"node-count",paraId:35,tocIndex:6},{value:" | ((children: NodeData | ComboData[]) => string)",paraId:35,tocIndex:6},{value:"child-count",paraId:35,tocIndex:6},{value:"collapsedMarkerFill",paraId:35,tocIndex:6},{value:"图标文字颜色",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"#fff",paraId:35,tocIndex:6},{value:"collapsedMarkerFillOpacity",paraId:35,tocIndex:6},{value:"图标文字颜色透明度",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"1",paraId:35,tocIndex:6},{value:"collapsedMarkerFontSize",paraId:35,tocIndex:6},{value:"图标字体大小",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"12",paraId:35,tocIndex:6},{value:"collapsedMarkerFontWeight",paraId:35,tocIndex:6},{value:"图标字体粗细",paraId:35,tocIndex:6},{value:"number | string",paraId:35,tocIndex:6},{value:"normal",paraId:35,tocIndex:6},{value:"collapsedMarkerRadius",paraId:35,tocIndex:6},{value:"图标圆角半径",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"0",paraId:35,tocIndex:6},{value:"collapsedMarkerSrc",paraId:35,tocIndex:6},{value:"图片来源。其优先级高于 ",paraId:35,tocIndex:6},{value:"collapsedMarkerText",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerText",paraId:35,tocIndex:6},{value:"图标文字",paraId:35,tocIndex:6},{value:"string",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerTextAlign",paraId:35,tocIndex:6},{value:"图标文字水平对齐方式",paraId:35,tocIndex:6},{value:"center",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"end",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"left",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"right",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"start",paraId:35,tocIndex:6},{value:"center",paraId:35,tocIndex:6},{value:"collapsedMarkerTextBaseline",paraId:35,tocIndex:6},{value:"图标文字对齐基线",paraId:35,tocIndex:6},{value:"alphabetic",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"bottom",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"hanging",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"ideographic",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"middle",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"top",paraId:35,tocIndex:6},{value:"middle",paraId:35,tocIndex:6},{value:"collapsedMarkerWidth",paraId:35,tocIndex:6},{value:"图标宽度",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerHeight",paraId:35,tocIndex:6},{value:"图标高度",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"collapsedMarkerZIndex",paraId:35,tocIndex:6},{value:"图标层级",paraId:35,tocIndex:6},{value:"number",paraId:35,tocIndex:6},{value:"1",paraId:35,tocIndex:6},{value:"collapsedMarker{StyleProps}",paraId:35,tocIndex:6},{value:"更多图标样式配置，参考 ",paraId:35,tocIndex:6},{value:"TextStyleProps",paraId:35,tocIndex:6},{value:"、",paraId:35,tocIndex:6},{value:"ImageStyleProps",paraId:35,tocIndex:6},{value:" 配置项。例如 collapsedMarkerFontSize 代表文字图标的字体大小",paraId:35,tocIndex:6},{value:"TextStyleProps",paraId:35,tocIndex:6},{value:" | ",paraId:35,tocIndex:6},{value:"ImageStyleProps",paraId:35,tocIndex:6},{value:"-",paraId:35,tocIndex:6},{value:"示例：",paraId:36,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      collapsedMarkerFill: '#1783FF', // 填充色\n      collapsedMarkerFontSize: 30, // 图标字体大小\n    },\n  },\n});\n",paraId:37,tocIndex:6},{value:"效果如下：",paraId:38,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo1' },\n      { id: 'node2', combo: 'combo1' },\n    ],\n    combos: [{ id: 'combo1', style: { collapsed: true } }],\n  },\n  combo: {\n    style: {\n      collapsedMarkerFill: '#1783FF',\n      collapsedMarkerFontSize: 30,\n    },\n  },\n});\n\ngraph.render();\n",paraId:39,tocIndex:6},{value:"标签用于显示组合的文本信息：",paraId:40,tocIndex:7},{value:"属性",paraId:41,tocIndex:7},{value:"描述",paraId:41,tocIndex:7},{value:"类型",paraId:41,tocIndex:7},{value:"默认值",paraId:41,tocIndex:7},{value:"必选",paraId:41,tocIndex:7},{value:"label",paraId:41,tocIndex:7},{value:"是否显示组合标签",paraId:41,tocIndex:7},{value:"boolean",paraId:41,tocIndex:7},{value:"true",paraId:41,tocIndex:7},{value:"labelCursor",paraId:41,tocIndex:7},{value:"鼠标移入组合标签时显示的样式，",paraId:41,tocIndex:7},{value:"配置项",paraId:42,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"default",paraId:41,tocIndex:7},{value:"labelFill",paraId:41,tocIndex:7},{value:"组合标签文字颜色",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"#000",paraId:41,tocIndex:7},{value:"labelFillOpacity",paraId:41,tocIndex:7},{value:"组合标签文字颜色的透明度",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"1",paraId:41,tocIndex:7},{value:"labelFontFamily",paraId:41,tocIndex:7},{value:"组合标签字体族",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontSize",paraId:41,tocIndex:7},{value:"组合标签字体大小",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"12",paraId:41,tocIndex:7},{value:"labelFontStyle",paraId:41,tocIndex:7},{value:"组合标签字体样式",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"italic",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"oblique",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontVariant",paraId:41,tocIndex:7},{value:"组合标签字体变种",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"small-caps",paraId:41,tocIndex:7},{value:" | string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelFontWeight",paraId:41,tocIndex:7},{value:"组合标签字体粗细",paraId:41,tocIndex:7},{value:"normal",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"bold",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"bolder",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"lighter",paraId:41,tocIndex:7},{value:" | number",paraId:41,tocIndex:7},{value:"400",paraId:41,tocIndex:7},{value:"labelLeading",paraId:41,tocIndex:7},{value:"行间距",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelLetterSpacing",paraId:41,tocIndex:7},{value:"组合标签字间距",paraId:41,tocIndex:7},{value:"number | string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelLineHeight",paraId:41,tocIndex:7},{value:"组合标签行高",paraId:41,tocIndex:7},{value:"number | string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelMaxLines",paraId:41,tocIndex:7},{value:"组合标签最大行数",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"1",paraId:41,tocIndex:7},{value:"labelMaxWidth",paraId:41,tocIndex:7},{value:"组合标签最大宽度，",paraId:41,tocIndex:7},{value:"配置项",paraId:43,tocIndex:7},{value:"number | string",paraId:41,tocIndex:7},{value:"200%",paraId:41,tocIndex:7},{value:"labelOffsetX",paraId:41,tocIndex:7},{value:"组合标签在 x 轴方向上的偏移量",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelOffsetY",paraId:41,tocIndex:7},{value:"组合标签在 y 轴方向上的偏移量",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelPadding",paraId:41,tocIndex:7},{value:"组合标签内边距",paraId:41,tocIndex:7},{value:"number | number[]",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"labelPlacement",paraId:41,tocIndex:7},{value:"组合标签相对于组合主图形的位置，",paraId:41,tocIndex:7},{value:"配置项",paraId:44,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"bottom",paraId:41,tocIndex:7},{value:"labelText",paraId:41,tocIndex:7},{value:"组合标签文字内容",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextAlign",paraId:41,tocIndex:7},{value:"组合标签文本水平对齐方式",paraId:41,tocIndex:7},{value:"start",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"center",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"middle",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"end",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"left",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"right'               | ",paraId:41,tocIndex:7},{value:"left`",paraId:41,tocIndex:7},{value:"labelTextBaseline",paraId:41,tocIndex:7},{value:"组合标签文本基线",paraId:41,tocIndex:7},{value:"top",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"hanging",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"middle",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"alphabetic",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"ideographic",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"bottom",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationColor",paraId:41,tocIndex:7},{value:"组合标签文本装饰线颜色",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationLine",paraId:41,tocIndex:7},{value:"组合标签文本装饰线",paraId:41,tocIndex:7},{value:"string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextDecorationStyle",paraId:41,tocIndex:7},{value:"组合标签文本装饰线样式",paraId:41,tocIndex:7},{value:"solid",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"double",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"dotted",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"dashed",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"wavy",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextOverflow",paraId:41,tocIndex:7},{value:"组合标签文本溢出处理方式",paraId:41,tocIndex:7},{value:"clip",paraId:41,tocIndex:7},{value:" | ",paraId:41,tocIndex:7},{value:"ellipsis",paraId:41,tocIndex:7},{value:" | string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelTextPath",paraId:41,tocIndex:7},{value:"组合标签文本路径",paraId:41,tocIndex:7},{value:"Path",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"labelWordWrap",paraId:41,tocIndex:7},{value:"组合标签是否开启自动折行。开启 labelWordWrap 后，超出 labelMaxWidth 的部分自动换行",paraId:41,tocIndex:7},{value:"boolean",paraId:41,tocIndex:7},{value:"false",paraId:41,tocIndex:7},{value:"labelZIndex",paraId:41,tocIndex:7},{value:"组合标签渲染层级",paraId:41,tocIndex:7},{value:"number",paraId:41,tocIndex:7},{value:"0",paraId:41,tocIndex:7},{value:"label{StyleProps}",paraId:41,tocIndex:7},{value:"更多标签样式配置，参考 ",paraId:41,tocIndex:7},{value:"TextStyleProps",paraId:41,tocIndex:7},{value:" 属性值。比如 labelOpacity 代表标签透明度",paraId:41,tocIndex:7},{value:"TextStyleProps",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"可选值有：",paraId:45,tocIndex:8},{value:"left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"left-top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"left-bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right-top",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"right-bottom",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top-left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"top-right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom-left",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom-right",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"center",paraId:45,tocIndex:8},{value:" | ",paraId:45,tocIndex:8},{value:"bottom",paraId:45,tocIndex:8},{value:"开启自动折行 ",paraId:46,tocIndex:9},{value:"labelWordWrap",paraId:46,tocIndex:9},{value:" 后，超出该宽度则换行:",paraId:46,tocIndex:9},{value:"string: 表示以相对于组合元素宽度的百分比形式定义最大宽度。例如 ",paraId:47,tocIndex:9},{value:"50%",paraId:47,tocIndex:9},{value:" 表示标签宽度不超过组合宽度的一半",paraId:47,tocIndex:9},{value:"number: 表示以像素值为单位定义最大宽度。例如 100 表示标签的最大宽度为 100 像素",paraId:47,tocIndex:9},{value:"比如，设置多行标签文字：",paraId:48,tocIndex:9},{value:'{\n  "labelWordWrap": true,\n  "labelMaxWidth": 200,\n  "labelMaxLines": 3\n}\n',paraId:49,tocIndex:9},{value:"示例：",paraId:50,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置\n  combo: {\n    style: {\n      label: true, // 是否显示组合标签\n      labelText: '组合名称', // 标签文字内容\n      labelFill: '#000', // 标签文字颜色\n      labelFontSize: 12, // 标签字体大小\n      labelFontWeight: 'normal', // 标签字体粗细\n      labelPlacement: 'bottom', // 标签相对于组合主图形的位置\n    },\n  },\n});\n",paraId:51,tocIndex:9},{value:"效果如下：",paraId:52,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [\n      {\n        id: 'combo1',\n        style: {\n          label: true,\n          labelText: '组合名称',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:53,tocIndex:9},{value:"标签背景用于显示组合标签的背景：",paraId:54,tocIndex:10},{value:"属性",paraId:55,tocIndex:10},{value:"描述",paraId:55,tocIndex:10},{value:"类型",paraId:55,tocIndex:10},{value:"默认值",paraId:55,tocIndex:10},{value:"labelBackground",paraId:55,tocIndex:10},{value:"组合标签背景是否显示",paraId:55,tocIndex:10},{value:"boolean",paraId:55,tocIndex:10},{value:"false",paraId:55,tocIndex:10},{value:"labelBackgroundCursor",paraId:55,tocIndex:10},{value:"组合标签背景鼠标移入样式，",paraId:55,tocIndex:10},{value:"配置项",paraId:56,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"default",paraId:55,tocIndex:10},{value:"labelBackgroundFill",paraId:55,tocIndex:10},{value:"组合标签背景填充色",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"#000",paraId:55,tocIndex:10},{value:"labelBackgroundFillOpacity",paraId:55,tocIndex:10},{value:"组合标签背景透明度",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"0.75",paraId:55,tocIndex:10},{value:"labelBackgroundHeight",paraId:55,tocIndex:10},{value:"组合标签背景高度",paraId:55,tocIndex:10},{value:"string | number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineDash",paraId:55,tocIndex:10},{value:"组合标签背景虚线配置",paraId:55,tocIndex:10},{value:"number | string |(number | string )[]",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineDashOffset",paraId:55,tocIndex:10},{value:"组合标签背景虚线偏移量",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundLineWidth",paraId:55,tocIndex:10},{value:"组合标签背景描边线宽",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundPadding",paraId:55,tocIndex:10},{value:"组合标签背景内间距",paraId:55,tocIndex:10},{value:"number | number[]",paraId:55,tocIndex:10},{value:"[2, 4, 2, 4]",paraId:55,tocIndex:10},{value:"labelBackgroundRadius",paraId:55,tocIndex:10},{value:"组合标签背景圆角半径 ",paraId:55,tocIndex:10},{value:" - number: 统一设置四个圆角半径 ",paraId:55,tocIndex:10},{value:" - number[]: 分别设置四个圆角半径，不足则自动补充",paraId:55,tocIndex:10},{value:"number | number[]",paraId:55,tocIndex:10},{value:"0",paraId:55,tocIndex:10},{value:"labelBackgroundShadowBlur",paraId:55,tocIndex:10},{value:"组合标签背景阴影模糊程度",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowColor",paraId:55,tocIndex:10},{value:"组合标签背景阴影颜色",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowOffsetX",paraId:55,tocIndex:10},{value:"组合标签背景阴影 X 方向偏移",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundShadowOffsetY",paraId:55,tocIndex:10},{value:"组合标签背景阴影 Y 方向偏移",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundStroke",paraId:55,tocIndex:10},{value:"组合标签背景描边颜色",paraId:55,tocIndex:10},{value:"string",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundStrokeOpacity",paraId:55,tocIndex:10},{value:"组合标签背景描边透明度",paraId:55,tocIndex:10},{value:"number | string",paraId:55,tocIndex:10},{value:"1",paraId:55,tocIndex:10},{value:"labelBackgroundVisibility",paraId:55,tocIndex:10},{value:"组合标签背景是否可见",paraId:55,tocIndex:10},{value:"visible",paraId:55,tocIndex:10},{value:" | ",paraId:55,tocIndex:10},{value:"hidden",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"labelBackgroundZIndex",paraId:55,tocIndex:10},{value:"组合标签背景渲染层级",paraId:55,tocIndex:10},{value:"number",paraId:55,tocIndex:10},{value:"1",paraId:55,tocIndex:10},{value:"labelBackground{StyleProps}",paraId:55,tocIndex:10},{value:"更多标签背景样式配置，参考 ",paraId:55,tocIndex:10},{value:"RectStyleProps",paraId:55,tocIndex:10},{value:" 属性值。例如 labelBackgroundOpacity 代表标签背景透明度",paraId:55,tocIndex:10},{value:"RectStyleProps",paraId:55,tocIndex:10},{value:"-",paraId:55,tocIndex:10},{value:"示例：",paraId:57,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      labelBackground: true, // 是否显示组合标签背景\n      labelBackgroundFill: '#000', // label背景填充\n      labelBackgroundRadius: 10, // label背景圆角\n      labelBackgroundFillOpacity: 0.5, // label背景填充色透明度\n    },\n  },\n});\n",paraId:58,tocIndex:10},{value:"效果如下：",paraId:59,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [\n      {\n        id: 'combo1',\n        style: {\n          label: true,\n          labelText: '组合名称',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n          labelBackground: true,\n          labelBackgroundFill: '#000',\n          labelBackgroundRadius: 10,\n          labelBackgroundFillOpacity: 0.5,\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:60,tocIndex:10},{value:"属性",paraId:61,tocIndex:11},{value:"描述",paraId:61,tocIndex:11},{value:"类型",paraId:61,tocIndex:11},{value:"默认值",paraId:61,tocIndex:11},{value:"必选",paraId:61,tocIndex:11},{value:"halo",paraId:61,tocIndex:11},{value:"是否显示组合光晕",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"false",paraId:61,tocIndex:11},{value:"haloCursor",paraId:61,tocIndex:11},{value:"组合光晕鼠标移入样式，",paraId:61,tocIndex:11},{value:"配置项",paraId:62,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"default",paraId:61,tocIndex:11},{value:"haloDraggable",paraId:61,tocIndex:11},{value:"组合光晕是否允许拖拽",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"true",paraId:61,tocIndex:11},{value:"haloDroppable",paraId:61,tocIndex:11},{value:"组合光晕是否允许接收被拖拽的元素",paraId:61,tocIndex:11},{value:"boolean",paraId:61,tocIndex:11},{value:"false",paraId:61,tocIndex:11},{value:"haloFill",paraId:61,tocIndex:11},{value:"光晕填充色",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"与主图形的填充色 ",paraId:61,tocIndex:11},{value:"fill",paraId:61,tocIndex:11},{value:" 一致",paraId:61,tocIndex:11},{value:"haloFillRule",paraId:61,tocIndex:11},{value:"组合光晕填充规则",paraId:61,tocIndex:11},{value:"nonzero",paraId:61,tocIndex:11},{value:" | ",paraId:61,tocIndex:11},{value:"evenodd",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"haloFilter",paraId:61,tocIndex:11},{value:"组合光晕滤镜",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"haloLineWidth",paraId:61,tocIndex:11},{value:"组合光晕描边宽度",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"12",paraId:61,tocIndex:11},{value:"haloPointerEvents",paraId:61,tocIndex:11},{value:"组合光晕效果是否响应指针事件，",paraId:61,tocIndex:11},{value:"配置项",paraId:63,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"none",paraId:61,tocIndex:11},{value:"haloStroke",paraId:61,tocIndex:11},{value:"组合光晕描边色，",paraId:61,tocIndex:11},{value:"此属性用于设置组合周围光晕的颜色，帮助突出显示组合",paraId:61,tocIndex:11},{value:"string",paraId:61,tocIndex:11},{value:"#99add1",paraId:61,tocIndex:11},{value:"haloStrokeOpacity",paraId:61,tocIndex:11},{value:"组合光晕描边色透明度",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"0.25",paraId:61,tocIndex:11},{value:"haloVisibility",paraId:61,tocIndex:11},{value:"组合光晕可见性",paraId:61,tocIndex:11},{value:"visible",paraId:61,tocIndex:11},{value:" | ",paraId:61,tocIndex:11},{value:"hidden",paraId:61,tocIndex:11},{value:"visible",paraId:61,tocIndex:11},{value:"haloZIndex",paraId:61,tocIndex:11},{value:"组合光晕渲染层级",paraId:61,tocIndex:11},{value:"number",paraId:61,tocIndex:11},{value:"-1",paraId:61,tocIndex:11},{value:"halo{StyleProps}",paraId:61,tocIndex:11},{value:"更多光晕样式配置，参考 ",paraId:61,tocIndex:11},{value:"DisplayObject",paraId:61,tocIndex:11},{value:" 配置项。例如 haloFillOpacity 代表光晕填充色透明度",paraId:61,tocIndex:11},{value:"DisplayObject",paraId:61,tocIndex:11},{value:"-",paraId:61,tocIndex:11},{value:"可选值有：\n",paraId:64,tocIndex:12},{value:"visible",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblepainted",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblestroke",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"non-transparent-pixel",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visiblefill",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"visible",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"painted",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"fill",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"stroke",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"all",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"none",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"auto",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"inherit",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"initial",paraId:64,tocIndex:12},{value:" | ",paraId:64,tocIndex:12},{value:"unset",paraId:64,tocIndex:12},{value:"示例：",paraId:65,tocIndex:12},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      halo: true, // 是否显示组合光晕\n      haloStroke: '#FF0000', // 组合光晕描边色\n      haloLineWidth: 10, // 组合光晕描边宽度\n    },\n  },\n});\n",paraId:66,tocIndex:12},{value:"效果如下：",paraId:67,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: {\n      halo: true,\n      haloStroke: '#FF0000',\n      haloLineWidth: 10,\n    },\n  },\n});\n\ngraph.render();\n",paraId:68,tocIndex:12},{value:"属性",paraId:69,tocIndex:13},{value:"描述",paraId:69,tocIndex:13},{value:"类型",paraId:69,tocIndex:13},{value:"默认值",paraId:69,tocIndex:13},{value:"icon",paraId:69,tocIndex:13},{value:"是否显示组合图标",paraId:69,tocIndex:13},{value:"boolean",paraId:69,tocIndex:13},{value:"true",paraId:69,tocIndex:13},{value:"iconFill",paraId:69,tocIndex:13},{value:"组合图标文字颜色",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconFontFamily",paraId:69,tocIndex:13},{value:"组合图标字体族",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconFontSize",paraId:69,tocIndex:13},{value:"组合图标字体大小",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"16",paraId:69,tocIndex:13},{value:"iconFontStyle",paraId:69,tocIndex:13},{value:"组合图标字体样式",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"italic",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"oblique",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconFontVariant",paraId:69,tocIndex:13},{value:"组合图标字体变种",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"small-caps",paraId:69,tocIndex:13},{value:" | string",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconFontWeight",paraId:69,tocIndex:13},{value:"组合图标字体粗细",paraId:69,tocIndex:13},{value:"number | string",paraId:69,tocIndex:13},{value:"normal",paraId:69,tocIndex:13},{value:"iconHeight",paraId:69,tocIndex:13},{value:"组合图标高度",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"主图形高度的一半",paraId:69,tocIndex:13},{value:"iconLetterSpacing",paraId:69,tocIndex:13},{value:"组合图标文本字间距",paraId:69,tocIndex:13},{value:"number | string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconLineHeight",paraId:69,tocIndex:13},{value:"组合图标文本行高",paraId:69,tocIndex:13},{value:"number | string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconMaxLines",paraId:69,tocIndex:13},{value:"组合图标文本最大行数",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"1",paraId:69,tocIndex:13},{value:"iconRadius",paraId:69,tocIndex:13},{value:"组合图标圆角半径",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"0",paraId:69,tocIndex:13},{value:"iconSrc",paraId:69,tocIndex:13},{value:"组合图片来源。其优先级高于 iconText",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconText",paraId:69,tocIndex:13},{value:"组合图标文字",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextAlign",paraId:69,tocIndex:13},{value:"组合图标文本水平对齐方式",paraId:69,tocIndex:13},{value:"start",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"center",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"middle",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"end",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"left",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"right",paraId:69,tocIndex:13},{value:"left",paraId:69,tocIndex:13},{value:"iconTextBaseline",paraId:69,tocIndex:13},{value:"组合图标文本基线",paraId:69,tocIndex:13},{value:"top",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"hanging",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"middle",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"alphabetic",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"ideographic",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"bottom",paraId:69,tocIndex:13},{value:"alphabetic",paraId:69,tocIndex:13},{value:"iconTextDecorationColor",paraId:69,tocIndex:13},{value:"组合图标文本装饰线颜色",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextDecorationLine",paraId:69,tocIndex:13},{value:"组合图标文本装饰线",paraId:69,tocIndex:13},{value:"string",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"iconTextDecorationStyle",paraId:69,tocIndex:13},{value:"组合图标文本装饰线样式",paraId:69,tocIndex:13},{value:"solid",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"double",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"dotted",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"dashed",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"wavy",paraId:69,tocIndex:13},{value:"solid",paraId:69,tocIndex:13},{value:"iconTextOverflow",paraId:69,tocIndex:13},{value:"组合图标文本溢出处理方式",paraId:69,tocIndex:13},{value:"clip",paraId:69,tocIndex:13},{value:" | ",paraId:69,tocIndex:13},{value:"ellipsis",paraId:69,tocIndex:13},{value:" | string",paraId:69,tocIndex:13},{value:"clip",paraId:69,tocIndex:13},{value:"iconWidth",paraId:69,tocIndex:13},{value:"组合图标宽度",paraId:69,tocIndex:13},{value:"number",paraId:69,tocIndex:13},{value:"主图形宽度的一半",paraId:69,tocIndex:13},{value:"iconWordWrap",paraId:69,tocIndex:13},{value:"组合图标文本是否自动换行",paraId:69,tocIndex:13},{value:"boolean",paraId:69,tocIndex:13},{value:"-",paraId:69,tocIndex:13},{value:"示例：",paraId:70,tocIndex:13},{value:"const graph = new Graph({\n  // 其他配置...\n  combo: {\n    style: {\n      iconText: '文本', // 图标文本\n      iconFill: '#FF0000', // 图标文本颜色\n      iconFontSize: 14, // 图标文本大小\n      iconFontWeight: 'bold', // 图标文本粗细\n      iconFontStyle: 'italic', // 图标文本样式\n    },\n  },\n});\n",paraId:71,tocIndex:13},{value:"效果如下：",paraId:72,tocIndex:13},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    combos: [{ id: 'combo1' }],\n  },\n  combo: {\n    style: {\n      iconText: '文本',\n      iconFill: '#FF0000',\n      iconFontSize: 14,\n      iconFontWeight: 'bold',\n      iconFontStyle: 'italic',\n    },\n  },\n});\n\ngraph.render();\n",paraId:73,tocIndex:13},{value:"在一些交互行为中，比如点击选中一个组合或鼠标悬停激活一个边，仅仅是在该元素做了某些状态的标识。为了将这些状态反应到终端用户所见的视觉空间中，我们需要为不同的状态设置不同的图元素样式，以响应该图元素状态的变化。",paraId:74,tocIndex:14},{value:"G6 提供了几种内置的状态，包括选中（selected）、高亮（highlight）、激活（active）、不活跃（inactive）和禁用（disabled）。此外，它还支持自定义状态，以满足更特定的需求。对于每个状态，开发者可以定义一套样式规则，这些规则会覆盖元素的默认样式。",paraId:75,tocIndex:14},{value:"数据结构如下：",paraId:76,tocIndex:14},{value:"type ComboState = {\n  [state: string]: ComboStyle;\n};\n",paraId:77,tocIndex:14},{value:"例如，当组合处于 ",paraId:78,tocIndex:14},{value:"focus",paraId:78,tocIndex:14},{value:" 状态时，可以为其添加一个宽度为 3 且颜色为橙色的描边。",paraId:78,tocIndex:14},{value:"const graph = new Graph({\n  combo: {\n    state: {\n      focus: {\n        lineWidth: 3, // 描边宽度\n        stroke: 'orange', // 描边颜色\n      },\n    },\n  },\n});\n",paraId:79,tocIndex:14},{value:"效果如下图所示：",paraId:80,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', combo: 'combo1' }],\n    combos: [{ id: 'combo1', states: ['focus'] }],\n  },\n  combo: {\n    state: {\n      focus: {\n        lineWidth: 3,\n        stroke: 'orange',\n        fill: 'orange',\n        fillOpacity: 0.2,\n      },\n    },\n  },\n});\n\ngraph.render();\n",paraId:81,tocIndex:14},{value:"定义组合的动画效果，支持下列两种配置方式：",paraId:82,tocIndex:15},{value:"关闭组合全部动画",paraId:83,tocIndex:15},{value:'{\n  "combo": {\n    "animation": false\n  }\n}\n',paraId:84,tocIndex:15},{value:"配置阶段动画",paraId:85,tocIndex:15},{value:"阶段动画是指组合在进入画布、更新、离开画布时的动画效果。目前支持的阶段包括：",paraId:86,tocIndex:15},{value:"enter",paraId:87,tocIndex:15},{value:": 组合进入画布时的动画",paraId:87,tocIndex:15},{value:"update",paraId:87,tocIndex:15},{value:": 组合更新时的动画",paraId:87,tocIndex:15},{value:"exit",paraId:87,tocIndex:15},{value:": 组合离开画布时的动画",paraId:87,tocIndex:15},{value:"show",paraId:87,tocIndex:15},{value:": 组合从隐藏状态显示时的动画",paraId:87,tocIndex:15},{value:"hide",paraId:87,tocIndex:15},{value:": 组合隐藏时的动画",paraId:87,tocIndex:15},{value:"collapse",paraId:87,tocIndex:15},{value:": 组合收起时的动画",paraId:87,tocIndex:15},{value:"expand",paraId:87,tocIndex:15},{value:": 组合展开时的动画",paraId:87,tocIndex:15},{value:"你可以参考 ",paraId:88,tocIndex:15},{value:"动画范式",paraId:89,tocIndex:15},{value:" 使用动画语法来配置组合，如：",paraId:88,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["x", "y"], // 更新时只对 x 和 y 属性进行动画\n          "duration": 1000, // 动画持续时间\n          "easing": "linear" // 缓动函数\n        }\n      ],\n  }\n}\n',paraId:90,tocIndex:15},{value:"也可以使用内置的动画效果：",paraId:91,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "enter": "fade", // 使用渐变动画\n      "update": "translate", // 使用平移动画\n      "exit": "fade" // 使用渐变动画\n    }\n  }\n}\n',paraId:92,tocIndex:15},{value:"你可以传入 false 来关闭特定阶段的动画：",paraId:93,tocIndex:15},{value:'{\n  "combo": {\n    "animation": {\n      "enter": false // 关闭组合入场动画\n    }\n  }\n}\n',paraId:94,tocIndex:15},{value:"定义组合的色板，即预定义组合颜色池，并根据规则进行分配，将颜色映射到 ",paraId:95,tocIndex:16},{value:"fill",paraId:95,tocIndex:16},{value:" 属性。",paraId:95,tocIndex:16},{value:"有关色板的定义，请参考 ",paraId:96,tocIndex:16},{value:"色板",paraId:97,tocIndex:16},{value:"。",paraId:96,tocIndex:16},{value:"属性",paraId:98,tocIndex:16},{value:"描述",paraId:98,tocIndex:16},{value:"类型",paraId:98,tocIndex:16},{value:"默认值",paraId:98,tocIndex:16},{value:"type",paraId:98,tocIndex:16},{value:"指定当前色板类型。",paraId:98,tocIndex:16},{value:" - ",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:": 离散色板 ",paraId:98,tocIndex:16},{value:" - ",paraId:98,tocIndex:16},{value:"value",paraId:98,tocIndex:16},{value:": 连续色板",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:" | ",paraId:98,tocIndex:16},{value:"value",paraId:98,tocIndex:16},{value:"group",paraId:98,tocIndex:16},{value:"field",paraId:98,tocIndex:16},{value:"指定元素数据中的分组字段。若不指定，默认取 id 作为分组字段",paraId:98,tocIndex:16},{value:"string | ((datum) => string)",paraId:98,tocIndex:16},{value:"id",paraId:98,tocIndex:16},{value:"color",paraId:98,tocIndex:16},{value:"色板颜色。如果色板注册过，可以直接指定其注册名，也接受一个颜色数组",paraId:98,tocIndex:16},{value:"string | string[]",paraId:98,tocIndex:16},{value:"-",paraId:98,tocIndex:16},{value:"invert",paraId:98,tocIndex:16},{value:"是否反转色板",paraId:98,tocIndex:16},{value:"boolean",paraId:98,tocIndex:16},{value:"false",paraId:98,tocIndex:16},{value:"如将一组数据按 ",paraId:99,tocIndex:16},{value:"category",paraId:99,tocIndex:16},{value:" 字段分配组合颜色，使得同类别的组合颜色相同：",paraId:99,tocIndex:16},{value:'{\n  "combo": {\n    "palette": {\n      "type": "group",\n      "field": "category",\n      "color": ["#1783FF", "#F08F56", "#D580FF", "#00C9C9", "#7863FF"]\n    }\n  }\n}\n',paraId:100,tocIndex:16},{value:"效果如下图所示：",paraId:101,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    combos: new Array(8)\n      .fill(0)\n      .map((_, i) => ({ id: `combo-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 8 },\n  combo: {\n    style: { fillOpacity: 0.4 },\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#1783FF', '#F08F56', '#D580FF', '#00C9C9', '#7863FF'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:102,tocIndex:16},{value:"也可以使用默认配置：",paraId:103,tocIndex:16},{value:'{\n  "combo": {\n    "palette": "tableau" // tableau 为色板名，默认根据 ID 分配颜色\n  }\n}\n',paraId:104,tocIndex:16},{value:"效果如下图所示：",paraId:105,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    combos: new Array(8)\n      .fill(0)\n      .map((_, i) => ({ id: `combo-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 8 },\n  combo: {\n    style: { fillOpacity: 0.4 },\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:106,tocIndex:16}]},76779:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(65686);const d=[{value:"圆形组合以圆形边界包裹子节点或子组合，适合表示平等或非层级化的群组关系。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"适合表示无明确层级关系的节点群组，圆形组合能体现成员的平等性，如社交网络中的用户群体、分散式团队结构（突出协作性）。",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    behaviors: ['drag-element', 'collapse-expand'],\n    plugins: ['grid-line'],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'circle' }, 'type').disable();\n  },\n);\n",paraId:3,tocIndex:1},{value:"设置 ",paraId:4,tocIndex:1},{value:"combo.type",paraId:4,tocIndex:1},{value:" 为 ",paraId:4,tocIndex:1},{value:"circle",paraId:4,tocIndex:1},{value:" 以使用圆形组合。",paraId:4,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:5,tocIndex:2},{value:"BaseCombo",paraId:6,tocIndex:2},{value:"以下示例为兴趣小组人员分布：",paraId:7,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 600,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo2', style: { x: 150, y: 150 } },\n      { id: 'node2', combo: 'combo2', style: { x: 200, y: 150 } },\n      { id: 'node3', combo: 'combo3', style: { x: 300, y: 150 } },\n      { id: 'node4', combo: 'combo3', style: { x: 350, y: 150 } },\n      { id: 'node5', combo: 'combo4', style: { x: 230, y: 300 } },\n      { id: 'node6', combo: 'combo4', style: { x: 280, y: 300 } },\n    ],\n    combos: [\n      { id: 'combo1', style: { labelText: '兴趣小组' } },\n      { id: 'combo2', combo: 'combo1', style: { labelText: '书法' } },\n      { id: 'combo3', combo: 'combo1', style: { labelText: '影视' } },\n      { id: 'combo4', combo: 'combo1', style: { labelText: '游戏' } },\n    ],\n  },\n  node: {\n    style: {\n      labelText: (d) => d.id,\n    },\n  },\n  behaviors: ['drag-element', 'collapse-expand'],\n  animation: true,\n});\n\ngraph.render();\n",paraId:8,tocIndex:3}]},48371:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(27111);const d=[{value:"矩形组合以直角边界组织内容，支持严格的层级结构。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"系统架构图",paraId:2,tocIndex:0},{value:"：如系统架构里面的服务分层，以及每层服务里面的细分等。",paraId:2,tocIndex:0},{value:"地理区域划分",paraId:2,tocIndex:0},{value:"：如城市包含多个区域，矩形组合能直观展示行政边界或功能分区。",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node1', combo: 'combo1', style: { x: 250, y: 150 } },\n        { id: 'node2', combo: 'combo1', style: { x: 350, y: 150 } },\n        { id: 'node3', combo: 'combo2', style: { x: 250, y: 300 } },\n      ],\n      combos: [\n        { id: 'combo1', combo: 'combo2' },\n        { id: 'combo2', style: {} },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    combo: { type: 'rect' },\n    behaviors: ['collapse-expand'],\n    plugins: [{ type: 'grid-line', size: 30 }],\n    animation: true,\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'rect' }, 'type').disable();\n  },\n);\n",paraId:3,tocIndex:1},{value:"设置 ",paraId:4,tocIndex:1},{value:"combo.type",paraId:4,tocIndex:1},{value:" 为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:" 以使用矩形组合。",paraId:4,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:5,tocIndex:2},{value:"BaseCombo",paraId:6,tocIndex:2},{value:"以下示例为简单的微服务架构服务层：",paraId:7,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo2', style: { x: 100, y: 100, labelText: '微服务1' } },\n      { id: 'node2', combo: 'combo2', style: { x: 200, y: 100, labelText: '微服务2' } },\n      { id: 'node3', combo: 'combo2', style: { x: 100, y: 200, labelText: '微服务3' } },\n      { id: 'node4', combo: 'combo2', style: { x: 200, y: 200, labelText: '微服务4' } },\n      { id: 'node5', combo: 'combo3', style: { x: 300, y: 100, labelText: '第三方登录' } },\n      { id: 'node6', combo: 'combo3', style: { x: 300, y: 150, labelText: '任务调度' } },\n      { id: 'node7', combo: 'combo3', style: { x: 300, y: 200, labelText: '消息服务' } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node1', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n    ],\n    combos: [\n      { id: 'combo1', style: { labelText: '服务层' } },\n      { id: 'combo2', combo: 'combo1', style: { labelText: '业务微服务' } },\n      { id: 'combo3', combo: 'combo1', style: { labelText: '集成模块' } },\n    ],\n  },\n  node: {\n    type: 'rect',\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  combo: {\n    type: 'rect',\n    style: {\n      padding: 16,\n    },\n  },\n  behaviors: ['drag-element', 'collapse-expand'],\n  animation: true,\n});\n\ngraph.render();\n",paraId:8,tocIndex:3}]},27905:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70639);const d=[{value:"G6 提供了两种 ",paraId:0},{value:"内置组合",paraId:1},{value:" 类型：圆形组合和矩形 Combo 。但在复杂的业务场景中，你可能需要创建具有特定样式、交互效果或行为逻辑的自定义 Combo 。",paraId:0},{value:"在 G6 中，一个完整的 Combo 通常由以下几个部分组成：",paraId:2,tocIndex:0},{value:"key",paraId:3,tocIndex:0},{value:" ： Combo 的主图形，表示 Combo 的主要形状，如圆形、矩形等；",paraId:3,tocIndex:0},{value:"label",paraId:3,tocIndex:0},{value:" ：文本标签，通常用于展示 Combo 的名称或描述；",paraId:3,tocIndex:0},{value:"halo",paraId:3,tocIndex:0},{value:" ：主图形周围展示的光晕效果的图形；",paraId:3,tocIndex:0},{value:"Combo 不同于普通节点，它具有以下特性：",paraId:4,tocIndex:1},{value:"包含性",paraId:5,tocIndex:1},{value:"： Combo 可以包含节点和其他 Combo ，形成层级结构",paraId:5,tocIndex:1},{value:"两种状态",paraId:5,tocIndex:1},{value:"：展开(Expanded)和收起(Collapsed)状态",paraId:5,tocIndex:1},{value:"自适应大小",paraId:5,tocIndex:1},{value:"：根据内部元素动态调整大小",paraId:5,tocIndex:1},{value:"拖拽行为",paraId:5,tocIndex:1},{value:"：支持整体拖拽及内部元素拖入/拖出",paraId:5,tocIndex:1},{value:"选择合适的方式",paraId:6,tocIndex:1},{value:"创建自定义 Combo 的方式有两种途径：",paraId:7,tocIndex:2},{value:"推荐",paraId:8,tocIndex:2},{value:"这是最常用的方式，你可以选择继承以下类型之一：",paraId:9,tocIndex:3},{value:"BaseCombo",paraId:10,tocIndex:3},{value:" - 最基础的 Combo 类，提供 Combo 的核心功能",paraId:10,tocIndex:3},{value:"Circle",paraId:10,tocIndex:3},{value:" - 圆形 Combo",paraId:10,tocIndex:3},{value:"Rect",paraId:10,tocIndex:3},{value:" - 矩形 Combo",paraId:10,tocIndex:3},{value:"为什么选择这种方式？",paraId:11,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"代码量少",paraId:12,tocIndex:3},{value:"：复用现有 Combo 的属性和方法，只需专注于新增功能",paraId:12,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"开发迅速",paraId:12,tocIndex:3},{value:"：适合大多数项目需求，快速实现业务目标",paraId:12,tocIndex:3},{value:"📌 ",paraId:12,tocIndex:3},{value:"易于维护",paraId:12,tocIndex:3},{value:"：代码结构清晰，继承关系明确",paraId:12,tocIndex:3},{value:"高级用法",paraId:13,tocIndex:3},{value:"如果现有 Combo 类型都不满足需求，你可以基于 G 的底层图形系统从零创建 Combo。",paraId:14,tocIndex:4},{value:"为什么选择这种方式？",paraId:15,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"最大自由度",paraId:16,tocIndex:4},{value:"：完全控制 Combo 的每个细节，实现任意复杂效果",paraId:16,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"特殊需求",paraId:16,tocIndex:4},{value:"：现有 Combo 类型无法满足的高度定制场景",paraId:16,tocIndex:4},{value:"📌 ",paraId:16,tocIndex:4},{value:"性能优化",paraId:16,tocIndex:4},{value:"：针对特定场景的性能优化",paraId:16,tocIndex:4},{value:"从零开发的自定义 Combo 需要自行处理所有细节，包括图形绘制、事件响应、状态变化、展开/收起逻辑等，开发难度较大。这里可以直接参考 ",paraId:17},{value:"源码",paraId:17},{value:" 进行实现。",paraId:17},{value:"让我们从继承 ",paraId:18,tocIndex:5},{value:"BaseCombo",paraId:18,tocIndex:5},{value:" 开始，实现一个自定义六边形 Combo ：",paraId:18,tocIndex:5},{value:"import { Graph, register, BaseCombo, ExtensionCategory } from '@antv/g6';\n\n// 定义收起状态的按钮路径\nconst collapse = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x + r - 4, y],\n  ];\n};\n\n// 定义展开状态的按钮路径\nconst expand = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n    ['M', x - r + r, y - r + 4],\n    ['L', x, y + r - 4],\n  ];\n};\n\nclass HexagonCombo extends BaseCombo {\n  // 获取六边形的路径\n  getKeyPath(attributes) {\n    const [width, height] = this.getKeySize(attributes);\n    const padding = 10;\n    const size = Math.min(width, height) + padding;\n\n    // 计算六边形的顶点\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n      const angle = (Math.PI / 3) * i;\n      const x = (size / 2) * Math.cos(angle);\n      const y = (size / 2) * Math.sin(angle);\n      points.push([x, y]);\n    }\n\n    // 构建SVG路径\n    const path = [['M', points[0][0], points[0][1]]];\n    for (let i = 1; i < 6; i++) {\n      path.push(['L', points[i][0], points[i][1]]);\n    }\n    path.push(['Z']);\n\n    return path;\n  }\n\n  // 获取主图形样式\n  getKeyStyle(attributes) {\n    const style = super.getKeyStyle(attributes);\n\n    return {\n      ...style,\n      d: this.getKeyPath(attributes),\n      fill: attributes.collapsed ? '#FF9900' : '#F04864',\n      fillOpacity: attributes.collapsed ? 0.5 : 0.2,\n      stroke: '#54BECC',\n      lineWidth: 2,\n    };\n  }\n\n  // 绘制主图形\n  drawKeyShape(attributes, container) {\n    return this.upsert('key', 'path', this.getKeyStyle(attributes), container);\n  }\n\n  // 绘制展开/收起按钮，使用路径实现更精细的控制\n  drawCollapseButton(attributes) {\n    const { collapsed } = attributes;\n    const [width] = this.getKeySize(attributes);\n    const btnR = 8;\n    const x = width / 2 + btnR;\n    const d = collapsed ? expand(x, 0, btnR) : collapse(x, 0, btnR);\n\n    // 创建点击区域和按钮图形\n    const hitArea = this.upsert('hit-area', 'circle', { cx: x, r: 8, fill: '#fff', cursor: 'pointer' }, this);\n    this.upsert('button', 'path', { stroke: '#54BECC', d, cursor: 'pointer', lineWidth: 1.4 }, hitArea);\n  }\n\n  // 重写render方法，添加更多自定义图形\n  render(attributes, container) {\n    super.render(attributes, container);\n    this.drawCollapseButton(attributes, container);\n  }\n\n  // 使用生命周期钩子添加事件监听\n  onCreate() {\n    this.shapeMap['hit-area'].addEventListener('click', () => {\n      const id = this.id;\n      const collapsed = !this.attributes.collapsed;\n      const { graph } = this.context;\n      if (collapsed) graph.collapseElement(id);\n      else graph.expandElement(id);\n    });\n  }\n}\n\n// 注册自定义 Combo\nregister(ExtensionCategory.COMBO, 'hexagon-combo', HexagonCombo);\n\n// 创建图实例并使用自定义 Combo\nconst graph = new Graph({\n  container: 'container',\n  height: 250,\n  data: {\n    nodes: [\n      { id: 'node1', combo: 'combo1', style: { x: 100, y: 100 } },\n      { id: 'node2', combo: 'combo1', style: { x: 150, y: 150 } },\n      { id: 'node3', combo: 'combo2', style: { x: 300, y: 100 } },\n      { id: 'node4', combo: 'combo2', style: { x: 350, y: 150 } },\n    ],\n    combos: [\n      { id: 'combo1', data: { label: 'Hexagon 1' } },\n      { id: 'combo2', data: { label: 'Hexagon 2' }, style: { collapsed: true } },\n    ],\n  },\n  node: {\n    style: {\n      fill: '#91d5ff',\n      stroke: '#1890ff',\n      lineWidth: 1,\n    },\n  },\n  combo: {\n    type: 'hexagon-combo',\n    style: {\n      padding: 20,\n      showCollapseButton: true,\n      labelText: (d) => d.data?.label,\n      labelPlacement: 'top',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:19,tocIndex:5},{value:"import { BaseCombo } from '@antv/g6';\nimport type { BaseComboStyleProps } from '@antv/g6';\n\n// 定义按钮路径生成函数\nconst collapse = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x + r - 4, y],\n  ];\n};\n\nconst expand = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n    ['M', x - r + r, y - r + 4],\n    ['L', x, y + r - 4],\n  ];\n};\n\nclass HexagonCombo extends BaseCombo {\n  // 获取六边形的路径\n  protected getKeyPath(attributes: Required<BaseComboStyleProps>) {\n    const [width, height] = this.getKeySize(attributes);\n    const padding = 10;\n    const size = Math.min(width, height) + padding;\n\n    // 计算六边形的顶点\n    const points = [];\n    for (let i = 0; i < 6; i++) {\n      const angle = (Math.PI / 3) * i;\n      const x = (size / 2) * Math.cos(angle);\n      const y = (size / 2) * Math.sin(angle);\n      points.push([x, y]);\n    }\n\n    // 构建 SVG 路径\n    const path = [['M', points[0][0], points[0][1]]];\n    for (let i = 1; i < 6; i++) {\n      path.push(['L', points[i][0], points[i][1]]);\n    }\n    path.push(['Z']);\n\n    return path;\n  }\n\n  // 获取主图形样式，直接使用路径数据\n  protected getKeyStyle(attributes: Required<BaseComboStyleProps>) {\n    const style = super.getKeyStyle(attributes);\n\n    return {\n      ...style,\n      d: this.getKeyPath(attributes),\n      fill: attributes.collapsed ? '#FF9900' : '#F04864',\n      fillOpacity: attributes.collapsed ? 0.5 : 0.2,\n      stroke: '#54BECC',\n      lineWidth: 2,\n    };\n  }\n\n  // 绘制主图形，使用 path 类型直接传入样式对象\n  protected drawKeyShape(attributes: Required<BaseComboStyleProps>, container: Group) {\n    return this.upsert('key', 'path', this.getKeyStyle(attributes), container);\n  }\n\n  // 绘制收起/展开按钮，使用 SVG 路径实现更精细的控制\n  protected drawCollapseButton(attributes: Required<BaseComboStyleProps>) {\n    const { collapsed } = attributes;\n    const [width] = this.getKeySize(attributes);\n    const btnR = 8;\n    const x = width / 2 + btnR;\n    const d = collapsed ? expand(x, 0, btnR) : collapse(x, 0, btnR);\n\n    // 创建点击区域和按钮图形\n    const hitArea = this.upsert('hit-area', 'circle', { cx: x, r: 8, fill: '#fff', cursor: 'pointer' }, this);\n    this.upsert('button', 'path', { stroke: '#54BECC', d, cursor: 'pointer', lineWidth: 1.4 }, hitArea);\n  }\n\n  // 使用生命周期钩子方法绑定事件\n  onCreate() {\n    this.shapeMap['hit-area'].addEventListener('click', () => {\n      const id = this.id;\n      const collapsed = !this.attributes.collapsed;\n      const { graph } = this.context;\n      if (collapsed) graph.collapseElement(id);\n      else graph.expandElement(id);\n    });\n  }\n}\n",paraId:20,tocIndex:6},{value:"import { ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.COMBO, 'hexagon-combo', HexagonCombo);\n",paraId:21,tocIndex:7},{value:"const graph = new Graph({\n  // ...其他配置\n  combo: {\n    type: 'hexagon-combo', // 使用注册时的名称\n    style: {\n      padding: 20,\n      showCollapseButton: true,\n      labelText: (d) => d.data?.label,\n      labelPlacement: 'top',\n    },\n  },\n  // 由于我们自己实现了折叠展开功能，这里只需要拖拽行为\n  behaviors: ['drag-element'],\n});\n",paraId:22,tocIndex:8},{value:"🎉 恭喜！你已经创建了第一个自定义 Combo 。",paraId:23,tocIndex:8},{value:"虽然 Combo 继承自 ",paraId:24,tocIndex:10},{value:"BaseNode",paraId:24,tocIndex:10},{value:"，但有一些关键区别：",paraId:24,tocIndex:10},{value:"自适应大小",paraId:25,tocIndex:10},{value:"： Combo 会根据内部元素自动计算合适的大小",paraId:25,tocIndex:10},{value:"展开/收起状态",paraId:25,tocIndex:10},{value:"： Combo 有两种显示状态，并需要处理状态切换",paraId:25,tocIndex:10},{value:"层级结构",paraId:25,tocIndex:10},{value:"： Combo 可以嵌套，形成层级关系",paraId:25,tocIndex:10},{value:"内部元素管理",paraId:25,tocIndex:10},{value:"： Combo 需要管理其包含的节点和子 Combo",paraId:25,tocIndex:10},{value:"G6 的 Combo 是由 ",paraId:26,tocIndex:11},{value:"G 图形系统",paraId:26,tocIndex:11},{value:" 提供的图形原子单元绘制而成。原子图形的介绍请参考 ",paraId:26,tocIndex:11},{value:"元素 - 图形（可选）",paraId:27,tocIndex:11},{value:" 文档。",paraId:26,tocIndex:11},{value:"所有这些图形都可通过 ",paraId:28,tocIndex:11},{value:"upsert()",paraId:28,tocIndex:11},{value:" 动态创建或更新，并自动管理图形状态和生命周期。",paraId:28,tocIndex:11},{value:"开始自定义 Combo 之前，你需要了解 G6 元素基类中的一些重要属性和方法：",paraId:29,tocIndex:12},{value:"属性",paraId:30,tocIndex:13},{value:"类型",paraId:30,tocIndex:13},{value:"描述",paraId:30,tocIndex:13},{value:"shapeMap",paraId:30,tocIndex:13},{value:"Record<string, DisplayObject>",paraId:30,tocIndex:13},{value:"当前元素下所有图形的映射表",paraId:30,tocIndex:13},{value:"animateMap",paraId:30,tocIndex:13},{value:"Record<string, IAnimation>",paraId:30,tocIndex:13},{value:"当前元素下所有动画的映射表",paraId:30,tocIndex:13},{value:"upsert(name, Ctor, style, container, hooks)",paraId:31},{value:"在创建自定义 Combo 时，你会频繁用到 ",paraId:32,tocIndex:15},{value:"upsert",paraId:32,tocIndex:15},{value:' 方法。它是 "update or insert" 的缩写，负责添加或更新元素中的图形：',paraId:32,tocIndex:15},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:33,tocIndex:15},{value:"参数",paraId:34,tocIndex:15},{value:"类型",paraId:34,tocIndex:15},{value:"描述",paraId:34,tocIndex:15},{value:"key",paraId:34,tocIndex:15},{value:"string",paraId:34,tocIndex:15},{value:"图形的 key，即 ",paraId:34,tocIndex:15},{value:"shapeMap",paraId:34,tocIndex:15},{value:" 中对应的 key。内置的 key 包括 ",paraId:34,tocIndex:15},{value:"'key'",paraId:34,tocIndex:15},{value:" ",paraId:34,tocIndex:15},{value:"'label'",paraId:34,tocIndex:15},{value:" ",paraId:34,tocIndex:15},{value:"'halo'",paraId:34,tocIndex:15},{value:" ",paraId:34,tocIndex:15},{value:"'icon'",paraId:34,tocIndex:15},{value:" ",paraId:34,tocIndex:15},{value:"'port'",paraId:34,tocIndex:15},{value:" ",paraId:34,tocIndex:15},{value:"'badge'",paraId:34,tocIndex:15},{value:" key 不应使用特殊符号，会基于该值转化为驼峰形式调用 ",paraId:34,tocIndex:15},{value:"getXxxStyle",paraId:34,tocIndex:15},{value:" 和 ",paraId:34,tocIndex:15},{value:"drawXxxShape",paraId:34,tocIndex:15},{value:" 方法（见 ",paraId:34,tocIndex:15},{value:"元素约定",paraId:35,tocIndex:15},{value:"）",paraId:34,tocIndex:15},{value:"Ctor",paraId:34,tocIndex:15},{value:"{ new (...args: any[]): DisplayObject }",paraId:34,tocIndex:15},{value:"图形类",paraId:34,tocIndex:15},{value:"style",paraId:34,tocIndex:15},{value:"Record<string, any>",paraId:34,tocIndex:15},{value:"图形样式",paraId:34,tocIndex:15},{value:"container",paraId:34,tocIndex:15},{value:"DisplayObject",paraId:34,tocIndex:15},{value:"挂载图形的容器",paraId:34,tocIndex:15},{value:"例如，插入一个固定位置的紫色圆形：",paraId:36,tocIndex:15},{value:"this.upsert(\n  'element-key', // 元素的唯一标识\n  'circle', // 图形类型，如 'rect', 'circle' 等\n  { x: 100, y: 100, fill: '#a975f3' }, // 样式配置对象\n  container, // 父容器\n);\n",paraId:37,tocIndex:15},{value:"为什么要使用 ",paraId:38,tocIndex:15},{value:"upsert",paraId:38,tocIndex:15},{value:" 而不直接通过 ",paraId:38,tocIndex:15},{value:"container.appendChild()",paraId:38,tocIndex:15},{value:" 创建图形？因为：",paraId:38,tocIndex:15},{value:"性能更好",paraId:39,tocIndex:15},{value:"：当状态变化或数据更新时，会智能地复用已有图形，而不是删除再重建，大大提高了渲染性能",paraId:39,tocIndex:15},{value:"代码更简洁",paraId:39,tocIndex:15},{value:"：不需要手动判断元素是否存在",paraId:39,tocIndex:15},{value:"便于管理",paraId:39,tocIndex:15},{value:"：所有通过 ",paraId:39,tocIndex:15},{value:"upsert",paraId:39,tocIndex:15},{value:" 创建的图形都会被记录在节点的 ",paraId:39,tocIndex:15},{value:"shapeMap",paraId:39,tocIndex:15},{value:" 中，你可以通过 ",paraId:39,tocIndex:15},{value:"this.getShape(key)",paraId:39,tocIndex:15},{value:" 轻松获取",paraId:39,tocIndex:15},{value:"render(attributes, container)",paraId:31},{value:"每个自定义 Combo 类都必须实现 ",paraId:40,tocIndex:16},{value:"render(attributes, container)",paraId:40,tocIndex:16},{value:' 方法，它定义了该组合如何被"绘制"出来。你可以在这里使用各种原子图形，组合出你想要的结构。',paraId:40,tocIndex:16},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:41,tocIndex:16},{value:"参数",paraId:42,tocIndex:16},{value:"类型",paraId:42,tocIndex:16},{value:"描述",paraId:42,tocIndex:16},{value:"style",paraId:42,tocIndex:16},{value:"Record<string, any>",paraId:42,tocIndex:16},{value:"元素样式",paraId:42,tocIndex:16},{value:"container",paraId:42,tocIndex:16},{value:"Group",paraId:42,tocIndex:16},{value:"容器",paraId:42,tocIndex:16},{value:"getShape(name)",paraId:31},{value:"有时，你需要在创建后修改某个子图形的属性，或者让子图形之间有交互关联。这时，",paraId:43,tocIndex:17},{value:"getShape",paraId:43,tocIndex:17},{value:" 方法可以帮你获取之前通过 ",paraId:43,tocIndex:17},{value:"upsert",paraId:43,tocIndex:17},{value:" 创建的任何图形：",paraId:43,tocIndex:17},{value:"⚠️ 注意",paraId:44,tocIndex:17},{value:"：图形的顺序很重要，如果图形 B 依赖图形 A 的位置，必须确保 A 先创建",paraId:44,tocIndex:17},{value:"使用约定属性",paraId:45,tocIndex:18},{value:"组合中约定的元素属性包括：",paraId:46,tocIndex:18},{value:"通过 ",paraId:47,tocIndex:18},{value:"this.getKeySize(attributes)",paraId:47,tocIndex:18},{value:" 获取组合的尺寸，考虑折叠状态和子元素",paraId:47,tocIndex:18},{value:"通过 ",paraId:48,tocIndex:18},{value:"this.getContentBBox(attributes)",paraId:48,tocIndex:18},{value:" 获取内容区域的边界盒",paraId:48,tocIndex:18},{value:"通过 ",paraId:49,tocIndex:18},{value:"this.getComboPosition(attributes)",paraId:49,tocIndex:18},{value:" 获取组合的当前位置，基于状态和子元素",paraId:49,tocIndex:18},{value:"采用 ",paraId:50,tocIndex:18},{value:"getXxxStyle",paraId:50,tocIndex:18},{value:" 和 ",paraId:50,tocIndex:18},{value:"drawXxxShape",paraId:50,tocIndex:18},{value:" 配对的方式进行图形绘制",paraId:50,tocIndex:18},{value:"getXxxStyle",paraId:51,tocIndex:18},{value:" 用于获取图形样式，",paraId:51,tocIndex:18},{value:"drawXxxShape",paraId:51,tocIndex:18},{value:" 用于绘制图形。通过该方式创建的图形支持自动执行动画。",paraId:51,tocIndex:18},{value:"其中 ",paraId:52,tocIndex:18},{value:"Xxx",paraId:52,tocIndex:18},{value:" 是调用 ",paraId:52,tocIndex:18},{value:"upsert",paraId:53,tocIndex:18},{value:" 方法时传入的 key 的驼峰形式。",paraId:52,tocIndex:18},{value:"可通过 ",paraId:54,tocIndex:18},{value:"this.context",paraId:54,tocIndex:18},{value:" 访问 Graph 上下文",paraId:54,tocIndex:18},{value:"提供了以下生命周期钩子函数，你可以在自定义 Combo 中重写这些方法，在关键时刻执行特定逻辑：",paraId:55,tocIndex:19},{value:"钩子函数",paraId:56,tocIndex:19},{value:"触发时机",paraId:56,tocIndex:19},{value:"典型用途",paraId:56,tocIndex:19},{value:"onCreate",paraId:56,tocIndex:19},{value:"当组合创建后完成入场动画时",paraId:56,tocIndex:19},{value:"绑定交互事件、初始化组合状态、添加外部监听器",paraId:56,tocIndex:19},{value:"onUpdate",paraId:56,tocIndex:19},{value:"当组合更新后完成更新动画时",paraId:56,tocIndex:19},{value:"更新依赖数据、调整相关元素、触发联动效果",paraId:56,tocIndex:19},{value:"onDestroy",paraId:56,tocIndex:19},{value:"当组合完成退场动画并销毁后",paraId:56,tocIndex:19},{value:"清理资源、移除外部监听器、执行销毁通知",paraId:56,tocIndex:19},{value:"G6 元素设计中最强大的一点，是可以将 ",paraId:57,tocIndex:20},{value:'"状态响应"',paraId:57,tocIndex:20},{value:" 与 ",paraId:57,tocIndex:20},{value:'"绘制逻辑"',paraId:57,tocIndex:20},{value:" 分离。",paraId:57,tocIndex:20},{value:"你可以在组合配置中定义每种状态下的样式：",paraId:58,tocIndex:20},{value:"combo: {\n  type: 'custom-combo',\n  style: {\n    fill: '#f0f2f5',\n    stroke: '#d9d9d9'\n  },\n  state: {\n    selected: {\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    },\n    hover: {\n      fill: '#e6f7ff',\n    },\n  },\n}\n",paraId:59,tocIndex:20},{value:"切换状态的方法:",paraId:60,tocIndex:20},{value:"graph.setElementState(comboId, ['selected']);\n",paraId:61,tocIndex:20},{value:"这个状态会传入到 ",paraId:62,tocIndex:20},{value:"render()",paraId:62,tocIndex:20},{value:" 方法的 ",paraId:62,tocIndex:20},{value:"attributes",paraId:62,tocIndex:20},{value:" 中，由内部系统合并后的结果自动应用在图形上。",paraId:62,tocIndex:20},{value:"也可以根据状态自定义渲染逻辑：",paraId:63,tocIndex:20},{value:"protected getKeyStyle(attributes: Required<BaseComboStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // 根据状态调整样式\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:64,tocIndex:20}]},60705:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59913);const d=[{value:"组合(Combo) 全称为 Combination，是 G6 中的一种特殊的图元素，它可以包含节点和子组合，类似“群组”或“容器”的概念。它通常用于表示集合关系，例如一个部门包含多个员工，一个城市包含多个区域等。",paraId:0,tocIndex:0},{value:"不推荐在",paraId:1},{value:"树图",paraId:1},{value:"中使用 Combo。因为树图的布局与 Combo 的布局机制不兼容，容易导致节点错位或样式混乱。",paraId:1},{value:"G6 的内置 Combo 包括 ",paraId:2},{value:"circle",paraId:2},{value:"（圆形组合）和 ",paraId:2},{value:"rect",paraId:2},{value:" (矩形组合) 两种类型，分别如下图所示：",paraId:2},{value:"定义 Combo 时，需要在图的数据对象中添加 ",paraId:3,tocIndex:1},{value:"combos",paraId:3,tocIndex:1},{value:" 字段，每个 Combo 是一个对象，结构如下：",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"id",paraId:4,tocIndex:1},{value:"组合的唯一标识符",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"type",paraId:4,tocIndex:1},{value:"组合类型，内置组合类型名称或者自定义组合名称，比如 ",paraId:4,tocIndex:1},{value:"circle",paraId:4,tocIndex:1},{value:" 或者 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"data",paraId:4,tocIndex:1},{value:"组合数据，用于存储组合的自定义数据，可以在样式映射中通过回调函数获取",paraId:4,tocIndex:1},{value:"object",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"组合样式",paraId:4,tocIndex:1},{value:"object",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"states",paraId:4,tocIndex:1},{value:"组合初始状态",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"combo",paraId:4,tocIndex:1},{value:"组合的父组合 ID。如果没有父组合，则为 null",paraId:4,tocIndex:1},{value:"string | null",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"combos",paraId:5,tocIndex:1},{value:" 数组中一个数据项的示例：",paraId:5,tocIndex:1},{value:'{\n  "id": "combo1",\n  "type": "circle",\n  "data": { "groupName": "Group A" },\n  "style": { "fill": "lightblue", "stroke": "blue", "collapsed": true },\n  "states": [],\n  "combo": null\n}\n',paraId:6,tocIndex:1},{value:"要将节点归属到某个 Combo，可以在节点数据中添加 ",paraId:7,tocIndex:1},{value:"combo",paraId:7,tocIndex:1},{value:" 字段：",paraId:7,tocIndex:1},{value:'{\n  "nodes": [{ "id": "node1", "combo": "comboA" }], // node1 属于 comboA\n  "combos": [{ "id": "comboA" }] // 定义 comboA\n}\n',paraId:8,tocIndex:1},{value:"配置 Combo 的方式有三种，按优先级从高到低如下：",paraId:9,tocIndex:2},{value:"使用 ",paraId:10,tocIndex:2},{value:"graph.setCombo()",paraId:10,tocIndex:2},{value:" 动态配置",paraId:10,tocIndex:2},{value:"实例化图时全局配置",paraId:10,tocIndex:2},{value:"在数据中动态属性",paraId:10,tocIndex:2},{value:"这几个配置方法可以同时使用。有相同的配置项时，优先级高的方式将会覆盖优先级低的。",paraId:11,tocIndex:2},{value:"graph.setCombo()",paraId:12},{value:"可在图实例创建后，使用 ",paraId:13,tocIndex:3},{value:"graph.setCombo()",paraId:13,tocIndex:3},{value:" 动态设置 Combo 的样式映射逻辑。",paraId:13,tocIndex:3},{value:"该方法需要在 ",paraId:14,tocIndex:3},{value:"graph.render()",paraId:14,tocIndex:3},{value:" 之前调用才会生效，并拥有最高优先级。",paraId:14,tocIndex:3},{value:"graph.setCombo({\n  style: {\n    type: 'circle',\n    style: { fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:15,tocIndex:3},{value:"在实例化图时可以通过 ",paraId:16,tocIndex:4},{value:"combo",paraId:16,tocIndex:4},{value:" 配置 Combo 样式映射，这里的配置是全局的配置，将会在所有 Combo 上生效。",paraId:16,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // 在组合配置中指定组合类型以及组合样式类型\n  combo: {\n    type: 'circle',\n    style: { fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:17,tocIndex:4},{value:"如果需要为不同 Combo 进行不同的配置，可以将配置写入到 Combo 数据中。这种配置方式可以通过下面代码的形式直接写入数据：",paraId:18,tocIndex:5},{value:"// 在数据中指定组合类型以及组合样式类型\nconst data = {\n  combos: [\n    {\n      id: 'combo-1',\n      type: 'circle',\n      style: { size: 100, stroke: 'orange' },\n    },\n  ],\n};\n",paraId:19,tocIndex:5},{value:"如果你想让数据中配置的优先级高于全局配置，你可以采取以下方式：",paraId:20,tocIndex:6},{value:"const data = {\n  combos: [\n    {\n      id: 'combo-1',\n      type: 'circle',\n      style: { size: 100, stroke: 'orange' },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  combo: {\n    type: (d) => d.type || 'rect',\n    style: {\n      stroke: (d) => d.style.stroke || 'blue',\n    },\n  },\n});\n",paraId:21,tocIndex:6},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    {\n      id: 'node1',\n      combo: 'combo1',\n      style: { x: 245, y: 200 },\n    },\n    {\n      id: 'node2',\n      combo: 'combo1',\n      style: { x: 210, y: 250 },\n    },\n    {\n      id: 'node3',\n      combo: 'combo1',\n      style: { x: 280, y: 245 },\n    },\n    {\n      id: 'node4',\n      combo: 'combo2',\n      style: { x: 400, y: 165 },\n    },\n    {\n      id: 'node5',\n      combo: 'combo2',\n      style: { x: 450, y: 162 },\n    },\n    {\n      id: 'node6',\n      combo: 'combo3',\n      style: { x: 425, y: 300 },\n    },\n    {\n      id: 'node7',\n      combo: 'combo3',\n      style: { x: 360, y: 332 },\n    },\n  ],\n  edges: [],\n  combos: [\n    {\n      id: 'combo1',\n      combo: 'combo3',\n      data: { label: 'Combo A' },\n    },\n    {\n      id: 'combo2',\n      combo: 'combo3',\n      data: { label: 'Combo B' },\n    },\n    {\n      id: 'combo3',\n      data: { label: 'Combo C' },\n    },\n    {\n      id: 'combo4',\n      data: { label: 'Combo D' },\n      style: { x: 58, y: 248 },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  height: 450,\n  data,\n  node: {\n    style: {\n      labelText: (d) => d.id,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n      labelFontSize: 10,\n    },\n  },\n  combo: {\n    type: 'circle',\n    style: {\n      padding: 2,\n      labelText: (d) => d.data.label,\n      labelPlacement: 'top',\n    },\n  },\n  behaviors: [\n    'collapse-expand',\n    {\n      type: 'drag-element',\n      dropEffect: 'link',\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:7},{value:"只是简单地将 Combo 渲染出来，并没有多大的实用价值，只有支持一系列的交互操作后，才能最大程度地体现 Combo 的价值。",paraId:23,tocIndex:8},{value:"在 G6 中，我们内置了 ",paraId:24,tocIndex:8},{value:"drag-element",paraId:24,tocIndex:8},{value:"、",paraId:24,tocIndex:8},{value:"collapse-expand",paraId:24,tocIndex:8},{value:" 三个交互。",paraId:24,tocIndex:8},{value:"支持拖动节点和 Combo。拖动 Combo 过程中，会动态改变 Combo 中节点和边的位置，在拖拽完成以后，保持 Combo 和节点的相对位置不变。还可以通过设置 ",paraId:25,tocIndex:9},{value:"dropEffect: 'link'",paraId:25,tocIndex:9},{value:" 在拖拽时改变 Combo 的从属关系。",paraId:25,tocIndex:9},{value:"支持双击 Combo 收起和展开 Combo ，收起 Combo 以后，隐藏 Combo 中的所有节点，外部节点和 Combo 中节点有连线的情况下，所有连接会连接到 Combo 上面。",paraId:26,tocIndex:10},{value:"当内置组合无法满足需求时，G6 提供了强大的自定义能力：",paraId:27,tocIndex:11},{value:"继承内置组合进行扩展",paraId:28,tocIndex:11},{value:"创建全新的组合类型",paraId:28,tocIndex:11},{value:"与组合不同，自定义组合需要先注册后使用。详细教程请参考 ",paraId:29,tocIndex:11},{value:"自定义组合",paraId:30,tocIndex:11},{value:" 文档。",paraId:29,tocIndex:11}]},24682:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(27972);const d=[{value:"本文介绍边属性配置，配置位置如下：",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  edge: {\n    type: 'line', // 边类型配置\n    style: {}, // 边样式配置\n    state: {}, // 边状态样式\n    palette: {}, // 边色板配置\n    animation: {}, // 边动画配置\n  },\n});\n",paraId:1},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"必选",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"边类型，内置边类型名称或自定义边的名称",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"line",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"边样式，包括颜色、大小等",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"定义边在不同状态下的样式",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"定义边的色板，用于根据不同数据映射颜色",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"定义边的动画效果",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"指定边类型，内置边类型名称或自定义边的名称。默认为 ",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:"（直线边）。",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  edge: {\n    type: 'polyline', // 边类型配置\n  },\n});\n",paraId:9,tocIndex:1},{value:"可选值有：",paraId:10,tocIndex:1},{value:"cubic-horizontal",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"水平三次贝塞尔曲线",paraId:12,tocIndex:1},{value:"cubic-vertical",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"垂直三次贝塞尔曲线",paraId:13,tocIndex:1},{value:"cubic",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"三次贝塞尔曲线",paraId:14,tocIndex:1},{value:"line",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"直线",paraId:15,tocIndex:1},{value:"polyline",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"折线",paraId:16,tocIndex:1},{value:"quadratic",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"二次贝塞尔曲线",paraId:17,tocIndex:1},{value:"定义边的样式，包括颜色、大小等。",paraId:18,tocIndex:2},{value:"const graph = new Graph({\n  edge: {\n    style: {},\n  },\n});\n",paraId:19,tocIndex:2},{value:"一个完整的边由以下几部分构成：",paraId:20,tocIndex:2},{value:"了解边的构成，请阅读 ",paraId:21,tocIndex:2},{value:"元素 - 边",paraId:22,tocIndex:2},{value:"。",paraId:21,tocIndex:2},{value:"以下样式配置将按原子图形依次说明：",paraId:23,tocIndex:2},{value:"属性",paraId:24,tocIndex:3},{value:"描述",paraId:24,tocIndex:3},{value:"默认值",paraId:24,tocIndex:3},{value:"类型",paraId:24,tocIndex:3},{value:"class",paraId:24,tocIndex:3},{value:"边的className",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"cursor",paraId:24,tocIndex:3},{value:"边的鼠标移入样式，",paraId:24,tocIndex:3},{value:"配置项",paraId:25,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"default",paraId:24,tocIndex:3},{value:"fill",paraId:24,tocIndex:3},{value:"边的区域填充色",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"fillRule",paraId:24,tocIndex:3},{value:"边的内部填充规则",paraId:24,tocIndex:3},{value:"nonzero",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"evenodd",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"filter",paraId:24,tocIndex:3},{value:"边的阴影的滤镜效果",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:24,tocIndex:3},{value:"边的宽度过小时，可以用来增大交互区域",paraId:24,tocIndex:3},{value:"string | number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"isBillboard",paraId:24,tocIndex:3},{value:"3D 场景中生效，始终朝向屏幕，因此线宽不受透视投影影像",paraId:24,tocIndex:3},{value:"true",paraId:24,tocIndex:3},{value:"boolean",paraId:24,tocIndex:3},{value:"lineDash",paraId:24,tocIndex:3},{value:"边虚线样式",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"lineDashOffset",paraId:24,tocIndex:3},{value:"边虚线偏移量",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"lineWidth",paraId:24,tocIndex:3},{value:"边的宽度",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"opacity",paraId:24,tocIndex:3},{value:"边整体的透明度",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"pointerEvents",paraId:24,tocIndex:3},{value:"边是否响应指针事件，",paraId:24,tocIndex:3},{value:"配置项",paraId:26,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowBlur",paraId:24,tocIndex:3},{value:"边的阴影模糊效果",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowColor",paraId:24,tocIndex:3},{value:"边的阴影颜色",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowOffsetX",paraId:24,tocIndex:3},{value:"边的阴影X轴偏移",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowOffsetY",paraId:24,tocIndex:3},{value:"边的阴影Y轴偏移",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"shadowType",paraId:24,tocIndex:3},{value:"边的阴影类型",paraId:24,tocIndex:3},{value:"inner",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"outer",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"both",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"sourcePort",paraId:24,tocIndex:3},{value:"边起始连接的连接桩",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"stroke",paraId:24,tocIndex:3},{value:"边的颜色",paraId:24,tocIndex:3},{value:"#000",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"strokeOpacity",paraId:24,tocIndex:3},{value:"边的颜色透明度",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"targetPort",paraId:24,tocIndex:3},{value:"边终点连接的连接桩",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"transform",paraId:24,tocIndex:3},{value:"transform 属性允许你旋转、缩放、倾斜或平移给定边",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"transformOrigin",paraId:24,tocIndex:3},{value:"旋转与缩放中心，也称作变换中心",paraId:24,tocIndex:3},{value:"string",paraId:24,tocIndex:3},{value:"-",paraId:24,tocIndex:3},{value:"visibility",paraId:24,tocIndex:3},{value:"边是否可见",paraId:24,tocIndex:3},{value:"visible",paraId:24,tocIndex:3},{value:" | ",paraId:24,tocIndex:3},{value:"hidden",paraId:24,tocIndex:3},{value:"visible",paraId:24,tocIndex:3},{value:"zIndex",paraId:24,tocIndex:3},{value:"边的渲染层级",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"1",paraId:24,tocIndex:3},{value:"可选值有：\n",paraId:27,tocIndex:4},{value:"visible",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblepainted",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblestroke",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"non-transparent-pixel",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visiblefill",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"visible",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"painted",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"fill",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"stroke",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"all",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"none",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"auto",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"inherit",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"initial",paraId:27,tocIndex:4},{value:" | ",paraId:27,tocIndex:4},{value:"unset",paraId:27,tocIndex:4},{value:"可选值有：",paraId:28,tocIndex:5},{value:"auto",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"default",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"none",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"context-menu",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"help",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"pointer",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"progress",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"wait",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"cell",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"crosshair",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"text",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"vertical-text",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"alias",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"copy",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"move",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"no-drop",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"not-allowed",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"grab",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"grabbing",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"all-scroll",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"col-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"row-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"n-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"e-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"s-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"w-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ne-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"se-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"sw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ew-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"ns-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nesw-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"nwse-resize",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"zoom-in",paraId:28,tocIndex:5},{value:" | ",paraId:28,tocIndex:5},{value:"zoom-out",paraId:28,tocIndex:5},{value:"示例：",paraId:29,tocIndex:5},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n    },\n  },\n});\n",paraId:30,tocIndex:5},{value:"效果如下：",paraId:31,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n    },\n  },\n});\n\ngraph.render();\n",paraId:32,tocIndex:5},{value:"属性",paraId:33,tocIndex:6},{value:"描述",paraId:33,tocIndex:6},{value:"类型",paraId:33,tocIndex:6},{value:"默认值",paraId:33,tocIndex:6},{value:"label",paraId:33,tocIndex:6},{value:"边标签是否显示",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"true",paraId:33,tocIndex:6},{value:"labelAutoRotate",paraId:33,tocIndex:6},{value:"边标签是否自动旋转，保持与边的方向一致",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"true",paraId:33,tocIndex:6},{value:"labelBackground",paraId:33,tocIndex:6},{value:"边标签是否显示背景",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"false",paraId:33,tocIndex:6},{value:"labelBackgroundClass",paraId:33,tocIndex:6},{value:"边标签背景className",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundCursor",paraId:33,tocIndex:6},{value:"边标签背景鼠标移入样式，",paraId:33,tocIndex:6},{value:"配置项",paraId:34,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"default",paraId:33,tocIndex:6},{value:"labelBackgroundFill",paraId:33,tocIndex:6},{value:"边标签背景填充色",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundFillOpacity",paraId:33,tocIndex:6},{value:"边标签背景透明度",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelBackgroundHeight",paraId:33,tocIndex:6},{value:"边标签背景高度",paraId:33,tocIndex:6},{value:"string | number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineDash",paraId:33,tocIndex:6},{value:"边标签背景虚线配置",paraId:33,tocIndex:6},{value:"number | string |(number | string )[]",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineDashOffset",paraId:33,tocIndex:6},{value:"边标签背景虚线偏移量",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundLineWidth",paraId:33,tocIndex:6},{value:"边标签背景描边线度",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundRadius",paraId:33,tocIndex:6},{value:"边标签背景圆角半径 ",paraId:33,tocIndex:6},{value:" - number: 统一设置四个圆角半径 ",paraId:33,tocIndex:6},{value:" - number[]: 分别设置四个圆角半径，不足则自动补充",paraId:33,tocIndex:6},{value:"number | number[]",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelBackgroundShadowBlur",paraId:33,tocIndex:6},{value:"边标签背景阴影模糊程度",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowColor",paraId:33,tocIndex:6},{value:"边标签背景阴影颜色",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowOffsetX",paraId:33,tocIndex:6},{value:"边标签背景阴影 X 方向偏移",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundShadowOffsetY",paraId:33,tocIndex:6},{value:"边标签背景阴影 Y 方向偏移",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundStroke",paraId:33,tocIndex:6},{value:"边标签背景描边颜色",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundStrokeOpacity",paraId:33,tocIndex:6},{value:"边标签背景描边透明度",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelBackgroundVisibility",paraId:33,tocIndex:6},{value:"边标签背景是否可见",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hidden",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelBackgroundZIndex",paraId:33,tocIndex:6},{value:"边标签背景渲染层级",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelClass",paraId:33,tocIndex:6},{value:"边标签className",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelCursor",paraId:33,tocIndex:6},{value:"边标签鼠标移入样式，",paraId:33,tocIndex:6},{value:"配置项",paraId:35,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"default",paraId:33,tocIndex:6},{value:"labelFill",paraId:33,tocIndex:6},{value:"边标签文字颜色",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFillOpacity",paraId:33,tocIndex:6},{value:"边标签文字颜色透明度",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelFillRule",paraId:33,tocIndex:6},{value:"边标签文字填充规则",paraId:33,tocIndex:6},{value:"nonzero",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"evenodd",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFilter",paraId:33,tocIndex:6},{value:"边标签文字滤镜",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontFamily",paraId:33,tocIndex:6},{value:"边标签文字字体族",paraId:33,tocIndex:6},{value:"system-ui, sans-serif",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontSize",paraId:33,tocIndex:6},{value:"边标签字体大小",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"12",paraId:33,tocIndex:6},{value:"labelFontStyle",paraId:33,tocIndex:6},{value:"边标签文字字体样式",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"italic",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"oblique",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontVariant",paraId:33,tocIndex:6},{value:"边标签文字字体变种",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"small-caps",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelFontWeight",paraId:33,tocIndex:6},{value:"边标签字体粗细",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"normal",paraId:33,tocIndex:6},{value:"labelLeading",paraId:33,tocIndex:6},{value:"边标签文字行间距",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelLetterSpacing",paraId:33,tocIndex:6},{value:"边标签文字字间距",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelMaxLines",paraId:33,tocIndex:6},{value:"边标签文字最大行数",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelMaxWidth",paraId:33,tocIndex:6},{value:"边标签最大宽度。开启自动折行后，超出该宽度则换行",paraId:33,tocIndex:6},{value:" - string: 表示以相对于边宽度的百分比形式定义最大宽度。例如 ",paraId:33,tocIndex:6},{value:"50%",paraId:33,tocIndex:6},{value:" 表示标签宽度不超过边宽度的一半 ",paraId:33,tocIndex:6},{value:" - number: 表示以像素值为单位定义最大宽度。例如 100 表示标签的最大宽度为 100 像素",paraId:33,tocIndex:6},{value:"number | string",paraId:33,tocIndex:6},{value:"80%",paraId:33,tocIndex:6},{value:"labelOffsetX",paraId:33,tocIndex:6},{value:"标签在 x 轴方向上的偏移量",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"4",paraId:33,tocIndex:6},{value:"labelOffsetY",paraId:33,tocIndex:6},{value:"边标签在 y 轴方向上的偏移量",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelOpacity",paraId:33,tocIndex:6},{value:"边标签整体透明度",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"1",paraId:33,tocIndex:6},{value:"labelPadding",paraId:33,tocIndex:6},{value:"边标签内边距",paraId:33,tocIndex:6},{value:"number | number[]",paraId:33,tocIndex:6},{value:"0",paraId:33,tocIndex:6},{value:"labelPlacement",paraId:33,tocIndex:6},{value:"边标签相对于边的位置。取值范围为 ",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:"、",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:"、",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:" 或特定比率（数字 0-1）",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:" | number",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:"labelText",paraId:33,tocIndex:6},{value:"边标签文字内容",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextAlign",paraId:33,tocIndex:6},{value:"边标签文字对齐方式",paraId:33,tocIndex:6},{value:"start",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"center",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"end",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"left",paraId:33,tocIndex:6},{value:" | `right'",paraId:33,tocIndex:6},{value:"left",paraId:33,tocIndex:6},{value:"labelTextBaseLine",paraId:33,tocIndex:6},{value:"边标签文字基线",paraId:33,tocIndex:6},{value:"top",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hanging",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"alphabetic",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"ideographic",paraId:33,tocIndex:6},{value:"middle",paraId:33,tocIndex:6},{value:"labelTextDecorationColor",paraId:33,tocIndex:6},{value:"边标签文字装饰线颜色",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextDecorationLine",paraId:33,tocIndex:6},{value:"边标签文字装饰线",paraId:33,tocIndex:6},{value:"string",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextDecorationStyle",paraId:33,tocIndex:6},{value:"边标签文字装饰线样式",paraId:33,tocIndex:6},{value:"solid",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"double",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"dotted",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"dashed",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"wavy",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"labelTextOverflow",paraId:33,tocIndex:6},{value:"边标签文字溢出处理方式",paraId:33,tocIndex:6},{value:"clip",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"ellipsis",paraId:33,tocIndex:6},{value:" | string",paraId:33,tocIndex:6},{value:"ellipsis",paraId:33,tocIndex:6},{value:"labelVisibility",paraId:33,tocIndex:6},{value:"边标签是否可见",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:" | ",paraId:33,tocIndex:6},{value:"hidden",paraId:33,tocIndex:6},{value:"visible",paraId:33,tocIndex:6},{value:"labelWordWrap",paraId:33,tocIndex:6},{value:"边标签是否开启自动折行。开启 labelWordWrap 后，超出 labelMaxWidth 的部分自动换行",paraId:33,tocIndex:6},{value:"boolean",paraId:33,tocIndex:6},{value:"false",paraId:33,tocIndex:6},{value:"labelZIndex",paraId:33,tocIndex:6},{value:"边标签渲染层级",paraId:33,tocIndex:6},{value:"number",paraId:33,tocIndex:6},{value:"-",paraId:33,tocIndex:6},{value:"示例：",paraId:36,tocIndex:6},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n    },\n  },\n});\n",paraId:37,tocIndex:6},{value:"效果如下：",paraId:38,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n    },\n  },\n});\n\ngraph.render();\n",paraId:39,tocIndex:6},{value:"属性",paraId:40,tocIndex:7},{value:"描述",paraId:40,tocIndex:7},{value:"类型",paraId:40,tocIndex:7},{value:"默认值",paraId:40,tocIndex:7},{value:"halo",paraId:40,tocIndex:7},{value:"边光晕是否显示",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:"haloClass",paraId:40,tocIndex:7},{value:"边光晕className",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloCursor",paraId:40,tocIndex:7},{value:"边光晕鼠标移入样式，",paraId:40,tocIndex:7},{value:"配置项",paraId:41,tocIndex:7},{value:"strig",paraId:40,tocIndex:7},{value:"default",paraId:40,tocIndex:7},{value:"haloDraggable",paraId:40,tocIndex:7},{value:"边光晕是否允许拖拽",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloDroppable",paraId:40,tocIndex:7},{value:"边光晕是否允许接收被拖拽的元素",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:"haloFillRule",paraId:40,tocIndex:7},{value:"边光晕填充规则",paraId:40,tocIndex:7},{value:"nonzero",paraId:40,tocIndex:7},{value:" | ",paraId:40,tocIndex:7},{value:"evenodd",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloFilter",paraId:40,tocIndex:7},{value:"边光晕滤镜",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"-",paraId:40,tocIndex:7},{value:"haloLineDash",paraId:40,tocIndex:7},{value:"边光晕描边虚线样式",paraId:40,tocIndex:7},{value:"number | string | (number | string)[]",paraId:40,tocIndex:7},{value:"0",paraId:40,tocIndex:7},{value:"haloLineWidth",paraId:40,tocIndex:7},{value:"边光晕描边宽度",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"3",paraId:40,tocIndex:7},{value:"haloPointerEvents",paraId:40,tocIndex:7},{value:"边光晕效果是否响应指针事件，",paraId:40,tocIndex:7},{value:"配置项",paraId:42,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"none",paraId:40,tocIndex:7},{value:"haloStroke",paraId:40,tocIndex:7},{value:"边光晕描边色",paraId:40,tocIndex:7},{value:"string",paraId:40,tocIndex:7},{value:"与主图形的填充色一致",paraId:40,tocIndex:7},{value:"haloStrokeOpacity",paraId:40,tocIndex:7},{value:"边光晕描边色透明度",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"0.25",paraId:40,tocIndex:7},{value:"haloVisibility",paraId:40,tocIndex:7},{value:"边光晕可见性",paraId:40,tocIndex:7},{value:"visible",paraId:40,tocIndex:7},{value:" | ",paraId:40,tocIndex:7},{value:"hidden",paraId:40,tocIndex:7},{value:"visible",paraId:40,tocIndex:7},{value:"haloZIndex",paraId:40,tocIndex:7},{value:"边光晕渲染层级",paraId:40,tocIndex:7},{value:"number",paraId:40,tocIndex:7},{value:"-1",paraId:40,tocIndex:7},{value:"示例：",paraId:43,tocIndex:7},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n    },\n  },\n});\n",paraId:44,tocIndex:7},{value:"效果如下：",paraId:45,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n    },\n  },\n});\n\ngraph.render();\n",paraId:46,tocIndex:7},{value:"属性",paraId:47,tocIndex:8},{value:"描述",paraId:47,tocIndex:8},{value:"类型",paraId:47,tocIndex:8},{value:"默认值",paraId:47,tocIndex:8},{value:"badge",paraId:47,tocIndex:8},{value:"边徽标是否显示",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"true",paraId:47,tocIndex:8},{value:"badgeBackground",paraId:47,tocIndex:8},{value:"边徽标是否显示背景",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"true",paraId:47,tocIndex:8},{value:"badgeBackgroundClass",paraId:47,tocIndex:8},{value:"边徽标背景clssName",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundCursor",paraId:47,tocIndex:8},{value:"边徽标背景鼠标移入样式，",paraId:47,tocIndex:8},{value:"配置项",paraId:48,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"default",paraId:47,tocIndex:8},{value:"badgeBackgroundFill",paraId:47,tocIndex:8},{value:"边徽标背景填充色。若不指定，优先考虑 badgePalette 按顺序分配",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundFillOpacity",paraId:47,tocIndex:8},{value:"边徽标背景填充透明度",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundFilter",paraId:47,tocIndex:8},{value:"边徽标背景滤镜",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundHeight",paraId:47,tocIndex:8},{value:"边徽标背景高度",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineDash",paraId:47,tocIndex:8},{value:"边徽标背景虚线配置",paraId:47,tocIndex:8},{value:"number | string |(number | string )[]",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineDashOffset",paraId:47,tocIndex:8},{value:"边徽标背景虚线偏移量",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundLineWidth",paraId:47,tocIndex:8},{value:"边徽标背景描边线宽",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundOpacity",paraId:47,tocIndex:8},{value:"边徽标渲背景透明度",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundRadius",paraId:47,tocIndex:8},{value:"边徽标背景圆角半径 ",paraId:47,tocIndex:8},{value:" - number: 统一设置四个圆角半径 ",paraId:47,tocIndex:8},{value:" - number[]: 分别设置四个圆角半径，会补足缺省的分量 ",paraId:47,tocIndex:8},{value:" - string: 与 ",paraId:47,tocIndex:8},{value:"CSS padding",paraId:47,tocIndex:8},{value:" 属性类似，使用空格分隔",paraId:47,tocIndex:8},{value:"number | number[] | string",paraId:47,tocIndex:8},{value:"50%",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowBlur",paraId:47,tocIndex:8},{value:"边徽标背景阴影模糊程度",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowColor",paraId:47,tocIndex:8},{value:"边徽标背景阴影颜色",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowOffsetX",paraId:47,tocIndex:8},{value:"边徽标背景阴影 X 方向偏移",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundShadowOffsetY",paraId:47,tocIndex:8},{value:"边徽标背景阴影 Y 方向偏移",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundStroke",paraId:47,tocIndex:8},{value:"边徽标背景描边颜色",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeBackgroundStrokeOpacity",paraId:47,tocIndex:8},{value:"边徽标背景描边透明度",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeBackgroundVisibility",paraId:47,tocIndex:8},{value:"边徽标背景是否可见",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hidden",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:"badgeBackgroundZIndex",paraId:47,tocIndex:8},{value:"边徽标背景渲染层级",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeFill",paraId:47,tocIndex:8},{value:"边徽标文字颜色",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeFontSize",paraId:47,tocIndex:8},{value:"边徽标字体大小",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"10",paraId:47,tocIndex:8},{value:"badgeFontVariant",paraId:47,tocIndex:8},{value:"边徽标字体变种",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"small-caps",paraId:47,tocIndex:8},{value:" | string",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:"badgeFontWeight",paraId:47,tocIndex:8},{value:"边徽标字体粗细",paraId:47,tocIndex:8},{value:"number | string",paraId:47,tocIndex:8},{value:"normal",paraId:47,tocIndex:8},{value:"badgeLineHeight",paraId:47,tocIndex:8},{value:"边徽标行高",paraId:47,tocIndex:8},{value:"string | number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeLineWidth",paraId:47,tocIndex:8},{value:"边徽标行宽",paraId:47,tocIndex:8},{value:"string | number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeMaxLines",paraId:47,tocIndex:8},{value:"边徽标文本最大行数",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"badgeOffsetX",paraId:47,tocIndex:8},{value:"边徽标在 x 轴方向上的偏移量",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"0",paraId:47,tocIndex:8},{value:"badgeOffsetY",paraId:47,tocIndex:8},{value:"边徽标在 y 轴方向上的偏移量",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"0",paraId:47,tocIndex:8},{value:"badgePadding",paraId:47,tocIndex:8},{value:"边徽标内边距",paraId:47,tocIndex:8},{value:"number | number[]",paraId:47,tocIndex:8},{value:"[2, 4, 2, 4]",paraId:47,tocIndex:8},{value:"badgePlacement",paraId:47,tocIndex:8},{value:"边徽标相对于边主图形的位置",paraId:47,tocIndex:8},{value:"prefix",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"suffix",paraId:47,tocIndex:8},{value:"suffix",paraId:47,tocIndex:8},{value:"badgeText",paraId:47,tocIndex:8},{value:"边徽标文字内容",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextAlign",paraId:47,tocIndex:8},{value:"边徽标文本水平对齐方式",paraId:47,tocIndex:8},{value:"start",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"center",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"middle",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"end",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"left",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"right",paraId:47,tocIndex:8},{value:"left",paraId:47,tocIndex:8},{value:"badgeTextBaseline",paraId:47,tocIndex:8},{value:"边徽标文本基线",paraId:47,tocIndex:8},{value:"top",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hanging",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"middle",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"alphabetic",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"ideographic",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"bottom",paraId:47,tocIndex:8},{value:"alphabetic",paraId:47,tocIndex:8},{value:"badgeTextDecorationColor",paraId:47,tocIndex:8},{value:"边徽标文本装饰线颜色",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextDecorationLine",paraId:47,tocIndex:8},{value:"边徽标文本装饰线",paraId:47,tocIndex:8},{value:"string",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeTextDecorationStyle",paraId:47,tocIndex:8},{value:"边徽标文本装饰线样式",paraId:47,tocIndex:8},{value:"solid",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"double",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"dotted",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"dashed",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"wavy",paraId:47,tocIndex:8},{value:"solid",paraId:47,tocIndex:8},{value:"badgeTextOverflow",paraId:47,tocIndex:8},{value:"边徽标文本溢出处理方式",paraId:47,tocIndex:8},{value:"clip",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"ellipsis",paraId:47,tocIndex:8},{value:" | string",paraId:47,tocIndex:8},{value:"clip",paraId:47,tocIndex:8},{value:"badgeVisibility",paraId:47,tocIndex:8},{value:"边徽标是否可见",paraId:47,tocIndex:8},{value:"visible",paraId:47,tocIndex:8},{value:" | ",paraId:47,tocIndex:8},{value:"hidden",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeWordWrap",paraId:47,tocIndex:8},{value:"边徽标文本是否自动换行，开启后超过badgeWordWrapWidth即会换行",paraId:47,tocIndex:8},{value:"boolean",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeWordWrapWidth",paraId:47,tocIndex:8},{value:"边徽标文本换行宽度",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"-",paraId:47,tocIndex:8},{value:"badgeZIndex",paraId:47,tocIndex:8},{value:"边徽标渲染层级",paraId:47,tocIndex:8},{value:"number",paraId:47,tocIndex:8},{value:"1",paraId:47,tocIndex:8},{value:"示例：",paraId:49,tocIndex:8},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: -20, // 边徽标在x轴方向上的偏移量\n      badgeBackground: true, // 边徽标背景开启\n    },\n  },\n});\n",paraId:50,tocIndex:8},{value:"效果如下：",paraId:51,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: -20, // 边徽标在x轴方向上的偏移量\n      badgeBackground: true, // 边徽标背景开启\n    },\n  },\n});\n\ngraph.render();\n",paraId:52,tocIndex:8},{value:"属性",paraId:53,tocIndex:9},{value:"描述",paraId:53,tocIndex:9},{value:"类型",paraId:53,tocIndex:9},{value:"默认值",paraId:53,tocIndex:9},{value:"startArrow",paraId:53,tocIndex:9},{value:"边起始箭头是否显示",paraId:53,tocIndex:9},{value:"boolean",paraId:53,tocIndex:9},{value:"false",paraId:53,tocIndex:9},{value:"startArrowClass",paraId:53,tocIndex:9},{value:"边起始箭头className",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowCursor",paraId:53,tocIndex:9},{value:"边起始箭头鼠标移入样式，",paraId:53,tocIndex:9},{value:"配置项",paraId:54,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"default",paraId:53,tocIndex:9},{value:"startArrowFill",paraId:53,tocIndex:9},{value:"边起始箭头填充颜色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"默认与边的颜色一致",paraId:53,tocIndex:9},{value:"startArrowFillOpacity",paraId:53,tocIndex:9},{value:"边起始箭头整体透明度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowFillRule",paraId:53,tocIndex:9},{value:"边起始箭头填充规则",paraId:53,tocIndex:9},{value:"nonzero",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"evenodd",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowFilter",paraId:53,tocIndex:9},{value:"边起始箭头滤镜",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowIncreasedLineWidthForHitTesting",paraId:53,tocIndex:9},{value:"边起始箭头大小较小时，可交互区域也随之变小，我们可以增大这个区域，让箭头更容易被拾取到",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineDash",paraId:53,tocIndex:9},{value:"边起始箭头描边虚线配置",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineDashOffset",paraId:53,tocIndex:9},{value:"边起始箭头描边虚线偏移量",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowLineJoin",paraId:53,tocIndex:9},{value:"边起始箭头描边连接处样式",paraId:53,tocIndex:9},{value:"round",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"bevel",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"miter",paraId:53,tocIndex:9},{value:"round",paraId:53,tocIndex:9},{value:"startArrowOffset",paraId:53,tocIndex:9},{value:"边起始箭头的偏移量",paraId:53,tocIndex:9},{value:"number ｜0 ｜",paraId:53,tocIndex:9},{value:"startArrowOpacity",paraId:53,tocIndex:9},{value:"边起始箭头透明度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowShadowBlur",paraId:53,tocIndex:9},{value:"边起始箭头阴影模糊程度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowShadowColor",paraId:53,tocIndex:9},{value:"边起始箭头阴影颜色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowShadowOffsetX",paraId:53,tocIndex:9},{value:"边起始箭头阴影X轴偏移量",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowShadowOffsetY",paraId:53,tocIndex:9},{value:"边起始箭头阴影Y轴偏移量",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"startArrowSize",paraId:53,tocIndex:9},{value:"边起始箭头大小",paraId:53,tocIndex:9},{value:"number | [number, number]",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowSrc",paraId:53,tocIndex:9},{value:"边起始箭头图片地址（传入图片地址即可以图片代替箭头）",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowStroke",paraId:53,tocIndex:9},{value:"边起始箭头描边颜色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"默认与边的颜色一致",paraId:53,tocIndex:9},{value:"startArrowStrokeOpacity",paraId:53,tocIndex:9},{value:"边起始箭头描边透明度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"startArrowTransform",paraId:53,tocIndex:9},{value:"边起始箭头的旋转、缩放、倾斜或平移配置",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"startArrowTransformOrigin",paraId:53,tocIndex:9},{value:"边起始箭头旋转与缩放中心，也称作变换中心",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"center",paraId:53,tocIndex:9},{value:"startArrowType",paraId:53,tocIndex:9},{value:"边起始箭头类型",paraId:53,tocIndex:9},{value:"triangle",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"circle",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"diamond",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"vee",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"rect",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"triangleRect",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"simple",paraId:53,tocIndex:9},{value:" | ((width: number, height: number) => PathArray)",paraId:53,tocIndex:9},{value:"vee",paraId:53,tocIndex:9},{value:"startArrowZIndex",paraId:53,tocIndex:9},{value:"边起始箭头渲染层级",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"示例：",paraId:55,tocIndex:9},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: -20, // 边徽标在x轴方向上的偏移量\n      badgeBackground: true, // 边徽标背景开启\n      startArrow: true, // 边起始箭头开启\n      startArrowFill: 'yellow', // 边起始箭头填充颜色\n    },\n  },\n});\n",paraId:56,tocIndex:9},{value:"效果如下：",paraId:57,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: -20, // 边徽标在x轴方向上的偏移量\n      badgeBackground: true, // 边徽标背景开启\n      startArrow: true, // 边起始箭头开启\n      startArrowFill: 'yellow', // 边起始箭头填充颜色\n    },\n  },\n});\n\ngraph.render();\n",paraId:58,tocIndex:9},{value:"属性",paraId:59,tocIndex:10},{value:"描述",paraId:59,tocIndex:10},{value:"类型",paraId:59,tocIndex:10},{value:"默认值",paraId:59,tocIndex:10},{value:"endArrow",paraId:59,tocIndex:10},{value:"边终点箭头是否显示",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"false",paraId:59,tocIndex:10},{value:"endArrowClass",paraId:59,tocIndex:10},{value:"边终点箭头className",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowCursor",paraId:59,tocIndex:10},{value:"边终点箭头鼠标移入样式，",paraId:59,tocIndex:10},{value:"配置项",paraId:60,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"default",paraId:59,tocIndex:10},{value:"endArrowFill",paraId:59,tocIndex:10},{value:"边终点箭头填充颜色",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"默认与边的颜色一致",paraId:59,tocIndex:10},{value:"endArrowFillOpacity",paraId:59,tocIndex:10},{value:"边终点箭头整体透明度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowFillRule",paraId:59,tocIndex:10},{value:"边终点箭头填充规则",paraId:59,tocIndex:10},{value:"nonzero",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"evenodd",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowFilter",paraId:59,tocIndex:10},{value:"边终点箭头滤镜",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowIncreasedLineWidthForHitTesting",paraId:59,tocIndex:10},{value:"边终点箭头大小较小时，可交互区域也随之变小，我们可以增大这个区域，让箭头更容易被拾取到",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineDash",paraId:59,tocIndex:10},{value:"边终点箭头描边虚线配置",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineDashOffset",paraId:59,tocIndex:10},{value:"边终点箭头描边虚线偏移量",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowLineJoin",paraId:59,tocIndex:10},{value:"边终点箭头描边连接处样式",paraId:59,tocIndex:10},{value:"round",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"bevel",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"miter",paraId:59,tocIndex:10},{value:"round",paraId:59,tocIndex:10},{value:"endArrowOffset",paraId:59,tocIndex:10},{value:"边终点箭头的偏移量",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowOpacity",paraId:59,tocIndex:10},{value:"边终点箭头透明度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowShadowBlur",paraId:59,tocIndex:10},{value:"边终点箭头阴影模糊程度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowShadowColor",paraId:59,tocIndex:10},{value:"边终点箭头阴影颜色",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowShadowOffsetX",paraId:59,tocIndex:10},{value:"边终点箭头阴影X轴偏移量",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowShadowOffsetY",paraId:59,tocIndex:10},{value:"边终点箭头阴影Y轴偏移量",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0",paraId:59,tocIndex:10},{value:"endArrowSize",paraId:59,tocIndex:10},{value:"边终点箭头大小",paraId:59,tocIndex:10},{value:"number | [number, number]",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowSrc",paraId:59,tocIndex:10},{value:"边终点箭头图片地址（传入图片地址即可以图片代替箭头）",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowStroke",paraId:59,tocIndex:10},{value:"边终点箭头描边颜色",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"默认与边的颜色一致",paraId:59,tocIndex:10},{value:"endArrowStrokeOpacity",paraId:59,tocIndex:10},{value:"边终点箭头描边透明度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"1",paraId:59,tocIndex:10},{value:"endArrowTransform",paraId:59,tocIndex:10},{value:"边终点箭头的旋转、缩放、倾斜或平移配置",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"endArrowTransformOrigin",paraId:59,tocIndex:10},{value:"边终点箭头旋转与缩放中心，也称作变换中心",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"center",paraId:59,tocIndex:10},{value:"endArrowType",paraId:59,tocIndex:10},{value:"边终点箭头类型",paraId:59,tocIndex:10},{value:"triangle",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"circle",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"diamond",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"vee",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"rect",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"triangleRect",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"simple",paraId:59,tocIndex:10},{value:" | ((width: number, height: number) => PathArray)",paraId:59,tocIndex:10},{value:"vee",paraId:59,tocIndex:10},{value:"endArrowZIndex",paraId:59,tocIndex:10},{value:"边终点箭头渲染曾经",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"示例：",paraId:61,tocIndex:10},{value:"const graph = new Graph({\n  edge: {\n    style: {\n      stroke: '#1783F', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: 20, // 边徽标在x轴方向上的偏移量\n      badgePlacement: 'prefix', // 边徽标相对于边的位置\n      badgeBackground: true, // 边徽标背景开启\n      endArrow: true, // 边终点箭头开启\n      endArrowFill: 'yellow', // 边终点箭头填充颜色\n    },\n  },\n});\n",paraId:62,tocIndex:10},{value:"效果如下：",paraId:63,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      stroke: '#FF0000', // 边颜色\n      lineWidth: 2, // 边的宽度\n      label: true, // 开启边标签展示\n      labelText: 'labelText', // 边标签文字\n      labelPlacement: 'center', // 边标签相对于边的位置\n      labelFill: '#FF0000', // 边标签文字颜色\n      labelOffsetY: 20, // 边标签在y轴方向上的偏移量\n      halo: true, // 边光晕开启\n      haloStroke: '#000', // 边光晕颜色\n      haloStrokeOpacity: 0.2, // 边光晕透明度\n      badgeText: 'badge', // 边徽标文本\n      badgeFill: 'green', // 边徽标文本颜色\n      badgeOffsetX: 20, // 边徽标在x轴方向上的偏移量\n      badgePlacement: 'prefix', // 边徽标相对于边的位置\n      badgeBackground: true, // 边徽标背景开启\n      endArrow: true, // 边终点箭头开启\n      endArrowFill: 'yellow', // 边终点箭头填充颜色\n    },\n  },\n});\n\ngraph.render();\n",paraId:64,tocIndex:10},{value:"属性",paraId:65,tocIndex:11},{value:"描述",paraId:65,tocIndex:11},{value:"类型",paraId:65,tocIndex:11},{value:"默认值",paraId:65,tocIndex:11},{value:"loop",paraId:65,tocIndex:11},{value:"是否启用自环边",paraId:65,tocIndex:11},{value:"boolean",paraId:65,tocIndex:11},{value:"true",paraId:65,tocIndex:11},{value:"loopClockwise",paraId:65,tocIndex:11},{value:"指定是否顺时针绘制环",paraId:65,tocIndex:11},{value:"boolean",paraId:65,tocIndex:11},{value:"true",paraId:65,tocIndex:11},{value:"loopDist",paraId:65,tocIndex:11},{value:"从节点 keyShape 边缘到自环顶部的距离，用于指定自环的曲率",paraId:65,tocIndex:11},{value:"number",paraId:65,tocIndex:11},{value:"默认为宽度或高度的最大值",paraId:65,tocIndex:11},{value:"loopPlacement",paraId:65,tocIndex:11},{value:"边的位置",paraId:65,tocIndex:11},{value:"'left' | 'right' | 'top' | 'bottom' | 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'",paraId:65,tocIndex:11},{value:"'top'",paraId:65,tocIndex:11},{value:"示例：",paraId:66,tocIndex:11},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node1', id: 'left' },\n      { source: 'node2', target: 'node2', id: 'right' },\n    ],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      loopPlacement: (d) => d.id, // 根据边的 配置 设置自环的位置\n      endArrow: true, // 边终点箭头开启\n    },\n  },\n});\n",paraId:67,tocIndex:11},{value:"效果如下：",paraId:68,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 60, y: 40 } },\n      { id: 'node2', style: { x: 180, y: 40 } },\n    ],\n    edges: [\n      { source: 'node1', target: 'node1', id: 'left' },\n      { source: 'node2', target: 'node2', id: 'right' },\n    ],\n  },\n  node: {\n    style: { fill: '#1783FF' },\n  },\n  edge: {\n    style: {\n      loopPlacement: (d) => d.id, // 根据边的 配置 设置自环的位置\n      endArrow: true, // 边终点箭头开启\n    },\n  },\n});\n\ngraph.render();\n",paraId:69,tocIndex:11},{value:"在一些交互行为中，比如点击选中一个边或鼠标悬停激活一个边，仅仅是在该元素做了某些状态的标识。为了将这些状态反应到终端用户所见的视觉空间中，我们需要为不同的状态设置不同的图元素样式，以响应该图元素状态的变化。",paraId:70,tocIndex:12},{value:"G6 提供了几种内置的状态，包括选中（selected）、高亮（highlight）、激活（active）、不活跃（inactive）和禁用（disabled）。此外，它还支持自定义状态，以满足更特定的需求。对于每个状态，开发者可以定义一套样式规则，这些规则会覆盖元素的默认样式。",paraId:71,tocIndex:12},{value:"数据结构如下：",paraId:72,tocIndex:12},{value:"type EdgeState = {\n  [state: string]: EdgeStyle;\n};\n",paraId:73,tocIndex:12},{value:"例如，当边处于 ",paraId:74,tocIndex:12},{value:"focus",paraId:74,tocIndex:12},{value:" 状态时，可以为其添加一个宽度为 6 且颜色为黄色的光晕。",paraId:74,tocIndex:12},{value:"const graph = new Graph({\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }],\n    edges: [{ source: 'node1', target: 'node2', states: ['focus'] }],\n  },\n  edge: {\n    state: {\n      focus: {\n        halo: true,\n        haloLineWidth: 6,\n        haloStroke: 'yellow',\n      },\n    },\n  },\n  layout: {\n    type: 'grid',\n    cols: 2,\n  },\n});\n",paraId:75,tocIndex:12},{value:"效果如下图所示：",paraId:76,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 100,\n  data: {\n    nodes: [{ id: 'node1' }, { id: 'node2' }],\n    edges: [{ source: 'node1', target: 'node2', states: ['focus'] }],\n  },\n  edge: {\n    state: {\n      focus: {\n        halo: true,\n        haloLineWidth: 6,\n        haloStroke: 'yellow',\n      },\n    },\n  },\n  layout: {\n    type: 'grid',\n    cols: 2,\n  },\n});\n\ngraph.render();\n",paraId:77,tocIndex:12},{value:"定义边的动画效果，支持下列两种配置方式：",paraId:78,tocIndex:13},{value:"关闭边全部动画",paraId:79,tocIndex:13},{value:'{\n  "edge": {\n    "animation": false\n  }\n}\n',paraId:80,tocIndex:13},{value:"配置阶段动画",paraId:81,tocIndex:13},{value:"阶段动画是指边在进入画布、更新、离开画布时的动画效果。目前支持的阶段包括：",paraId:82,tocIndex:13},{value:"enter",paraId:83,tocIndex:13},{value:": 边进入画布时的动画",paraId:83,tocIndex:13},{value:"update",paraId:83,tocIndex:13},{value:": 边更新时的动画",paraId:83,tocIndex:13},{value:"exit",paraId:83,tocIndex:13},{value:": 边离开画布时的动画",paraId:83,tocIndex:13},{value:"show",paraId:83,tocIndex:13},{value:": 边从隐藏状态显示时的动画",paraId:83,tocIndex:13},{value:"hide",paraId:83,tocIndex:13},{value:": 边隐藏时的动画",paraId:83,tocIndex:13},{value:"collapse",paraId:83,tocIndex:13},{value:": 边收起时的动画",paraId:83,tocIndex:13},{value:"expand",paraId:83,tocIndex:13},{value:": 边展开时的动画",paraId:83,tocIndex:13},{value:"你可以参考 ",paraId:84,tocIndex:13},{value:"动画范式",paraId:85,tocIndex:13},{value:" 使用动画语法来配置边，如：",paraId:84,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["stroke"], // 更新时只对 stroke 属性进行动画\n          "duration": 1000, // 动画持续时间\n          "easing": "linear" // 缓动函数\n        }\n      ],\n  }\n}\n',paraId:86,tocIndex:13},{value:"也可以使用内置的动画效果：",paraId:87,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "enter": "fade", // 使用渐变动画\n      "exit": "fade" // 使用渐变动画\n    }\n  }\n}\n',paraId:88,tocIndex:13},{value:"你可以传入 false 来关闭特定阶段的动画：",paraId:89,tocIndex:13},{value:'{\n  "node": {\n    "animation": {\n      "enter": false // 关闭边入场动画\n    }\n  }\n}\n',paraId:90,tocIndex:13},{value:"定义边的色板，即预定义颜色池，并根据规则进行分配，将颜色映射到 ",paraId:91,tocIndex:14},{value:"stroke",paraId:91,tocIndex:14},{value:" 属性。",paraId:91,tocIndex:14},{value:"有关色板的定义，请参考 ",paraId:92,tocIndex:14},{value:"色板",paraId:93,tocIndex:14},{value:"。",paraId:92,tocIndex:14},{value:"属性",paraId:94,tocIndex:14},{value:"描述",paraId:94,tocIndex:14},{value:"类型",paraId:94,tocIndex:14},{value:"默认值",paraId:94,tocIndex:14},{value:"type",paraId:94,tocIndex:14},{value:"指定当前色板类型。",paraId:94,tocIndex:14},{value:" - ",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:": 离散色板 ",paraId:94,tocIndex:14},{value:" - ",paraId:94,tocIndex:14},{value:"value",paraId:94,tocIndex:14},{value:": 连续色板",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:" | ",paraId:94,tocIndex:14},{value:"value",paraId:94,tocIndex:14},{value:"group",paraId:94,tocIndex:14},{value:"field",paraId:94,tocIndex:14},{value:"指定元素数据中的分组字段。若不指定，默认取 id 作为分组字段",paraId:94,tocIndex:14},{value:"string | ((datum) => string)",paraId:94,tocIndex:14},{value:"id",paraId:94,tocIndex:14},{value:"color",paraId:94,tocIndex:14},{value:"色板颜色。如果色板注册过，可以直接指定其注册名，也接受一个颜色数组",paraId:94,tocIndex:14},{value:"string | string[]",paraId:94,tocIndex:14},{value:"-",paraId:94,tocIndex:14},{value:"invert",paraId:94,tocIndex:14},{value:"是否反转色板",paraId:94,tocIndex:14},{value:"boolean",paraId:94,tocIndex:14},{value:"false",paraId:94,tocIndex:14},{value:"如将一组数据按 ",paraId:95,tocIndex:14},{value:"direction",paraId:95,tocIndex:14},{value:" 字段分配节点颜色，使得同类别的节点颜色相同：",paraId:95,tocIndex:14},{value:"const graph = new Graph({\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: {\n      type: 'group',\n      field: 'direction',\n      color: ['#F08F56', '#00C9C9'],\n    },\n  },\n});\n",paraId:96,tocIndex:14},{value:"效果如下图所示：",paraId:97,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: {\n      type: 'group',\n      field: 'direction',\n      color: ['#F08F56', '#00C9C9'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:98,tocIndex:14},{value:"也可以使用默认配置：",paraId:99,tocIndex:14},{value:'{\n  "edge": {\n    "palette": "tableau" // tableau 为色板名，默认根据 ID 分配颜色\n  }\n}\n',paraId:100,tocIndex:14},{value:"效果如下图所示：",paraId:101,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i + 1}` })),\n    edges: [\n      { source: 'node-1', target: 'node-2', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-3', data: { direction: 'out' } },\n      { source: 'node-1', target: 'node-4', data: { direction: 'out' } },\n      { source: 'node-5', target: 'node-1', data: { direction: 'in' } },\n      { source: 'node-6', target: 'node-1', data: { direction: 'in' } },\n    ],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 120,\n    linkDistance: 120,\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:102,tocIndex:14}]},33630:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(20246);const d=[{value:"三次贝塞尔曲线是一种通用的平滑曲线，其控制点可以自由分布，适合连接任意方向的节点。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于任意布局的图，如网络图、关系图。",paraId:2,tocIndex:0},{value:"当需要平滑连接节点且无特定方向要求时使用。",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'cubic' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'cubic',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic.style');\n    optionFolder.add(options, 'curveOffset', 0, 100, 1);\n    optionFolder.add(options, 'curvePosition', 0, 1, 0.1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"cubic",paraId:5,tocIndex:1},{value:" 以使用三次贝塞尔曲线。",paraId:5,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"控制点数组，用于定义曲线的形状。如果不指定，将会通过 ",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:" 和 ",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:" 来计算控制点",paraId:8,tocIndex:2},{value:"[",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:", ",paraId:8,tocIndex:2},{value:"Point",paraId:10,tocIndex:2},{value:"]",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:"控制点在两端点连线上的相对位置，范围为",paraId:8,tocIndex:2},{value:"0-1",paraId:8,tocIndex:2},{value:"number | number[]",paraId:8,tocIndex:2},{value:"0.5",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:"控制点距离两端点连线的距离，可理解为控制边的弯曲程度",paraId:8,tocIndex:2},{value:"number | number[]",paraId:8,tocIndex:2},{value:"20",paraId:8,tocIndex:2},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:11,tocIndex:3}]},34980:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39951);const d=[{value:"水平三次贝塞尔曲线是一种平滑的曲线，其控制点主要沿水平方向分布，适合在水平方向上连接节点。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于水平布局的图，如流程图、层次结构图。",paraId:2,tocIndex:0},{value:"当需要强调水平方向的连接关系时使用。",paraId:3,tocIndex:0},{value:"特别注意，计算控制点时主要考虑 x 轴上的距离，忽略 y 轴的变化",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }, { id: 'node6' }],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node1', target: 'node4', text: 'cubic-horizontal' },\n        { source: 'node1', target: 'node5' },\n        { source: 'node1', target: 'node6' },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n        port: true,\n        ports: [{ placement: 'left' }, { placement: 'right' }],\n      },\n    },\n    edge: {\n      type: 'cubic-horizontal',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: {\n      type: 'antv-dagre',\n      rankdir: 'LR',\n      nodesep: 15,\n      ranksep: 100,\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic-horizontal' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic-horizontal.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData((prev) => prev.map((edge) => ({ ...edge, style: { [property]: value } })));\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"edge.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"cubic-horizontal",paraId:6,tocIndex:1},{value:" 以使用水平方向的三次贝塞尔曲线。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"curvePosition",paraId:9,tocIndex:2},{value:"控制点在两端点连线上的相对位置，范围为",paraId:9,tocIndex:2},{value:"0-1",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0.5,0.5]",paraId:9,tocIndex:2},{value:"curveOffset",paraId:9,tocIndex:2},{value:"控制点距离两端点连线的距离，可理解为控制边的弯曲程度",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0,0]",paraId:9,tocIndex:2}]},99635:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97434);const d=[{value:"垂直三次贝塞尔曲线是一种平滑的曲线，其控制点主要沿垂直方向分布，适合在垂直方向上连接节点。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于垂直布局的图，如组织结构图、树状图。",paraId:2,tocIndex:0},{value:"当需要强调垂直方向的连接关系时使用。",paraId:3,tocIndex:0},{value:"特别注意，计算控制点时主要考虑 y 轴上的距离，忽略 x 轴的变化",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }, { id: 'node6' }],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node1', target: 'node4', text: 'cubic-vertical' },\n        { source: 'node1', target: 'node5' },\n        { source: 'node1', target: 'node6' },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n        port: true,\n        ports: [{ placement: 'top' }, { placement: 'bottom' }],\n      },\n    },\n    edge: {\n      type: 'cubic-vertical',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: {\n      type: 'antv-dagre',\n      rankdir: 'TB',\n      nodesep: 25,\n      ranksep: 80,\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'cubic-vertical' }, 'type').disable();\n\n    const options = {\n      curveOffset: 20,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('cubic-vertical.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData((prev) => prev.map((edge) => ({ ...edge, style: { [property]: value } })));\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"edge.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"cubic-vertical",paraId:6,tocIndex:1},{value:" 以使用垂直方向的三次贝塞尔曲线。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"curvePosition",paraId:9,tocIndex:2},{value:"控制点在两端点连线上的相对位置，范围为",paraId:9,tocIndex:2},{value:"0-1",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0.5,0.5]",paraId:9,tocIndex:2},{value:"curveOffset",paraId:9,tocIndex:2},{value:"控制点距离两端点连线的距离，可理解为控制边的弯曲程度",paraId:9,tocIndex:2},{value:"number | number[]",paraId:9,tocIndex:2},{value:"[0,0]",paraId:9,tocIndex:2}]},83184:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(30940);const d=[{value:"直线是最简单的边类型，直接连接两个节点，没有任何弯曲。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于简单的图，如拓扑图、流程图。",paraId:2,tocIndex:0},{value:"当需要快速绘制且无需复杂视觉效果时使用。",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'line' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'line' }, 'type').disable();\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:" 以使用直线。",paraId:5,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2}]},88320:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(84251);const d=[{value:"折线是由多条直线段组成的边，适合在复杂布局中绕过障碍物连接节点。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于复杂布局的图，如电路图、管道图。",paraId:2,tocIndex:0},{value:"当需要绕过其他节点或障碍物时使用。",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: { x: 150, y: 150 },\n        },\n        {\n          id: 'node2',\n          style: {\n            x: 400,\n            y: 150,\n            labelText: 'Drag Me!',\n            labelPadding: [1, 5],\n            labelBackground: true,\n            labelBackgroundRadius: 10,\n            labelBackgroundFill: '#99add1',\n          },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge1',\n          source: 'node1',\n          target: 'node2',\n          text: 'polyline',\n        },\n      ],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'polyline',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n        router: { type: 'orth' },\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'polyline' }, 'type').disable();\n\n    let index = 3;\n    const options = {\n      radius: 0,\n      router: {\n        type: 'orth',\n      },\n      random: () => {\n        const x = Math.floor(Math.random() * 600);\n        const y = Math.floor(Math.random() * 300);\n        graph.addNodeData([\n          {\n            id: `node-${index}`,\n            style: {\n              size: 5,\n              fill: '#7e3feb',\n              x,\n              y,\n            },\n          },\n        ]);\n        index++;\n        graph.updateEdgeData((prev) => {\n          const targetEdgeData = prev.find((edge) => edge.id === 'edge1');\n          const controlPoints = [...(targetEdgeData.style.controlPoints || [])];\n          controlPoints.push([x, y]);\n          return [{ ...targetEdgeData, style: { ...targetEdgeData.style, controlPoints } }];\n        });\n        graph.render();\n      },\n    };\n    const optionFolder = gui.addFolder('polyline.style');\n    optionFolder.add(options, 'radius', 0, 100, 1);\n    optionFolder.add(options, 'router');\n    optionFolder.add(options, 'random').name('Add random node as control points');\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property === 'random') return;\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"polyline",paraId:5,tocIndex:1},{value:" 以使用折线。",paraId:5,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"控制点数组，用于定义折线的转折点",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:"[]",paraId:8,tocIndex:2},{value:"[]",paraId:8,tocIndex:2},{value:"radius",paraId:8,tocIndex:2},{value:"转折点圆角半径",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"router",paraId:8,tocIndex:2},{value:"是否启用路由",paraId:8,tocIndex:2},{value:"false | ",paraId:8,tocIndex:2},{value:"OrthRouter",paraId:10,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"ShortestPathRouter",paraId:11,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"属性",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"type",paraId:12,tocIndex:3},{value:"正交路由，通过在路径上添加额外的控制点，使得边的每一段都保持水平或垂直",paraId:12,tocIndex:3},{value:"'orth'",paraId:12,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"padding",paraId:12,tocIndex:3},{value:"节点连接点与转角的最小距离",paraId:12,tocIndex:3},{value:"Padding",paraId:13,tocIndex:3},{value:"0",paraId:12,tocIndex:3},{value:"属性",paraId:14,tocIndex:4},{value:"描述",paraId:14,tocIndex:4},{value:"类型",paraId:14,tocIndex:4},{value:"默认值",paraId:14,tocIndex:4},{value:"type",paraId:14,tocIndex:4},{value:"最短路径路由，是正交路由 ",paraId:14,tocIndex:4},{value:"'orth'",paraId:14,tocIndex:4},{value:" 的智能版本。该路由由水平或垂直的正交线段组成。采用 A* 算法计算最短路径，并支持自动避开路径上的其他节点（障碍）",paraId:14,tocIndex:4},{value:"'shortest-path'",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"offset",paraId:14,tocIndex:4},{value:"节点锚点与转角的最小距离",paraId:14,tocIndex:4},{value:"Padding",paraId:15,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"gridSize",paraId:14,tocIndex:4},{value:"grid 格子大小",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"maxAllowedDirectionChange",paraId:14,tocIndex:4},{value:"支持的最大旋转角度（弧度）",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"startDirections",paraId:14,tocIndex:4},{value:"节点的可能起始方向",paraId:14,tocIndex:4},{value:"Direction",paraId:16,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"endDirections",paraId:14,tocIndex:4},{value:"节点的可能结束方向",paraId:14,tocIndex:4},{value:"Direction",paraId:17,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"directionMap",paraId:14,tocIndex:4},{value:"指定可移动的方向",paraId:14,tocIndex:4},{value:"{ [key in ",paraId:14,tocIndex:4},{value:"Direction",paraId:18,tocIndex:4},{value:"]: { stepX: number; stepY: number } }",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"penalties",paraId:14,tocIndex:4},{value:"表示在路径搜索过程中某些路径的额外代价。key 为弧度值，value 为代价",paraId:14,tocIndex:4},{value:"{ [key: string]: number }",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"distFunc",paraId:14,tocIndex:4},{value:"指定计算两点之间距离的函数",paraId:14,tocIndex:4},{value:"(p1: ",paraId:14,tocIndex:4},{value:"Point",paraId:19,tocIndex:4},{value:", p2: ",paraId:14,tocIndex:4},{value:"Point",paraId:20,tocIndex:4},{value:") => number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"maximumLoops",paraId:14,tocIndex:4},{value:"最大迭代次数",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"0",paraId:14,tocIndex:4},{value:"enableObstacleAvoidance",paraId:14,tocIndex:4},{value:"是否开启避障",paraId:14,tocIndex:4},{value:"boolean",paraId:14,tocIndex:4},{value:"false",paraId:14,tocIndex:4},{value:"type Direction = 'left' | 'right' | 'top' | 'bottom';\n",paraId:21,tocIndex:5},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:22,tocIndex:6},{value:"type Padding = number | [number, number] | [number, number, number, number];\n",paraId:23,tocIndex:7}]},13825:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78011);const d=[{value:"二次贝塞尔曲线是一种平滑的曲线，其形状由起点、终点和一个控制点决定。",paraId:0,tocIndex:0},{value:"使用场景：",paraId:1,tocIndex:0},{value:"适用于中等复杂度的图，如关系图、网络图。",paraId:2,tocIndex:0},{value:"当需要平滑连接节点且计算资源有限时使用。",paraId:3,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }],\n      edges: [{ id: 'edge1', source: 'node1', target: 'node2', text: 'quadratic' }],\n    },\n    node: {\n      style: {\n        fill: '#f8f8f8',\n        stroke: '#8b9baf',\n        lineWidth: 1,\n      },\n    },\n    edge: {\n      type: 'quadratic',\n      style: {\n        stroke: '#7e3feb',\n        lineWidth: 2,\n        labelText: (d) => d.text,\n        labelBackground: true,\n        labelBackgroundFill: '#f9f0ff',\n        labelBackgroundOpacity: 1,\n        labelBackgroundLineWidth: 2,\n        labelBackgroundStroke: '#7e3feb',\n        labelPadding: [1, 10],\n        labelBackgroundRadius: 4,\n      },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    layout: { type: 'grid', cols: 2 },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    gui.add({ type: 'quadratic' }, 'type').disable();\n\n    const options = {\n      curveOffset: 30,\n      curvePosition: 0.5,\n    };\n    const optionFolder = gui.addFolder('quadratic.style');\n    optionFolder.add(options, 'curveOffset', 0, 100);\n    optionFolder.add(options, 'curvePosition', 0, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateEdgeData([{ id: 'edge1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:1},{value:"设置 ",paraId:5,tocIndex:1},{value:"edge.type",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"quadratic",paraId:5,tocIndex:1},{value:" 以使用曲线。",paraId:5,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:6,tocIndex:2},{value:"BaseEdge",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"controlPoints",paraId:8,tocIndex:2},{value:"控制点数组，用于定义曲线的形状。如果不指定，将会通过 ",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:" 和 ",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:" 来计算控制点",paraId:8,tocIndex:2},{value:"Point",paraId:9,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"curvePosition",paraId:8,tocIndex:2},{value:"控制点在两端点连线上的相对位置，范围为",paraId:8,tocIndex:2},{value:"0-1",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0.5",paraId:8,tocIndex:2},{value:"curveOffset",paraId:8,tocIndex:2},{value:"控制点距离两端点连线的距离，可理解为控制边的弯曲程度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"30",paraId:8,tocIndex:2},{value:"type Point = [number, number] | [number, number, number] | Float32Array;\n",paraId:10,tocIndex:3}]},99423:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91596);const d=[{value:"G6 提供了多种",paraId:0},{value:"内置边",paraId:1},{value:"类型，例如直线边、折线边、贝塞尔曲线边等。但在实际项目中，你可能需要创建具有特定样式或交互效果的自定义边。",paraId:0},{value:"在 G6 中，一条完整的边通常由以下几个部分组成：",paraId:2,tocIndex:0},{value:"key",paraId:3,tocIndex:0},{value:" ：边的主图形，表示边的主要形状，例如直线、折线等；",paraId:3,tocIndex:0},{value:"label",paraId:3,tocIndex:0},{value:" ：文本标签，通常用于展示边的名称或描述；",paraId:3,tocIndex:0},{value:"arrow",paraId:3,tocIndex:0},{value:" ：箭头，用于表示边的方向；",paraId:3,tocIndex:0},{value:"halo",paraId:3,tocIndex:0},{value:" ：主图形周围展示的光晕效果的图形。",paraId:3,tocIndex:0},{value:"选择合适的方式",paraId:4,tocIndex:0},{value:"创建自定义边的方式与自定义节点类似，主要有两种途径：",paraId:5,tocIndex:1},{value:"推荐",paraId:6,tocIndex:1},{value:"这是最常用的方式，你可以选择继承以下类型之一：",paraId:7,tocIndex:2},{value:"BaseEdge",paraId:8,tocIndex:2},{value:" - 最基础的边类，提供边的核心功能",paraId:8,tocIndex:2},{value:"Line",paraId:8,tocIndex:2},{value:" - 直线边",paraId:8,tocIndex:2},{value:"Polyline",paraId:8,tocIndex:2},{value:" - 折线边",paraId:8,tocIndex:2},{value:"Quadratic",paraId:8,tocIndex:2},{value:" - 二次贝塞尔曲线边",paraId:8,tocIndex:2},{value:"Cubic",paraId:8,tocIndex:2},{value:" - 三次贝塞尔曲线边",paraId:8,tocIndex:2},{value:"CubicVertical",paraId:8,tocIndex:2},{value:" - 垂直三次贝塞尔曲线边",paraId:8,tocIndex:2},{value:"CubicHorizontal",paraId:8,tocIndex:2},{value:" - 水平三次贝塞尔曲线边",paraId:8,tocIndex:2},{value:"为什么选择这种方式？",paraId:9,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"代码量少",paraId:10,tocIndex:2},{value:"：复用现有节点的属性和方法，只需专注于新增功能",paraId:10,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"开发迅速",paraId:10,tocIndex:2},{value:"：适合大多数项目需求，快速实现业务目标",paraId:10,tocIndex:2},{value:"📌 ",paraId:10,tocIndex:2},{value:"易于维护",paraId:10,tocIndex:2},{value:"：代码结构清晰，继承关系明确",paraId:10,tocIndex:2},{value:"高级用法",paraId:11,tocIndex:2},{value:"如果现有边类型都不满足需求，你可以基于 G 的底层图形系统从零创建边。",paraId:12,tocIndex:3},{value:"为什么选择这种方式？",paraId:13,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"最大自由度",paraId:14,tocIndex:3},{value:"：完全控制边的每个细节，实现任意复杂效果",paraId:14,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"特殊需求",paraId:14,tocIndex:3},{value:"：现有边类型无法满足的高度定制场景",paraId:14,tocIndex:3},{value:"📌 ",paraId:14,tocIndex:3},{value:"性能优化",paraId:14,tocIndex:3},{value:"：针对特定场景的性能优化",paraId:14,tocIndex:3},{value:"从零开发的自定义边需要自行处理所有细节，包括图形绘制、事件响应、状态变化等，开发难度较大。这里可以直接参考 ",paraId:15},{value:"源码",paraId:15},{value:" 进行实现。",paraId:15},{value:"让我们从最基础的 ",paraId:16,tocIndex:4},{value:"BaseEdge",paraId:16,tocIndex:4},{value:" 开始，实现一个自定义直线边：",paraId:16,tocIndex:4},{value:"import { Graph, register, BaseEdge, ExtensionCategory } from '@antv/g6';\n\nclass MyLineEdge extends BaseEdge {\n  getKeyStyle(attributes) {\n    return { ...super.getKeyStyle(attributes), lineWidth: 2, stroke: '#A4D3EE' };\n  }\n\n  getKeyPath(attributes) {\n    const { sourceNode, targetNode } = this;\n    const [x1, y1] = sourceNode.getPosition();\n    const [x2, y2] = targetNode.getPosition();\n\n    return [\n      ['M', x1, y1],\n      ['L', x2, y2],\n    ];\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'my-line-edge', MyLineEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 50 } },\n      { id: 'node2', style: { x: 300, y: 120 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n  edge: {\n    type: 'my-line-edge',\n    style: {\n      zIndex: 3,\n    },\n  },\n});\n\ngraph.render();\n",paraId:17,tocIndex:4},{value:"import { BaseEdge } from '@antv/g6';\nimport type { BaseEdgeStyleProps } from '@antv/g6';\n\nclass MyLineEdge extends BaseEdge {\n  // 定义边的样式，可以添加或覆盖默认样式\n  protected getKeyStyle(attributes: Required<BaseEdgeStyleProps>) {\n    // 调用父类方法获取基础样式，然后添加自定义样式\n    return { ...super.getKeyStyle(attributes), lineWidth: 2, stroke: '#A4D3EE' };\n  }\n\n  // 实现抽象方法：定义边的路径\n  // 这是 BaseEdge 的抽象方法，所有子类必须实现\n  protected getKeyPath(attributes) {\n    // 获取源节点和目标节点\n    const { sourceNode, targetNode } = this;\n\n    // 获取节点的位置坐标\n    const [x1, y1] = sourceNode.getPosition();\n    const [x2, y2] = targetNode.getPosition();\n\n    // 返回SVG路径数组，定义从起点到终点的直线\n    return [\n      ['M', x1, y1],\n      ['L', x2, y2],\n    ];\n  }\n}\n",paraId:18,tocIndex:5},{value:"getKeyStyle",paraId:19},{value:": 定义边的基本样式，如线宽、颜色等",paraId:19},{value:"getKeyPath",paraId:19},{value:": 是 ",paraId:19},{value:"BaseEdge",paraId:19},{value:" 中的抽象方法，",paraId:19},{value:"必须实现",paraId:19},{value:"，它定义了边的路径形状",paraId:19},{value:"使用 ",paraId:20,tocIndex:6},{value:"register",paraId:20,tocIndex:6},{value:" 方法注册边类型，这样 G6 才能识别你的自定义边：",paraId:20,tocIndex:6},{value:"import { ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.EDGE, 'my-line-edge', MyLineEdge);\n",paraId:21,tocIndex:6},{value:"register",paraId:22,tocIndex:6},{value:" 方法需要三个参数：",paraId:22,tocIndex:6},{value:"扩展类别：",paraId:23,tocIndex:6},{value:"ExtensionCategory.EDGE",paraId:23,tocIndex:6},{value:" 表示这是一个边类型",paraId:23,tocIndex:6},{value:"类型名称：",paraId:23,tocIndex:6},{value:"my-line-edge",paraId:23,tocIndex:6},{value:" 是我们给这个自定义边起的名字，后续会在配置中使用",paraId:23,tocIndex:6},{value:"类定义：",paraId:23,tocIndex:6},{value:"MyLineEdge",paraId:23,tocIndex:6},{value:" 是我们刚刚创建的边类",paraId:23,tocIndex:6},{value:"在图的配置中，通过设置 ",paraId:24,tocIndex:7},{value:"edge.type",paraId:24,tocIndex:7},{value:" 来使用我们的自定义边：",paraId:24,tocIndex:7},{value:"const graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 100 } },\n      { id: 'node2', style: { x: 300, y: 150 } },\n    ],\n    edges: [{ source: 'node1', target: 'node2' }],\n  },\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n  edge: {\n    type: 'my-line-edge',\n    style: {\n      zIndex: 3,\n    },\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:7},{value:"🎉 恭喜！你已经创建了第一个自定义边。",paraId:26,tocIndex:7},{value:"G6 的节点是由 ",paraId:27,tocIndex:9},{value:"G 图形系统",paraId:27,tocIndex:9},{value:" 提供的图形原子单元绘制而成。以下是常见图形元素及其用途：",paraId:27,tocIndex:9},{value:"图形元素",paraId:28,tocIndex:9},{value:"类型",paraId:28,tocIndex:9},{value:"描述",paraId:28,tocIndex:9},{value:"圆形",paraId:28,tocIndex:9},{value:"circle",paraId:28,tocIndex:9},{value:"适合表示状态、头像、圆形按钮等。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<circle>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"椭圆",paraId:28,tocIndex:9},{value:"ellipse",paraId:28,tocIndex:9},{value:"与 circle 类似，但支持横纵轴不同的场景。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<ellipse>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"图片",paraId:28,tocIndex:9},{value:"image",paraId:28,tocIndex:9},{value:"用于展示图标、用户头像、LOGO 等。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<image>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"直线",paraId:28,tocIndex:9},{value:"line",paraId:28,tocIndex:9},{value:"用于装饰、辅助连接等。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<line>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"路径",paraId:28,tocIndex:9},{value:"path",paraId:28,tocIndex:9},{value:"支持复杂图形，如箭头、圆弧、曲线、贝塞尔路径等。路径中包含一组命令与参数，这些命令有不同的语义，",paraId:28,tocIndex:9},{value:"具体用法",paraId:28,tocIndex:9},{value:"多边形",paraId:28,tocIndex:9},{value:"polygon",paraId:28,tocIndex:9},{value:"支持自定义图形，如五角星、箭头。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<polygon>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"折线",paraId:28,tocIndex:9},{value:"polyline",paraId:28,tocIndex:9},{value:"多点折线，适合复杂的连线结构。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<polyline>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"矩形",paraId:28,tocIndex:9},{value:"rect",paraId:28,tocIndex:9},{value:"最常用图形，适合作为容器、卡片、按钮等基础结构。可以参考 SVG 的 ",paraId:28,tocIndex:9},{value:"<rect>",paraId:28,tocIndex:9},{value:" 元素",paraId:28,tocIndex:9},{value:"文本",paraId:28,tocIndex:9},{value:"text",paraId:28,tocIndex:9},{value:"显示名称、描述、标签等内容。提供简单的单行/多行文本排版能力，单行支持水平对齐、字符间距；多行支持显式换行符以及自动换行，垂直对齐",paraId:28,tocIndex:9},{value:"更多原子图形和详细的属性请参考 ",paraId:29,tocIndex:9},{value:"元素 - 图形（可选）",paraId:30,tocIndex:9},{value:"所有这些图形都可通过 ",paraId:31,tocIndex:9},{value:"upsert()",paraId:31,tocIndex:9},{value:" 动态创建或更新，并自动管理图形状态和生命周期。",paraId:31,tocIndex:9},{value:"开始自定义元素之前，你需要了解 G6 元素基类中的一些重要属性和方法：",paraId:32,tocIndex:10},{value:"属性",paraId:33,tocIndex:11},{value:"类型",paraId:33,tocIndex:11},{value:"描述",paraId:33,tocIndex:11},{value:"shapeMap",paraId:33,tocIndex:11},{value:"Record<string, DisplayObject>",paraId:33,tocIndex:11},{value:"当前元素下所有图形的映射表",paraId:33,tocIndex:11},{value:"animateMap",paraId:33,tocIndex:11},{value:"Record<string, IAnimation>",paraId:33,tocIndex:11},{value:"当前元素下所有动画的映射表",paraId:33,tocIndex:11},{value:"upsert(name, Ctor, style, container, hooks)",paraId:34},{value:"在创建自定义元素时，你会频繁用到 ",paraId:35,tocIndex:13},{value:"upsert",paraId:35,tocIndex:13},{value:' 方法。它是 "update or insert" 的缩写，负责添加或更新元素中的图形：',paraId:35,tocIndex:13},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:36,tocIndex:13},{value:"参数",paraId:37,tocIndex:13},{value:"类型",paraId:37,tocIndex:13},{value:"描述",paraId:37,tocIndex:13},{value:"key",paraId:37,tocIndex:13},{value:"string",paraId:37,tocIndex:13},{value:"图形的 key，即 ",paraId:37,tocIndex:13},{value:"shapeMap",paraId:37,tocIndex:13},{value:" 中对应的 key。内置的 key 包括 ",paraId:37,tocIndex:13},{value:"'key'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'label'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'halo'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'icon'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'port'",paraId:37,tocIndex:13},{value:" ",paraId:37,tocIndex:13},{value:"'badge'",paraId:37,tocIndex:13},{value:" key 不应使用特殊符号，会基于该值转化为驼峰形式调用 ",paraId:37,tocIndex:13},{value:"getXxxStyle",paraId:37,tocIndex:13},{value:" 和 ",paraId:37,tocIndex:13},{value:"drawXxxShape",paraId:37,tocIndex:13},{value:" 方法（见",paraId:37,tocIndex:13},{value:"元素约定",paraId:38,tocIndex:13},{value:"）",paraId:37,tocIndex:13},{value:"Ctor",paraId:37,tocIndex:13},{value:"{ new (...args: any[]): DisplayObject }",paraId:37,tocIndex:13},{value:"图形类",paraId:37,tocIndex:13},{value:"style",paraId:37,tocIndex:13},{value:"Record<string, any>",paraId:37,tocIndex:13},{value:"图形样式",paraId:37,tocIndex:13},{value:"container",paraId:37,tocIndex:13},{value:"DisplayObject",paraId:37,tocIndex:13},{value:"挂载图形的容器",paraId:37,tocIndex:13},{value:"例如，插入一个固定位置的紫色圆形：",paraId:39,tocIndex:13},{value:"this.upsert(\n  'element-key', // 元素的唯一标识\n  'circle', // 图形类型，如 'rect', 'circle' 等\n  { x: 100, y: 100, fill: '#a975f3' }, // 样式配置对象\n  container, // 父容器\n);\n",paraId:40,tocIndex:13},{value:"为什么要使用 ",paraId:41,tocIndex:13},{value:"upsert",paraId:41,tocIndex:13},{value:" 而不直接通过 ",paraId:41,tocIndex:13},{value:"container.appendChild()",paraId:41,tocIndex:13},{value:" 创建图形？因为：",paraId:41,tocIndex:13},{value:"性能更好",paraId:42,tocIndex:13},{value:"：当状态变化或数据更新时，会智能地复用已有图形，而不是删除再重建，大大提高了渲染性能",paraId:42,tocIndex:13},{value:"代码更简洁",paraId:42,tocIndex:13},{value:"：不需要手动判断元素是否存在",paraId:42,tocIndex:13},{value:"便于管理",paraId:42,tocIndex:13},{value:"：所有通过 ",paraId:42,tocIndex:13},{value:"upsert",paraId:42,tocIndex:13},{value:" 创建的图形都会被记录在节点的 ",paraId:42,tocIndex:13},{value:"shapeMap",paraId:42,tocIndex:13},{value:" 中，你可以通过 ",paraId:42,tocIndex:13},{value:"this.getShape(key)",paraId:42,tocIndex:13},{value:" 轻松获取",paraId:42,tocIndex:13},{value:"render(attributes, container)",paraId:34},{value:"每个自定义边类都必须实现 ",paraId:43,tocIndex:14},{value:"render(attributes, container)",paraId:43,tocIndex:14},{value:" 方法，它定义了该边如何被“绘制”出来。你可以在这里使用各种原子图形，组合出你想要的结构。",paraId:43,tocIndex:14},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:44,tocIndex:14},{value:"参数",paraId:45,tocIndex:14},{value:"类型",paraId:45,tocIndex:14},{value:"描述",paraId:45,tocIndex:14},{value:"style",paraId:45,tocIndex:14},{value:"Record<string, any>",paraId:45,tocIndex:14},{value:"元素样式",paraId:45,tocIndex:14},{value:"container",paraId:45,tocIndex:14},{value:"Group",paraId:45,tocIndex:14},{value:"容器",paraId:45,tocIndex:14},{value:"getShape(name)",paraId:34},{value:"有时，你需要在创建后修改某个子图形的属性，或者让子图形之间有交互关联。这时，",paraId:46,tocIndex:15},{value:"getShape",paraId:46,tocIndex:15},{value:" 方法可以帮你获取之前通过 ",paraId:46,tocIndex:15},{value:"upsert",paraId:46,tocIndex:15},{value:" 创建的任何图形：",paraId:46,tocIndex:15},{value:"⚠️ 注意",paraId:47,tocIndex:15},{value:"：图形的顺序很重要，如果图形 B 依赖图形 A 的位置，必须确保 A 先创建",paraId:47,tocIndex:15},{value:"使用约定属性",paraId:48,tocIndex:16},{value:"目前约定的元素属性包括：",paraId:49,tocIndex:16},{value:"通过 ",paraId:50,tocIndex:16},{value:"this.getSize()",paraId:50,tocIndex:16},{value:" 获取元素的尺寸",paraId:50,tocIndex:16},{value:"通过 ",paraId:51,tocIndex:16},{value:"const [sourcePoint, targetPoint] = this.getEndpoints(attributes, false)",paraId:51,tocIndex:16},{value:" 获取边的起点和终点（简单模式 - 不考虑节点形状，直接返回节点中心点或最近连接桩中心˝位置）",paraId:51,tocIndex:16},{value:"通过 ",paraId:52,tocIndex:16},{value:"const [sourcePoint, targetPoint] = this.getEndpoints(attributes)",paraId:52,tocIndex:16},{value:" 获取边的起点和终点（优化模式 - 默认为 true，考虑节点形状，返回节点边界上的连接点）",paraId:52,tocIndex:16},{value:"采用 ",paraId:53,tocIndex:16},{value:"getXxxStyle",paraId:53,tocIndex:16},{value:" 和 ",paraId:53,tocIndex:16},{value:"drawXxxShape",paraId:53,tocIndex:16},{value:" 配对的方式进行图形绘制",paraId:53,tocIndex:16},{value:"getXxxStyle",paraId:54,tocIndex:16},{value:" 用于获取图形样式，",paraId:54,tocIndex:16},{value:"drawXxxShape",paraId:54,tocIndex:16},{value:" 用于绘制图形。通过该方式创建的图形支持自动执行动画。",paraId:54,tocIndex:16},{value:"其中 ",paraId:55,tocIndex:16},{value:"Xxx",paraId:55,tocIndex:16},{value:" 是调用 ",paraId:55,tocIndex:16},{value:"upsert",paraId:56,tocIndex:16},{value:" 方法时传入的 key 的驼峰形式。",paraId:55,tocIndex:16},{value:"可通过 ",paraId:57,tocIndex:16},{value:"this.context",paraId:57,tocIndex:16},{value:" 访问 Graph 上下文",paraId:57,tocIndex:16},{value:"提供了以下生命周期钩子函数，你可以在自定义边中重写这些方法，在关键时刻执行特定逻辑：",paraId:58,tocIndex:17},{value:"钩子函数",paraId:59,tocIndex:17},{value:"触发时机",paraId:59,tocIndex:17},{value:"典型用途",paraId:59,tocIndex:17},{value:"onCreate",paraId:59,tocIndex:17},{value:"当边创建后完成入场动画时",paraId:59,tocIndex:17},{value:"绑定交互事件、初始化边状态、添加外部监听器",paraId:59,tocIndex:17},{value:"onUpdate",paraId:59,tocIndex:17},{value:"当边更新后完成更新动画时",paraId:59,tocIndex:17},{value:"更新依赖数据、调整相关元素、触发联动效果",paraId:59,tocIndex:17},{value:"onDestroy",paraId:59,tocIndex:17},{value:"当边完成退场动画并销毁后",paraId:59,tocIndex:17},{value:"清理资源、移除外部监听器、执行销毁通知",paraId:59,tocIndex:17},{value:"G6 元素设计中最强大的一点，是可以将 ",paraId:60,tocIndex:18},{value:"“状态响应”",paraId:60,tocIndex:18},{value:" 与 ",paraId:60,tocIndex:18},{value:"“绘制逻辑”",paraId:60,tocIndex:18},{value:" 分离。",paraId:60,tocIndex:18},{value:"你可以在边配置中定义每种状态下的样式：",paraId:61,tocIndex:18},{value:"edge: {\n  type: 'custom-edge',\n  style: { stroke: '#eee' },\n  state: {\n    selected: {\n      stroke: '#f00',\n    },\n    hover: {\n      lineWidth: 3,\n      stroke: '#1890ff',\n    },\n  },\n}\n",paraId:62,tocIndex:18},{value:"切换状态的方法:",paraId:63,tocIndex:18},{value:"graph.setElementState(edgeId, ['selected']);\n",paraId:64,tocIndex:18},{value:"这个状态会传入到 ",paraId:65,tocIndex:18},{value:"render()",paraId:65,tocIndex:18},{value:" 方法的 ",paraId:65,tocIndex:18},{value:"attributes",paraId:65,tocIndex:18},{value:" 中，由内部系统合并后的结果自动应用在图形上。",paraId:65,tocIndex:18},{value:"也可以根据状态自定义渲染逻辑：",paraId:66,tocIndex:18},{value:"protected getKeyStyle(attributes: Required<BaseEdgeStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // 根据状态调整样式\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:67,tocIndex:18},{value:"import { Graph, register, BaseEdge, ExtensionCategory } from '@antv/g6';\n\nclass MyPolylineEdge extends BaseEdge {\n  getKeyPath(attributes) {\n    const [sourcePoint, targetPoint] = this.getEndpoints(attributes);\n\n    return [\n      ['M', sourcePoint[0], sourcePoint[1]],\n      ['L', targetPoint[0] / 2 + (1 / 2) * sourcePoint[0], sourcePoint[1]],\n      ['L', targetPoint[0] / 2 + (1 / 2) * sourcePoint[0], targetPoint[1]],\n      ['L', targetPoint[0], targetPoint[1]],\n    ];\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'my-polyline-edge', MyPolylineEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-0', style: { x: 100, y: 50, ports: [{ key: 'right', placement: [1, 0.5] }] } },\n      { id: 'node-1', style: { x: 250, y: 150, ports: [{ key: 'left', placement: [0, 0.5] }] } },\n    ],\n    edges: [{ source: 'node-0', target: 'node-1' }],\n  },\n  edge: {\n    type: 'my-polyline-edge',\n    style: {\n      startArrow: true,\n      endArrow: true,\n      stroke: '#F6BD16',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:68,tocIndex:20},{value:"import { Graph, Line, register, BaseEdge, ExtensionCategory, subStyleProps } from '@antv/g6';\n\nclass LabelEdge extends Line {\n  render(attributes, container) {\n    super.render(attributes);\n    this.drawEndLabel(attributes, container, 'start');\n    this.drawEndLabel(attributes, container, 'end');\n  }\n\n  drawEndLabel(attributes, container, type) {\n    const key = type === 'start' ? 'startLabel' : 'endLabel';\n    const [x, y] = this.getEndpoints(attributes)[type === 'start' ? 0 : 1];\n\n    const fontStyle = {\n      x,\n      y,\n      dx: type === 'start' ? 15 : -15,\n      fontSize: 16,\n      fill: 'gray',\n      textBaseline: 'middle',\n      textAlign: type,\n    };\n    const style = subStyleProps(attributes, key);\n    const text = style.text;\n    this.upsert(`label-${type}`, 'text', text ? { ...fontStyle, ...style } : false, container);\n  }\n}\n\nregister(ExtensionCategory.EDGE, 'extra-label-edge', LabelEdge);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-0', style: { x: 100, y: 100 } },\n      { id: 'node-1', style: { x: 300, y: 100 } },\n    ],\n    edges: [{ source: 'node-0', target: 'node-1' }],\n  },\n  edge: {\n    type: 'extra-label-edge',\n    style: {\n      startArrow: true,\n      endArrow: true,\n      stroke: '#F6BD16',\n      startLabelText: 'start',\n      endLabelText: 'end',\n    },\n  },\n  behaviors: ['drag-element'],\n});\n\ngraph.render();\n",paraId:69,tocIndex:21}]},4711:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97833);const d=[{value:"边（Edge）是图中的基本元素之一，用于连接两个节点或组合，表示它们之间的关系。在 G6 中，边具有方向性，从 ",paraId:0,tocIndex:0},{value:"source",paraId:0,tocIndex:0},{value:" 指向 ",paraId:0,tocIndex:0},{value:"target",paraId:0,tocIndex:0},{value:"，也可以通过配置隐藏箭头以表示无方向连接。",paraId:0,tocIndex:0},{value:"你可以在任意两个节点、组合，或节点与组合之间创建边，还可以通过创建多条边来表达不同的关系类型。",paraId:1,tocIndex:0},{value:"G6 提供了以下内置边：",paraId:2,tocIndex:0},{value:"line",paraId:3,tocIndex:0},{value:" 直线边",paraId:3,tocIndex:0},{value:"polyline",paraId:3,tocIndex:0},{value:" 折线边",paraId:3,tocIndex:0},{value:"quadratic",paraId:3,tocIndex:0},{value:" 二次贝塞尔曲线边",paraId:3,tocIndex:0},{value:"cubic",paraId:3,tocIndex:0},{value:" 三次贝塞尔曲线边",paraId:3,tocIndex:0},{value:"cubicVertical",paraId:3,tocIndex:0},{value:" 垂直三次贝塞尔曲线边",paraId:3,tocIndex:0},{value:"cubicHorizontal",paraId:3,tocIndex:0},{value:" 水平三次贝塞尔曲线边",paraId:3,tocIndex:0},{value:"定义边时，需要在图的数据对象中添加 ",paraId:4,tocIndex:1},{value:"edges",paraId:4,tocIndex:1},{value:" 字段。每条边是一个对象，结构如下：",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"source",paraId:5,tocIndex:1},{value:"边起始节点 ID",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"target",paraId:5,tocIndex:1},{value:"边目标节点 ID",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"id",paraId:5,tocIndex:1},{value:"边的唯一标识符",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"type",paraId:5,tocIndex:1},{value:"边类型，内置边类型名称或者自定义边的名称，比如 ",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:" 或者 ",paraId:5,tocIndex:1},{value:"polyline",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"边数据，用于存储边的自定义数据，可以在样式映射中通过回调函数获取",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"边样式，包括线条颜色、宽度、箭头等视觉属性",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"states",paraId:5,tocIndex:1},{value:"边初始状态",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"edges",paraId:6,tocIndex:1},{value:" 数组中一个数据项的示例：",paraId:6,tocIndex:1},{value:'{\n  "source": "alice",\n  "target": "bob",\n  "type": "line",\n  "data": { "relationship": "friend", "strength": 5 },\n  "style": { "stroke": "green", "lineWidth": 2 },\n  "states": ["hover"]\n}\n',paraId:7,tocIndex:1},{value:"配置边的方式有三种，按优先级从高到低如下：",paraId:8,tocIndex:2},{value:"使用 ",paraId:9,tocIndex:2},{value:"graph.setEdge()",paraId:9,tocIndex:2},{value:" 动态配置",paraId:9,tocIndex:2},{value:"实例化图时全局配置",paraId:9,tocIndex:2},{value:"在数据中动态属性",paraId:9,tocIndex:2},{value:"这几个配置方法可以同时使用。有相同的配置项时，优先级高的方式将会覆盖优先级低的。",paraId:10,tocIndex:2},{value:"graph.setEdge()",paraId:11},{value:"可在图实例创建后，使用 ",paraId:12,tocIndex:3},{value:"graph.setEdge()",paraId:12,tocIndex:3},{value:" 动态设置边的样式映射逻辑。",paraId:12,tocIndex:3},{value:"该方法需要在 ",paraId:13,tocIndex:3},{value:"graph.render()",paraId:13,tocIndex:3},{value:" 之前调用才会生效，并拥有最高优先级。",paraId:13,tocIndex:3},{value:"graph.setEdge({\n  style: {\n    type: 'line',\n    style: { stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:14,tocIndex:3},{value:"在实例化图时可以通过 ",paraId:15,tocIndex:4},{value:"edge",paraId:15,tocIndex:4},{value:" 配置边样式映射，这里的配置是全局的配置，将会在所有边上生效。",paraId:15,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  edge: {\n    type: 'line',\n    style: { stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:16,tocIndex:4},{value:"如果需要为不同边进行不同的配置，可以将配置写入到边数据中。这种配置方式可以通过下面代码的形式直接写入数据：",paraId:17,tocIndex:5},{value:"const data = {\n  edges: [\n    {\n      source: 'node-1',\n      target: 'node-2',\n      type: 'line',\n      style: { stroke: 'orange' },\n    },\n  ],\n};\n",paraId:18,tocIndex:5},{value:"如果你想让数据中配置的优先级高于全局配置，你可以采取以下方式：",paraId:19,tocIndex:6},{value:"const data = {\n  edges: [\n    {\n      source: 'node-1',\n      target: 'node-2',\n      type: 'line',\n      style: { stroke: 'orange' },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  edge: {\n    type: 'line',\n    style: {\n      stroke: (d) => d.style.stroke || '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n});\n",paraId:20,tocIndex:6},{value:"当内置边无法满足需求时，G6 提供了强大的自定义能力：",paraId:21,tocIndex:7},{value:"继承内置边进行扩展",paraId:22,tocIndex:7},{value:"创建全新的边类型",paraId:22,tocIndex:7},{value:"与组合不同，自定义边需要先注册后使用。详细教程请参考 ",paraId:23,tocIndex:7},{value:"自定义边",paraId:24,tocIndex:7},{value:" 文档。",paraId:23,tocIndex:7}]},16669:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(58314);const d=[{value:"本文介绍内置节点通用属性配置。",paraId:0},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  node: {\n    type: 'circle', // 节点类型\n    style: {}, // 节点样式\n    state: {}, // 状态样式\n    palette: {}, // 色板配置\n    animation: {}, // 动画配置\n  },\n});\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"必选",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"节点类型，内置节点类型名称或自定义节点的名称",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"circle",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"节点样式配置，包括颜色、大小等",paraId:2,tocIndex:0},{value:"Style",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"state",paraId:2,tocIndex:0},{value:"不同状态下的样式配置",paraId:2,tocIndex:0},{value:"State",paraId:5,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"palette",paraId:2,tocIndex:0},{value:"定义节点的色板，用于根据不同数据映射颜色",paraId:2,tocIndex:0},{value:"Palette",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"animation",paraId:2,tocIndex:0},{value:"定义节点的动画效果",paraId:2,tocIndex:0},{value:"Animation",paraId:7,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"指定节点类型，内置节点类型名称或自定义节点的名称。默认为 ",paraId:8,tocIndex:1},{value:"circle",paraId:8,tocIndex:1},{value:"(圆形)。",paraId:8,tocIndex:1},{value:"⚠️ 注意",paraId:8,tocIndex:1},{value:"：这里决定了主图形的形状。",paraId:8,tocIndex:1},{value:"const graph = new Graph({\n  node: {\n    type: 'circle',\n  },\n});\n",paraId:9,tocIndex:1},{value:"可选值有：",paraId:10,tocIndex:1},{value:"circle",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"圆形节点",paraId:12,tocIndex:1},{value:"diamond",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"菱形节点",paraId:13,tocIndex:1},{value:"donut",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"甜甜圈节点",paraId:14,tocIndex:1},{value:"ellipse",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"椭圆节点",paraId:15,tocIndex:1},{value:"hexagon",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"六边形节点",paraId:16,tocIndex:1},{value:"html",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"HTML 节点",paraId:17,tocIndex:1},{value:"image",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"图片节点",paraId:18,tocIndex:1},{value:"rect",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"矩形节点",paraId:19,tocIndex:1},{value:"star",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"星形节点",paraId:20,tocIndex:1},{value:"triangle",paraId:11,tocIndex:1},{value:"：",paraId:11,tocIndex:1},{value:"三角形节点",paraId:21,tocIndex:1},{value:"定义节点的样式，包括颜色、大小等。",paraId:22,tocIndex:2},{value:"const graph = new Graph({\n  node: {\n    style: {},\n  },\n});\n",paraId:23,tocIndex:2},{value:"一个完整的节点由以下几部分构成：",paraId:24,tocIndex:2},{value:"key",paraId:25,tocIndex:2},{value:" ：节点的主图形，表示节点的主要形状，例如矩形、圆形等；",paraId:25,tocIndex:2},{value:"label",paraId:25,tocIndex:2},{value:" ：文本标签，通常用于展示节点的名称或描述；",paraId:25,tocIndex:2},{value:"icon",paraId:25,tocIndex:2},{value:" ：图标图形，通常用于展示节点的图标，可以是图片或者文本图标；",paraId:25,tocIndex:2},{value:"badge",paraId:25,tocIndex:2},{value:" ：默认位于节点右上角的徽标；",paraId:25,tocIndex:2},{value:"halo",paraId:25,tocIndex:2},{value:" ：主图形周围展示的光晕效果的图形；",paraId:25,tocIndex:2},{value:"port",paraId:25,tocIndex:2},{value:" ：节点上的连接点，用于连接边。",paraId:25,tocIndex:2},{value:"以下样式配置将按原子图形依次说明：",paraId:26,tocIndex:2},{value:"主图形是节点的核心部分，定义了节点的基本形状和外观：",paraId:27,tocIndex:3},{value:"属性",paraId:28,tocIndex:3},{value:"描述",paraId:28,tocIndex:3},{value:"类型",paraId:28,tocIndex:3},{value:"默认值",paraId:28,tocIndex:3},{value:"必选",paraId:28,tocIndex:3},{value:"collapsed",paraId:28,tocIndex:3},{value:"当前节点/组合是否折叠",paraId:28,tocIndex:3},{value:"boolean",paraId:28,tocIndex:3},{value:"false",paraId:28,tocIndex:3},{value:"cursor",paraId:28,tocIndex:3},{value:"节点鼠标移入样式，",paraId:28,tocIndex:3},{value:"配置项",paraId:29,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"default",paraId:28,tocIndex:3},{value:"fill",paraId:28,tocIndex:3},{value:"节点填充色",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"#1783FF",paraId:28,tocIndex:3},{value:"fillOpacity",paraId:28,tocIndex:3},{value:"节点填充色透明度",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"increasedLineWidthForHitTesting",paraId:28,tocIndex:3},{value:"当 lineWidth 较小时，可交互区域也随之变小，有时我们想增大这个区域，让“细线”更容易被拾取到",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"lineCap",paraId:28,tocIndex:3},{value:"节点描边端点样式",paraId:28,tocIndex:3},{value:"round",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"square",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"butt",paraId:28,tocIndex:3},{value:"butt",paraId:28,tocIndex:3},{value:"lineDash",paraId:28,tocIndex:3},{value:"节点描边虚线样式",paraId:28,tocIndex:3},{value:"number[]",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"lineDashOffset",paraId:28,tocIndex:3},{value:"节点描边虚线偏移量",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"lineJoin",paraId:28,tocIndex:3},{value:"节点描边连接处样式",paraId:28,tocIndex:3},{value:"round",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"bevel",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"miter",paraId:28,tocIndex:3},{value:"miter",paraId:28,tocIndex:3},{value:"lineWidth",paraId:28,tocIndex:3},{value:"节点描边宽度",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"opacity",paraId:28,tocIndex:3},{value:"节点透明度",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"shadowBlur",paraId:28,tocIndex:3},{value:"节点阴影模糊度",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowColor",paraId:28,tocIndex:3},{value:"节点阴影颜色",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowOffsetX",paraId:28,tocIndex:3},{value:"节点阴影在 x 轴方向上的偏移量",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowOffsetY",paraId:28,tocIndex:3},{value:"节点阴影在 y 轴方向上的偏移量",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"shadowType",paraId:28,tocIndex:3},{value:"节点阴影类型",paraId:28,tocIndex:3},{value:"inner",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"outer",paraId:28,tocIndex:3},{value:"outer",paraId:28,tocIndex:3},{value:"size",paraId:28,tocIndex:3},{value:"节点大小，快捷设置节点宽高，",paraId:28,tocIndex:3},{value:"配置项",paraId:30,tocIndex:3},{value:"number | number[]",paraId:28,tocIndex:3},{value:"32",paraId:28,tocIndex:3},{value:"stroke",paraId:28,tocIndex:3},{value:"节点描边色",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"#000",paraId:28,tocIndex:3},{value:"strokeOpacity",paraId:28,tocIndex:3},{value:"节点描边色透明度",paraId:28,tocIndex:3},{value:"number | string",paraId:28,tocIndex:3},{value:"1",paraId:28,tocIndex:3},{value:"transform",paraId:28,tocIndex:3},{value:"transform 属性允许你旋转、缩放、倾斜或平移给定节点",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"transformOrigin",paraId:28,tocIndex:3},{value:"旋转与缩放中心，也称作变换中心",paraId:28,tocIndex:3},{value:"string",paraId:28,tocIndex:3},{value:"-",paraId:28,tocIndex:3},{value:"visibility",paraId:28,tocIndex:3},{value:"节点是否可见",paraId:28,tocIndex:3},{value:"visible",paraId:28,tocIndex:3},{value:" | ",paraId:28,tocIndex:3},{value:"hidden",paraId:28,tocIndex:3},{value:"visible",paraId:28,tocIndex:3},{value:"x",paraId:28,tocIndex:3},{value:"节点 x 坐标",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"y",paraId:28,tocIndex:3},{value:"节点 y 坐标",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"z",paraId:28,tocIndex:3},{value:"节点 z 坐标",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"zIndex",paraId:28,tocIndex:3},{value:"节点渲染层级",paraId:28,tocIndex:3},{value:"number",paraId:28,tocIndex:3},{value:"0",paraId:28,tocIndex:3},{value:"节点大小，快捷设置节点宽高，支持三种配置方式：",paraId:31,tocIndex:4},{value:"number：表示节点宽高相同为指定值",paraId:32,tocIndex:4},{value:"[number, number]：表示节点宽高分别为数组元素依次表示节点的宽度、高度",paraId:32,tocIndex:4},{value:"[number, number, number]：表示节点宽高分别为数组元素依次表示节点的宽度、高度以及深度",paraId:32,tocIndex:4},{value:"可选值有：",paraId:33,tocIndex:5},{value:"auto",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"default",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"none",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"context-menu",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"help",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"pointer",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"progress",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"wait",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"cell",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"crosshair",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"text",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"vertical-text",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"alias",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"copy",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"move",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"no-drop",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"not-allowed",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"grab",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"grabbing",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"all-scroll",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"col-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"row-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"n-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"e-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"s-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"w-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ne-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"se-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"sw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ew-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"ns-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nesw-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"nwse-resize",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"zoom-in",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"zoom-out",paraId:33,tocIndex:5},{value:"示例：",paraId:34,tocIndex:5},{value:"const graph = new Graph({\n  node: {\n    style: {\n      fill: '#1783FF', // 填充色\n      stroke: '#000', // 描边色\n      lineWidth: 2, // 描边宽度\n    },\n  },\n});\n",paraId:35,tocIndex:5},{value:"效果如下：",paraId:36,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [{ id: 'node1', style: { x: 120, y: 40 } }],\n  },\n  node: {\n    style: { fill: '#1783FF', stroke: '#000', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:37,tocIndex:5},{value:"标签用于显示节点的文本信息：",paraId:38,tocIndex:6},{value:"属性",paraId:39,tocIndex:6},{value:"描述",paraId:39,tocIndex:6},{value:"类型",paraId:39,tocIndex:6},{value:"默认值",paraId:39,tocIndex:6},{value:"必选",paraId:39,tocIndex:6},{value:"label",paraId:39,tocIndex:6},{value:"是否显示节点标签",paraId:39,tocIndex:6},{value:"boolean",paraId:39,tocIndex:6},{value:"true",paraId:39,tocIndex:6},{value:"labelCursor",paraId:39,tocIndex:6},{value:"鼠标移入节点标签时显示的样式，",paraId:39,tocIndex:6},{value:"配置项",paraId:40,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"default",paraId:39,tocIndex:6},{value:"labelFill",paraId:39,tocIndex:6},{value:"节点标签文字颜色",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontFamily",paraId:39,tocIndex:6},{value:"节点标签字体族",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontSize",paraId:39,tocIndex:6},{value:"节点标签字体大小",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"12",paraId:39,tocIndex:6},{value:"labelFontStyle",paraId:39,tocIndex:6},{value:"节点标签字体样式",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"italic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"oblique",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontVariant",paraId:39,tocIndex:6},{value:"节点标签字体变种",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"small-caps",paraId:39,tocIndex:6},{value:" | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelFontWeight",paraId:39,tocIndex:6},{value:"节点标签字体粗细",paraId:39,tocIndex:6},{value:"normal",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bold",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bolder",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"lighter",paraId:39,tocIndex:6},{value:" | number",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelLeading",paraId:39,tocIndex:6},{value:"行间距",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelLetterSpacing",paraId:39,tocIndex:6},{value:"节点标签字间距",paraId:39,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelLineHeight",paraId:39,tocIndex:6},{value:"节点标签行高",paraId:39,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelMaxLines",paraId:39,tocIndex:6},{value:"节点标签最大行数",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"1",paraId:39,tocIndex:6},{value:"labelMaxWidth",paraId:39,tocIndex:6},{value:"节点标签最大宽度，",paraId:39,tocIndex:6},{value:"配置项",paraId:41,tocIndex:6},{value:"number | string",paraId:39,tocIndex:6},{value:"200%",paraId:39,tocIndex:6},{value:"labelOffsetX",paraId:39,tocIndex:6},{value:"节点标签在 x 轴方向上的偏移量",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelOffsetY",paraId:39,tocIndex:6},{value:"节点标签在 y 轴方向上的偏移量",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelPadding",paraId:39,tocIndex:6},{value:"节点标签内边距",paraId:39,tocIndex:6},{value:"number | number[]",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"labelPlacement",paraId:39,tocIndex:6},{value:"节点标签相对于节点主图形的位置，",paraId:39,tocIndex:6},{value:"配置项",paraId:42,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"bottom",paraId:39,tocIndex:6},{value:"labelText",paraId:39,tocIndex:6},{value:"节点标签文字内容",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextAlign",paraId:39,tocIndex:6},{value:"节点标签文本水平对齐方式",paraId:39,tocIndex:6},{value:"start",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"center",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"middle",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"end",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"left",paraId:39,tocIndex:6},{value:" | `right'",paraId:39,tocIndex:6},{value:"left",paraId:39,tocIndex:6},{value:"labelTextBaseline",paraId:39,tocIndex:6},{value:"节点标签文本基线",paraId:39,tocIndex:6},{value:"top",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"hanging",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"middle",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"alphabetic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"ideographic",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"bottom",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationColor",paraId:39,tocIndex:6},{value:"节点标签文本装饰线颜色",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationLine",paraId:39,tocIndex:6},{value:"节点标签文本装饰线",paraId:39,tocIndex:6},{value:"string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextDecorationStyle",paraId:39,tocIndex:6},{value:"节点标签文本装饰线样式",paraId:39,tocIndex:6},{value:"solid",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"double",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"dotted",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"dashed",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"wavy",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextOverflow",paraId:39,tocIndex:6},{value:"节点标签文本溢出处理方式",paraId:39,tocIndex:6},{value:"clip",paraId:39,tocIndex:6},{value:" | ",paraId:39,tocIndex:6},{value:"ellipsis",paraId:39,tocIndex:6},{value:" | string",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelTextPath",paraId:39,tocIndex:6},{value:"节点标签文本路径",paraId:39,tocIndex:6},{value:"Path",paraId:39,tocIndex:6},{value:"-",paraId:39,tocIndex:6},{value:"labelWordWrap",paraId:39,tocIndex:6},{value:"节点标签是否开启自动折行。开启 labelWordWrap 后，超出 labelMaxWidth 的部分自动换行",paraId:39,tocIndex:6},{value:"boolean",paraId:39,tocIndex:6},{value:"false",paraId:39,tocIndex:6},{value:"labelZIndex",paraId:39,tocIndex:6},{value:"节点标签渲染层级",paraId:39,tocIndex:6},{value:"number",paraId:39,tocIndex:6},{value:"0",paraId:39,tocIndex:6},{value:"可选值有：",paraId:43,tocIndex:7},{value:"left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"left-top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"left-bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right-top",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"right-bottom",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top-left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"top-right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom-left",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom-right",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"center",paraId:43,tocIndex:7},{value:" | ",paraId:43,tocIndex:7},{value:"bottom",paraId:43,tocIndex:7},{value:"开启自动折行 ",paraId:44,tocIndex:8},{value:"labelWordWrap",paraId:44,tocIndex:8},{value:" 后，超出该宽度则换行:",paraId:44,tocIndex:8},{value:"string: 表示以相对于节点宽度的百分比形式定义最大宽度。例如 ",paraId:45,tocIndex:8},{value:"50%",paraId:45,tocIndex:8},{value:" 表示标签宽度不超过节点宽度的一半",paraId:45,tocIndex:8},{value:"number: 表示以像素值为单位定义最大宽度。例如 100 表示标签的最大宽度为 100 像素",paraId:45,tocIndex:8},{value:"比如，设置多行标签文字：",paraId:46,tocIndex:8},{value:'{\n  "labelWordWrap": true,\n  "labelMaxWidth": 200,\n  "labelMaxLines": 3\n}\n',paraId:47,tocIndex:8},{value:"示例：",paraId:48,tocIndex:8},{value:"const graph = new Graph({\n  node: {\n    style: {\n      label: true, // 是否显示节点标签\n      labelText: '节点名称', // 标签文字内容\n      labelFill: '#000', // 标签文字颜色\n      labelFontSize: 12, // 标签字体大小\n      labelFontWeight: 'normal', // 标签字体粗细\n      labelPlacement: 'bottom', // 标签相对于节点主图形的位置\n    },\n  },\n});\n",paraId:49,tocIndex:8},{value:"效果如下：",paraId:50,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n          label: true,\n          labelText: '节点名称',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:51,tocIndex:8},{value:"标签背景用于显示节点标签的背景：",paraId:52,tocIndex:9},{value:"属性",paraId:53,tocIndex:9},{value:"描述",paraId:53,tocIndex:9},{value:"类型",paraId:53,tocIndex:9},{value:"默认值",paraId:53,tocIndex:9},{value:"labelBackground",paraId:53,tocIndex:9},{value:"节点标签背景是否显示",paraId:53,tocIndex:9},{value:"boolean",paraId:53,tocIndex:9},{value:"false",paraId:53,tocIndex:9},{value:"labelBackgroundCursor",paraId:53,tocIndex:9},{value:"节点标签背景鼠标移入样式，",paraId:53,tocIndex:9},{value:"配置项",paraId:54,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"default",paraId:53,tocIndex:9},{value:"labelBackgroundFill",paraId:53,tocIndex:9},{value:"节点标签背景填充色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundFillOpacity",paraId:53,tocIndex:9},{value:"节点标签背景透明度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"labelBackgroundHeight",paraId:53,tocIndex:9},{value:"节点标签背景高度",paraId:53,tocIndex:9},{value:"string | number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineDash",paraId:53,tocIndex:9},{value:"节点标签背景虚线配置",paraId:53,tocIndex:9},{value:"number | string |(number | string )[]",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineDashOffset",paraId:53,tocIndex:9},{value:"节点标签背景虚线偏移量",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundLineWidth",paraId:53,tocIndex:9},{value:"节点标签背景描边线宽",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundRadius",paraId:53,tocIndex:9},{value:"节点标签背景圆角半径 ",paraId:53,tocIndex:9},{value:" - number: 统一设置四个圆角半径 ",paraId:53,tocIndex:9},{value:" - number[]: 分别设置四个圆角半径，不足则自动补充",paraId:53,tocIndex:9},{value:"number | number[]",paraId:53,tocIndex:9},{value:"0",paraId:53,tocIndex:9},{value:"labelBackgroundShadowBlur",paraId:53,tocIndex:9},{value:"节点标签背景阴影模糊程度",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowColor",paraId:53,tocIndex:9},{value:"节点标签背景阴影颜色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowOffsetX",paraId:53,tocIndex:9},{value:"节点标签背景阴影 X 方向偏移",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundShadowOffsetY",paraId:53,tocIndex:9},{value:"节点标签背景阴影 Y 方向偏移",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundStroke",paraId:53,tocIndex:9},{value:"节点标签背景描边颜色",paraId:53,tocIndex:9},{value:"string",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundStrokeOpacity",paraId:53,tocIndex:9},{value:"节点标签背景描边透明度",paraId:53,tocIndex:9},{value:"number | string",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"labelBackgroundVisibility",paraId:53,tocIndex:9},{value:"节点标签背景是否可见",paraId:53,tocIndex:9},{value:"visible",paraId:53,tocIndex:9},{value:" | ",paraId:53,tocIndex:9},{value:"hidden",paraId:53,tocIndex:9},{value:"-",paraId:53,tocIndex:9},{value:"labelBackgroundZIndex",paraId:53,tocIndex:9},{value:"节点标签背景渲染层级",paraId:53,tocIndex:9},{value:"number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"示例：",paraId:55,tocIndex:9},{value:"const graph = new Graph({\n  node: {\n    style: {\n      labelBackground: true, // 是否显示节点标签背景\n      labelBackgroundFill: '#000', // label背景填充\n      labelBackgroundRadius: 10, // label背景圆角\n      labelBackgroundFillOpacity: 0.5, // label背景透明度\n    },\n  },\n});\n",paraId:56,tocIndex:9},{value:"效果如下：",paraId:57,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n          label: true,\n          labelText: '节点名称',\n          labelFill: '#000',\n          labelFontSize: 12,\n          labelFontWeight: 'normal',\n          labelPlacement: 'bottom',\n          labelBackground: true,\n          labelBackgroundFill: '#000',\n          labelBackgroundRadius: 10,\n          labelBackgroundFillOpacity: 0.5,\n        },\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:58,tocIndex:9},{value:"属性",paraId:59,tocIndex:10},{value:"描述",paraId:59,tocIndex:10},{value:"类型",paraId:59,tocIndex:10},{value:"默认值",paraId:59,tocIndex:10},{value:"必选",paraId:59,tocIndex:10},{value:"halo",paraId:59,tocIndex:10},{value:"节点光晕是否显示",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"false",paraId:59,tocIndex:10},{value:"haloCursor",paraId:59,tocIndex:10},{value:"节点光晕鼠标移入样式，",paraId:59,tocIndex:10},{value:"配置项",paraId:60,tocIndex:10},{value:"strig",paraId:59,tocIndex:10},{value:"default",paraId:59,tocIndex:10},{value:"haloDraggable",paraId:59,tocIndex:10},{value:"节点光晕是否允许拖拽",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"true",paraId:59,tocIndex:10},{value:"haloDroppable",paraId:59,tocIndex:10},{value:"节点光晕是否允许接收被拖拽的元素",paraId:59,tocIndex:10},{value:"boolean",paraId:59,tocIndex:10},{value:"true",paraId:59,tocIndex:10},{value:"haloFillRule",paraId:59,tocIndex:10},{value:"节点光晕填充规则",paraId:59,tocIndex:10},{value:"nonzero",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"evenodd",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"haloFilter",paraId:59,tocIndex:10},{value:"节点光晕滤镜",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"-",paraId:59,tocIndex:10},{value:"haloLineWidth",paraId:59,tocIndex:10},{value:"节点光晕描边宽度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"3",paraId:59,tocIndex:10},{value:"haloPointerEvents",paraId:59,tocIndex:10},{value:"节点光晕效果是否响应指针事件，",paraId:59,tocIndex:10},{value:"配置项",paraId:61,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"none",paraId:59,tocIndex:10},{value:"haloStroke",paraId:59,tocIndex:10},{value:"节点光晕描边色，",paraId:59,tocIndex:10},{value:"此属性用于设置节点周围光晕的颜色，帮助突出显示节点",paraId:59,tocIndex:10},{value:"string",paraId:59,tocIndex:10},{value:"与主图形的填充色 ",paraId:59,tocIndex:10},{value:"fill",paraId:59,tocIndex:10},{value:" 一致",paraId:59,tocIndex:10},{value:"haloStrokeOpacity",paraId:59,tocIndex:10},{value:"节点光晕描边色透明度",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"0.25",paraId:59,tocIndex:10},{value:"haloVisibility",paraId:59,tocIndex:10},{value:"节点光晕可见性",paraId:59,tocIndex:10},{value:"visible",paraId:59,tocIndex:10},{value:" | ",paraId:59,tocIndex:10},{value:"hidden",paraId:59,tocIndex:10},{value:"visible",paraId:59,tocIndex:10},{value:"haloZIndex",paraId:59,tocIndex:10},{value:"节点光晕渲染层级",paraId:59,tocIndex:10},{value:"number",paraId:59,tocIndex:10},{value:"-1",paraId:59,tocIndex:10},{value:"可选值有：\n",paraId:62,tocIndex:11},{value:"visible",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblepainted",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblestroke",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"non-transparent-pixel",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visiblefill",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"visible",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"painted",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"fill",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"stroke",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"all",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"none",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"auto",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"inherit",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"initial",paraId:62,tocIndex:11},{value:" | ",paraId:62,tocIndex:11},{value:"unset",paraId:62,tocIndex:11},{value:"示例：",paraId:63,tocIndex:11},{value:"const graph = new Graph({\n  node: {\n    style: {\n      halo: true, // 是否显示节点光晕\n      haloStroke: '#FF0000', // 节点光晕描边色\n      haloLineWidth: 10, // 节点光晕描边宽度\n    },\n  },\n});\n",paraId:64,tocIndex:11},{value:"效果如下：",paraId:65,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n        },\n      },\n    ],\n  },\n  node: {\n    style: {\n      halo: true,\n      haloStroke: '#FF0000',\n      haloLineWidth: 10,\n    },\n  },\n});\n\ngraph.render();\n",paraId:66,tocIndex:11},{value:"属性",paraId:67,tocIndex:12},{value:"描述",paraId:67,tocIndex:12},{value:"类型",paraId:67,tocIndex:12},{value:"默认值",paraId:67,tocIndex:12},{value:"icon",paraId:67,tocIndex:12},{value:"是否显示节点图标",paraId:67,tocIndex:12},{value:"boolean",paraId:67,tocIndex:12},{value:"true",paraId:67,tocIndex:12},{value:"iconFill",paraId:67,tocIndex:12},{value:"节点图标文字颜色",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconFontFamily",paraId:67,tocIndex:12},{value:"节点图标字体族",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconFontSize",paraId:67,tocIndex:12},{value:"节点图标字体大小",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"16",paraId:67,tocIndex:12},{value:"iconFontStyle",paraId:67,tocIndex:12},{value:"节点图标字体样式",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"italic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"oblique",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconFontVariant",paraId:67,tocIndex:12},{value:"节点图标字体变种",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"small-caps",paraId:67,tocIndex:12},{value:" | string",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconFontWeight",paraId:67,tocIndex:12},{value:"节点图标字体粗细",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"normal",paraId:67,tocIndex:12},{value:"iconHeight",paraId:67,tocIndex:12},{value:"节点图标高度",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"主图形高度的一半",paraId:67,tocIndex:12},{value:"iconLetterSpacing",paraId:67,tocIndex:12},{value:"节点图标文本字间距",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconLineHeight",paraId:67,tocIndex:12},{value:"节点图标文本行高",paraId:67,tocIndex:12},{value:"number | string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconMaxLines",paraId:67,tocIndex:12},{value:"节点图标文本最大行数",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"1",paraId:67,tocIndex:12},{value:"iconRadius",paraId:67,tocIndex:12},{value:"节点图标圆角半径",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"0",paraId:67,tocIndex:12},{value:"iconSrc",paraId:67,tocIndex:12},{value:"节点图片来源。其优先级高于 iconText",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconText",paraId:67,tocIndex:12},{value:"节点图标文字",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextAlign",paraId:67,tocIndex:12},{value:"节点图标文本水平对齐方式",paraId:67,tocIndex:12},{value:"start",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"center",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"middle",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"end",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"left",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"right",paraId:67,tocIndex:12},{value:"left",paraId:67,tocIndex:12},{value:"iconTextBaseline",paraId:67,tocIndex:12},{value:"节点图标文本基线",paraId:67,tocIndex:12},{value:"top",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"hanging",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"middle",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"alphabetic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"ideographic",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"bottom",paraId:67,tocIndex:12},{value:"alphabetic",paraId:67,tocIndex:12},{value:"iconTextDecorationColor",paraId:67,tocIndex:12},{value:"节点图标文本装饰线颜色",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextDecorationLine",paraId:67,tocIndex:12},{value:"节点图标文本装饰线",paraId:67,tocIndex:12},{value:"string",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"iconTextDecorationStyle",paraId:67,tocIndex:12},{value:"节点图标文本装饰线样式",paraId:67,tocIndex:12},{value:"solid",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"double",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"dotted",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"dashed",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"wavy",paraId:67,tocIndex:12},{value:"solid",paraId:67,tocIndex:12},{value:"iconTextOverflow",paraId:67,tocIndex:12},{value:"节点图标文本溢出处理方式",paraId:67,tocIndex:12},{value:"clip",paraId:67,tocIndex:12},{value:" | ",paraId:67,tocIndex:12},{value:"ellipsis",paraId:67,tocIndex:12},{value:" | string",paraId:67,tocIndex:12},{value:"clip",paraId:67,tocIndex:12},{value:"iconWidth",paraId:67,tocIndex:12},{value:"节点图标宽度",paraId:67,tocIndex:12},{value:"number",paraId:67,tocIndex:12},{value:"主图形宽度的一半",paraId:67,tocIndex:12},{value:"iconWordWrap",paraId:67,tocIndex:12},{value:"节点图标文本是否自动换行",paraId:67,tocIndex:12},{value:"boolean",paraId:67,tocIndex:12},{value:"-",paraId:67,tocIndex:12},{value:"示例：",paraId:68,tocIndex:12},{value:"const graph = new Graph({\n  node: {\n    style: {\n      iconText: '文本', // 图标文本\n      iconFill: '#FF0000', // 图标文本颜色\n      iconFontSize: 14, // 图标文本大小\n      iconFontWeight: 'bold', // 图标文本粗细\n      iconFontStyle: 'italic', // 图标文本样式\n    },\n  },\n});\n",paraId:69,tocIndex:12},{value:"效果如下：",paraId:70,tocIndex:12},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 240,\n  height: 100,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: {\n          x: 120,\n          y: 40,\n        },\n      },\n    ],\n  },\n  node: {\n    style: {\n      iconText: '文本',\n      iconFill: '#FF0000',\n      iconFontSize: 14,\n      iconFontWeight: 'bold',\n      iconFontStyle: 'italic',\n    },\n  },\n});\n\ngraph.render();\n",paraId:71,tocIndex:12},{value:"属性",paraId:72,tocIndex:13},{value:"描述",paraId:72,tocIndex:13},{value:"类型",paraId:72,tocIndex:13},{value:"默认值",paraId:72,tocIndex:13},{value:"badge",paraId:72,tocIndex:13},{value:"节点是否显示徽标",paraId:72,tocIndex:13},{value:"boolean",paraId:72,tocIndex:13},{value:"true",paraId:72,tocIndex:13},{value:"badgePalette",paraId:72,tocIndex:13},{value:"节点徽标的背景色板",paraId:72,tocIndex:13},{value:"string[]",paraId:72,tocIndex:13},{value:"[",paraId:72,tocIndex:13},{value:"#7E92B5",paraId:72,tocIndex:13},{value:", ",paraId:72,tocIndex:13},{value:"#F4664A",paraId:72,tocIndex:13},{value:", ",paraId:72,tocIndex:13},{value:"#FFBE3A",paraId:72,tocIndex:13},{value:"]",paraId:72,tocIndex:13},{value:"badges",paraId:72,tocIndex:13},{value:"节点徽标设置",paraId:72,tocIndex:13},{value:"BadgeStyleProps",paraId:73,tocIndex:13},{value:"[]",paraId:72,tocIndex:13},{value:"-",paraId:72,tocIndex:13},{value:"属性",paraId:74,tocIndex:14},{value:"描述",paraId:74,tocIndex:14},{value:"类型",paraId:74,tocIndex:14},{value:"默认值",paraId:74,tocIndex:14},{value:"background",paraId:74,tocIndex:14},{value:"节点徽标是否显示背景",paraId:74,tocIndex:14},{value:"boolean",paraId:74,tocIndex:14},{value:"true",paraId:74,tocIndex:14},{value:"backgroundCursor",paraId:74,tocIndex:14},{value:"节点徽标背景鼠标移入样式，",paraId:74,tocIndex:14},{value:"配置项",paraId:75,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"default",paraId:74,tocIndex:14},{value:"backgroundFill",paraId:74,tocIndex:14},{value:"节点徽标背景填充色。若不指定，优先考虑 badgePalette 按顺序分配",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundFillOpacity",paraId:74,tocIndex:14},{value:"节点徽标背景填充透明度",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"backgroundFilter",paraId:74,tocIndex:14},{value:"节点徽标背景滤镜",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundHeight",paraId:74,tocIndex:14},{value:"节点徽标背景高度",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineDash",paraId:74,tocIndex:14},{value:"节点徽标背景虚线配置",paraId:74,tocIndex:14},{value:"number | string |(number | string )[]",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineDashOffset",paraId:74,tocIndex:14},{value:"节点徽标背景虚线偏移量",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundLineWidth",paraId:74,tocIndex:14},{value:"节点徽标背景描边线宽",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundRadius",paraId:74,tocIndex:14},{value:"节点徽标背景圆角半径 ",paraId:74,tocIndex:14},{value:" - number: 统一设置四个圆角半径 ",paraId:74,tocIndex:14},{value:" - number[]: 分别设置四个圆角半径，会补足缺省的分量 ",paraId:74,tocIndex:14},{value:" - string: 与 ",paraId:74,tocIndex:14},{value:"CSS padding",paraId:74,tocIndex:14},{value:" 属性类似，使用空格分隔",paraId:74,tocIndex:14},{value:"number | number[] | string",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"backgroundShadowBlur",paraId:74,tocIndex:14},{value:"节点徽标背景阴影模糊程度",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowColor",paraId:74,tocIndex:14},{value:"节点徽标背景阴影颜色",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowOffsetX",paraId:74,tocIndex:14},{value:"节点徽标背景阴影 X 方向偏移",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundShadowOffsetY",paraId:74,tocIndex:14},{value:"节点徽标背景阴影 Y 方向偏移",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundStroke",paraId:74,tocIndex:14},{value:"节点徽标背景描边颜色",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundStrokeOpacity",paraId:74,tocIndex:14},{value:"节点徽标背景描边透明度",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"backgroundVisibility",paraId:74,tocIndex:14},{value:"节点徽标背景是否可见",paraId:74,tocIndex:14},{value:"visible",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hidden",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"backgroundZIndex",paraId:74,tocIndex:14},{value:"节点徽标背景渲染层级",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fill",paraId:74,tocIndex:14},{value:"节点徽标文字颜色",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fontFamily",paraId:74,tocIndex:14},{value:"节点徽标字体族",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"fontSize",paraId:74,tocIndex:14},{value:"节点徽标字体大小",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"8",paraId:74,tocIndex:14},{value:"fontStyle",paraId:74,tocIndex:14},{value:"节点徽标字体样式",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"italic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"oblique",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"fontVariant",paraId:74,tocIndex:14},{value:"节点徽标字体变种",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"small-caps",paraId:74,tocIndex:14},{value:" | string",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"fontWeight",paraId:74,tocIndex:14},{value:"节点徽标字体粗细",paraId:74,tocIndex:14},{value:"number | string",paraId:74,tocIndex:14},{value:"normal",paraId:74,tocIndex:14},{value:"lineHeight",paraId:74,tocIndex:14},{value:"节点徽标行高",paraId:74,tocIndex:14},{value:"string | number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"lineWidth",paraId:74,tocIndex:14},{value:"节点徽标行宽",paraId:74,tocIndex:14},{value:"string | number",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"maxLines",paraId:74,tocIndex:14},{value:"节点徽标文本最大行数",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"1",paraId:74,tocIndex:14},{value:"offsetX",paraId:74,tocIndex:14},{value:"节点徽标在 x 轴方向上的偏移量",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"offsetY",paraId:74,tocIndex:14},{value:"节点徽标在 y 轴方向上的偏移量",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"padding",paraId:74,tocIndex:14},{value:"节点徽标内边距",paraId:74,tocIndex:14},{value:"number | number[]",paraId:74,tocIndex:14},{value:"0",paraId:74,tocIndex:14},{value:"placement",paraId:74,tocIndex:14},{value:"节点徽标相对于节点主图形的位置。若不指定，默认从右上角顺时针依次排放",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left-top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left-bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right-top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right-bottom",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top-left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"top-right",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom-left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom-right",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"text",paraId:74,tocIndex:14},{value:"节点徽标文字内容",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textAlign",paraId:74,tocIndex:14},{value:"节点徽标文本水平对齐方式",paraId:74,tocIndex:14},{value:"start",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"center",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"middle",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"end",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"right",paraId:74,tocIndex:14},{value:"left",paraId:74,tocIndex:14},{value:"textBaseline",paraId:74,tocIndex:14},{value:"节点徽标文本基线",paraId:74,tocIndex:14},{value:"top",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hanging",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"middle",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"alphabetic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"ideographic",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"bottom",paraId:74,tocIndex:14},{value:"alphabetic",paraId:74,tocIndex:14},{value:"textDecorationColor",paraId:74,tocIndex:14},{value:"节点徽标文本装饰线颜色",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textDecorationLine",paraId:74,tocIndex:14},{value:"节点徽标文本装饰线",paraId:74,tocIndex:14},{value:"string",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"textDecorationStyle",paraId:74,tocIndex:14},{value:"节点徽标文本装饰线样式",paraId:74,tocIndex:14},{value:"solid",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"double",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"dotted",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"dashed",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"wavy",paraId:74,tocIndex:14},{value:"solid",paraId:74,tocIndex:14},{value:"textOverflow",paraId:74,tocIndex:14},{value:"节点徽标文本溢出处理方式",paraId:74,tocIndex:14},{value:"clip",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"ellipsis",paraId:74,tocIndex:14},{value:" | string",paraId:74,tocIndex:14},{value:"clip",paraId:74,tocIndex:14},{value:"visibility",paraId:74,tocIndex:14},{value:"节点徽标是否可见",paraId:74,tocIndex:14},{value:"visible",paraId:74,tocIndex:14},{value:" | ",paraId:74,tocIndex:14},{value:"hidden",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"wordWrap",paraId:74,tocIndex:14},{value:"节点徽标文本是否自动换行",paraId:74,tocIndex:14},{value:"boolean",paraId:74,tocIndex:14},{value:"-",paraId:74,tocIndex:14},{value:"zIndex",paraId:74,tocIndex:14},{value:"节点徽标渲染层级",paraId:74,tocIndex:14},{value:"number",paraId:74,tocIndex:14},{value:"3",paraId:74,tocIndex:14},{value:"例如，给一个节点添加三个不同含义的徽标：",paraId:76,tocIndex:14},{value:"const graph = new Graph({\n  node: {\n    style: {\n      badge: true, // 是否显示徽标\n      badges: [\n        { text: 'A', placement: 'right-top' },\n        { text: 'Important', placement: 'right' },\n        { text: 'Notice', placement: 'right-bottom' },\n      ],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'], // 徽标的背景色板\n      badgeFontSize: 7, // 徽标字体大小\n    },\n  },\n});\n",paraId:77,tocIndex:14},{value:"效果如下图所示：",paraId:78,tocIndex:14},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    style: {\n      badge: true,\n      badges: [\n        { text: 'A', placement: 'right-top' },\n        { text: 'Important', placement: 'right' },\n        { text: 'Notice', placement: 'right-bottom' },\n      ],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'],\n      badgeFontSize: 7,\n    },\n  },\n});\n\ngraph.render();\n",paraId:79,tocIndex:14},{value:"属性",paraId:80,tocIndex:15},{value:"描述",paraId:80,tocIndex:15},{value:"类型",paraId:80,tocIndex:15},{value:"默认值",paraId:80,tocIndex:15},{value:"必选",paraId:80,tocIndex:15},{value:"port",paraId:80,tocIndex:15},{value:"节点是否显示连接桩",paraId:80,tocIndex:15},{value:"boolean",paraId:80,tocIndex:15},{value:"true",paraId:80,tocIndex:15},{value:"ports",paraId:80,tocIndex:15},{value:"节点连接桩配置项，支持配置多个连接桩",paraId:80,tocIndex:15},{value:"PortStyleProps",paraId:81,tocIndex:15},{value:"[]",paraId:80,tocIndex:15},{value:"属性",paraId:82,tocIndex:16},{value:"描述",paraId:82,tocIndex:16},{value:"类型",paraId:82,tocIndex:16},{value:"默认值",paraId:82,tocIndex:16},{value:"必选",paraId:82,tocIndex:16},{value:"key",paraId:82,tocIndex:16},{value:"节点连接桩的键值，默认为节点连接桩的索引",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"placement",paraId:82,tocIndex:16},{value:"节点连接桩相对于节点主图形的位置",paraId:82,tocIndex:16},{value:"left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"center",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"left-top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"left-bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right-top",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"right-bottom",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top-left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"top-right",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom-left",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"bottom-right",paraId:82,tocIndex:16},{value:" | [number, number]",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"✓",paraId:82,tocIndex:16},{value:"r",paraId:82,tocIndex:16},{value:"节点连接桩半径 ",paraId:82,tocIndex:16},{value:" - 如果设置为 undefined，则连接桩被视为一个点，不在画布上显示但存在，边会优先连接到最近的连接桩 ",paraId:82,tocIndex:16},{value:" - 如果设置为数字，则连接桩被视为一个圆，圆的半径由此处指定",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"linkToCenter",paraId:82,tocIndex:16},{value:"边是否连接到节点连接桩的中心 ",paraId:82,tocIndex:16},{value:" - 若为 true，则边连接到节点连接桩的中心 ",paraId:82,tocIndex:16},{value:" - 若为 false，则边连接到节点连接桩的边缘",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"false",paraId:82,tocIndex:16},{value:"cursor",paraId:82,tocIndex:16},{value:"节点连接桩鼠标移入样式，",paraId:82,tocIndex:16},{value:"配置项",paraId:83,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"default",paraId:82,tocIndex:16},{value:"fill",paraId:82,tocIndex:16},{value:"节点连接桩填充颜色",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"fillOpacity",paraId:82,tocIndex:16},{value:"节点连接桩填充透明度",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"1",paraId:82,tocIndex:16},{value:"isBillboard",paraId:82,tocIndex:16},{value:"节点连接桩是否为Billboard 效果",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"isSizeAttenuation",paraId:82,tocIndex:16},{value:"节点连接桩是否启用大小衰减",paraId:82,tocIndex:16},{value:"boolean",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineDash",paraId:82,tocIndex:16},{value:"节点连接桩描边虚线配置",paraId:82,tocIndex:16},{value:"number | string |(number | string )[]",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineDashOffset",paraId:82,tocIndex:16},{value:"节点连接桩描边虚线偏移量",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"lineWidth",paraId:82,tocIndex:16},{value:"节点连接桩描边线宽",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowBlur",paraId:82,tocIndex:16},{value:"节点连接桩阴影模糊程度",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowColor",paraId:82,tocIndex:16},{value:"节点连接桩阴影颜色",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowOffsetX",paraId:82,tocIndex:16},{value:"节点连接桩阴影 X 方向偏移",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"shadowOffsetY",paraId:82,tocIndex:16},{value:"节点连接桩阴影 Y 方向偏移",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"stroke",paraId:82,tocIndex:16},{value:"节点连接桩描边颜色",paraId:82,tocIndex:16},{value:"string",paraId:82,tocIndex:16},{value:"-",paraId:82,tocIndex:16},{value:"strokeOpacity",paraId:82,tocIndex:16},{value:"节点连接桩描边透明度",paraId:82,tocIndex:16},{value:"number | string",paraId:82,tocIndex:16},{value:"1",paraId:82,tocIndex:16},{value:"visibility",paraId:82,tocIndex:16},{value:"节点连接桩是否可见",paraId:82,tocIndex:16},{value:"visible",paraId:82,tocIndex:16},{value:" | ",paraId:82,tocIndex:16},{value:"hidden",paraId:82,tocIndex:16},{value:"visible",paraId:82,tocIndex:16},{value:"zIndex",paraId:82,tocIndex:16},{value:"节点连接桩渲染层级",paraId:82,tocIndex:16},{value:"number",paraId:82,tocIndex:16},{value:"2",paraId:82,tocIndex:16},{value:"例如，给一个节点显示添加四个连接桩：",paraId:84,tocIndex:16},{value:"const graph = new Graph({\n  node: {\n    style: {\n      port: true,\n      ports: [\n        { key: 'top', placement: 'top', fill: '#7E92B5' },\n        { key: 'right', placement: 'right', fill: '#F4664A' },\n        { key: 'bottom', placement: 'bottom', fill: '#FFBE3A' },\n        { key: 'left', placement: [0, 0.5], fill: '#D580FF' },\n      ],\n      portR: 3,\n      portLineWidth: 1,\n      portStroke: '#fff',\n    },\n  },\n});\n",paraId:85,tocIndex:16},{value:"效果如下图所示：",paraId:86,tocIndex:16},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    style: {\n      port: true,\n      ports: [\n        { key: 'top', placement: 'top', fill: '#7E92B5' },\n        { key: 'right', placement: 'right', fill: '#F4664A' },\n        { key: 'bottom', placement: 'bottom', fill: '#FFBE3A' },\n        { key: 'left', placement: [0, 0.5], fill: '#D580FF' },\n      ],\n      portR: 3,\n      portLineWidth: 1,\n      portStroke: '#fff',\n    },\n  },\n});\n\ngraph.render();\n",paraId:87,tocIndex:16},{value:"在一些交互行为中，比如点击选中一个节点或鼠标悬停激活一个边，仅仅是在该元素做了某些状态的标识。为了将这些状态反应到终端用户所见的视觉空间中，我们需要为不同的状态设置不同的图元素样式，以响应该图元素状态的变化。",paraId:88,tocIndex:17},{value:"G6 提供了几种内置的状态，包括选中（selected）、高亮（highlight）、激活（active）、不活跃（inactive）和禁用（disabled）。此外，它还支持自定义状态，以满足更特定的需求。对于每个状态，开发者可以定义一套样式规则，这些规则会覆盖元素的默认样式。",paraId:89,tocIndex:17},{value:"数据结构如下：",paraId:90,tocIndex:17},{value:"type NodeState = {\n  [state: string]: NodeStyle;\n};\n",paraId:91,tocIndex:17},{value:"例如，当节点处于 ",paraId:92,tocIndex:17},{value:"focus",paraId:92,tocIndex:17},{value:" 状态时，可以为其添加一个宽度为 3 且颜色为橙色的描边。",paraId:92,tocIndex:17},{value:"const graph = new Graph({\n  node: {\n    state: {\n      focus: {\n        lineWidth: 3, // 描边宽度\n        stroke: 'orange', // 描边颜色\n      },\n    },\n  },\n});\n",paraId:93,tocIndex:17},{value:"效果如下图所示：",paraId:94,tocIndex:17},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  autoFit: 'center',\n  data: {\n    nodes: [{ id: 'node1', states: ['focus'] }],\n  },\n  node: {\n    state: {\n      focus: {\n        lineWidth: 3,\n        stroke: 'orange',\n      },\n    },\n  },\n});\n\ngraph.render();\n",paraId:95,tocIndex:17},{value:"定义节点的动画效果，支持下列两种配置方式：",paraId:96,tocIndex:18},{value:"关闭节点全部动画",paraId:97,tocIndex:18},{value:'{\n  "node": {\n    "animation": false\n  }\n}\n',paraId:98,tocIndex:18},{value:"配置阶段动画",paraId:99,tocIndex:18},{value:"阶段动画是指节点在进入画布、更新、离开画布时的动画效果。目前支持的阶段包括：",paraId:100,tocIndex:18},{value:"enter",paraId:101,tocIndex:18},{value:": 节点进入画布时的动画",paraId:101,tocIndex:18},{value:"update",paraId:101,tocIndex:18},{value:": 节点更新时的动画",paraId:101,tocIndex:18},{value:"exit",paraId:101,tocIndex:18},{value:": 节点离开画布时的动画",paraId:101,tocIndex:18},{value:"show",paraId:101,tocIndex:18},{value:": 节点从隐藏状态显示时的动画",paraId:101,tocIndex:18},{value:"hide",paraId:101,tocIndex:18},{value:": 节点隐藏时的动画",paraId:101,tocIndex:18},{value:"collapse",paraId:101,tocIndex:18},{value:": 节点收起时的动画",paraId:101,tocIndex:18},{value:"expand",paraId:101,tocIndex:18},{value:": 节点展开时的动画",paraId:101,tocIndex:18},{value:"你可以参考 ",paraId:102,tocIndex:18},{value:"动画范式",paraId:103,tocIndex:18},{value:" 使用动画语法来配置节点，如：",paraId:102,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "update": [\n        {\n          "fields": ["x", "y"], // 更新时只对 x 和 y 属性进行动画\n          "duration": 1000, // 动画持续时间\n          "easing": "linear" // 缓动函数\n        }\n      ],\n  }\n}\n',paraId:104,tocIndex:18},{value:"也可以使用内置的动画效果：",paraId:105,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "enter": "fade", // 使用渐变动画\n      "update": "translate", // 使用平移动画\n      "exit": "fade" // 使用渐变动画\n    }\n  }\n}\n',paraId:106,tocIndex:18},{value:"你可以传入 false 来关闭特定阶段的动画：",paraId:107,tocIndex:18},{value:'{\n  "node": {\n    "animation": {\n      "enter": false // 关闭节点入场动画\n    }\n  }\n}\n',paraId:108,tocIndex:18},{value:"定义节点的色板，即预定义节点颜色池，并根据规则进行分配，将颜色映射到 ",paraId:109,tocIndex:19},{value:"fill",paraId:109,tocIndex:19},{value:" 属性。",paraId:109,tocIndex:19},{value:"有关色板的定义，请参考 ",paraId:110,tocIndex:19},{value:"色板",paraId:111,tocIndex:19},{value:"。",paraId:110,tocIndex:19},{value:"属性",paraId:112,tocIndex:19},{value:"描述",paraId:112,tocIndex:19},{value:"类型",paraId:112,tocIndex:19},{value:"默认值",paraId:112,tocIndex:19},{value:"color",paraId:112,tocIndex:19},{value:"色板颜色。如果色板注册过，可以直接指定其注册名，也接受一个颜色数组",paraId:112,tocIndex:19},{value:"string | string[]",paraId:112,tocIndex:19},{value:"-",paraId:112,tocIndex:19},{value:"field",paraId:112,tocIndex:19},{value:"指定元素数据中的分组字段。若不指定，默认取 id 作为分组字段",paraId:112,tocIndex:19},{value:"string | ((datum) => string)",paraId:112,tocIndex:19},{value:"id",paraId:112,tocIndex:19},{value:"invert",paraId:112,tocIndex:19},{value:"是否反转色板",paraId:112,tocIndex:19},{value:"boolean",paraId:112,tocIndex:19},{value:"false",paraId:112,tocIndex:19},{value:"type",paraId:112,tocIndex:19},{value:"指定当前色板类型。",paraId:112,tocIndex:19},{value:" - ",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:": 离散色板 ",paraId:112,tocIndex:19},{value:" - ",paraId:112,tocIndex:19},{value:"value",paraId:112,tocIndex:19},{value:": 连续色板",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:" | ",paraId:112,tocIndex:19},{value:"value",paraId:112,tocIndex:19},{value:"group",paraId:112,tocIndex:19},{value:"如将一组数据按 ",paraId:113,tocIndex:19},{value:"category",paraId:113,tocIndex:19},{value:" 字段分配节点颜色，使得同类别的节点颜色相同：",paraId:113,tocIndex:19},{value:'{\n  "node": {\n    "palette": {\n      "type": "group",\n      "field": "category",\n      "color": ["#1783FF", "#F08F56", "#D580FF", "#00C9C9", "#7863FF"]\n    }\n  }\n}\n',paraId:114,tocIndex:19},{value:"效果如下图所示：",paraId:115,tocIndex:19},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    nodes: new Array(10)\n      .fill(0)\n      .map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 10 },\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#1783FF', '#F08F56', '#D580FF', '#00C9C9', '#7863FF'],\n    },\n  },\n});\n\ngraph.render();\n",paraId:116,tocIndex:19},{value:"也可以使用默认配置：",paraId:117,tocIndex:19},{value:'{\n  "node": {\n    "palette": "tableau" // tableau 为色板名，默认根据 ID 分配颜色\n  }\n}\n',paraId:118,tocIndex:19},{value:"效果如下图所示：",paraId:119,tocIndex:19},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 100,\n  data: {\n    nodes: new Array(10)\n      .fill(0)\n      .map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C', 'D', 'E'][i % 5] } })),\n  },\n  layout: { type: 'grid', cols: 10 },\n  node: {\n    palette: 'tableau',\n  },\n});\n\ngraph.render();\n",paraId:120,tocIndex:19}]},35791:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(11930);const d=[{value:"圆形是一个对称的几何形状，具有均匀的半径。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示节点的大小或权重（通过半径控制）。",paraId:2,tocIndex:0},{value:"适合表示无方向性的关系，如社交网络中的用户节点。",paraId:2,tocIndex:0},{value:"常用于流程图、网络图、拓扑图等。",paraId:2,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }],\n    },\n    node: {\n      type: 'circle',\n    },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'circle' }, 'type').disable();\n\n    const options = { size: 40 };\n    const optionFolder = gui.addFolder('circle.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:3,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见",paraId:4,tocIndex:2},{value:"BaseNode",paraId:5,tocIndex:2}]},56120:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10428);const d=[{value:"菱形是一个四边相等的几何形状，具有对角线对称性。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示决策节点、条件判断或关键路径。",paraId:2,tocIndex:0},{value:"适合表示流程图中的判断节点或关键步骤。",paraId:3,tocIndex:0},{value:"常用于流程图、决策树、网络图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: [48, 24], fill: '#7e3feb' } }] },\n    node: { type: 'diamond' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'diamond' }, 'type').disable();\n\n    const options = { 'size[0]': 48, 'size[1]': 24 };\n\n    const optionFolder = gui.addFolder('diamond.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"diamond",paraId:6,tocIndex:1},{value:" 以使用菱形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},8337:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(86894);const d=[{value:"甜甜圈节点是一个环形几何形状，由内外两个同心圆组成。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示比例数据，如完成进度、占比分析。",paraId:2,tocIndex:0},{value:"适合表示多层数据，如嵌套的环形图。",paraId:3,tocIndex:0},{value:"常用于数据可视化、仪表盘、进度图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            fill: 'transparent',\n            size: 60,\n            donuts: [30, 30, 20, 20],\n            donutPalette: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n          },\n        },\n      ],\n    },\n    node: { type: 'donut' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'donut' }, 'type').disable();\n\n    const options = {\n      size: 60,\n      innerR: 50,\n      donutPalette: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n    };\n    const optionFolder = gui.addFolder('donut.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerR', 0, 100, 1).name('innerR(%)');\n    optionFolder.add(options, 'donutPalette', ['spectral', 'tableau', ['#1783FF', '#00C9C9', '#F08F56', '#D580FF']]);\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property === 'innerR') value = value + '%';\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"donut",paraId:6,tocIndex:1},{value:" 以使用甜甜圈节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"donutFill",paraId:9,tocIndex:2},{value:"填充色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"#1783FF",paraId:9,tocIndex:2},{value:"donutFillOpacity",paraId:9,tocIndex:2},{value:"填充色透明度",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutLineCap",paraId:9,tocIndex:2},{value:"描边端点样式",paraId:9,tocIndex:2},{value:"round",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"square",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"butt",paraId:9,tocIndex:2},{value:"butt",paraId:9,tocIndex:2},{value:"donutLineDash",paraId:9,tocIndex:2},{value:"描边虚线样式",paraId:9,tocIndex:2},{value:"number[]",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutLineDashOffset",paraId:9,tocIndex:2},{value:"描边虚线偏移量",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutLineJoin",paraId:9,tocIndex:2},{value:"描边连接处样式",paraId:9,tocIndex:2},{value:"round",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"bevel",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"miter",paraId:9,tocIndex:2},{value:"miter",paraId:9,tocIndex:2},{value:"donutLineWidth",paraId:9,tocIndex:2},{value:"描边宽度",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutOpacity",paraId:9,tocIndex:2},{value:"透明度",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutPalette",paraId:9,tocIndex:2},{value:"颜色或者色板名",paraId:9,tocIndex:2},{value:"string | string[]",paraId:9,tocIndex:2},{value:"tableau",paraId:9,tocIndex:2},{value:"donuts",paraId:9,tocIndex:2},{value:"圆环数据",paraId:9,tocIndex:2},{value:"number[] | ",paraId:9,tocIndex:2},{value:"DonutRound",paraId:10,tocIndex:2},{value:"[]",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowBlur",paraId:9,tocIndex:2},{value:"阴影模糊度",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowColor",paraId:9,tocIndex:2},{value:"阴影颜色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowOffsetX",paraId:9,tocIndex:2},{value:"阴影在 x 轴方向上的偏移量",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowOffsetY",paraId:9,tocIndex:2},{value:"阴影在 y 轴方向上的偏移量",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"donutShadowType",paraId:9,tocIndex:2},{value:"阴影类型",paraId:9,tocIndex:2},{value:"inner",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"outer",paraId:9,tocIndex:2},{value:"outer",paraId:9,tocIndex:2},{value:"donutStroke",paraId:9,tocIndex:2},{value:"描边色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"#000",paraId:9,tocIndex:2},{value:"donutStrokeOpacity",paraId:9,tocIndex:2},{value:"描边色透明度",paraId:9,tocIndex:2},{value:"number | string",paraId:9,tocIndex:2},{value:"1",paraId:9,tocIndex:2},{value:"donutVisibility",paraId:9,tocIndex:2},{value:"图形是否可见",paraId:9,tocIndex:2},{value:"visible",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hidden",paraId:9,tocIndex:2},{value:"visible",paraId:9,tocIndex:2},{value:"innerR",paraId:9,tocIndex:2},{value:"内环半径，使用百分比或者像素值",paraId:9,tocIndex:2},{value:"string | number",paraId:9,tocIndex:2},{value:"50%",paraId:9,tocIndex:2},{value:"属性",paraId:11,tocIndex:3},{value:"描述",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"默认值",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:"颜色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"填充色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"#1783FF",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"填充色透明度",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"lineCap",paraId:11,tocIndex:3},{value:"描边端点样式",paraId:11,tocIndex:3},{value:"round",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"square",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"butt",paraId:11,tocIndex:3},{value:"butt",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"描边虚线样式",paraId:11,tocIndex:3},{value:"number[]",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDashOffset",paraId:11,tocIndex:3},{value:"描边虚线偏移量",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineJoin",paraId:11,tocIndex:3},{value:"描边连接处样式",paraId:11,tocIndex:3},{value:"round",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"bevel",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"miter",paraId:11,tocIndex:3},{value:"miter",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"描边宽度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"透明度",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"阴影模糊度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"阴影颜色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"阴影在 x 轴方向上的偏移量",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"阴影在 y 轴方向上的偏移量",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowType",paraId:11,tocIndex:3},{value:"阴影类型",paraId:11,tocIndex:3},{value:"inner",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"outer",paraId:11,tocIndex:3},{value:"outer",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"描边色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"#000",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"描边色透明度",paraId:11,tocIndex:3},{value:"number | string",paraId:11,tocIndex:3},{value:"1",paraId:11,tocIndex:3},{value:"value",paraId:11,tocIndex:3},{value:"数值，用于计算比例",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"✓",paraId:11,tocIndex:3},{value:"visibility",paraId:11,tocIndex:3},{value:"图形是否可见",paraId:11,tocIndex:3},{value:"visible",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"hidden",paraId:11,tocIndex:3},{value:"visible",paraId:11,tocIndex:3}]},62465:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(31838);const d=[{value:"椭圆是一个长轴和短轴不对称的几何形状。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示动态节点、非对称关系或特殊形状。",paraId:2,tocIndex:0},{value:"适合表示流程图、网络图或拓扑图。",paraId:3,tocIndex:0},{value:"常用于流程图、网络图、拓扑图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'ellipse' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'ellipse' }, 'type').disable();\n\n    const options = { 'size[0]': 80, 'size[1]': 40 };\n\n    const optionFolder = gui.addFolder('ellipse.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"ellipse",paraId:6,tocIndex:1},{value:" 以使用椭圆形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},93312:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69133);const d=[{value:"六边形是一个六边相等的几何形状，具有蜂窝状结构。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示蜂窝网络、分子结构或紧密排列的节点。",paraId:2,tocIndex:0},{value:"适合表示网络拓扑、分子图或游戏地图。",paraId:3,tocIndex:0},{value:"常用于网络图、拓扑图、游戏设计等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'hexagon' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'hexagon' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      outerR: 0,\n    };\n    const optionFolder = gui.addFolder('hexagon.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'outerR', 0, 100);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"hexagon",paraId:6,tocIndex:1},{value:" 以使用六边形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"outerR",paraId:9,tocIndex:2},{value:"外半径，是指从六边形中心到任意顶点的距离",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"默认为宽高的最小值的一半",paraId:9,tocIndex:2}]},42766:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(47466);const d=[{value:"HTML 节点是一个自定义的矩形区域，用于显示 HTML 内容。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示复杂的自定义节点，如表格、图表或富文本。",paraId:2,tocIndex:0},{value:"适合表示自定义的可视化元素或交互组件。",paraId:3,tocIndex:0},{value:"常用于自定义图表、UI 设计等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            x: 300,\n            y: 110,\n            size: [120, 40],\n            innerHTML: `\n<div style=\"width: 100%; height: 100%; background: #7e3feb; display: flex; justify-content: center; align-items: center;\">\n  <span style=\"color: #fff; font-size: 12px;\">\n    HTML Node\n  </span>\n</div>`,\n          },\n        },\n      ],\n    },\n    node: { type: 'html' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'html' }, 'type').disable();\n\n    const options = {\n      size: 50,\n      innerHTML: `\n<div style=\"width: 100%; height: 100%; background: #7863FF; display: flex; justify-content: center; align-items: center;\">\n  <span style=\"color: #fff; font-size: 20px;\">\n    'HTML Node'\n  </span>\n</div>`,\n    };\n    const optionFolder = gui.addFolder('html.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerHTML');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"html",paraId:6,tocIndex:1},{value:" 以使用 HTML 节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"dx",paraId:9,tocIndex:2},{value:"横行偏移量。HTML 容器默认以左上角为原点，通过 dx 来进行横向偏移",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"dy",paraId:9,tocIndex:2},{value:"纵向偏移量。HTML 容器默认以左上角为原点，通过 dy 来进行横向偏移",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"innerHTML",paraId:9,tocIndex:2},{value:"HTML 内容，可以为字符串或者 ",paraId:9,tocIndex:2},{value:"HTMLElement",paraId:9,tocIndex:2},{value:"string | ",paraId:9,tocIndex:2},{value:"HTMLElement",paraId:9,tocIndex:2},{value:"0",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2}]},11880:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78118);const d=[{value:"图片节点是一个矩形区域，用于显示图像。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示用户头像、产品图片或图标。",paraId:2,tocIndex:0},{value:"适合表示社交网络、产品目录或图标集合。",paraId:3,tocIndex:0},{value:"常用于社交网络图、产品图、UI 设计等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node1',\n          style: {\n            size: 60,\n            src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n          },\n        },\n      ],\n    },\n    node: { type: 'image' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'image' }, 'type').disable();\n\n    const options = {\n      size: 60,\n      src: 'https://gw.alipayobjects.com/mdn/rms_6ae20b/afts/img/A*N4ZMS7gHsUIAAAAAAAAAAABkARQnAQ',\n    };\n    const optionFolder = gui.addFolder('image.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'src');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"image",paraId:6,tocIndex:1},{value:" 以使用图片节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"img",paraId:9,tocIndex:2},{value:"该属性为 img 的别名",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:"图片来源，即图片地址字符串",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2}]},42842:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(89313);const d=[{value:"矩形是一个四边相等的几何形状，具有明确的边界。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示模块、组件或容器。",paraId:2,tocIndex:0},{value:"适合表示层次结构，如组织结构图、文件目录树。",paraId:3,tocIndex:0},{value:"常用于流程图、架构图、UML 图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'rect' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'rect' }, 'type').disable();\n\n    const options = { 'size[0]': 48, 'size[1]': 24 };\n\n    const optionFolder = gui.addFolder('rect.style');\n    optionFolder.add(options, 'size[0]', 0, 100, 1);\n    optionFolder.add(options, 'size[1]', 0, 100, 1);\n\n    optionFolder.onChange(({ object }) => {\n      graph.updateNodeData([{ id: 'node1', style: { size: [object['size[0]'], object['size[1]']] } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"rect",paraId:6,tocIndex:1},{value:" 以使用矩形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2}]},43537:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(33608);const d=[{value:"星形是一个多角几何形状，具有突出的角。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示重要节点、特殊标记或装饰性元素。",paraId:2,tocIndex:0},{value:"适合表示流程图、网络图或拓扑图。",paraId:3,tocIndex:0},{value:"常用于流程图、网络图、拓扑图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'star' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'star' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      innerR: 0,\n    };\n    const optionFolder = gui.addFolder('star.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'innerR', 0, 100);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"star",paraId:6,tocIndex:1},{value:" 以使用星形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"innerR",paraId:9,tocIndex:2},{value:"内半径，是指从星形中心到内顶点的距离",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"默认为外半径的 3/8",paraId:9,tocIndex:2},{value:"结构说明：",paraId:10,tocIndex:2}]},78210:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(74306);const d=[{value:"三角形是一个三边几何形状，具有明确的方向性。",paraId:0,tocIndex:0},{value:"适用场景：",paraId:1,tocIndex:0},{value:"用于表示方向性节点、警告或提示。",paraId:2,tocIndex:0},{value:"适合表示流程图中的方向指示或层级关系。",paraId:3,tocIndex:0},{value:"常用于流程图、网络图、拓扑图等。",paraId:4,tocIndex:0},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: { nodes: [{ id: 'node1', style: { size: 40, fill: '#7e3feb' } }] },\n    node: { type: 'triangle' },\n    plugins: [{ type: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 220 },\n  (gui, graph) => {\n    gui.add({ type: 'triangle' }, 'type').disable();\n\n    const options = {\n      size: 40,\n      direction: 'up',\n    };\n    const optionFolder = gui.addFolder('triangle.style');\n    optionFolder.add(options, 'size', 0, 100, 1);\n    optionFolder.add(options, 'direction', ['up', 'left', 'right', 'down']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updateNodeData([{ id: 'node1', style: { [property]: value } }]);\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:1},{value:"设置 ",paraId:6,tocIndex:1},{value:"node.type",paraId:6,tocIndex:1},{value:" 为 ",paraId:6,tocIndex:1},{value:"triangle",paraId:6,tocIndex:1},{value:" 以使用三角形节点。",paraId:6,tocIndex:1},{value:"如果元素有其特定的属性，我们将在下面列出。对于所有的通用样式属性，见 ",paraId:7,tocIndex:2},{value:"BaseNode",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"direction",paraId:9,tocIndex:2},{value:"三角形的方向",paraId:9,tocIndex:2},{value:"up",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"left",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"right",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"down",paraId:9,tocIndex:2},{value:"up",paraId:9,tocIndex:2}]},56982:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(42689);const d=[{value:"G6 提供了一系列 ",paraId:0},{value:"内置节点",paraId:1},{value:"，包含 ",paraId:0},{value:"circle（圆形节点）",paraId:2},{value:"、",paraId:0},{value:"diamond（菱形节点）",paraId:3},{value:"、",paraId:0},{value:"donut（甜甜圈节点）",paraId:4},{value:"、",paraId:0},{value:"ellipse（椭圆节点）",paraId:5},{value:"、",paraId:0},{value:"hexagon（六边形节点）",paraId:6},{value:"、",paraId:0},{value:"html（HTML节点）",paraId:7},{value:"、",paraId:0},{value:"image（图片节点）",paraId:8},{value:"、",paraId:0},{value:"rect（矩形节点）",paraId:9},{value:"、",paraId:0},{value:"star（星形节点）",paraId:10},{value:" 和 ",paraId:0},{value:"triangle（三角形节点）",paraId:11},{value:"。这些内置节点能够满足大部分基础场景需求。",paraId:0},{value:"但在实际项目中，你可能会遇到这些基础节点无法满足的需求。这时，你需要创建自定义节点。别担心，这比你想象的要简单！",paraId:12},{value:"在 G6 中，一个完整的节点通常由多个部分组成，就像搭积木一样，这些部分组合在一起形成一个功能丰富的节点。",paraId:13,tocIndex:0},{value:"主要组成部分：",paraId:14,tocIndex:0},{value:"key",paraId:15,tocIndex:0},{value:" ：节点的主图形，如矩形、圆形等基本形状",paraId:15,tocIndex:0},{value:"label",paraId:15,tocIndex:0},{value:" ：文本标签，通常用于展示节点的名称或描述",paraId:15,tocIndex:0},{value:"icon",paraId:15,tocIndex:0},{value:" ：图标，展示节点的类型或状态",paraId:15,tocIndex:0},{value:"badge",paraId:15,tocIndex:0},{value:" ：徽标，位于节点角落的小标记",paraId:15,tocIndex:0},{value:"halo",paraId:15,tocIndex:0},{value:" ：节点主图形周围展示的光晕效果",paraId:15,tocIndex:0},{value:"port",paraId:15,tocIndex:0},{value:" ：连接桩，边线可以连接的点",paraId:15,tocIndex:0},{value:"选择合适的方式",paraId:16,tocIndex:0},{value:"创建自定义节点的方式主要有两种途径：",paraId:17,tocIndex:1},{value:"推荐",paraId:18,tocIndex:1},{value:"这是最常用的方式，你可以选择继承以下类型之一：",paraId:19,tocIndex:2},{value:"BaseNode",paraId:20,tocIndex:2},{value:" - 最基础的节点类，提供节点的核心功能",paraId:20,tocIndex:2},{value:"Circle",paraId:20,tocIndex:2},{value:" - 圆形节点",paraId:20,tocIndex:2},{value:"Rect",paraId:20,tocIndex:2},{value:" - 矩形节点",paraId:20,tocIndex:2},{value:"Ellipse",paraId:20,tocIndex:2},{value:" - 椭圆节点",paraId:20,tocIndex:2},{value:"Diamond",paraId:20,tocIndex:2},{value:" - 菱形节点",paraId:20,tocIndex:2},{value:"Triangle",paraId:20,tocIndex:2},{value:" - 三角形节点",paraId:20,tocIndex:2},{value:"Star",paraId:20,tocIndex:2},{value:" - 星形节点",paraId:20,tocIndex:2},{value:"Image",paraId:20,tocIndex:2},{value:" - 图片节点",paraId:20,tocIndex:2},{value:"Donut",paraId:20,tocIndex:2},{value:" - 甜甜圈节点",paraId:20,tocIndex:2},{value:"Hexagon",paraId:20,tocIndex:2},{value:" - 六边形节点",paraId:20,tocIndex:2},{value:"为什么选择这种方式？",paraId:21,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"代码量少",paraId:22,tocIndex:2},{value:"：复用现有节点的属性和方法，只需专注于新增功能",paraId:22,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"开发迅速",paraId:22,tocIndex:2},{value:"：适合大多数项目需求，快速实现业务目标",paraId:22,tocIndex:2},{value:"📌 ",paraId:22,tocIndex:2},{value:"易于维护",paraId:22,tocIndex:2},{value:"：代码结构清晰，继承关系明确",paraId:22,tocIndex:2},{value:"高级用法",paraId:23,tocIndex:2},{value:"如果现有节点类型都不满足需求，你可以基于 G 的底层图形系统从零创建节点。",paraId:24,tocIndex:3},{value:"为什么选择这种方式？",paraId:25,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"最大自由度",paraId:26,tocIndex:3},{value:"：完全控制节点的每个细节，实现任意复杂效果",paraId:26,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"特殊需求",paraId:26,tocIndex:3},{value:"：现有节点类型无法满足的高度定制场景",paraId:26,tocIndex:3},{value:"📌 ",paraId:26,tocIndex:3},{value:"性能优化",paraId:26,tocIndex:3},{value:"：针对特定场景的性能优化",paraId:26,tocIndex:3},{value:"从零开发的自定义节点需要自行处理所有细节，包括图形绘制、事件响应、状态变化等，开发难度较大。这里可以直接参考 ",paraId:27},{value:"源码",paraId:27},{value:" 进行实现。",paraId:27},{value:"让我们从一个简单的例子开始 - 创建一个 ",paraId:28,tocIndex:4},{value:"带有主副标题的矩形节点",paraId:28,tocIndex:4},{value:"：",paraId:28,tocIndex:4},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\n// 第一步：创建自定义节点类\nclass DualLabelNode extends Rect {\n  // 副标题样式\n  getSubtitleStyle(attributes) {\n    return {\n      x: 0,\n      y: 45, // 放在主标题下方\n      text: attributes.subtitle || '',\n      fontSize: 12,\n      fill: '#666',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    };\n  }\n\n  // 绘制副标题\n  drawSubtitleShape(attributes, container) {\n    const subtitleStyle = this.getSubtitleStyle(attributes);\n    this.upsert('subtitle', 'text', subtitleStyle, container);\n  }\n\n  // 渲染方法\n  render(attributes = this.parsedAttributes, container) {\n    // 1. 渲染基础矩形和主标题\n    super.render(attributes, container);\n\n    // 2. 添加副标题\n    this.drawSubtitleShape(attributes, container);\n  }\n}\n\n// 第二步：注册自定义节点\nregister(ExtensionCategory.NODE, 'dual-label-node', DualLabelNode);\n\n// 第三步：使用自定义节点\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          title: '节点 A', // 主标题\n          subtitle: '你的第一个自定义节点', // 副标题\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'dual-label-node',\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 5,\n      // 主标题样式\n      labelText: (d) => d.data.title,\n      labelFill: '#222',\n      labelFontSize: 14,\n      labelFontWeight: 500,\n      // 副标题\n      subtitle: (d) => d.data.subtitle,\n    },\n  },\n});\n\ngraph.render();\n",paraId:29,tocIndex:4},{value:"继承 G6 的 ",paraId:30,tocIndex:5},{value:"Rect",paraId:30,tocIndex:5},{value:"（矩形节点），并添加一个副标题：",paraId:30,tocIndex:5},{value:"import { Rect, register, Graph, ExtensionCategory } from '@antv/g6';\n\n// 创建自定义节点，继承自 Rect\nclass DualLabelNode extends Rect {\n  // 副标题样式\n  getSubtitleStyle(attributes) {\n    return {\n      x: 0,\n      y: 45, // 放在主标题下方\n      text: attributes.subtitle || '',\n      fontSize: 12,\n      fill: '#666',\n      textAlign: 'center',\n      textBaseline: 'middle',\n    };\n  }\n\n  // 绘制副标题\n  drawSubtitleShape(attributes, container) {\n    const subtitleStyle = this.getSubtitleStyle(attributes);\n    this.upsert('subtitle', 'text', subtitleStyle, container);\n  }\n\n  // 渲染方法\n  render(attributes = this.parsedAttributes, container) {\n    // 1. 渲染基础矩形和主标题\n    super.render(attributes, container);\n\n    // 2. 添加副标题\n    this.drawSubtitleShape(attributes, container);\n  }\n}\n",paraId:31,tocIndex:5},{value:"使用 ",paraId:32,tocIndex:6},{value:"register",paraId:32,tocIndex:6},{value:" 方法注册节点类型，这样 G6 才能识别你的自定义节点：",paraId:32,tocIndex:6},{value:"register(ExtensionCategory.NODE, 'dual-label-node', DualLabelNode);\n",paraId:33,tocIndex:6},{value:"register",paraId:34,tocIndex:6},{value:" 方法需要三个参数：",paraId:34,tocIndex:6},{value:"扩展类别：",paraId:35,tocIndex:6},{value:"ExtensionCategory.NODE",paraId:35,tocIndex:6},{value:" 表示这是一个节点类型",paraId:35,tocIndex:6},{value:"类型名称：",paraId:35,tocIndex:6},{value:"dual-label-node",paraId:35,tocIndex:6},{value:" 是我们给这个自定义节点起的名字，后续会在配置中使用",paraId:35,tocIndex:6},{value:"类定义：",paraId:35,tocIndex:6},{value:"DualLabelNode",paraId:35,tocIndex:6},{value:" 是我们刚刚创建的节点类",paraId:35,tocIndex:6},{value:"在图配置中使用自定义节点：",paraId:36,tocIndex:7},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          title: '节点 A', // 主标题\n          subtitle: '你的第一个自定义节点', // 副标题\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'dual-label-node',\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 8,\n      // 主标题样式\n      labelText: (d) => d.data.title,\n      labelFill: '#222',\n      labelFontSize: 14,\n      labelFontWeight: 500,\n      // 副标题\n      subtitle: (d) => d.data.subtitle,\n    },\n  },\n});\n\ngraph.render();\n",paraId:37,tocIndex:7},{value:"🎉 恭喜！你已经创建了第一个自定义节点。它看起来很简单，但这个过程包含了自定义节点的核心思想：",paraId:38,tocIndex:7},{value:"继承一个基础节点类型",paraId:38,tocIndex:7},{value:"，然后 ",paraId:38,tocIndex:7},{value:"重写 ",paraId:38,tocIndex:7},{value:"render",paraId:38,tocIndex:7},{value:" 方法",paraId:38,tocIndex:7},{value:" 来添加自定义内容。",paraId:38,tocIndex:7},{value:'在 G6 中创建自定义节点，本质上是在 Canvas 上绘制各种图形。我们使用一系列 "原子图形" 作为基础构建块，就像乐高积木中的不同形状。',paraId:39,tocIndex:8},{value:"G6 的节点是由 ",paraId:40,tocIndex:9},{value:"G 图形系统",paraId:40,tocIndex:9},{value:" 提供的图形原子单元绘制而成。以下是常见图形元素及其用途：",paraId:40,tocIndex:9},{value:"图形元素",paraId:41,tocIndex:9},{value:"类型",paraId:41,tocIndex:9},{value:"描述",paraId:41,tocIndex:9},{value:"圆形",paraId:41,tocIndex:9},{value:"circle",paraId:41,tocIndex:9},{value:"适合表示状态、头像、圆形按钮等。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<circle>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"椭圆",paraId:41,tocIndex:9},{value:"ellipse",paraId:41,tocIndex:9},{value:"与 circle 类似，但支持横纵轴不同的场景。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<ellipse>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"图片",paraId:41,tocIndex:9},{value:"image",paraId:41,tocIndex:9},{value:"用于展示图标、用户头像、LOGO 等。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<image>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"直线",paraId:41,tocIndex:9},{value:"line",paraId:41,tocIndex:9},{value:"用于装饰、辅助连接等。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<line>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"路径",paraId:41,tocIndex:9},{value:"path",paraId:41,tocIndex:9},{value:"支持复杂图形，如箭头、圆弧、曲线、贝塞尔路径等。路径中包含一组命令与参数，这些命令有不同的语义，",paraId:41,tocIndex:9},{value:"具体用法",paraId:41,tocIndex:9},{value:"多边形",paraId:41,tocIndex:9},{value:"polygon",paraId:41,tocIndex:9},{value:"支持自定义图形，如五角星、箭头。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<polygon>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"折线",paraId:41,tocIndex:9},{value:"polyline",paraId:41,tocIndex:9},{value:"多点折线，适合复杂的连线结构。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<polyline>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"矩形",paraId:41,tocIndex:9},{value:"rect",paraId:41,tocIndex:9},{value:"最常用图形，适合作为容器、卡片、按钮等基础结构。可以参考 SVG 的 ",paraId:41,tocIndex:9},{value:"<rect>",paraId:41,tocIndex:9},{value:" 元素",paraId:41,tocIndex:9},{value:"文本",paraId:41,tocIndex:9},{value:"text",paraId:41,tocIndex:9},{value:"显示名称、描述、标签等内容。提供简单的单行/多行文本排版能力，单行支持水平对齐、字符间距；多行支持显式换行符以及自动换行，垂直对齐",paraId:41,tocIndex:9},{value:"更多原子图形和详细的属性请参考 ",paraId:42,tocIndex:9},{value:"元素 - 图形（可选）",paraId:43,tocIndex:9},{value:"所有这些图形都可通过 ",paraId:44,tocIndex:9},{value:"upsert()",paraId:44,tocIndex:9},{value:" 动态创建或更新，并自动管理图形状态和生命周期。",paraId:44,tocIndex:9},{value:"开始自定义元素之前，你需要了解 G6 元素基类中的一些重要属性和方法：",paraId:45,tocIndex:10},{value:"属性",paraId:46,tocIndex:11},{value:"类型",paraId:46,tocIndex:11},{value:"描述",paraId:46,tocIndex:11},{value:"shapeMap",paraId:46,tocIndex:11},{value:"Record<string, DisplayObject>",paraId:46,tocIndex:11},{value:"当前元素下所有图形的映射表",paraId:46,tocIndex:11},{value:"animateMap",paraId:46,tocIndex:11},{value:"Record<string, IAnimation>",paraId:46,tocIndex:11},{value:"当前元素下所有动画的映射表",paraId:46,tocIndex:11},{value:"upsert(name, Ctor, style, container, hooks)",paraId:47},{value:"在创建自定义元素时，你会频繁用到 ",paraId:48,tocIndex:13},{value:"upsert",paraId:48,tocIndex:13},{value:' 方法。它是 "update or insert" 的缩写，负责添加或更新元素中的图形：',paraId:48,tocIndex:13},{value:"upsert(key: string, Ctor: { new (...args: any[]): DisplayObject }, style: Record<string, any>, container: DisplayObject);\n",paraId:49,tocIndex:13},{value:"参数",paraId:50,tocIndex:13},{value:"类型",paraId:50,tocIndex:13},{value:"描述",paraId:50,tocIndex:13},{value:"key",paraId:50,tocIndex:13},{value:"string",paraId:50,tocIndex:13},{value:"图形的 key，即 ",paraId:50,tocIndex:13},{value:"shapeMap",paraId:50,tocIndex:13},{value:" 中对应的 key。内置的 key 包括 ",paraId:50,tocIndex:13},{value:"'key'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'label'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'halo'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'icon'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'port'",paraId:50,tocIndex:13},{value:" ",paraId:50,tocIndex:13},{value:"'badge'",paraId:50,tocIndex:13},{value:" key 不应使用特殊符号，会基于该值转化为驼峰形式调用 ",paraId:50,tocIndex:13},{value:"getXxxStyle",paraId:50,tocIndex:13},{value:" 和 ",paraId:50,tocIndex:13},{value:"drawXxxShape",paraId:50,tocIndex:13},{value:" 方法（见",paraId:50,tocIndex:13},{value:"元素约定",paraId:51,tocIndex:13},{value:"）",paraId:50,tocIndex:13},{value:"Ctor",paraId:50,tocIndex:13},{value:"{ new (...args: any[]): DisplayObject }",paraId:50,tocIndex:13},{value:"图形类",paraId:50,tocIndex:13},{value:"style",paraId:50,tocIndex:13},{value:"Record<string, any>",paraId:50,tocIndex:13},{value:"图形样式",paraId:50,tocIndex:13},{value:"container",paraId:50,tocIndex:13},{value:"DisplayObject",paraId:50,tocIndex:13},{value:"挂载图形的容器",paraId:50,tocIndex:13},{value:"例如，插入一个固定位置的紫色圆形：",paraId:52,tocIndex:13},{value:"this.upsert(\n  'element-key', // 元素的唯一标识\n  'circle', // 图形类型，如 'rect', 'circle' 等\n  { x: 100, y: 100, fill: '#a975f3' }, // 样式配置对象\n  container, // 父容器\n);\n",paraId:53,tocIndex:13},{value:"为什么要使用 ",paraId:54,tocIndex:13},{value:"upsert",paraId:54,tocIndex:13},{value:" 而不直接通过 ",paraId:54,tocIndex:13},{value:"container.appendChild()",paraId:54,tocIndex:13},{value:" 创建图形？因为：",paraId:54,tocIndex:13},{value:"性能更好",paraId:55,tocIndex:13},{value:"：当节点状态变化或数据更新时，会智能地复用已有图形，而不是删除再重建，大大提高了渲染性能",paraId:55,tocIndex:13},{value:"代码更简洁",paraId:55,tocIndex:13},{value:"：不需要手动判断元素是否存在",paraId:55,tocIndex:13},{value:"便于管理",paraId:55,tocIndex:13},{value:"：所有通过 ",paraId:55,tocIndex:13},{value:"upsert",paraId:55,tocIndex:13},{value:" 创建的图形都会被记录在节点的 ",paraId:55,tocIndex:13},{value:"shapeMap",paraId:55,tocIndex:13},{value:" 中，你可以通过 ",paraId:55,tocIndex:13},{value:"this.getShape(key)",paraId:55,tocIndex:13},{value:" 轻松获取",paraId:55,tocIndex:13},{value:"render(attributes, container)",paraId:47},{value:"每个自定义节点类都必须实现 ",paraId:56,tocIndex:14},{value:"render(attributes, container)",paraId:56,tocIndex:14},{value:" 方法，它定义了该节点如何被“绘制”出来。你可以在这里使用各种原子图形，组合出你想要的结构。",paraId:56,tocIndex:14},{value:"render(style: Record<string, any>, container: Group): void;\n",paraId:57,tocIndex:14},{value:"参数",paraId:58,tocIndex:14},{value:"类型",paraId:58,tocIndex:14},{value:"描述",paraId:58,tocIndex:14},{value:"style",paraId:58,tocIndex:14},{value:"Record<string, any>",paraId:58,tocIndex:14},{value:"元素样式",paraId:58,tocIndex:14},{value:"container",paraId:58,tocIndex:14},{value:"Group",paraId:58,tocIndex:14},{value:"容器",paraId:58,tocIndex:14},{value:"getShape(name)",paraId:47},{value:"有时，你需要在创建后修改某个子图形的属性，或者让子图形之间有交互关联。这时，",paraId:59,tocIndex:15},{value:"getShape",paraId:59,tocIndex:15},{value:" 方法可以帮你获取之前通过 ",paraId:59,tocIndex:15},{value:"upsert",paraId:59,tocIndex:15},{value:" 创建的任何图形：",paraId:59,tocIndex:15},{value:"⚠️ 注意",paraId:60,tocIndex:15},{value:"：图形的顺序很重要，如果图形 B 依赖图形 A 的位置，必须确保 A 先创建",paraId:60,tocIndex:15},{value:"使用约定属性",paraId:61,tocIndex:16},{value:"目前约定的元素属性包括：",paraId:62,tocIndex:16},{value:"通过 ",paraId:63,tocIndex:16},{value:"this.getSize()",paraId:63,tocIndex:16},{value:" 获取元素的尺寸",paraId:63,tocIndex:16},{value:"采用 ",paraId:64,tocIndex:16},{value:"getXxxStyle",paraId:64,tocIndex:16},{value:" 和 ",paraId:64,tocIndex:16},{value:"drawXxxShape",paraId:64,tocIndex:16},{value:" 配对的方式进行图形绘制",paraId:64,tocIndex:16},{value:"getXxxStyle",paraId:65,tocIndex:16},{value:" 用于获取图形样式，",paraId:65,tocIndex:16},{value:"drawXxxShape",paraId:65,tocIndex:16},{value:" 用于绘制图形。通过该方式创建的图形支持自动执行动画。",paraId:65,tocIndex:16},{value:"其中 ",paraId:66,tocIndex:16},{value:"Xxx",paraId:66,tocIndex:16},{value:" 是调用 ",paraId:66,tocIndex:16},{value:"upsert",paraId:67,tocIndex:16},{value:" 方法时传入的 key 的驼峰形式。",paraId:66,tocIndex:16},{value:"可通过 ",paraId:68,tocIndex:16},{value:"this.context",paraId:68,tocIndex:16},{value:" 访问 Graph 上下文",paraId:68,tocIndex:16},{value:"提供了以下生命周期钩子函数，你可以在自定义节点中重写这些方法，在关键时刻执行特定逻辑：",paraId:69,tocIndex:17},{value:"钩子函数",paraId:70,tocIndex:17},{value:"触发时机",paraId:70,tocIndex:17},{value:"典型用途",paraId:70,tocIndex:17},{value:"onCreate",paraId:70,tocIndex:17},{value:"当节点创建后完成入场动画时",paraId:70,tocIndex:17},{value:"绑定交互事件、初始化节点状态、添加外部监听器",paraId:70,tocIndex:17},{value:"onUpdate",paraId:70,tocIndex:17},{value:"当节点更新后完成更新动画时",paraId:70,tocIndex:17},{value:"更新依赖数据、调整相关元素、触发联动效果",paraId:70,tocIndex:17},{value:"onDestroy",paraId:70,tocIndex:17},{value:"当节点完成退场动画并销毁后",paraId:70,tocIndex:17},{value:"清理资源、移除外部监听器、执行销毁通知",paraId:70,tocIndex:17},{value:"G6 元素设计中最强大的一点，是可以将 ",paraId:71,tocIndex:18},{value:"“状态响应”",paraId:71,tocIndex:18},{value:" 与 ",paraId:71,tocIndex:18},{value:"“绘制逻辑”",paraId:71,tocIndex:18},{value:" 分离。",paraId:71,tocIndex:18},{value:"你可以在节点配置中定义每种状态下的样式：",paraId:72,tocIndex:18},{value:"node: {\n  type: 'custom-node',\n  style: { fill: '#fff' },\n  state: {\n    selected: {\n      fill: '#f00',\n    },\n    hover: {\n      lineWidth: 3,\n      stroke: '#1890ff',\n    },\n  },\n}\n",paraId:73,tocIndex:18},{value:"切换状态的方法:",paraId:74,tocIndex:18},{value:"graph.setElementState(nodeId, ['selected']);\n",paraId:75,tocIndex:18},{value:"这个状态会传入到 ",paraId:76,tocIndex:18},{value:"render()",paraId:76,tocIndex:18},{value:" 方法的 ",paraId:76,tocIndex:18},{value:"attributes",paraId:76,tocIndex:18},{value:" 中，由内部系统合并后的结果自动应用在图形上。",paraId:76,tocIndex:18},{value:"也可以根据状态自定义渲染逻辑：",paraId:77,tocIndex:18},{value:"protected getKeyStyle(attributes: Required<BaseNodeStyleProps>) {\n  const style = super.getKeyStyle(attributes);\n\n  // 根据状态调整样式\n  if (attributes.states?.includes('selected')) {\n    return {\n      ...style,\n      stroke: '#1890ff',\n      lineWidth: 2,\n      shadowColor: 'rgba(24,144,255,0.2)',\n      shadowBlur: 15,\n    };\n  }\n\n  return style;\n}\n",paraId:78,tocIndex:18},{value:"让我们通过实际例子，逐步增加节点的复杂度和功能。",paraId:79,tocIndex:19},{value:"在节点左上角放一个图标和标签文字。",paraId:80,tocIndex:20},{value:"👇 步骤说明：",paraId:81,tocIndex:20},{value:"继承 Rect 节点",paraId:82,tocIndex:20},{value:"添加图标（image）",paraId:82,tocIndex:20},{value:"添加标签（text）",paraId:82,tocIndex:20},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nclass IconNode extends Rect {\n  get data() {\n    return this.context.graph.getNodeData(this.id).data;\n  }\n\n  getCustomIconStyle(attributes) {\n    const [width, height] = this.getSize(attributes);\n    const { icon } = this.data;\n    return {\n      x: -width / 2 + 4, // 左侧15px处\n      y: -height / 2 + 4,\n      width: 20,\n      height: 20,\n      src: icon,\n    };\n  }\n\n  drawCustomIconShape(attributes, container) {\n    const iconStyle = this.getCustomIconStyle(attributes);\n\n    this.upsert('custom-icon', 'image', iconStyle, container);\n  }\n\n  getCustomLabelStyle(attributes) {\n    const [width, height] = this.getSize(attributes);\n    const { label } = this.data;\n    return {\n      x: -width / 2 + 26, // 图标右侧10px处\n      y: -height / 2 + 14,\n      text: label || '',\n      fontSize: 10,\n      fill: '#333',\n      textAlign: 'left',\n      textBaseline: 'middle',\n    };\n  }\n\n  drawCustomLabelShape(attributes, container) {\n    const labelStyle = this.getCustomLabelStyle(attributes);\n\n    this.upsert('custom-label', 'text', labelStyle, container);\n  }\n\n  render(attributes, container) {\n    // 渲染基础矩形\n    super.render(attributes, container);\n\n    // 添加图标\n    this.drawCustomIconShape(attributes, container);\n\n    // 添加标签(在图标右侧)\n    this.drawCustomLabelShape(attributes, container);\n  }\n}\n\nregister(ExtensionCategory.NODE, 'custom-icon-node', IconNode);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: {\n          icon: 'https://gw.alipayobjects.com/zos/antfincdn/FLrTNDvlna/antv.png',\n          label: 'AntV',\n        },\n      },\n    ],\n  },\n  node: {\n    type: 'custom-icon-node',\n    style: {\n      size: [120, 60],\n      fill: '#fff',\n      stroke: '#873bf4',\n      lineWidth: 2,\n      radius: 2,\n      labelText: 'G6',\n      labelPlacement: 'middle',\n      labelFontSize: 16,\n      labelOffsetY: 6,\n    },\n  },\n});\n\ngraph.render();\n",paraId:83,tocIndex:20},{value:"给节点加一个蓝色按钮，点击后触发事件（打印日志或执行回调）。",paraId:84,tocIndex:21},{value:"import { Graph, register, Rect, ExtensionCategory } from '@antv/g6';\n\nclass ClickableNode extends Rect {\n  getButtonStyle(attributes) {\n    return {\n      x: 40,\n      y: -10,\n      width: 20,\n      height: 20,\n      radius: 10,\n      fill: '#1890ff',\n      cursor: 'pointer', // 鼠标指针变为手型\n    };\n  }\n\n  drawButtonShape(attributes, container) {\n    const btnStyle = this.getButtonStyle(attributes, container);\n    const btn = this.upsert('button', 'rect', btnStyle, container);\n\n    // 为按钮添加点击事件\n    if (!btn.__clickBound) {\n      btn.addEventListener('click', (e) => {\n        // 阻止事件冒泡，避免触发节点的点击事件\n        e.stopPropagation();\n\n        // 执行业务逻辑\n        console.log('Button clicked on node:', this.id);\n\n        // 如果数据中有回调函数，则调用\n        if (typeof attributes.onButtonClick === 'function') {\n          attributes.onButtonClick(this.id, this.data);\n        }\n      });\n      btn.__clickBound = true; // 标记已绑定事件，避免重复绑定\n    }\n  }\n\n  render(attributes, container) {\n    super.render(attributes, container);\n\n    // 添加一个按钮\n    this.drawButtonShape(attributes, container);\n  }\n}\n\nregister(ExtensionCategory.NODE, 'clickable-node', ClickableNode);\n\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n      },\n    ],\n  },\n  node: {\n    type: 'clickable-node', // 指定使用我们的自定义节点\n    style: {\n      size: [60, 30],\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      radius: 5,\n      onButtonClick: (id, data) => {},\n    },\n  },\n});\n\ngraph.render();\n",paraId:85,tocIndex:21},{value:"常见的交互都需要节点和边通过样式变化做出反馈，例如鼠标移动到节点上、点击选中节点/边、通过交互激活边上的交互等，都需要改变节点和边的样式，有两种方式来实现这种效果：",paraId:86,tocIndex:22},{value:"从 ",paraId:87,tocIndex:22},{value:"data.states",paraId:87,tocIndex:22},{value:" 获取当前状态，在自定义节点类中处理状态变化；",paraId:87,tocIndex:22},{value:"将交互状态同原始数据和绘制节点的逻辑分开，仅更新节点。",paraId:87,tocIndex:22},{value:"我们推荐用户使用第二种方式来实现节点的状态调整，可以通过以下方式来实现：",paraId:88,tocIndex:22},{value:"实现自定义节点；",paraId:89,tocIndex:22},{value:"在图配置项中配置节点状态样式；",paraId:89,tocIndex:22},{value:"通过 ",paraId:89,tocIndex:22},{value:"graph.setElementState()",paraId:89,tocIndex:22},{value:" 方法来设置节点状态。",paraId:89,tocIndex:22},{value:"基于 rect 扩展出一个 hole 图形，默认填充色为白色，当鼠标点击时变成橙色，实现这一效果的示例代码如下：",paraId:90,tocIndex:22},{value:"import { Rect, register, Graph, ExtensionCategory } from '@antv/g6';\n\n// 1. 定义节点类\nclass SelectableNode extends Rect {\n  getHoleStyle(attributes) {\n    return {\n      x: 20,\n      y: -10,\n      radius: 10,\n      width: 20,\n      height: 20,\n      fill: attributes.holeFill,\n    };\n  }\n\n  drawHoleShape(attributes, container) {\n    const holeStyle = this.getHoleStyle(attributes, container);\n\n    this.upsert('hole', 'rect', holeStyle, container);\n  }\n\n  render(attributes, container) {\n    super.render(attributes, container);\n\n    this.drawHoleShape(attributes, container);\n  }\n}\n\n// 2. 注册节点\nregister(ExtensionCategory.NODE, 'selectable-node', SelectableNode, true);\n\n// 3. 创建图实例\nconst graph = new Graph({\n  container: 'container',\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1', style: { x: 100, y: 100 } }],\n  },\n  node: {\n    type: 'selectable-node',\n    style: {\n      size: [120, 60],\n      radius: 6,\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n      holeFill: '#fff',\n    },\n    state: {\n      // 鼠标选中状态\n      selected: {\n        holeFill: 'orange',\n      },\n    },\n  },\n});\n\n// 4. 添加节点交互\ngraph.on('node:click', (evt) => {\n  const nodeId = evt.target.id;\n\n  graph.setElementState(nodeId, ['selected']);\n});\n\ngraph.render();\n",paraId:91,tocIndex:22}]},71125:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(54603);const d=[{value:"节点（Node）是图中的基本元素之一，表示图中的实体或者抽象概念，例如一个人、一个地点、一个组织等，节点可以包含一些属性，例如节点的 ID、名称、类型等。在 G6 中，节点可以具有多种形状和样式，并支持丰富的交互和自定义功能。",paraId:0,tocIndex:0},{value:"你可以在图中创建任意数量的节点，并通过边连接它们以表示关系。",paraId:1,tocIndex:0},{value:"G6 的节点体系包括三大类：内置节点、扩展节点和自定义节点。",paraId:2,tocIndex:1},{value:"大多数场景下，内置节点即可满足需求",paraId:2,tocIndex:1},{value:"。",paraId:2,tocIndex:1},{value:"G6 提供了丰富的内置节点类型，",paraId:3,tocIndex:2},{value:"无需注册，直接配置即可使用",paraId:3,tocIndex:2},{value:"：",paraId:3,tocIndex:2},{value:"节点类型",paraId:4,tocIndex:2},{value:"注册名称",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"圆形节点",paraId:4,tocIndex:2},{value:"circle",paraId:4,tocIndex:2},{value:"常用于表示普通实体",paraId:4,tocIndex:2},{value:"矩形节点",paraId:4,tocIndex:2},{value:"rect",paraId:4,tocIndex:2},{value:"适合展示更多文本和细节",paraId:4,tocIndex:2},{value:"椭圆节点",paraId:4,tocIndex:2},{value:"ellipse",paraId:4,tocIndex:2},{value:"类似圆形的变体",paraId:4,tocIndex:2},{value:"菱形节点",paraId:4,tocIndex:2},{value:"diamond",paraId:4,tocIndex:2},{value:"常用于决策点或特殊节点",paraId:4,tocIndex:2},{value:"三角形节点",paraId:4,tocIndex:2},{value:"triangle",paraId:4,tocIndex:2},{value:"可用于指示方向或特殊标记",paraId:4,tocIndex:2},{value:"六边形节点",paraId:4,tocIndex:2},{value:"hexagon",paraId:4,tocIndex:2},{value:"适合网格布局和蜂窝图",paraId:4,tocIndex:2},{value:"星形节点",paraId:4,tocIndex:2},{value:"star",paraId:4,tocIndex:2},{value:"突出显示重要节点",paraId:4,tocIndex:2},{value:"甜甜圈节点",paraId:4,tocIndex:2},{value:"donut",paraId:4,tocIndex:2},{value:"可展示比例或进度信息",paraId:4,tocIndex:2},{value:"图片节点",paraId:4,tocIndex:2},{value:"image",paraId:4,tocIndex:2},{value:"使用图片作为节点主体",paraId:4,tocIndex:2},{value:"HTML节点",paraId:4,tocIndex:2},{value:"html",paraId:4,tocIndex:2},{value:"支持自定义HTML内容",paraId:4,tocIndex:2},{value:"@antv/g6-extension-3d",paraId:5,tocIndex:3},{value:" 提供了 3D 节点：",paraId:5,tocIndex:3},{value:"Capsule",paraId:6,tocIndex:3},{value:" - 胶囊型节点",paraId:6,tocIndex:3},{value:"Cone",paraId:6,tocIndex:3},{value:" - 圆锥型节点",paraId:6,tocIndex:3},{value:"Cube",paraId:6,tocIndex:3},{value:" - 立方体节点",paraId:6,tocIndex:3},{value:"Cylinder",paraId:6,tocIndex:3},{value:" - 圆柱型节点",paraId:6,tocIndex:3},{value:"Plane",paraId:6,tocIndex:3},{value:" - 平面节点",paraId:6,tocIndex:3},{value:"Sphere",paraId:6,tocIndex:3},{value:" - 球体节点",paraId:6,tocIndex:3},{value:"Torus",paraId:6,tocIndex:3},{value:" - 圆环节点",paraId:6,tocIndex:3},{value:"@antv/g6-extension-react",paraId:7,tocIndex:4},{value:" 提供了 React 节点，支持使用 React 组件作为节点的主体，详细教程请查看 ",paraId:7,tocIndex:4},{value:"使用 React 定义节点",paraId:8,tocIndex:4},{value:" 文档。",paraId:7,tocIndex:4},{value:"当内置节点和扩展节点无法满足需求时，G6提供了强大的自定义能力：",paraId:9,tocIndex:5},{value:"继承内置节点进行扩展",paraId:10,tocIndex:5},{value:"创建全新的节点类型",paraId:10,tocIndex:5},{value:"与内置节点不同，",paraId:11,tocIndex:5},{value:"自定义节点需要先注册后使用",paraId:11,tocIndex:5},{value:"。详细教程请参考 ",paraId:11,tocIndex:5},{value:"自定义节点",paraId:12,tocIndex:5},{value:" 文档。",paraId:11,tocIndex:5},{value:"定义节点时，需要在图的数据对象中添加 ",paraId:13,tocIndex:6},{value:"nodes",paraId:13,tocIndex:6},{value:" 字段。每个节点是一个对象，结构如下：",paraId:13,tocIndex:6},{value:"属性",paraId:14,tocIndex:6},{value:"描述",paraId:14,tocIndex:6},{value:"类型",paraId:14,tocIndex:6},{value:"默认值",paraId:14,tocIndex:6},{value:"必选",paraId:14,tocIndex:6},{value:"id",paraId:14,tocIndex:6},{value:"节点的唯一标识符，用于区分不同的节点",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"type",paraId:14,tocIndex:6},{value:"节点类型，内置节点类型名称或者自定义节点的名称",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"data",paraId:14,tocIndex:6},{value:"节点数据，用于存储节点的自定义数据，例如节点的名称、描述等。可以在样式映射中通过回调函数获取",paraId:14,tocIndex:6},{value:"object",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"style",paraId:14,tocIndex:6},{value:"节点样式，包括位置、大小、颜色等视觉属性",paraId:14,tocIndex:6},{value:"object",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"states",paraId:14,tocIndex:6},{value:"节点初始状态，如选中、激活、悬停等",paraId:14,tocIndex:6},{value:"string[]",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"combo",paraId:14,tocIndex:6},{value:"所属的组合 ID，用于组织节点的层级关系，如果没有则为 null",paraId:14,tocIndex:6},{value:"string | null",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"children",paraId:14,tocIndex:6},{value:"子节点 ID 集合，仅在树图场景下使用",paraId:14,tocIndex:6},{value:"string[]",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"nodes",paraId:15,tocIndex:6},{value:" 数组中一个数据项的示例：",paraId:15,tocIndex:6},{value:'{\n  "id": "node-1",\n  "type": "circle",\n  "data": { "name": "alice", "role": "Admin" },\n  "style": { "x": 100, "y": 200, "size": 32, "fill": "violet" },\n  "states": ["selected"],\n  "combo": null\n}\n',paraId:16,tocIndex:6},{value:"配置节点的方式有三种，按优先级从高到低如下：",paraId:17,tocIndex:7},{value:"使用 ",paraId:18,tocIndex:7},{value:"graph.setNode()",paraId:18,tocIndex:7},{value:" 动态配置",paraId:18,tocIndex:7},{value:"实例化图时全局配置",paraId:18,tocIndex:7},{value:"在数据中动态属性",paraId:18,tocIndex:7},{value:"这几个配置方法可以同时使用。有相同的配置项时，优先级高的方式将会覆盖优先级低的。",paraId:19,tocIndex:7},{value:"graph.setNode()",paraId:20},{value:"可在图实例创建后，使用 ",paraId:21,tocIndex:8},{value:"graph.setNode()",paraId:21,tocIndex:8},{value:" 动态设置节点的样式映射逻辑。",paraId:21,tocIndex:8},{value:"该方法需要在 ",paraId:22,tocIndex:8},{value:"graph.render()",paraId:22,tocIndex:8},{value:" 之前调用才会生效，并拥有最高优先级。",paraId:22,tocIndex:8},{value:"graph.setNode({\n  style: {\n    type: 'circle',\n    style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n\ngraph.render();\n",paraId:23,tocIndex:8},{value:"在实例化图时可以通过 ",paraId:24,tocIndex:9},{value:"node",paraId:24,tocIndex:9},{value:" 配置节点样式映射，这里的配置是全局的配置，将会在所有节点上生效。",paraId:24,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  node: {\n    type: 'circle',\n    style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n  },\n});\n",paraId:25,tocIndex:9},{value:"如果需要为不同节点进行不同的配置，可以将配置写入到节点数据中。这种配置方式可以通过下面代码的形式直接写入数据：",paraId:26,tocIndex:10},{value:"const data = {\n  nodes: [\n    {\n      id: 'node-1',\n      type: 'circle',\n      style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n    },\n  ],\n};\n",paraId:27,tocIndex:10},{value:"如果你想让数据中配置的优先级高于全局配置，你可以采取以下方式：",paraId:28,tocIndex:11},{value:"const data = {\n  nodes: [\n    {\n      id: 'node-1',\n      type: 'circle',\n      style: { size: 60, fill: '#7FFFD4', stroke: '#5CACEE', lineWidth: 2 },\n    },\n  ],\n};\n\nconst graph = new Graph({\n  node: {\n    type: 'circle',\n    style: {\n      stroke: (d) => d.style.stroke || '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n});\n",paraId:29,tocIndex:11},{value:"G6 支持在运行时动态更新节点的样式和状态：",paraId:30,tocIndex:12},{value:"// 更新单个节点样式\ngraph.updateNodeData([\n  {\n    id: 'node-1',\n    style: {\n      fill: 'red',\n      size: 80,\n    },\n  },\n]);\ngraph.draw();\n\n// 设置节点状态\ngraph.setElementState('node-1', ['selected']);\n",paraId:31,tocIndex:12},{value:"更新节点时，只有指定的属性会被更新，未指定的属性保持不变。",paraId:32},{value:"更多与节点相关的 API 请参考 ",paraId:33},{value:"API - 元素操作",paraId:34},{value:"。",paraId:33},{value:"节点可以拥有不同的状态，例如选中、高亮、禁用等。可以通过配置状态样式来定义节点在不同状态下的显示效果：",paraId:35,tocIndex:13},{value:"const graph = new Graph({\n  node: {\n    style: {\n      // 默认样式\n      fill: '#C6E5FF',\n    },\n    // 状态样式\n    state: {\n      selected: {\n        fill: '#ffa940',\n        stroke: '#ff7a00',\n        haloStroke: '#ff7a00',\n      },\n      highlight: {\n        stroke: '#1890ff',\n        lineWidth: 3,\n      },\n    },\n  },\n});\n",paraId:36,tocIndex:13},{value:"状态系统是实现节点交互效果的基础，更多状态的介绍，请参考 ",paraId:37,tocIndex:13},{value:"元素状态",paraId:38,tocIndex:13},{value:"。",paraId:37,tocIndex:13}]},93124:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23533);const d=[{value:"在 G6 中，自定义节点通常需要操作 DOM 或 Canvas 元素，但借助 ",paraId:0},{value:"@antv/g6-extension-react",paraId:0},{value:" 一方生态库，可以直接使用 React 组件作为节点内容，提升开发效率与可维护性。",paraId:0},{value:"✅ ",paraId:1,tocIndex:1},{value:"推荐场景：",paraId:1,tocIndex:1},{value:"节点只是简单的几何图形",paraId:2,tocIndex:1},{value:"需要高效渲染超过 2,000 个节点的场景",paraId:2,tocIndex:1},{value:"需要直接操作图形实例进行精细控制",paraId:2,tocIndex:1},{value:"有关如何使用 Canvas 图形自定义节点的详细信息，请参阅 ",paraId:3,tocIndex:1},{value:"自定义节点",paraId:4,tocIndex:1},{value:" 文档",paraId:3,tocIndex:1},{value:"✅ ",paraId:5,tocIndex:2},{value:"推荐场景：",paraId:5,tocIndex:2},{value:"需要集成 Ant Design 等 UI 库的业务系统",paraId:6,tocIndex:2},{value:"节点包含表单输入、状态切换等交互逻辑",paraId:6,tocIndex:2},{value:"已有 React 设计系统需要复用的场景",paraId:6,tocIndex:2},{value:"在开始之前，请确保您已经：",paraId:7,tocIndex:4},{value:"安装 React 项目",paraId:8,tocIndex:4},{value:"：确保已安装并创建 React 项目。",paraId:8,tocIndex:4},{value:"React 版本要求",paraId:8,tocIndex:4},{value:"：确保使用的 React 版本 >=16.8.0。",paraId:8,tocIndex:4},{value:"要使用 ",paraId:9,tocIndex:5},{value:"@antv/g6-extension-react",paraId:9,tocIndex:5},{value:"，请运行以下命令：",paraId:9,tocIndex:5},{value:"npm install @antv/g6-extension-react\n",paraId:10},{value:"yarn add @antv/g6-extension-react\n",paraId:11},{value:"pnpm add @antv/g6-extension-react\n",paraId:12},{value:"通过扩展机制注册 React 节点类型：",paraId:13,tocIndex:7},{value:"import { ExtensionCategory, register } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n",paraId:14,tocIndex:7},{value:"register",paraId:15,tocIndex:7},{value:" 方法需要三个参数：",paraId:15,tocIndex:7},{value:"扩展类别：",paraId:16,tocIndex:7},{value:"ExtensionCategory.NODE",paraId:16,tocIndex:7},{value:" 表示这是一个节点类型",paraId:16,tocIndex:7},{value:"类型名称：",paraId:16,tocIndex:7},{value:"react-node",paraId:16,tocIndex:7},{value:" 是我们给这个自定义节点起的名字，后续会在配置中使用",paraId:16,tocIndex:7},{value:"类定义：ReactNode 是 ",paraId:16,tocIndex:7},{value:"@antv/g6-extension-react",paraId:16,tocIndex:7},{value:" 导出的实现类",paraId:16,tocIndex:7},{value:"定义一个简单的 React 组件作为节点的内容：",paraId:17,tocIndex:8},{value:"const MyReactNode = () => {\n  return <div>node</div>;\n};\n",paraId:18,tocIndex:8},{value:"在图配置中使用自定义的 React 节点。通过在图配置中指定节点类型和样式，来使用自定义的 React 组件。",paraId:19,tocIndex:9},{value:"type",paraId:20,tocIndex:9},{value:"：指定节点类型为 ",paraId:20,tocIndex:9},{value:"react-node",paraId:20,tocIndex:9},{value:" (使用与注册时起的名字)",paraId:20,tocIndex:9},{value:"style.component",paraId:20,tocIndex:9},{value:"：定义节点的 React 组件内容",paraId:20,tocIndex:9},{value:"const graph = new Graph({\n  node: {\n    type: 'react-node',\n    style: {\n      component: () => <MyReactNode />,\n    },\n  },\n});\n\ngraph.render();\n",paraId:21,tocIndex:9},{value:"在复杂图可视化场景中，节点需要动态响应交互状态。我们提供两种互补的状态管理方案：",paraId:22,tocIndex:11},{value:"G6 提供内置的交互状态管理状态，如 ",paraId:23,tocIndex:12},{value:"hover-activate",paraId:23,tocIndex:12},{value:" 和 ",paraId:23,tocIndex:12},{value:"click-select",paraId:23,tocIndex:12},{value:"。可以通过节点数据中的 ",paraId:23,tocIndex:12},{value:"data.states",paraId:23,tocIndex:12},{value:" 字段获取当前节点状态，并根据状态调整节点样式。",paraId:23,tocIndex:12},{value:"示例",paraId:24,tocIndex:12},{value:"：在节点被 hover 时改变背景颜色。",paraId:24,tocIndex:12},{value:"import { ExtensionCategory, register, Graph } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n\nconst StatefulNode = ({ data }) => {\n  const isActive = data.states?.includes('active');\n\n  return (\n    <div\n      style={{\n        width: 100,\n        padding: 5,\n        border: '1px solid #eee',\n        boxShadow: isActive ? '0 0 8px rgba(24,144,255,0.8)' : 'none',\n        transform: `scale(${isActive ? 1.05 : 1})`,\n      }}\n    >\n      {data.data.label}\n    </div>\n  );\n};\n\nconst graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 200 }, data: { label: 'node1' } },\n      { id: 'node2', style: { x: 300, y: 200 }, data: { label: 'node2' } },\n    ],\n  },\n  node: {\n    type: 'react-node',\n    style: {\n      component: (data) => <StatefulNode data={data} />,\n    },\n  },\n  behaviors: ['hover-activate'],\n});\n\ngraph.render();\n",paraId:25,tocIndex:12},{value:"当需要管理业务相关状态（如审批状态、风险等级）时，可通过扩展节点数据实现：",paraId:26,tocIndex:13},{value:"示例",paraId:27,tocIndex:13},{value:"：通过 data 添加 ",paraId:27,tocIndex:13},{value:"selected",paraId:27,tocIndex:13},{value:" 变量，实现节点选中和取消选中的样式变化。",paraId:27,tocIndex:13},{value:"import { ExtensionCategory, register, Graph } from '@antv/g6';\nimport { ReactNode } from '@antv/g6-extension-react';\n\nregister(ExtensionCategory.NODE, 'react-node', ReactNode);\n\nconst MyReactNode = ({ data, graph }) => {\n  const handleClick = () => {\n    graph.updateNodeData([{ id: data.id, data: { selected: !data.data.selected } }]);\n    graph.draw();\n  };\n\n  return (\n    <div\n      style={{\n        width: 200,\n        padding: 10,\n        border: '1px solid red',\n        borderColor: data.data.selected ? 'orange' : '#ddd', // 根据选中状态设置边框颜色\n        cursor: 'pointer', // 添加鼠标指针样式\n      }}\n      onClick={handleClick}\n    >\n      Node\n    </div>\n  );\n};\n\nconst graph = new Graph({\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        style: { x: 100, y: 100 },\n        data: { selected: true },\n      },\n    ],\n  },\n  node: {\n    type: 'react-node',\n    style: {\n      component: (data) => <MyReactNode data={data} graph={graph} />,\n    },\n  },\n});\n\ngraph.render();\n",paraId:28,tocIndex:13},{value:"实现节点与图实例的双向通信，使节点和图实例可以相互更新。",paraId:29,tocIndex:14},{value:"示例",paraId:30,tocIndex:14},{value:"：通过自定义节点操作图数据，并重新渲染图形。",paraId:30,tocIndex:14},{value:"const IDCardNode = ({ id, selected, graph }) => {\n  const handleSelect = () => {\n    graph.updateNodeData([{ id, data: { selected: true } }]);\n    graph.draw();\n  };\n\n  return <Select onChange={handleSelect} style={{ background: selected ? 'orange' : '#eee' }} />;\n};\n\nconst graph = new Graph({\n  node: {\n    type: 'react-node',\n    style: {\n      component: ({ id, data }) => <IDCardNode id={id} selected={data.selected} graph={graph} />,\n    },\n  },\n});\n",paraId:31,tocIndex:14}]},72333:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(82416);const d=[{value:"G6 图表的核心是由三种基本元素构成：",paraId:0,tocIndex:0},{value:"节点(Node)",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"边(Edge)",paraId:0,tocIndex:0},{value:" 和 ",paraId:0,tocIndex:0},{value:"组合(Combo)",paraId:0,tocIndex:0},{value:"。这些元素是构建复杂图形网络的基础单元。",paraId:0,tocIndex:0},{value:"节点",paraId:1,tocIndex:1},{value:" 表示图中的实体或概念，如人物、地点、对象等。G6 提供了丰富的内置节点类型：",paraId:2,tocIndex:1},{value:"G6 还支持 ",paraId:3,tocIndex:1},{value:"使用 React 定义节点",paraId:4,tocIndex:1},{value:" 或 ",paraId:3,tocIndex:1},{value:"自定义节点",paraId:5,tocIndex:1},{value:" 以满足特定需求。",paraId:3,tocIndex:1},{value:"边",paraId:6,tocIndex:2},{value:"表示节点间的连接关系，如朋友关系、交易往来等。G6 内置多种边类型：",paraId:7,tocIndex:2},{value:"当内置边不满足需求时，可以通过 ",paraId:8,tocIndex:2},{value:"自定义边",paraId:9,tocIndex:2},{value:" 来实现复杂的连接表现。",paraId:8,tocIndex:2},{value:"组合",paraId:10,tocIndex:3},{value:"是一种特殊元素，可以包含节点和其他组合，用于表示集合、分组或层级关系。G6 内置两种组合类型：",paraId:11,tocIndex:3},{value:"圆形组合",paraId:12,tocIndex:3},{value:"(",paraId:12,tocIndex:3},{value:"circle",paraId:12,tocIndex:3},{value:")：适合紧凑型分组",paraId:12,tocIndex:3},{value:"矩形组合",paraId:12,tocIndex:3},{value:"(",paraId:12,tocIndex:3},{value:"rect",paraId:12,tocIndex:3},{value:")：适合规则布局的分组",paraId:12,tocIndex:3},{value:"组合支持嵌套、拖拽、展开/收起等交互，可以通过 ",paraId:13,tocIndex:3},{value:"自定义组合",paraId:14,tocIndex:3},{value:" 来实现更复杂的容器行为。",paraId:13,tocIndex:3},{value:"每个元素由一个或多个基础图形(Shape)组成。图形是 G6 中的最小图形单元，包括 ",paraId:15,tocIndex:4},{value:"矩形",paraId:16,tocIndex:4},{value:"、",paraId:15,tocIndex:4},{value:"圆形",paraId:17,tocIndex:4},{value:"、",paraId:15,tocIndex:4},{value:"文本",paraId:18,tocIndex:4},{value:"、",paraId:15,tocIndex:4},{value:"路径",paraId:19,tocIndex:4},{value:"等。",paraId:15,tocIndex:4},{value:"例如：",paraId:20,tocIndex:4},{value:"一个节点可能由背景图形(如圆形)和文本标签组成",paraId:21,tocIndex:4},{value:"一条边可能由路径、箭头和文本标签组成",paraId:21,tocIndex:4},{value:"一个组合可能由容器图形、标题文本和展开/收起按钮组成",paraId:21,tocIndex:4},{value:"要了解更多关于图形的信息，请参阅 ",paraId:22,tocIndex:4},{value:"图形 Shape 总览",paraId:23,tocIndex:4},{value:" 和 ",paraId:22,tocIndex:4},{value:"Shape 样式属性",paraId:24,tocIndex:4},{value:"。",paraId:22,tocIndex:4},{value:"元素状态",paraId:25,tocIndex:5},{value:" 是一种强大的机制，用于展示元素在不同交互或业务场景下的视觉变化。G6 提供了一套完整的状态管理系统：",paraId:26,tocIndex:5},{value:"预设状态",paraId:27,tocIndex:5},{value:"：",paraId:27,tocIndex:5},{value:"selected",paraId:27,tocIndex:5},{value:"(选中)、",paraId:27,tocIndex:5},{value:"highlight",paraId:27,tocIndex:5},{value:"(高亮)、",paraId:27,tocIndex:5},{value:"active",paraId:27,tocIndex:5},{value:"(激活)等",paraId:27,tocIndex:5},{value:"状态叠加",paraId:27,tocIndex:5},{value:"：元素可同时拥有多个状态，样式按优先级叠加",paraId:27,tocIndex:5},{value:"自定义状态",paraId:27,tocIndex:5},{value:"：可根据业务需求定义任意状态",paraId:27,tocIndex:5},{value:"G6 5.x 采用扁平化的配置结构，所有元素的配置都在同一层级，便于查找和管理：",paraId:28,tocIndex:6},{value:"{\n  node: {\n    // 节点默认样式\n    style: {\n      fill: 'orange',\n      labelText: 'node',\n    },\n    // 节点在不同状态下的样式\n    state: {\n      selected: {\n        stroke: '#1890FF',\n        lineWidth: 2,\n      }\n    }\n  },\n  edge: {\n    // 边默认样式\n    style: {\n      stroke: '#aaa',\n    },\n    // 边在不同状态下的样式\n    state: {\n      highlight: {\n        stroke: 'red',\n      }\n    }\n  },\n  combo: {\n    // 组合默认样式\n    style: {\n      fill: 'lightblue',\n      stroke: 'blue',\n    }\n  }\n};\n",paraId:29,tocIndex:6},{value:"配置方式有三种，按优先级从高到低：",paraId:30,tocIndex:6},{value:"使用实例方法动态配置",paraId:31,tocIndex:6},{value:"：如 ",paraId:31,tocIndex:6},{value:"graph.setNode()",paraId:31,tocIndex:6},{value:"、",paraId:31,tocIndex:6},{value:"graph.setEdge()",paraId:31,tocIndex:6},{value:"、",paraId:31,tocIndex:6},{value:"graph.setCombo()",paraId:31,tocIndex:6},{value:"实例化图时全局配置",paraId:31,tocIndex:6},{value:"：在 ",paraId:31,tocIndex:6},{value:"new Graph()",paraId:31,tocIndex:6},{value:" 时指定配置项",paraId:31,tocIndex:6},{value:"在数据中配置",paraId:31,tocIndex:6},{value:"：在节点、边、组合的数据对象中设置",paraId:31,tocIndex:6},{value:"在 VSCode 等编辑器中，你可以看到元素的全部可配置属性，并基于关键字进行搜索：",paraId:32,tocIndex:6},{value:"G6 提供了强大的扩展能力，满足各种自定义需求：",paraId:33,tocIndex:7},{value:"自定义节点",paraId:34,tocIndex:7},{value:"：",paraId:34,tocIndex:7},{value:"自定义节点指南",paraId:35,tocIndex:7},{value:"自定义边",paraId:34,tocIndex:7},{value:"：",paraId:34,tocIndex:7},{value:"自定义边指南",paraId:36,tocIndex:7},{value:"自定义组合",paraId:34,tocIndex:7},{value:"：",paraId:34,tocIndex:7},{value:"自定义组合指南",paraId:37,tocIndex:7},{value:"React 节点",paraId:34,tocIndex:7},{value:"：",paraId:34,tocIndex:7},{value:"使用 React 定义节点",paraId:38,tocIndex:7},{value:"3D 扩展",paraId:34,tocIndex:7},{value:"：通过 ",paraId:34,tocIndex:7},{value:"@antv/g6-extension-3d",paraId:34,tocIndex:7},{value:" 使用 3D 节点",paraId:34,tocIndex:7},{value:"内置节点库",paraId:39,tocIndex:9},{value:"内置边库",paraId:40,tocIndex:10},{value:"内置组合库",paraId:41,tocIndex:11}]},44319:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(14732);const d=[{value:"G6 提供了灵活的 Shape 机制，支持开发者自定义各种图形，并在节点、边、Combo 等元素中高效复用。本文将以 Label（标签）为例，讲解如何自定义 Shape、如何在元素中应用。",paraId:0},{value:"所有 Shape 都继承自 ",paraId:1,tocIndex:1},{value:"BaseShape",paraId:1,tocIndex:1},{value:"，它统一管理了 Shape 的生命周期（创建、更新、销毁）、属性解析、动画、事件绑定等。你只需关注如何实现 ",paraId:1,tocIndex:1},{value:"render",paraId:1,tocIndex:1},{value:" 方法即可。",paraId:1,tocIndex:1},{value:"核心抽象：",paraId:2,tocIndex:1},{value:"import { CustomElement } from '@antv/g';\n\nabstract class BaseShape extends CustomElement {\n  // 生命周期管理、属性解析、动画等...\n  public abstract render(attributes, container): void;\n}\n",paraId:3,tocIndex:1},{value:"一个节点通常包含多个子 Shape，例如：",paraId:4,tocIndex:2},{value:"节点（Node）\n├── keyShape（主图形）\n├── label（标签，辅助信息）\n│   ├── text（文本）\n│   └── rect（背景）\n├── icon（图标）\n│   ├── text（文本）\n│   └── image（图片）\n├── badge（徽标）\n│   ├── text（文本）\n│   └── rect（背景）\n└── port（锚点）\n│   ├── circle（圆形）\n",paraId:5,tocIndex:2},{value:"Label 是一个典型的复合 Shape，由文本（Text）和可选的背景（Rect）组成。其实现思路如下：",paraId:6,tocIndex:3},{value:"属性分离",paraId:7,tocIndex:3},{value:"：Label 的样式属性分为文本样式和背景样式，分别传递给 Text 和 Rect。",paraId:7,tocIndex:3},{value:"智能布局",paraId:7,tocIndex:3},{value:"：背景自动根据文本内容、内边距、圆角等动态调整尺寸和位置。",paraId:7,tocIndex:3},{value:"复用 upsert",paraId:7,tocIndex:3},{value:"：通过 ",paraId:7,tocIndex:3},{value:"upsert",paraId:7,tocIndex:3},{value:" 方法自动管理子 Shape 的创建、更新、销毁。",paraId:7,tocIndex:3},{value:"Label 主要代码片段：",paraId:8,tocIndex:3},{value:"import { Text, Rect } from '@antv/g'; // 引入原子图形\n\nexport class Label extends BaseShape {\n  public render(attributes = this.parsedAttributes, container= this): void {\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n  }\n  // ... 省略样式提取方法\n}\n",paraId:9,tocIndex:3},{value:"getTextStyle",paraId:10,tocIndex:3},{value:"、",paraId:10,tocIndex:3},{value:"getBackgroundStyle",paraId:10,tocIndex:3},{value:" 分别提取文本和背景的样式属性，避免相互干扰。",paraId:10,tocIndex:3},{value:"upsert",paraId:10,tocIndex:3},{value:" 方法保证了 Shape 的自动增删改查，极大提升了复用性和健壮性。",paraId:10,tocIndex:3},{value:"下面以自定义一个带特殊装饰的标签为例，演示 Shape 的完整定义、注册与使用：",paraId:11,tocIndex:4},{value:"import { BaseShape, ExtensionCategory, Circle } from 'g6';\nimport { Text, Rect, Circle } from '@antv/g';\n\nclass FancyLabel extends BaseShape {\n  render(attributes = this.parsedAttributes, container = this) {\n    // 主文本\n    this.upsert('text', Text, this.getTextStyle(attributes), container);\n    // 背景\n    this.upsert('background', Rect, this.getBackgroundStyle(attributes), container);\n    // 额外装饰：左侧小圆点\n    this.upsert('dot', Circle, {\n      x: -8, y: 0, r: 3, fill: '#faad14',\n    }, container);\n  }\n  // ...实现 getTextStyle/getBackgroundStyle\n}\n\n// 注册自定义 Shape\nregister(ExtensionCategory.SHAPE, 'fancy-label-shape', FancyLabel);\n\n// 定义自定义节点\nclass CustomCircle extends Circle {\n  public drawFancyLabelShape(attributes, container) {\n    this.upsert('fancy-label', 'fancy-label-shape', this.getFancyLabelStyle(attributes), container);\n  }\n\n  render(attributes = this.parsedAttributes, container) {\n    super.render(attributes, container);\n\n    this.drawFancyLabelShape(attributes, container);\n  }\n}\n\n// 注册自定义节点\nregister(ExtensionCategory.Node, 'fancy-label-node', CustomCircle);\n",paraId:12,tocIndex:4},{value:"G6 中节点、边、Combo 等元素往往包含多个子 Shape（如主图形、标签、徽标、锚点等）。为了让每个子 Shape 的样式互不干扰，G6 采用了",paraId:13,tocIndex:5},{value:"样式属性前缀分离",paraId:13,tocIndex:5},{value:"的设计。",paraId:13,tocIndex:5},{value:"解耦",paraId:14,tocIndex:6},{value:"：每个子 Shape 只关心属于自己的样式属性，避免样式污染。",paraId:14,tocIndex:6},{value:"易扩展",paraId:14,tocIndex:6},{value:"：新增子 Shape 只需定义新的前缀，无需修改原有逻辑。",paraId:14,tocIndex:6},{value:"配置直观",paraId:14,tocIndex:6},{value:"：用户在配置节点/边/Combo 时，可以一目了然地设置各部分样式。",paraId:14,tocIndex:6},{value:"以 Label 为例：",paraId:15,tocIndex:7},{value:"import { RectStyleProps, TextStyleProps } from '@antv/g';\n\ntype PrefixKey<P extends string = string, K extends string = string> = `${P}${Capitalize<K>}`;\n\ntype Prefix<P extends string, T extends object> = {\n  [K in keyof T as K extends string ? PrefixKey<P, K> : never]?: T[K];\n};\n\ninterface LabelStyleProps extends TextStyleProps, Prefix<'background', RectStyleProps> {\n  background?: boolean;\n}\n",paraId:16,tocIndex:7},{value:"Prefix<'background', RectStyleProps>",paraId:17,tocIndex:7},{value:" 表示所有以 ",paraId:17,tocIndex:7},{value:"background",paraId:17,tocIndex:7},{value:" 开头的属性都属于标签背景样式。",paraId:17,tocIndex:7},{value:"在实际渲染时，通过 ",paraId:17,tocIndex:7},{value:"subStyleProps",paraId:17,tocIndex:7},{value:"、",paraId:17,tocIndex:7},{value:"subObject",paraId:17,tocIndex:7},{value:" 等工具函数，自动提取带前缀的样式，传递给对应的 Shape。",paraId:17,tocIndex:7},{value:"Label 背景样式提取示例",paraId:18,tocIndex:7},{value:"protected getBackgroundStyle(attributes: Required<LabelStyleProps>) {\n  if (attributes.background === false) return false;\n  const style = this.getGraphicStyle(attributes);\n  const backgroundStyle = subStyleProps<RectStyleProps>(style, 'background');\n// ...省略布局计算\n  return backgroundStyle;\n}\n",paraId:19,tocIndex:7},{value:"样式配置示例",paraId:20,tocIndex:7},{value:'{\n  "text": "label",\n  "fontSize": 12,\n  "fontFamily": "system-ui, sans-serif",\n  "wordWrap": true,\n  "maxLines": 1,\n  "wordWrapWidth": 128,\n  "textOverflow": "...",\n  "textBaseline": "middle",\n  "background": true,\n  "backgroundOpacity": 0.75,\n  "backgroundZIndex": -1,\n  "backgroundLineWidth": 0\n}\n',paraId:21,tocIndex:7},{value:"keyShape",paraId:22,tocIndex:8},{value:" 是节点/边/Combo 的主图形，决定交互拾取、包围盒、主样式等。",paraId:22,tocIndex:8},{value:"Label",paraId:22,tocIndex:8},{value:"、icon、badge、port 等通常作为辅助 Shape 存在，不会作为 keyShape。",paraId:22,tocIndex:8},{value:"你可以在自定义节点时通过 ",paraId:22,tocIndex:8},{value:"drawKeyShape",paraId:22,tocIndex:8},{value:" 或类似方法指定 keyShape，Label 只负责展示文本信息，不影响节点的交互主控。",paraId:22,tocIndex:8},{value:"以节点为例，节点基类 ",paraId:23,tocIndex:9},{value:"BaseNode",paraId:23,tocIndex:9},{value:" 已经内置了对多种子 Shape 的支持（keyShape、label、icon、badge、port、halo 等）。你只需专注于 keyShape 的绘制，其他子 Shape 可以通过配置和样式前缀自动管理。",paraId:23,tocIndex:9},{value:"protected drawLabelShape(attributes: Required<S>, container: Group): void {\n  const style = this.getLabelStyle(attributes);\n  this.upsert('label', Label, style, container);\n}\n\npublic render(attributes = this.parsedAttributes, container: Group = this) {\n  // 1. 绘制 keyShape（主图形）\n  this._drawKeyShape(attributes, container);\n  if (!this.getShape('key')) return;\n\n  // 2. 绘制 halo\n  this.drawHaloShape(attributes, container);\n\n  // 3. 绘制 icon\n  this.drawIconShape(attributes, container);\n\n  // 4. 绘制 badges\n  this.drawBadgeShapes(attributes, container);\n\n  // 5. 绘制 label\n  this.drawLabelShape(attributes, container);\n\n  // 6. 绘制 ports\n  this.drawPortShapes(attributes, container);\n}\n",paraId:24,tocIndex:10},{value:"每个子 Shape 的样式都通过前缀分离自动提取，传递给对应的 Shape 实例。",paraId:25,tocIndex:10},{value:"你可以通过配置项灵活控制每个子 Shape 的显示与样式。",paraId:25,tocIndex:10},{value:"假设你要为节点添加带背景的标签，只需在节点数据中配置 label 相关属性：",paraId:26,tocIndex:11},{value:"{\n  label: true,\n  labelText: '我是标签',\n  labelFill: '#333',\n  labelFontSize: 14,\n  labelBackground: true,\n  labelBackgroundFill: '#fffbe6',\n  labelBackgroundRadius: 6,\n  labelPadding: [4, 8],\n}\n",paraId:27,tocIndex:11},{value:"labelText",paraId:28,tocIndex:11},{value:"、",paraId:28,tocIndex:11},{value:"labelFill",paraId:28,tocIndex:11},{value:"、",paraId:28,tocIndex:11},{value:"labelFontSize",paraId:28,tocIndex:11},{value:" 等会被自动提取并传递给 Label 的文本部分。",paraId:28,tocIndex:11},{value:"labelBackground",paraId:28,tocIndex:11},{value:"、",paraId:28,tocIndex:11},{value:"labelBackgroundFill",paraId:28,tocIndex:11},{value:"、",paraId:28,tocIndex:11},{value:"labelBackgroundRadius",paraId:28,tocIndex:11},{value:"、",paraId:28,tocIndex:11},{value:"labelPadding",paraId:28,tocIndex:11},{value:" 等会被自动提取并传递给 Label 的背景部分。",paraId:28,tocIndex:11},{value:"你无需手动管理 Label 的创建、更新、销毁，G6 会自动完成。",paraId:29,tocIndex:11},{value:"检查样式属性前缀是否正确（如 ",paraId:30,tocIndex:13},{value:"labelFill",paraId:30,tocIndex:13},{value:"、",paraId:30,tocIndex:13},{value:"labelBackgroundFill",paraId:30,tocIndex:13},{value:"）。",paraId:30,tocIndex:13},{value:"确认节点/边/Combo 的 ",paraId:30,tocIndex:13},{value:"label",paraId:30,tocIndex:13},{value:" 配置为 ",paraId:30,tocIndex:13},{value:"true",paraId:30,tocIndex:13},{value:"，且 ",paraId:30,tocIndex:13},{value:"labelText",paraId:30,tocIndex:13},{value:" 已设置。",paraId:30,tocIndex:13},{value:"检查是否被其他样式覆盖。",paraId:30,tocIndex:13},{value:"使用浏览器控制台查看 ",paraId:31,tocIndex:14},{value:"shapeMap",paraId:31,tocIndex:14},{value:"，确认各子 Shape 是否被正确创建。",paraId:31,tocIndex:14},{value:"直接在图配置中设置节点状态样式（推荐）",paraId:32,tocIndex:15},{value:"const graph = new Graph({\n  node: {\n    style: {\n      label: false,\n    },\n    state: {\n      hover: {\n        label: true,\n        labelText: 'show when hovered',\n      },\n    },\n  },\n});\n",paraId:33,tocIndex:15},{value:"或者在 Label 的实现中监听状态变化，动态调整样式。可以通过 data 获取到当前的状态值",paraId:34,tocIndex:15},{value:"如需更深入了解，建议阅读源码 ",paraId:35,tocIndex:15},{value:"base-shape.ts",paraId:35,tocIndex:15},{value:"、",paraId:35,tocIndex:15},{value:"base-node.ts",paraId:35,tocIndex:15},{value:"。",paraId:35,tocIndex:15}]},13326:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73707);const d=[{value:"Shape 指 G6 中的图形、形状，可以是圆形、矩形、路径等。它一般与 G6 中的节点、边、Combo 相关。",paraId:0,tocIndex:0},{value:"💡 G6 中的每一种节点/边/Combo 都是由一个或多个 Shape 组合而成。节点、边、Combo 的样式配置都会被体现到对应的图形上。",paraId:0,tocIndex:0},{value:"例如下图（左）的节点包含了一个圆形图形；下图（中）的节点含有一个圆形和一个文本图形；下图（右）的节点中含有 5 个圆形（蓝绿色的圆和上下左右四个锚点）、一个文本图形。但每种节点/边/Combo 都会有自己的唯一关键图形 keyShape，下图中三个节点的 keyShape 都是蓝绿色的圆，keyShape 主要用于交互检测、样式随 ",paraId:1,tocIndex:0},{value:"元素状态",paraId:2,tocIndex:0},{value:" 自动更新等，见 ",paraId:1,tocIndex:0},{value:"keyShape",paraId:3,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"（左）只含有一个圆形图形的节点，keyShape 是该圆形。（中）含有圆形和文本图形的节点，keyShape 是圆形。（右）含有主要圆形、文本、上下左右四个小圆形的节点，keyShape 是圆形。",paraId:4,tocIndex:0},{value:"G6 使用不同的 shape 组合，设计了多种内置的节点/边/ Combo 。G6 内置节点的有 'circle'， 'rect'，'ellipse'，...（详见 ",paraId:5,tocIndex:0},{value:"内置节点",paraId:6,tocIndex:0},{value:"）；内置边的有 'line'，'polyline'，'cubic'，...（详见 ",paraId:5,tocIndex:0},{value:"内置边",paraId:7,tocIndex:0},{value:"）；内置 Combo 有 'circle'，'rect'，（详见 ",paraId:5,tocIndex:0},{value:"内置 Combo",paraId:8,tocIndex:0},{value:"）。",paraId:5,tocIndex:0},{value:"除了使用内置的节点/边/ Combo 外，G6 还允许用户通过自己搭配和组合 shape 进行节点/边/ Combo 的自定义，详见 ",paraId:9,tocIndex:0},{value:"自定义节点",paraId:10,tocIndex:0},{value:"，",paraId:9,tocIndex:0},{value:"自定义边",paraId:11,tocIndex:0},{value:"，",paraId:9,tocIndex:0},{value:"自定义 Combo",paraId:12,tocIndex:0},{value:"。",paraId:9,tocIndex:0},{value:"在 G6 中，每个节点、边、Combo 都由一个或多个 Shape 组成，但其中有一个 Shape 被称为 keyShape，它是该元素的“关键图形”：",paraId:13,tocIndex:1},{value:"节点的关键图形就是上图的颜色区域",paraId:14,tocIndex:1},{value:"确定节点 / Combo 的包围盒（Bounding Box）",paraId:15,tocIndex:2},{value:" ，从而计算相关边的连入点（与相关边的交点）。若 keyShape 不同，节点与边的交点计算结果不同。",paraId:15,tocIndex:2},{value:"本例中的一个节点由一个 rect 图形和一个带灰色描边、填充透明的 circle 图形构成。",paraId:16,tocIndex:3},{value:"当节点的 keyShape 为 circle 时：",paraId:17,tocIndex:3},{value:"当节点的 keyShape 为 rect 时：",paraId:18,tocIndex:3},{value:"当用户需要 ",paraId:19,tocIndex:4},{value:"自定义节点",paraId:20,tocIndex:4},{value:"、",paraId:19,tocIndex:4},{value:"自定义边",paraId:21,tocIndex:4},{value:"、",paraId:19,tocIndex:4},{value:"自定义 Combo",paraId:22,tocIndex:4},{value:" 时，需要了解 Shape 的生命周期。使用内置节点/边/Combo 则可以跳过这一部分内容。",paraId:19,tocIndex:4},{value:"从整体来看，Shape 的生命周期分为：",paraId:23,tocIndex:4},{value:"初始化渲染",paraId:24,tocIndex:4},{value:"：首次根据数据和样式配置绘制出 Shape。",paraId:24,tocIndex:4},{value:"更新",paraId:24,tocIndex:4},{value:"：当数据或样式发生变化时，自动更新 Shape 的表现。",paraId:24,tocIndex:4},{value:"操作",paraId:24,tocIndex:4},{value:"：响应交互状态（如 selected、active、hover 等），动态调整样式。",paraId:24,tocIndex:4},{value:"销毁",paraId:24,tocIndex:4},{value:"：Shape 被移除时的清理（通常由 Graph 自动管理，用户无需关心）。",paraId:24,tocIndex:4},{value:"在自定义 Shape 时，最常见的需求就是“如何高效地管理 Shape 的创建、更新和销毁”。G6 为此在 BaseShape 中设计了一个非常实用的方法：",paraId:25,tocIndex:4},{value:"upsert 是“update” 和 “insert” 的合成词，意思是“有则更新，无则创建”。它的作用可以简单理解为：",paraId:26,tocIndex:5},{value:"自动判断",paraId:27,tocIndex:5},{value:"：你只需描述希望 Shape 呈现的样子，",paraId:27,tocIndex:5},{value:"upsert",paraId:27,tocIndex:5},{value:" 会自动判断当前 Shape 是否已存在。如果不存在则创建，如果已存在则更新，如果需要删除则自动移除。",paraId:27,tocIndex:5},{value:"简化逻辑",paraId:27,tocIndex:5},{value:"：开发者无需手动管理 Shape 的增删改查，避免了重复代码和状态混乱。",paraId:27,tocIndex:5},{value:"提升健壮性",paraId:27,tocIndex:5},{value:"：无论是初次渲染、数据变更还是状态切换，upsert 都能保证 Shape 始终与数据和配置保持同步。",paraId:27,tocIndex:5},{value:"类型定义：",paraId:28,tocIndex:5},{value:"/**\n * 创建、更新或删除图形\n * @param className 图形名称\n * @param Ctor 图形类型\n * @param style 图形样式。若要删除图形，传入 false\n * @param container 容器\n * @param hooks 钩子函数\n * @returns 图形实例\n */\nupsert<T extends DisplayObject>(\n  className: string,\n  Ctor: string | { new (...args: any[]): T },\n  style: T['attributes'] | false,\n  container: DisplayObject,\n  hooks?: UpsertHooks,\n): T | undefined {}\n",paraId:29,tocIndex:5},{value:"你只需要描述“我现在想要什么样的图形”，不用关心它是新建、更新还是删除，upsert 都会帮你处理好。这让自定义和管理复杂的复合 Shape 变得非常简单和安全。",paraId:30,tocIndex:5}]},9483:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18675);const d=[{value:"G6 中的元素（节点/边）是由",paraId:0},{value:"一个或多个 ",paraId:0},{value:"图形 Shape",paraId:1},{value:" 组成，主要通过自定义节点或自定义边时在 ",paraId:0},{value:"render",paraId:0},{value:" 方法中使用 ",paraId:0},{value:"upsert",paraId:0},{value:" 添加，G6 中支持以下的图形 Shape：",paraId:0},{value:"Circle - 圆形",paraId:2},{value:"Ellipse - 椭圆",paraId:3},{value:"Rect - 矩形",paraId:4},{value:"HTML - HTML元素",paraId:5},{value:"Image - 图片",paraId:6},{value:"Line - 线",paraId:7},{value:"Path - 路径",paraId:8},{value:"Polygon - 多边形",paraId:9},{value:"Polyline - 折线",paraId:10},{value:"Text - 文本",paraId:11},{value:"属性",paraId:12,tocIndex:1},{value:"描述",paraId:12,tocIndex:1},{value:"类型",paraId:12,tocIndex:1},{value:"必选",paraId:12,tocIndex:1},{value:"x",paraId:12,tocIndex:1},{value:"x 坐标",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"y",paraId:12,tocIndex:1},{value:"y 坐标",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"width",paraId:12,tocIndex:1},{value:"宽度",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"height",paraId:12,tocIndex:1},{value:"高度",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"✓",paraId:12,tocIndex:1},{value:"fill",paraId:12,tocIndex:1},{value:"填充颜色",paraId:12,tocIndex:1},{value:"string | Pattern | null",paraId:12,tocIndex:1},{value:"stroke",paraId:12,tocIndex:1},{value:"描边颜色",paraId:12,tocIndex:1},{value:"string | Pattern | null",paraId:12,tocIndex:1},{value:"opacity",paraId:12,tocIndex:1},{value:"整体透明度",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"fillOpacity",paraId:12,tocIndex:1},{value:"填充透明度",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"strokeOpacity",paraId:12,tocIndex:1},{value:"描边透明度",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"lineWidth",paraId:12,tocIndex:1},{value:"线宽度",paraId:12,tocIndex:1},{value:"number | string",paraId:12,tocIndex:1},{value:"lineCap",paraId:12,tocIndex:1},{value:"线段端点样式",paraId:12,tocIndex:1},{value:"butt",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"round",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"square",paraId:12,tocIndex:1},{value:"lineJoin",paraId:12,tocIndex:1},{value:"线段连接处样式",paraId:12,tocIndex:1},{value:"miter",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"round",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"bevel",paraId:12,tocIndex:1},{value:"lineDash",paraId:12,tocIndex:1},{value:"虚线配置",paraId:12,tocIndex:1},{value:"number | string | (string | number)[]",paraId:12,tocIndex:1},{value:"lineDashOffset",paraId:12,tocIndex:1},{value:"虚线偏移量",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowBlur",paraId:12,tocIndex:1},{value:"阴影模糊程度",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowColor",paraId:12,tocIndex:1},{value:"阴影颜色",paraId:12,tocIndex:1},{value:"string",paraId:12,tocIndex:1},{value:"shadowOffsetX",paraId:12,tocIndex:1},{value:"阴影 X 方向偏移",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"shadowOffsetY",paraId:12,tocIndex:1},{value:"阴影 Y 方向偏移",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"cursor",paraId:12,tocIndex:1},{value:"鼠标样式，",paraId:12,tocIndex:1},{value:"CSS 的 cursor",paraId:12,tocIndex:1},{value:" 选项都支持",paraId:12,tocIndex:1},{value:"string",paraId:12,tocIndex:1},{value:"zIndex",paraId:12,tocIndex:1},{value:"渲染层级",paraId:12,tocIndex:1},{value:"number",paraId:12,tocIndex:1},{value:"visibility",paraId:12,tocIndex:1},{value:"可见性",paraId:12,tocIndex:1},{value:"visible",paraId:12,tocIndex:1},{value:" | ",paraId:12,tocIndex:1},{value:"hidden",paraId:12,tocIndex:1},{value:"示例：",paraId:13,tocIndex:1},{value:"const shape = BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'circle',\n  {\n    cx: 100,\n    cy: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:14,tocIndex:1},{value:"设置或获取实例的绘图属性。",paraId:15,tocIndex:3},{value:"获取实例的属性值。",paraId:16,tocIndex:4},{value:"const width = shape.attr('width');\n",paraId:17,tocIndex:4},{value:"更新实例的单个绘图属性。",paraId:18,tocIndex:5},{value:"批量更新实例绘图属性。",paraId:19,tocIndex:6},{value:"shape.attr({\n  fill: '#999',\n  stroke: '#666',\n});\n",paraId:20,tocIndex:6},{value:"属性",paraId:21,tocIndex:8},{value:"描述",paraId:21,tocIndex:8},{value:"类型",paraId:21,tocIndex:8},{value:"必选",paraId:21,tocIndex:8},{value:"cx",paraId:21,tocIndex:8},{value:"圆心 x 坐标",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"cy",paraId:21,tocIndex:8},{value:"圆心 y 坐标",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"cz",paraId:21,tocIndex:8},{value:"圆心 z 坐标",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"r",paraId:21,tocIndex:8},{value:"圆的半径",paraId:21,tocIndex:8},{value:"number | string",paraId:21,tocIndex:8},{value:"✓",paraId:21,tocIndex:8},{value:"isBillboard",paraId:21,tocIndex:8},{value:"是否启用公告牌模式（始终面向相机）",paraId:21,tocIndex:8},{value:"boolean",paraId:21,tocIndex:8},{value:"isSizeAttenuation",paraId:21,tocIndex:8},{value:"是否启用大小衰减（随视距变化大小）",paraId:21,tocIndex:8},{value:"boolean",paraId:21,tocIndex:8},{value:"示例：",paraId:22,tocIndex:8},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'circle',\n  {\n    cx: 100,\n    cy: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:23,tocIndex:8},{value:"属性",paraId:24,tocIndex:10},{value:"描述",paraId:24,tocIndex:10},{value:"类型",paraId:24,tocIndex:10},{value:"必选",paraId:24,tocIndex:10},{value:"x",paraId:24,tocIndex:10},{value:"矩形 x 坐标",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"y",paraId:24,tocIndex:10},{value:"矩形 y 坐标",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"z",paraId:24,tocIndex:10},{value:"矩形 z 坐标",paraId:24,tocIndex:10},{value:"number",paraId:24,tocIndex:10},{value:"width",paraId:24,tocIndex:10},{value:"矩形宽度",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"✓",paraId:24,tocIndex:10},{value:"height",paraId:24,tocIndex:10},{value:"矩形高度",paraId:24,tocIndex:10},{value:"number | string",paraId:24,tocIndex:10},{value:"✓",paraId:24,tocIndex:10},{value:"isBillboard",paraId:24,tocIndex:10},{value:"是否启用公告牌模式",paraId:24,tocIndex:10},{value:"boolean",paraId:24,tocIndex:10},{value:"isSizeAttenuation",paraId:24,tocIndex:10},{value:"是否启用大小衰减",paraId:24,tocIndex:10},{value:"boolean",paraId:24,tocIndex:10},{value:"radius",paraId:24,tocIndex:10},{value:"矩形圆角半径",paraId:24,tocIndex:10},{value:"number | string | number[]",paraId:24,tocIndex:10},{value:"示例：",paraId:25,tocIndex:10},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'rect',\n  {\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    radius: 8,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:26,tocIndex:10},{value:"属性",paraId:27,tocIndex:12},{value:"描述",paraId:27,tocIndex:12},{value:"类型",paraId:27,tocIndex:12},{value:"必选",paraId:27,tocIndex:12},{value:"cx",paraId:27,tocIndex:12},{value:"椭圆中心 x 坐标",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"cy",paraId:27,tocIndex:12},{value:"椭圆中心 y 坐标",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"cz",paraId:27,tocIndex:12},{value:"椭圆中心 z 坐标",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"rx",paraId:27,tocIndex:12},{value:"椭圆 x 轴半径",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"ry",paraId:27,tocIndex:12},{value:"椭圆 y 轴半径",paraId:27,tocIndex:12},{value:"number | string",paraId:27,tocIndex:12},{value:"✓",paraId:27,tocIndex:12},{value:"isBillboard",paraId:27,tocIndex:12},{value:"是否启用公告牌模式",paraId:27,tocIndex:12},{value:"boolean",paraId:27,tocIndex:12},{value:"isSizeAttenuation",paraId:27,tocIndex:12},{value:"是否启用大小衰减",paraId:27,tocIndex:12},{value:"boolean",paraId:27,tocIndex:12},{value:"示例：",paraId:28,tocIndex:12},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'ellipse',\n  {\n    cx: 100,\n    cy: 100,\n    rx: 50,\n    ry: 80,\n    fill: 'blue',\n  },\n  container,\n);\n",paraId:29,tocIndex:12},{value:"属性",paraId:30,tocIndex:14},{value:"描述",paraId:30,tocIndex:14},{value:"类型",paraId:30,tocIndex:14},{value:"必选",paraId:30,tocIndex:14},{value:"x",paraId:30,tocIndex:14},{value:"HTML 元素 x 坐标",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"y",paraId:30,tocIndex:14},{value:"HTML 元素 y 坐标",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"innerHTML",paraId:30,tocIndex:14},{value:"HTML 内容",paraId:30,tocIndex:14},{value:"string | HTMLElement",paraId:30,tocIndex:14},{value:"✓",paraId:30,tocIndex:14},{value:"width",paraId:30,tocIndex:14},{value:"HTML 元素宽度",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"height",paraId:30,tocIndex:14},{value:"HTML 元素高度",paraId:30,tocIndex:14},{value:"number | string",paraId:30,tocIndex:14},{value:"示例：",paraId:31,tocIndex:14},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'html',\n  {\n    x: 100,\n    y: 100,\n    innerHTML: <div>content</div>,\n  },\n  container,\n);\n",paraId:32,tocIndex:14},{value:"属性",paraId:33,tocIndex:16},{value:"描述",paraId:33,tocIndex:16},{value:"类型",paraId:33,tocIndex:16},{value:"必选",paraId:33,tocIndex:16},{value:"x",paraId:33,tocIndex:16},{value:"图片 x 坐标",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"y",paraId:33,tocIndex:16},{value:"图片 y 坐标",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"z",paraId:33,tocIndex:16},{value:"图片 z 坐标",paraId:33,tocIndex:16},{value:"number",paraId:33,tocIndex:16},{value:"src",paraId:33,tocIndex:16},{value:"图片资源路径或 HTML 图片元素",paraId:33,tocIndex:16},{value:"string | HTMLImageElement",paraId:33,tocIndex:16},{value:"✓",paraId:33,tocIndex:16},{value:"width",paraId:33,tocIndex:16},{value:"图片宽度",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"height",paraId:33,tocIndex:16},{value:"图片高度",paraId:33,tocIndex:16},{value:"number | string",paraId:33,tocIndex:16},{value:"isBillboard",paraId:33,tocIndex:16},{value:"是否启用公告牌模式",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"isSizeAttenuation",paraId:33,tocIndex:16},{value:"是否启用大小衰减",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"billboardRotation",paraId:33,tocIndex:16},{value:"公告牌模式下的旋转角度",paraId:33,tocIndex:16},{value:"number",paraId:33,tocIndex:16},{value:"keepAspectRatio",paraId:33,tocIndex:16},{value:"是否保持图片原有宽高比",paraId:33,tocIndex:16},{value:"boolean",paraId:33,tocIndex:16},{value:"示例：",paraId:34,tocIndex:16},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'image',\n  {\n    x: 100,\n    y: 100,\n    src: 'http://',\n  },\n  container,\n);\n",paraId:35,tocIndex:16},{value:"属性",paraId:36,tocIndex:18},{value:"描述",paraId:36,tocIndex:18},{value:"类型",paraId:36,tocIndex:18},{value:"必选",paraId:36,tocIndex:18},{value:"x1",paraId:36,tocIndex:18},{value:"线段起点 x 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"y1",paraId:36,tocIndex:18},{value:"线段起点 y 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"x2",paraId:36,tocIndex:18},{value:"线段终点 x 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"y2",paraId:36,tocIndex:18},{value:"线段终点 y 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"✓",paraId:36,tocIndex:18},{value:"z1",paraId:36,tocIndex:18},{value:"线段起点 z 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"z2",paraId:36,tocIndex:18},{value:"线段终点 z 坐标",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"isBillboard",paraId:36,tocIndex:18},{value:"是否启用公告牌模式",paraId:36,tocIndex:18},{value:"boolean",paraId:36,tocIndex:18},{value:"isSizeAttenuation",paraId:36,tocIndex:18},{value:"是否启用大小衰减",paraId:36,tocIndex:18},{value:"boolean",paraId:36,tocIndex:18},{value:"markerStart",paraId:36,tocIndex:18},{value:"线段起点的标记",paraId:36,tocIndex:18},{value:"DisplayObject | null",paraId:36,tocIndex:18},{value:"markerEnd",paraId:36,tocIndex:18},{value:"线段终点的标记",paraId:36,tocIndex:18},{value:"DisplayObject | null",paraId:36,tocIndex:18},{value:"markerStartOffset",paraId:36,tocIndex:18},{value:"起点标记的偏移量",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"markerEndOffset",paraId:36,tocIndex:18},{value:"终点标记的偏移量",paraId:36,tocIndex:18},{value:"number",paraId:36,tocIndex:18},{value:"示例：",paraId:37,tocIndex:18},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'line',\n  {\n    x1: 100,\n    y1: 100,\n    x2: 150,\n    y2: 150,\n    stroke: 'blue',\n  },\n  container,\n);\n",paraId:38,tocIndex:18},{value:"属性",paraId:39,tocIndex:20},{value:"描述",paraId:39,tocIndex:20},{value:"类型",paraId:39,tocIndex:20},{value:"必选",paraId:39,tocIndex:20},{value:"d",paraId:39,tocIndex:20},{value:"路径定义字符串或数组",paraId:39,tocIndex:20},{value:"string | PathArray",paraId:39,tocIndex:20},{value:"✓",paraId:39,tocIndex:20},{value:"markerStart",paraId:39,tocIndex:20},{value:"路径起点的标记",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerEnd",paraId:39,tocIndex:20},{value:"路径终点的标记",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerMid",paraId:39,tocIndex:20},{value:"路径中间点的标记",paraId:39,tocIndex:20},{value:"DisplayObject | null",paraId:39,tocIndex:20},{value:"markerStartOffset",paraId:39,tocIndex:20},{value:"起点标记的偏移量",paraId:39,tocIndex:20},{value:"number",paraId:39,tocIndex:20},{value:"markerEndOffset",paraId:39,tocIndex:20},{value:"终点标记的偏移量",paraId:39,tocIndex:20},{value:"number",paraId:39,tocIndex:20},{value:"isBillboard",paraId:39,tocIndex:20},{value:"是否启用公告牌模式",paraId:39,tocIndex:20},{value:"boolean",paraId:39,tocIndex:20},{value:"isSizeAttenuation",paraId:39,tocIndex:20},{value:"是否启用大小衰减",paraId:39,tocIndex:20},{value:"boolean",paraId:39,tocIndex:20},{value:"fillRule",paraId:39,tocIndex:20},{value:"填充规则",paraId:39,tocIndex:20},{value:"nonzero",paraId:39,tocIndex:20},{value:" | ",paraId:39,tocIndex:20},{value:"evenodd",paraId:39,tocIndex:20},{value:"示例：",paraId:40,tocIndex:20},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'path',\n  {\n    d: 'M 0,0 L 20,10 L 20,-10 Z',\n    stroke: 'blue',\n  },\n  container,\n);\n",paraId:41,tocIndex:20},{value:"属性",paraId:42,tocIndex:22},{value:"描述",paraId:42,tocIndex:22},{value:"类型",paraId:42,tocIndex:22},{value:"必选",paraId:42,tocIndex:22},{value:"points",paraId:42,tocIndex:22},{value:"多边形的顶点数组",paraId:42,tocIndex:22},{value:"([number, number] | [number, number, number])[]",paraId:42,tocIndex:22},{value:"✓",paraId:42,tocIndex:22},{value:"markerStart",paraId:42,tocIndex:22},{value:"多边形起点的标记",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerEnd",paraId:42,tocIndex:22},{value:"多边形终点的标记",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerMid",paraId:42,tocIndex:22},{value:"多边形中间点的标记",paraId:42,tocIndex:22},{value:"DisplayObject | null",paraId:42,tocIndex:22},{value:"markerStartOffset",paraId:42,tocIndex:22},{value:"起点标记的偏移量",paraId:42,tocIndex:22},{value:"number",paraId:42,tocIndex:22},{value:"markerEndOffset",paraId:42,tocIndex:22},{value:"终点标记的偏移量",paraId:42,tocIndex:22},{value:"number",paraId:42,tocIndex:22},{value:"isClosed",paraId:42,tocIndex:22},{value:"是否闭合多边形",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"isBillboard",paraId:42,tocIndex:22},{value:"是否启用公告牌模式",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"isSizeAttenuation",paraId:42,tocIndex:22},{value:"是否启用大小衰减",paraId:42,tocIndex:22},{value:"boolean",paraId:42,tocIndex:22},{value:"示例：",paraId:43,tocIndex:22},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'polygon',\n  {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  container,\n);\n",paraId:44,tocIndex:22},{value:"属性",paraId:45,tocIndex:24},{value:"描述",paraId:45,tocIndex:24},{value:"类型",paraId:45,tocIndex:24},{value:"必选",paraId:45,tocIndex:24},{value:"points",paraId:45,tocIndex:24},{value:"折线的顶点数组",paraId:45,tocIndex:24},{value:"([number, number] | [number, number, number])[]",paraId:45,tocIndex:24},{value:"✓",paraId:45,tocIndex:24},{value:"markerStart",paraId:45,tocIndex:24},{value:"折线起点的标记",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerEnd",paraId:45,tocIndex:24},{value:"折线终点的标记",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerMid",paraId:45,tocIndex:24},{value:"折线中间点的标记",paraId:45,tocIndex:24},{value:"DisplayObject | null",paraId:45,tocIndex:24},{value:"markerStartOffset",paraId:45,tocIndex:24},{value:"起点标记的偏移量",paraId:45,tocIndex:24},{value:"number",paraId:45,tocIndex:24},{value:"markerEndOffset",paraId:45,tocIndex:24},{value:"终点标记的偏移量",paraId:45,tocIndex:24},{value:"number",paraId:45,tocIndex:24},{value:"isBillboard",paraId:45,tocIndex:24},{value:"是否启用公告牌模式",paraId:45,tocIndex:24},{value:"boolean",paraId:45,tocIndex:24},{value:"isSizeAttenuation",paraId:45,tocIndex:24},{value:"是否启用大小衰减",paraId:45,tocIndex:24},{value:"boolean",paraId:45,tocIndex:24},{value:"示例：",paraId:46,tocIndex:24},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'polyline',\n  {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  container,\n);\n",paraId:47,tocIndex:24},{value:"属性",paraId:48,tocIndex:26},{value:"描述",paraId:48,tocIndex:26},{value:"类型",paraId:48,tocIndex:26},{value:"必选",paraId:48,tocIndex:26},{value:"x",paraId:48,tocIndex:26},{value:"文本 x 坐标",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"y",paraId:48,tocIndex:26},{value:"文本 y 坐标",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"z",paraId:48,tocIndex:26},{value:"文本 z 坐标",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"text",paraId:48,tocIndex:26},{value:"文本内容",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"✓",paraId:48,tocIndex:26},{value:"fontSize",paraId:48,tocIndex:26},{value:"字体大小",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"fontFamily",paraId:48,tocIndex:26},{value:"字体族",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"fontStyle",paraId:48,tocIndex:26},{value:"字体样式",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"italic",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"oblique",paraId:48,tocIndex:26},{value:"fontWeight",paraId:48,tocIndex:26},{value:"字体粗细",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"bold",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"bolder",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"lighter",paraId:48,tocIndex:26},{value:" | number",paraId:48,tocIndex:26},{value:"fontVariant",paraId:48,tocIndex:26},{value:"字体变种",paraId:48,tocIndex:26},{value:"normal",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"small-caps",paraId:48,tocIndex:26},{value:" | string",paraId:48,tocIndex:26},{value:"textAlign",paraId:48,tocIndex:26},{value:"文本水平对齐方式",paraId:48,tocIndex:26},{value:"start",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"center",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"middle",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"end",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"left",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"right",paraId:48,tocIndex:26},{value:"textBaseline",paraId:48,tocIndex:26},{value:"文本基线",paraId:48,tocIndex:26},{value:"top",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"hanging",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"middle",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"alphabetic",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"ideographic",paraId:48,tocIndex:26},{value:" | `bottom'",paraId:48,tocIndex:26},{value:"textOverflow",paraId:48,tocIndex:26},{value:"文本溢出处理方式",paraId:48,tocIndex:26},{value:"clip",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"ellipsis",paraId:48,tocIndex:26},{value:" | string",paraId:48,tocIndex:26},{value:"lineHeight",paraId:48,tocIndex:26},{value:"行高",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"letterSpacing",paraId:48,tocIndex:26},{value:"字间距",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"maxLines",paraId:48,tocIndex:26},{value:"最大行数",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"textPath",paraId:48,tocIndex:26},{value:"文本路径",paraId:48,tocIndex:26},{value:"Path",paraId:48,tocIndex:26},{value:"textPathSide",paraId:48,tocIndex:26},{value:"文本路径侧边",paraId:48,tocIndex:26},{value:"left",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"right",paraId:48,tocIndex:26},{value:"textPathStartOffset",paraId:48,tocIndex:26},{value:"文本路径起始偏移",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"textDecorationLine",paraId:48,tocIndex:26},{value:"文本装饰线",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"textDecorationColor",paraId:48,tocIndex:26},{value:"文本装饰线颜色",paraId:48,tocIndex:26},{value:"string",paraId:48,tocIndex:26},{value:"textDecorationStyle",paraId:48,tocIndex:26},{value:"文本装饰线样式",paraId:48,tocIndex:26},{value:"solid",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"double",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"dotted",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"dashed",paraId:48,tocIndex:26},{value:" | ",paraId:48,tocIndex:26},{value:"wavy",paraId:48,tocIndex:26},{value:"isBillboard",paraId:48,tocIndex:26},{value:"是否启用公告牌模式",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"billboardRotation",paraId:48,tocIndex:26},{value:"公告牌旋转角度",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"isSizeAttenuation",paraId:48,tocIndex:26},{value:"是否启用大小衰减",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"wordWrap",paraId:48,tocIndex:26},{value:"是否自动换行",paraId:48,tocIndex:26},{value:"boolean",paraId:48,tocIndex:26},{value:"wordWrapWidth",paraId:48,tocIndex:26},{value:"自动换行宽度",paraId:48,tocIndex:26},{value:"number",paraId:48,tocIndex:26},{value:"dx",paraId:48,tocIndex:26},{value:"X 方向偏移",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"dy",paraId:48,tocIndex:26},{value:"Y 方向偏移",paraId:48,tocIndex:26},{value:"number | string",paraId:48,tocIndex:26},{value:"示例：",paraId:49,tocIndex:26},{value:"BaseShape.upsert(\n  // 指定图形 key，需要保证在同一个自定义元素类型中保持唯一性\n  'shape',\n  'text',\n  {\n    x: 100,\n    y: 100,\n    text: 'text',\n  },\n  container,\n);\n",paraId:50,tocIndex:26},{value:"多行文字显示：",paraId:51,tocIndex:26},{value:"{\n  wordWrap: true,\n  wordWrapWidth: 100,\n  maxLines: 4,\n  textOverflow: 'ellipsis',\n}\n",paraId:52,tocIndex:26}]},91949:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(47895);const d=[{value:"状态(State)是指元素存在的状态，例如",paraId:0,tocIndex:0},{value:"选中、悬停、激活",paraId:0,tocIndex:0},{value:"等。状态可以使得元素在不同的状态下展示不同的样式，帮助用户更直观的理解图中的信息。",paraId:0,tocIndex:0},{value:"具有以下几个关键特点：",paraId:1,tocIndex:0},{value:"多状态并存",paraId:2,tocIndex:0},{value:'：一个元素可以同时拥有多个状态，比如同时处于"选中"和"高亮"状态',paraId:2,tocIndex:0},{value:"样式层叠",paraId:2,tocIndex:0},{value:"：多个状态的样式会按照优先级叠加，后应用的状态样式会覆盖先前的样式",paraId:2,tocIndex:0},{value:"灵活自定义",paraId:2,tocIndex:0},{value:"：除了预设状态外，用户可以根据业务需求定义任意自定义状态",paraId:2,tocIndex:0},{value:"G6 提供了几种常用的状态类型：",paraId:3,tocIndex:1},{value:"selected",paraId:4,tocIndex:1},{value:"：选中状态，通常用于表示用户已选择的元素",paraId:4,tocIndex:1},{value:"active",paraId:4,tocIndex:1},{value:"：激活状态，通常用于表示当前交互的活跃元素",paraId:4,tocIndex:1},{value:"highlight",paraId:4,tocIndex:1},{value:"：高亮状态，通常用于强调显示特定元素",paraId:4,tocIndex:1},{value:"inactive",paraId:4,tocIndex:1},{value:"：非活跃状态，通常用于淡化非关注元素",paraId:4,tocIndex:1},{value:"disable",paraId:4,tocIndex:1},{value:"：禁用状态，通常用于表示不可交互的元素",paraId:4,tocIndex:1},{value:"注意",paraId:5,tocIndex:1},{value:'：当一个元素没有设置任何状态时，它处于"默认状态"。预设状态并非强制使用，用户可以根据需求定义自己的状态类型。',paraId:5,tocIndex:1},{value:"目前 G6 支持在样式映射中配置状态样式，例如：",paraId:6,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  node: {\n    // 默认状态的样式\n    style: {\n      fill: '#C6E5FF',\n      stroke: '#5B8FF9',\n      lineWidth: 1,\n    },\n    // 各状态下的样式\n    state: {\n      selected: {\n        fill: '#95D6FB',\n        stroke: '#1890FF',\n        lineWidth: 2,\n        shadowColor: '#1890FF',\n        shadowBlur: 10,\n      },\n      highlight: {\n        stroke: '#FF6A00',\n        lineWidth: 2,\n      },\n      disable: {\n        fill: '#ECECEC',\n        stroke: '#BFBFBF',\n        opacity: 0.5,\n      },\n    },\n  },\n\n  // 边的默认样式和状态样式\n  edge: {\n    style: {\n      /* 默认样式 */\n    },\n    state: {\n      selected: {\n        /* 选中状态样式 */\n      },\n      highlight: {\n        /* 高亮状态样式 */\n      },\n      // 其他状态...\n    },\n  },\n\n  // 组合的默认样式和状态样式\n  combo: {\n    style: {\n      /* 默认样式 */\n    },\n    state: {\n      selected: {\n        /* 选中状态样式 */\n      },\n      // 其他状态...\n    },\n  },\n});\n",paraId:7,tocIndex:3},{value:"在绘制之前，可以在数据中配置元素的初始状态：",paraId:8,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      states: ['selected'], // 该节点初始为选中状态\n      // 其他节点属性...\n    },\n    {\n      id: 'node2',\n      states: ['disabled'], // 该节点初始为禁用状态\n      // 其他节点属性...\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n      states: ['highlight'], // 该边初始为高亮状态\n      // 其他边属性...\n    },\n  ],\n};\n",paraId:9,tocIndex:4},{value:"更常见的场景是通过用户交互动态改变元素的状态：",paraId:10,tocIndex:4},{value:"// 示例1：将单个节点设为选中状态\ngraph.setElementState('node1', 'selected');\n\n// 示例2：同时设置多个状态\ngraph.setElementState('node2', ['highlight', 'active']);\n\n// 示例3：批量设置多个元素的状态\ngraph.setElementState({\n  node1: ['selected'],\n  node2: ['highlight'],\n  edge1: ['active'],\n});\n\n// 示例4：移除状态（恢复到默认状态）\ngraph.setElementState('node1', []);\n",paraId:11,tocIndex:4},{value:"G6 提供了多个 API 用于获取状态，或者判断元素是否处于某个状态：",paraId:12,tocIndex:5},{value:"// 获取指定元素的所有状态（返回状态数组）\nconst states = graph.getElementState('node1');\nconsole.log(states); // 例如：['selected', 'highlight']\n",paraId:13,tocIndex:5},{value:"当元素仅存在 ",paraId:14,tocIndex:5},{value:"默认状态",paraId:14,tocIndex:5},{value:" 时，",paraId:14,tocIndex:5},{value:"getElementState",paraId:14,tocIndex:5},{value:" 返回值为 ",paraId:14,tocIndex:5},{value:"[]",paraId:14,tocIndex:5},{value:"。",paraId:14,tocIndex:5},{value:"// 获取所有处于指定状态的节点数据\nconst selectedNodes = graph.getElementDataByState('node', 'selected');\n",paraId:15,tocIndex:5},{value:"当一个元素处于多个状态时，会根据状态值中的顺序来确定状态的优先级。例如，如果一个节点同时处于 ",paraId:16,tocIndex:6},{value:"['selected', 'highlight']",paraId:16,tocIndex:6},{value:" 状态，则最终的状态样式为：",paraId:16,tocIndex:6},{value:"最终样式 = 默认状态样式 + 选中状态样式 + 高亮状态样式",paraId:17,tocIndex:6},{value:"如果不同状态的样式有冲突（如都设置了 ",paraId:18,tocIndex:6},{value:"fill",paraId:18,tocIndex:6},{value:" 属性），后面的状态样式会覆盖前面的样式。",paraId:18,tocIndex:6},{value:"您可以根据业务需求创建自定义状态：",paraId:19,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  node: {\n    style: {\n      /* 默认样式 */\n    },\n    state: {\n      // 自定义状态：警告\n      warning: {\n        fill: '#FFF7E6',\n        stroke: '#FA8C16',\n        lineWidth: 2,\n        lineDash: [4, 4],\n      },\n      // 自定义状态：加密\n      encrypted: {\n        fill: '#E6F7FF',\n        stroke: '#1890FF',\n        icon: {\n          show: true,\n          img: 'https://path/to/lock-icon.png',\n          width: 16,\n          height: 16,\n        },\n      },\n    },\n  },\n});\n",paraId:20,tocIndex:7},{value:"应用自定义状态：",paraId:21,tocIndex:7},{value:"graph.setElementState('node1', 'warning');\ngraph.setElementState('node2', 'encrypted');\n",paraId:22,tocIndex:7}]},5426:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46118);const d=[]},46977:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(37331);const d=[{value:"Extension",paraId:0,tocIndex:0},{value:" 是 G6 中的一个概念，是所有可注册内容的统称，包含元素、交互、布局、插件等。",paraId:0,tocIndex:0},{value:"Plugin",paraId:1,tocIndex:0},{value:" 是 G6 提供的灵活扩展机制，是一种特殊的 ",paraId:1,tocIndex:0},{value:"Extension",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"以 label 为例，设置 ",paraId:2,tocIndex:1},{value:"labelWordWrap",paraId:2,tocIndex:1},{value:" 和 ",paraId:2,tocIndex:1},{value:"labelWordWrapWidth",paraId:2,tocIndex:1},{value:" 即可实现文本超出省略。",paraId:2,tocIndex:1},{value:"{\n  labelText: 'This is a long text',\n  labelWordWrap: true,\n  labelWordWrapWidth: 50,\n}\n",paraId:3,tocIndex:1},{value:"一些插件或交互支持配置触发按键，请使用标准按键名：如 ",paraId:4,tocIndex:2},{value:"Control",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Shift",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Alt",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"Meta",paraId:4,tocIndex:2},{value:"，以及字母、数字、符号等。",paraId:4,tocIndex:2},{value:"请确保数据更新后调用 ",paraId:5,tocIndex:3},{value:"graph.draw()",paraId:5,tocIndex:3},{value:" 或者 ",paraId:5,tocIndex:3},{value:"graph.render()",paraId:5,tocIndex:3},{value:" 更新画布。",paraId:5,tocIndex:3},{value:"G6 对于多次数据更新，会在 ",paraId:6,tocIndex:3},{value:"draw",paraId:6,tocIndex:3},{value:" 或 ",paraId:6,tocIndex:3},{value:"render",paraId:6,tocIndex:3},{value:" 后合并差异并统一更新画布，以提高性能。",paraId:6,tocIndex:3},{value:"当多个交互之间存在冲突时，你可以设置交互的启用时机来避免多个交互被同时触发。",paraId:7,tocIndex:4},{value:"以 ",paraId:8,tocIndex:4},{value:"drag-canvas",paraId:8,tocIndex:4},{value:" 和 ",paraId:8,tocIndex:4},{value:"brush-select",paraId:8,tocIndex:4},{value:" 为例，如果直接配置这两个交互，当指针在画布上进行拖拽时，会导致交互异常。可以设置为在按下 ",paraId:8,tocIndex:4},{value:"shift",paraId:8,tocIndex:4},{value:" 键时禁用 ",paraId:8,tocIndex:4},{value:"drag-canvas",paraId:8,tocIndex:4},{value:" 交互。",paraId:8,tocIndex:4},{value:"behaviors: [\n  {\n    type: 'drag-canvas',\n    enable: (event) => event.shiftKey === false,\n  },\n  {\n    type: 'brush-select',\n  },\n];\n",paraId:9,tocIndex:4},{value:"此时，当按下 ",paraId:10,tocIndex:4},{value:"shift",paraId:10,tocIndex:4},{value:" 键时，",paraId:10,tocIndex:4},{value:"drag-canvas",paraId:10,tocIndex:4},{value:" 交互会被禁用，",paraId:10,tocIndex:4},{value:"brush-select",paraId:10,tocIndex:4},{value:" 交互会不会受到影响。",paraId:10,tocIndex:4},{value:"draw",paraId:11,tocIndex:5},{value:" 和 ",paraId:11,tocIndex:5},{value:"render",paraId:11,tocIndex:5},{value:" 都会执行绘制操作，但 ",paraId:11,tocIndex:5},{value:"render",paraId:11,tocIndex:5},{value:" 会在 ",paraId:11,tocIndex:5},{value:"draw",paraId:11,tocIndex:5},{value:" 的基础上额外进行",paraId:11,tocIndex:5},{value:"布局",paraId:11,tocIndex:5},{value:"、",paraId:11,tocIndex:5},{value:"视图自适应",paraId:11,tocIndex:5},{value:"操作。",paraId:11,tocIndex:5},{value:"可以简单理解为：",paraId:12,tocIndex:5},{value:"render",paraId:12,tocIndex:5},{value:" = ",paraId:12,tocIndex:5},{value:"draw",paraId:12,tocIndex:5},{value:" + ",paraId:12,tocIndex:5},{value:"layout",paraId:12,tocIndex:5},{value:" + ",paraId:12,tocIndex:5},{value:"fitView",paraId:12,tocIndex:5},{value:"/",paraId:12,tocIndex:5},{value:"fitCenter",paraId:12,tocIndex:5},{value:"。",paraId:12,tocIndex:5},{value:"原因一：被样式映射中的样式覆盖",paraId:13,tocIndex:6},{value:"{\n  data: [{ id: 'node-1', style: { fill: 'orange' } }],\n  node: {\n    style: {\n      fill: 'pink', // 无论数据中的样式如何，都会被这里的样式覆盖\n    }\n  }\n}\n",paraId:14,tocIndex:6},{value:"解决方式：使用回调方法，优先从数据中获取样式以提高数据优先级",paraId:15,tocIndex:6},{value:"{\n  node: {\n    style: (data) => {\n      return {\n        fill: data.style?.fill || 'pink',\n      };\n    };\n  }\n}\n",paraId:16,tocIndex:6},{value:"在使用 Canvas 渲染器进行绘制时，可能会出现残影现象，这些图形被称为“脏矩形”。该现象出现的原因是底层渲染引擎为了提高性能，每次绘制时只会绘制发生变化的部分，而不会清空整个画布。",paraId:17,tocIndex:7},{value:"但是，当画布中的图形发生变化时，可能会出现部分图形未被正确清除的情况，从而导致残影现象。",paraId:18,tocIndex:7},{value:"可以通过以下方式解决：",paraId:19,tocIndex:7},{value:"使用 SVG 或 WebGL 渲染器；",paraId:20,tocIndex:7},{value:"检查节点中的图形样式中是否存在非法值，例如 null、NaN 等；",paraId:20,tocIndex:7},{value:"尽量使用整数作为数值型的样式值，例如 r、width、height、fontSize 等；",paraId:20,tocIndex:7},{value:"请避免使用 Vue 响应式数据、Immer.js 等包装过的对象作为 G6 的数据源，因为这些对象会在内部进行深度监听，甚至冻结数据对象，导致 G6 无法正常操作数据。",paraId:21,tocIndex:8},{value:"WARNING in ./node_modules/@antv/util/esm/path/util/segment-cubic-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-cubic-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-cubic-factory.ts'\n\nWARNING in ./node_modules/@antv/util/esm/path/util/segment-line-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-line-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-line-factory.ts'\n\nWARNING in ./node_modules/@antv/util/esm/path/util/segment-quad-factory.js\nModule Warning (from ./node_modules/source-map-loader/dist/cjs.js):\nFailed to parse source map from '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-quad-factory.ts' file: Error: ENOENT: no such file or directory, open '/Users/xxx/workspace/antv-g6-learn/node_modules/@antv/util/esm/path/util/src/path/util/segment-quad-factory.ts'\n",paraId:22,tocIndex:9},{value:"解释: ",paraId:23,tocIndex:9},{value:"@antv/util",paraId:23,tocIndex:9},{value:" 是 AntV 底层依赖的工具库。",paraId:23,tocIndex:9},{value:"从上面部分警告信息中我们可以得知是 G6 依赖的 ",paraId:24,tocIndex:9},{value:"@antv/util",paraId:24,tocIndex:9},{value:" 工具库的类型声明文件存在问题，",paraId:24,tocIndex:9},{value:"该警告不影响项目正常运行",paraId:24,tocIndex:9},{value:"。",paraId:24,tocIndex:9},{value:"该信息只会在 TypeScript 项目中出现，关闭办法如下:",paraId:25,tocIndex:9},{value:"关闭TypeScript 的sourcemap源码映射",paraId:26,tocIndex:9},{value:"在项目根目录下创建",paraId:27,tocIndex:9},{value:".env",paraId:27,tocIndex:9},{value:"文件，并添加以下内容:",paraId:27,tocIndex:9},{value:"GENERATE_SOURCEMAP=false\n",paraId:28,tocIndex:9},{value:"单独禁用指定模块的源码映射",paraId:29,tocIndex:9},{value:"直接禁用sourcemap映射的方式过于简单粗暴，对于部分可能有调试需求的开发者不太友好，所以也可以通过在构建工具单独配置，单独禁用这些特定模块的源码映射。",paraId:30,tocIndex:9},{value:"a. webpack配置",paraId:31,tocIndex:9},{value:"module.exports = {\n  // ...其他配置\n  module: {\n    rules: [\n      {\n        test: /node_modules\\/@antv\\/util\\/esm\\/path\\/util\\/.+\\.js$/,\n        use: ['source-map-loader'],\n        enforce: 'pre',\n      },\n    ],\n  },\n  ignoreWarnings: [/Failed to parse source map/],\n};\n",paraId:32,tocIndex:9},{value:"b. vite配置",paraId:33,tocIndex:9},{value:"import { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      onwarn(warning, warn) {\n        // 忽略特定模块的警告\n        if (warning.code === 'MODULE_LEVEL_DIRECTIVE' && warning.message.includes('@antv/util')) {\n          return;\n        }\n        // 对于其他警告,使用默认的警告处理\n        warn(warning);\n      },\n    },\n  },\n});\n",paraId:34,tocIndex:9},{value:"在 v5 中内置颜色有：export type BuiltInPalette = 'spectral' | 'oranges' | 'greens' | 'blues';",paraId:35,tocIndex:10},{value:"解决办法如下:",paraId:36,tocIndex:10},{value:"const graph = new Graph({\n  container: '#ID',\n  width: number,\n  height: number,\n  data,\n  node: {\n    palette: {\n      field: 'color',\n      // right\n      color: ['red', 'green', 'blue'],\n\n      // error\n      // color: 'red'\n    },\n  },\n});\n",paraId:37,tocIndex:10},{value:"在 v5 中内置插件有",paraId:38,tocIndex:11},{value:"bubble-sets",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"edge-filter-lens",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"grid-line",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"background",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"contextmenu",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"fisheye",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"fullscreen",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"history",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"hull",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"legend",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"minimap",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"snapline",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"timebar",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"toolbar",paraId:38,tocIndex:11},{value:" ",paraId:38,tocIndex:11},{value:"tooltip",paraId:38,tocIndex:11},{value:" >",paraId:38,tocIndex:11},{value:"watermark",paraId:38,tocIndex:11},{value:". ",paraId:38,tocIndex:11},{value:"具体参考",paraId:38,tocIndex:11},{value:"实际原因: ",paraId:39,tocIndex:11},{value:"graph",paraId:39,tocIndex:11},{value:"实例的父容器",paraId:39,tocIndex:11},{value:"<div ref={containerRef} />",paraId:39,tocIndex:11},{value:"本身没有设置高度，G6 Graph图 可能无法正确计算出合适的大小。",paraId:39,tocIndex:11},{value:"如果要启用",paraId:39,tocIndex:11},{value:"grid-line",paraId:39,tocIndex:11},{value:"画布插件，需要给父元素 div 设置宽高，在 graph 配置中是无效的",paraId:39,tocIndex:11},{value:"。",paraId:39,tocIndex:11},{value:"统一使用",paraId:40,tocIndex:12},{value:"new Graph({xxx})",paraId:40,tocIndex:12},{value:"。",paraId:40,tocIndex:12},{value:"在 v5 中内置布局有",paraId:41,tocIndex:12},{value:"antv-dagre",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"combo-combined",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"compact-box",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"force-atlas2",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"circular",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"concentric",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"d3-force",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"dagre",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"dendrogram",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"force",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"fruchterman",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"grid",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"indented",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"mds",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"mindmap",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"radial",paraId:41,tocIndex:12},{value:" ",paraId:41,tocIndex:12},{value:"random",paraId:41,tocIndex:12},{value:". ",paraId:41,tocIndex:12},{value:"具体参考",paraId:41,tocIndex:12},{value:"v5合并了图和树图，不再通过实例化",paraId:42,tocIndex:12},{value:"G6.TreeGraph",paraId:42,tocIndex:12},{value:"创建树图布局，并且移除该方式。具体参考",paraId:42,tocIndex:12},{value:"特性-合并图与树图",paraId:43,tocIndex:12},{value:"配置",paraId:44,tocIndex:13},{value:"portLinkToCenter",paraId:44,tocIndex:13},{value:"为 ",paraId:44,tocIndex:13},{value:"true",paraId:44,tocIndex:13},{value:"。",paraId:44,tocIndex:13},{value:"const graph = new Graph({\n  container: xxx,\n  node: {\n    type: 'rect',\n    style: {\n      portLinkToCenter: true,\n    },\n  },\n  edge: {\n    type: 'xxx',\n  },\n});\n",paraId:45,tocIndex:13},{value:"参考方案：",paraId:46,tocIndex:14},{value:"#6347",paraId:46,tocIndex:14},{value:"const measureTextWidth = memoize(\n  (text: string, font: any = {}): TextMetrics => {\n    const { fontSize, fontFamily = 'sans-serif', fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    // @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\n    ctx.font = [fontStyle, fontWeight, fontVariant, `${fontSize}px`, fontFamily].join(' ');\n    return ctx.measureText(isString(text) ? text : '').width;\n  },\n  (text: string, font = {}) => [text, ...values(font)].join(''),\n);\n\nconst graph = new G6.Graph({\n    node: {\n          style: { size: d => [measureTextWidth(d.label, {...}) , xxx] },\n    }\n})\n",paraId:47,tocIndex:14},{value:"可以手动指定",paraId:48,tocIndex:15},{value:"IPointerEvent",paraId:48,tocIndex:15},{value:"类型。具体参考",paraId:48,tocIndex:15},{value:"#6346",paraId:48,tocIndex:15},{value:"import { NodeEvent } from '@antv/g6';\nimport type { IPointerEvent } from '@antv/g6';\n\ngraph.on(NodeEvent.CLICK, (event: IPointerEvent) => {\n  // handler\n});\n",paraId:49,tocIndex:15},{value:"更新节点数据，",paraId:50,tocIndex:16},{value:"combo",paraId:50,tocIndex:16},{value:" 值设置为 ",paraId:50,tocIndex:16},{value:"null",paraId:50,tocIndex:16},{value:"。",paraId:50,tocIndex:16},{value:"graph.updateNodeData([{ id: 'node-id', combo: null }]);\n",paraId:51,tocIndex:16}]},4428:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(2506);const d=[{value:"在使用 3D 能力之前，请首先安装 3D 扩展包：",paraId:0,tocIndex:0},{value:"npm install @antv/g6-extension-3d --save\n",paraId:1,tocIndex:0},{value:"该扩展包导出了以下内容：",paraId:2,tocIndex:0},{value:"renderer：3D 渲染器",paraId:3,tocIndex:0},{value:"元素",paraId:4,tocIndex:0},{value:"Capsule：胶囊节点",paraId:5,tocIndex:0},{value:"Cone：圆锥节点",paraId:5,tocIndex:0},{value:"Cube：立方体节点",paraId:5,tocIndex:0},{value:"Cylinder：圆柱节点",paraId:5,tocIndex:0},{value:"Sphere：球体节点",paraId:5,tocIndex:0},{value:"Torus：圆环节点",paraId:5,tocIndex:0},{value:"Line3D：3D 线",paraId:5,tocIndex:0},{value:"布局",paraId:6,tocIndex:0},{value:"D3Force3DLayout：3D 力导向布局",paraId:7,tocIndex:0},{value:"交互",paraId:8,tocIndex:0},{value:"DragCanvas3D：拖拽画布",paraId:9,tocIndex:0},{value:"ObserveCanvas3D：观察画布",paraId:9,tocIndex:0},{value:"RollCanvas3D：旋转画布",paraId:9,tocIndex:0},{value:"ZoomCanvas3D：缩放画布",paraId:9,tocIndex:0},{value:"插件",paraId:10,tocIndex:0},{value:"Light：光源",paraId:11,tocIndex:0},{value:"其中下列扩展是必须的：",paraId:12,tocIndex:1},{value:"renderer",paraId:13,tocIndex:1},{value:"至少一个 3D 节点",paraId:13,tocIndex:1},{value:"Line3D",paraId:13,tocIndex:1},{value:"Light",paraId:13,tocIndex:1},{value:"renderer 无需注册，实例化 Graph 过程中传入即可。",paraId:14,tocIndex:1},{value:"使用如下方式进行注册：",paraId:15,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { Sphere, Line3D, Light } from '@antv/g6-extension-3d';\n\nregister(ExtensionCategory.NODE, 'sphere', Sphere);\nregister(ExtensionCategory.EDGE, 'line3d', Line3D);\nregister(ExtensionCategory.PLUGIN, 'light', Light);\n",paraId:16,tocIndex:1},{value:"完成上述步骤后，即可创建 3D 图：",paraId:17,tocIndex:2},{value:"import { Graph } from '@antv/g6';\nimport { renderer } from '@antv/g6-extension-3d';\n\nconst graph = new Graph({\n  // ... 其他配置\n  // 使用 3D 渲染器\n  renderer,\n  node: {\n    type: 'sphere', // 使用 3D 节点\n    style: {\n      materialType: 'phong', // 使用 Phong 材质\n    },\n  },\n  edge: {\n    type: 'line3d', // 使用 3D 边\n  },\n  plugins: [\n    {\n      type: 'light', // 添加光源\n      // 配置方向光\n      directional: {\n        direction: [0, 0, 1],\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:18,tocIndex:2},{value:"你可以参考以下示例：",paraId:19,tocIndex:2},{value:"精简太阳系",paraId:20,tocIndex:2},{value:"3D 力导向布局",paraId:21,tocIndex:2},{value:"@antv/g6",paraId:22,tocIndex:3},{value:" 中内置注册了 ",paraId:22,tocIndex:3},{value:"CameraSetting",paraId:22,tocIndex:3},{value:" 插件，可用于配置相机，具体可参考",paraId:22,tocIndex:3},{value:"插件",paraId:22,tocIndex:3},{value:"。",paraId:22,tocIndex:3},{value:"{\n  plugins: [\n    {\n      type: 'camera-setting',\n      projectionMode: 'perspective',\n      near: 0.1,\n      far: 1000,\n      fov: 45,\n      aspect: 1,\n    },\n  ];\n}\n",paraId:23,tocIndex:3}]},13022:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(54284);const d=[{value:"通常情况下，如果你使用的现代构建工具，如 Webpack、Rollup 或 ESBuild，你可以很容易地构建依赖于 ",paraId:0},{value:"@antv/g6",paraId:0},{value:" 的项目。",paraId:0},{value:"一些构建工具例如 Vite，其底层是使用 ESBuild，因此你可以参考 ESBuild 的配置。",paraId:1},{value:"下面是一些示例配置，你可以参考这些配置来构建你的项目。如果你发现这些配置无法正常工作，请确保你的构建工具版本较新。",paraId:2},{value:"确保你的项目中已经安装了 ",paraId:3,tocIndex:0},{value:"webpack",paraId:3,tocIndex:0},{value:" 和 ",paraId:3,tocIndex:0},{value:"webpack-cli",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"npm install webpack webpack-cli --save-dev\n",paraId:4,tocIndex:0},{value:"参考下面的 ",paraId:5,tocIndex:0},{value:"webpack.config.js",paraId:5,tocIndex:0},{value:" 进行配置：",paraId:5,tocIndex:0},{value:"const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.ts',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'index.js',\n  },\n  mode: 'production',\n};\n",paraId:6,tocIndex:0},{value:"执行构建命令：",paraId:7,tocIndex:0},{value:"npx webpack\n",paraId:8,tocIndex:0},{value:'上述配置在："webpack": "^5.94.0"，"webpack-cli": "^5.1.4" 可以正常工作。',paraId:9,tocIndex:0},{value:"⚠️ 强烈建议项目使用 Webpack 5，如果你使用的是 Webpack 4，按以下步骤配置：",paraId:10},{value:"安装相关依赖：babel-loader(<9)、@babel/preset-env、@open-wc/webpack-import-meta-loader",paraId:11},{value:"如果你使用的 typescript，还需要安装 ts-loader",paraId:12},{value:"npm install babel-loader@8 @babel/preset-env @open-wc/webpack-import-meta-loader --save-dev\n",paraId:13},{value:"修改 ",paraId:14},{value:"webpack.config.js",paraId:14},{value:" 配置：",paraId:14},{value:"module.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'index.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env'],\n          },\n        },\n      },\n      {\n        test: /\\.js$/,\n        loader: '@open-wc/webpack-import-meta-loader',\n      },\n    ],\n  },\n  mode: 'production',\n};\n",paraId:15},{value:"首先，确保你的项目中已经安装了 ",paraId:16,tocIndex:1},{value:"rollup",paraId:16,tocIndex:1},{value:" 及必要的插件：",paraId:16,tocIndex:1},{value:"@rollup/plugin-commonjs",paraId:17,tocIndex:1},{value:"：用于加载 CommonJS 模块",paraId:17,tocIndex:1},{value:"@rollup/plugin-node-resolve",paraId:17,tocIndex:1},{value:"：用于加载 Node.js 模块",paraId:17,tocIndex:1},{value:"npm install rollup @rollup/plugin-commonjs @rollup/plugin-node-resolve --save-dev\n",paraId:18,tocIndex:1},{value:"参考下面的 ",paraId:19,tocIndex:1},{value:"rollup.config.js",paraId:19,tocIndex:1},{value:" 进行配置：",paraId:19,tocIndex:1},{value:"const commonjs = require('@rollup/plugin-commonjs');\nconst resolve = require('@rollup/plugin-node-resolve');\n\nmodule.exports = {\n  input: 'src/index.ts',\n  output: {\n    file: 'dist/index.js',\n    format: 'umd',\n    name: 'project',\n  },\n  plugins: [resolve(), commonjs()],\n};\n",paraId:20,tocIndex:1},{value:"执行构建命令：",paraId:21,tocIndex:1},{value:"npx rollup -c\n",paraId:22,tocIndex:1},{value:"首先，确保你的项目中已经安装了 ",paraId:23,tocIndex:2},{value:"esbuild",paraId:23,tocIndex:2},{value:"：",paraId:23,tocIndex:2},{value:"npm install esbuild --save-dev\n",paraId:24,tocIndex:2},{value:"执行构建命令：",paraId:25,tocIndex:2},{value:"npx esbuild src/index.ts --bundle --outfile=dist/index.js\n",paraId:26,tocIndex:2}]},18750:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(99526);const d=[{value:"在 G6 5.0 中主要会涉及三个坐标系：画布坐标系(Canvas)、视口坐标系(Viewport)和浏览器坐标系(Client)。",paraId:0,tocIndex:0},{value:"G6 元素绘制时所使用的坐标系，其不受相机缩放、平移的影响，要改变一个元素的位置，需要直接修改元素的位置属性(x/y/z)。",paraId:1,tocIndex:1},{value:"画布空间理论上是无限大的，在初始状态下（无平移、缩放倍率为1），画布坐标系的原点位于视口左上角位置。",paraId:2,tocIndex:1},{value:"视口坐标系是相机坐标系的投影，当相机发生平移、缩放时，画布中元素位置在视口坐标系中的位置也会发生变化。",paraId:3,tocIndex:2},{value:"视口的大小即画布 DOM 容器的大小，视口坐标系的原点位于视口左上角位置，x 轴正方向向右，y 轴正方向向下。",paraId:4,tocIndex:2},{value:"浏览器坐标系以浏览器左上角为原点，x 轴正方向向右，y 轴正方向向下。",paraId:5,tocIndex:3},{value:"下图描述了视口坐标系和浏览器坐标系之间的关系：",paraId:6,tocIndex:3},{value:"G6 提供了坐标系转换的方法，可以方便地在不同坐标系之间进行转换。",paraId:7,tocIndex:4},{value:"画布坐标系转视口坐标系：",paraId:8,tocIndex:4},{value:"getViewportByCanvas",paraId:9,tocIndex:4},{value:"浏览器坐标系转画布坐标系：",paraId:8,tocIndex:4},{value:"getCanvasByClient",paraId:10,tocIndex:4},{value:"视口坐标系转画布坐标系：",paraId:8,tocIndex:4},{value:"getCanvasByViewport",paraId:11,tocIndex:4},{value:"画布坐标系转浏览器坐标系：",paraId:8,tocIndex:4},{value:"getClientByCanvas",paraId:12,tocIndex:4},{value:"另外还提供了其他相关 API：",paraId:13,tocIndex:4},{value:"获取视口中心的视口坐标：",paraId:14,tocIndex:4},{value:"getCanvasCenter",paraId:15,tocIndex:4},{value:"获取视口中心的画布坐标：",paraId:14,tocIndex:4},{value:"getViewportCenter",paraId:16,tocIndex:4},{value:"获取图原点在视口坐标系中的位置：",paraId:14,tocIndex:4},{value:"getPosition",paraId:17,tocIndex:4}]},89494:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40437);const d=[{value:"G6 5.0 仅提供导出画布为 Base64 图片的 API(",paraId:0},{value:"toDataURL",paraId:1},{value:")，如果需要下载图片，可以使用以下方法：",paraId:0},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:2},{value:"导出的图片内容可能不会包含完整的画布内容，导出范围仅包含 Graph 画布中的内容。部分插件使用了自定义的容器、画布等，这部分内容不会出现在导出的图片中。",paraId:3}]},35383:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(7379);const d=[{value:"G6 中的事件系统是在 ",paraId:0,tocIndex:0},{value:"G",paraId:0,tocIndex:0},{value:" 的事件系统基础上进行了封装，提供了更多的事件类型，以及更加方便的事件绑定和解绑方法。",paraId:0,tocIndex:0},{value:"G6 中的事件类型主要分为以下几类：",paraId:1,tocIndex:1},{value:"图(Graph)事件",paraId:2,tocIndex:1},{value:"画布(Canvas)事件",paraId:2,tocIndex:1},{value:"元素(Element)事件",paraId:2,tocIndex:1},{value:"图事件是指与整个图实例相关的事件，例如图的渲染完成事件、图的更新事件等。图事件的完整列表见",paraId:3,tocIndex:2},{value:"GraphEvent",paraId:4,tocIndex:2},{value:"。",paraId:3,tocIndex:2},{value:"图事件的监听与默认的事件监听方式一致，例如监听图的渲染完成事件：",paraId:5,tocIndex:3},{value:"import { Graph, GraphEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(GraphEvent.AFTER_RENDER, () => {\n  // event handler\n});\n",paraId:6,tocIndex:3},{value:"画布事件是指与画布相关的事件，例如画布的点击事件、画布的拖拽事件等。画布事件的完整列表见",paraId:7,tocIndex:4},{value:"CanvasEvent",paraId:8,tocIndex:4},{value:"。",paraId:7,tocIndex:4},{value:"例如监听画布的点击事件：",paraId:9,tocIndex:5},{value:"import { Graph, CanvasEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(CanvasEvent.CLICK, (event) => {\n  // event handler\n});\n",paraId:10,tocIndex:5},{value:"元素事件主要指在元素对象上触发的事件，例如节点的拖拽事件、边的点击事件等。元素分为节点(",paraId:11,tocIndex:6},{value:"node",paraId:11,tocIndex:6},{value:")、边(",paraId:11,tocIndex:6},{value:"edge",paraId:11,tocIndex:6},{value:")、组合(",paraId:11,tocIndex:6},{value:"combo",paraId:11,tocIndex:6},{value:")三类，对应的事件完整列表分别见：",paraId:11,tocIndex:6},{value:"NodeEvent",paraId:12,tocIndex:6},{value:" 、",paraId:11,tocIndex:6},{value:"EdgeEvent",paraId:13,tocIndex:6},{value:"、",paraId:11,tocIndex:6},{value:"ComboEvent",paraId:14,tocIndex:6},{value:"。",paraId:11,tocIndex:6},{value:"与画布事件类似，例如监听节点的拖拽和边的点击事件：",paraId:15,tocIndex:7},{value:"import { Graph, NodeEvent, EdgeEvent, ComboEvent } from '@antv/g6';\n\nconst graph = new Graph({\n  // ...\n});\n\ngraph.on(NodeEvent.DRAG, (event) => {\n  // event handler\n});\n\ngraph.on(EdgeEvent.CLICK, (event) => {\n  // event handler\n});\n\ngraph.on(ComboEvent.CLICK, (event) => {\n  // event handler\n});\n",paraId:16,tocIndex:7},{value:"G6 提供以下 API 用于事件监听和解除：",paraId:17,tocIndex:8},{value:"添加事件监听",paraId:18,tocIndex:9},{value:"const handler = (event) => {\n  // event handler\n};\n\ngraph.on('event_name', handler);\n",paraId:19,tocIndex:9},{value:"移除事件监听",paraId:20,tocIndex:10},{value:"graph.off('event_name', handler);\n",paraId:21,tocIndex:10},{value:"当不传入任何参数时，会移除所有事件监听：",paraId:22,tocIndex:10},{value:"graph.off();\n",paraId:23,tocIndex:10},{value:"添加一次性事件监听，即事件触发后会自动移除事件监听",paraId:24,tocIndex:11},{value:"graph.once('event_name', handler);\n",paraId:25,tocIndex:11},{value:"如果你想手动触发一个事件，可以使用 ",paraId:26,tocIndex:12},{value:"emit",paraId:26,tocIndex:12},{value:" 方法：",paraId:26,tocIndex:12},{value:"graph.emit('event_name', {\n  // event data\n});\n",paraId:27,tocIndex:12}]},24305:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(99280);const d=[{value:"为什么使用 iconfont？ 兼容性好、种类多、多色等。在此不做过多介绍，请直接移步 ",paraId:0,tocIndex:0},{value:"阿里巴巴-iconfont 平台",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"首先，你需要从 ",paraId:1,tocIndex:2},{value:"iconfont",paraId:1,tocIndex:2},{value:" 网站下载所需的图标字体。创建一个项目并选择所需的图标，然后下载生成的图标文件。",paraId:1,tocIndex:2},{value:"下载完成后，将包含图标字体文件的目录（通常包括 ",paraId:2,tocIndex:3},{value:".eot",paraId:2,tocIndex:3},{value:"、",paraId:2,tocIndex:3},{value:".woff",paraId:2,tocIndex:3},{value:"、",paraId:2,tocIndex:3},{value:".ttf",paraId:2,tocIndex:3},{value:" 和 ",paraId:2,tocIndex:3},{value:".svg",paraId:2,tocIndex:3},{value:" 文件，以及 ",paraId:2,tocIndex:3},{value:"iconfont.css",paraId:2,tocIndex:3},{value:" 样式文件）放入你的项目中。",paraId:2,tocIndex:3},{value:"引入方式可自行选择，下面为在 HTML 中引入的例子：",paraId:3,tocIndex:3},{value:"<head>\n  <style>\n    @import 'path-to-iconfont/iconfont.css';\n  </style>\n</head>\n",paraId:4,tocIndex:3},{value:"{\n  node: {\n    style: {\n      iconFontFamily: 'iconfont', // 对应 iconfont.css 中的 `font-family` 属性值\n      iconText: '\\ue7f1', // 对应 iconfont.css 中的 `content` 属性值，注意加 `u`\n      iconFill: '#7863FF'\n    }\n  }\n}\n",paraId:5,tocIndex:4},{value:"getIcon()",paraId:6},{value:"为了更方便地获取图标，可以创建一个工具函数 ",paraId:7,tocIndex:5},{value:"getIcon",paraId:7,tocIndex:5},{value:"。该函数会从图标文件 ",paraId:7,tocIndex:5},{value:"iconfont.json",paraId:7,tocIndex:5},{value:" 中读取图标信息并返回相应的 Unicode 字符。这里注意，手动拼接 unicode 是不行的（",paraId:7,tocIndex:5},{value:"\\\\u${icon.unicode}",paraId:7,tocIndex:5},{value:"）。详细参考 ",paraId:7,tocIndex:5},{value:"MDN String.fromCodePoint",paraId:7,tocIndex:5},{value:"。",paraId:7,tocIndex:5},{value:"首先，确保你有一个 ",paraId:8,tocIndex:5},{value:"iconfont.json",paraId:8,tocIndex:5},{value:" 文件，包含图标的详细信息。",paraId:8,tocIndex:5},{value:"import fonts from 'path-to-iconfont/iconfont.json';\n\nconst icons = fonts.glyphs.map((icon) => {\n  return {\n    name: icon.font_class,\n    unicode: String.fromCodePoint(icon.unicode_decimal), // `\\\\u${icon.unicode}`,\n  };\n});\n\nconst getIcon = (type: string) => {\n  const matchIcon = icons.find((icon) => {\n    return icon.name === type;\n  }) || { unicode: '', name: 'default' };\n  return matchIcon.unicode;\n};\n",paraId:9,tocIndex:5},{value:"在项目中使用：",paraId:10,tocIndex:5},{value:"{\n  node: {\n    style: {\n      iconFontFamily: \"iconfont\",\n      iconText: getIcon('logo')\n    }\n  }\n}\n",paraId:11,tocIndex:5}]},41774:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(885);const d=[{value:"G6 默认使用 Canvas 作为渲染器，但也支持通过 SVG 和 WebGL 进行渲染，要切换到 SVG 或 WebGL 渲染器，只需在初始化时传入 ",paraId:0},{value:"renderer",paraId:0},{value:" 参数即可。",paraId:0},{value:"安装渲染器依赖：",paraId:1,tocIndex:0},{value:"npm install @antv/g-svg\n",paraId:2,tocIndex:0},{value:"配置渲染器：",paraId:3,tocIndex:0},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... other options\n  // 这里所有的画布都会使用 SVG 渲染器\n  renderer: () => new SVGRenderer(),\n});\n",paraId:4,tocIndex:0},{value:"安装渲染器依赖：",paraId:5,tocIndex:1},{value:"npm install @antv/g-webgl\n",paraId:6,tocIndex:1},{value:"配置渲染器：",paraId:7,tocIndex:1},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... other options\n  // 这里所有的画布都会使用 WebGL 渲染器\n  renderer: () => new WebGLRenderer(),\n});\n",paraId:8,tocIndex:1},{value:"G6 采用了分层画布进行渲染，因此 ",paraId:9,tocIndex:2},{value:"renderer",paraId:9,tocIndex:2},{value:" 是一个回调函数，参数是画布类型，返回渲染器实例，如果你想在不同的画布上使用不同的渲染器，可以这样配置：",paraId:9,tocIndex:2},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst graph = new Graph({\n  // ... other options\n  renderer: (layer) => {\n    // 主画布使用 WebGL 渲染器，其他画布使用 SVG 渲染器\n    if (layer === 'main') return new WebGLRenderer();\n    return new SVGRenderer();\n  },\n});\n",paraId:10,tocIndex:2},{value:"G6 没有提供单独的 API 来切换渲染器，但你仍可以通过 ",paraId:11,tocIndex:3},{value:"setOptions",paraId:11,tocIndex:3},{value:" 方法来更新 ",paraId:11,tocIndex:3},{value:"renderer",paraId:11,tocIndex:3},{value:" 参数：",paraId:11,tocIndex:3},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\n// 初始化时使用 WebGL 渲染器\nconst graph = new Graph({\n  // ... other options\n  renderer: () => new WebGLRenderer(),\n});\n\nawait graph.render();\n\n// 切换到 SVG 渲染器\ngraph.setOptions({\n  renderer: () => new SVGRenderer(),\n});\n",paraId:12,tocIndex:3}]},73800:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(45512);const d=[{value:"# npm\nnpm install @antv/g6 --save\n\n# pnpm\npnpm add @antv/g6\n\n# yarn\nyarn add @antv/g6\n",paraId:0,tocIndex:0},{value:"在代码中引入 G6：",paraId:1,tocIndex:0},{value:"import { Graph } from '@antv/g6';\n",paraId:2,tocIndex:0},{value:"访问 ",paraId:3,tocIndex:0},{value:"G6 npm 示例",paraId:3,tocIndex:0},{value:" 查看完整示例代码。",paraId:3,tocIndex:0},{value:"@antv/g6",paraId:4,tocIndex:1},{value:" 在多个 CDN 上提供：",paraId:4,tocIndex:1},{value:"unpkg: ",paraId:5,tocIndex:1},{value:"https://unpkg.com/@antv/g6@latest/dist/g6.min.js",paraId:5,tocIndex:1},{value:"jsDelivr: ",paraId:5,tocIndex:1},{value:"https://cdn.jsdelivr.net/npm/@antv/g6@5/dist/g6.min.js",paraId:5,tocIndex:1},{value:"npmmirror: ",paraId:5,tocIndex:1},{value:"https://registry.npmmirror.com/@antv/g6/5/files/dist/g6.min.js",paraId:5,tocIndex:1},{value:"使用 ",paraId:6,tocIndex:1},{value:"script",paraId:6,tocIndex:1},{value:" 标签引入 G6：",paraId:6,tocIndex:1},{value:'<script src="https://unpkg.com/@antv/g6@5/dist/g6.min.js"><\/script>\n',paraId:7,tocIndex:1},{value:"访问 ",paraId:8,tocIndex:1},{value:"G6 CDN 示例",paraId:8,tocIndex:1},{value:" 查看完整示例代码。",paraId:8,tocIndex:1}]},63175:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23461);const d=[{value:"参考下面的示例，你可以在 Angular 中使用 G6，也可以查看 ",paraId:0},{value:"在线示例",paraId:0},{value:"。",paraId:0},{value:"app.component.html",paraId:1},{value:"<div>\n  <h1>{{ title }}</h1>\n  <div #container></div>\n</div>\n",paraId:2},{value:"app.component.ts",paraId:3},{value:"import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { Graph } from '@antv/g6';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Use G6 in Angular';\n\n  @ViewChild('container') container: ElementRef;\n\n  ngAfterViewInit() {\n    const graph = new Graph({\n      container: this.container.nativeElement,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }\n}\n",paraId:4}]},87125:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(14307);const d=[{value:"参考下面的示例，你可以在 React 中使用 G6，也可以查看 ",paraId:0,tocIndex:0},{value:"在线示例",paraId:0,tocIndex:0},{value:" 。",paraId:0,tocIndex:0},{value:"import { Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport default () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new Graph({\n      container: containerRef.current!,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }, []);\n\n  return <div ref={containerRef} />;\n};\n",paraId:1,tocIndex:0},{value:"如果你需要更完善的 React 与 G6 集成解决方案，可以使用 AntV 官方封装库 ",paraId:2,tocIndex:0},{value:"@antv/graphin",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"在严格模式下，React 会二次更新导致 G6 重复创建 Graph 实例并销毁，可以参考如下示例解决：",paraId:3,tocIndex:1},{value:"import type { GraphOptions } from '@antv/g6';\nimport { Graph as G6Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport interface GraphProps {\n  options: GraphOptions;\n  onRender?: (graph: G6Graph) => void;\n  onDestroy?: () => void;\n}\n\nexport const Graph = (props: GraphProps) => {\n  const { options, onRender, onDestroy } = props;\n  const graphRef = useRef<G6Graph>();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new G6Graph({ container: containerRef.current! });\n    graphRef.current = graph;\n\n    return () => {\n      const graph = graphRef.current;\n      if (graph) {\n        graph.destroy();\n        onDestroy?.();\n        graphRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const graph = graphRef.current;\n\n    if (!options || !container || !graph || graph.destroyed) return;\n\n    graph.setOptions(options);\n    graph\n      .render()\n      .then(() => onRender?.(graph))\n      // eslint-disable-next-line no-console\n      .catch((error) => console.debug(error));\n  }, [options]);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n};\n",paraId:4,tocIndex:1}]},19652:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(92379);const d=[{value:"请不要将 Vue 响应式数据直接传递给 G6 实例，这可能会导致 G6 无法正确渲染，甚至导致页面崩溃。",paraId:0},{value:"参考下面的示例，你可以在 Vue 中使用 G6，也可以查看 ",paraId:1},{value:"在线示例",paraId:1},{value:"。",paraId:1},{value:"<template>\n  <div id=\"container\"></div>\n</template>\n\n<script setup>\n  import { onMounted } from 'vue';\n  import { Graph } from '@antv/g6';\n\n  onMounted(() => {\n    const graph = new Graph({\n      container: document.getElementById('container'),\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  });\n<\/script>\n",paraId:2}]},97784:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(30792);const d=[{value:"访问 ",paraId:0,tocIndex:0},{value:"图表示例",paraId:1,tocIndex:0},{value:" 无需任何环境配置即可在线体验 G6。",paraId:0,tocIndex:0},{value:"在本例子中，我们将基于 HTML 页面使用 G6 创建一个简单的图。",paraId:2,tocIndex:1},{value:"将下面的代码复制到一个 HTML 文件中，然后在浏览器中打开这个文件：",paraId:3,tocIndex:1},{value:"\x3c!-- 准备一个容器 --\x3e\n<div id=\"container\" style=\"width: 500px; height: 500px\"></div>\n\n\x3c!-- 引入 G6 的 JS 文件 --\x3e\n<script src=\"https://unpkg.com/@antv/g6@5/dist/g6.min.js\"><\/script>\n\n<script>\n  const { Graph } = G6;\n\n  fetch('https://assets.antv.antgroup.com/g6/graph.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const graph = new Graph({\n        container: 'container',\n        autoFit: 'view',\n        data,\n        node: {\n          style: {\n            size: 10,\n          },\n          palette: {\n            field: 'group',\n            color: 'tableau',\n          },\n        },\n        layout: {\n          type: 'd3-force',\n          manyBody: {},\n          x: {},\n          y: {},\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n      });\n\n      graph.render();\n    });\n<\/script>\n",paraId:4,tocIndex:1},{value:"会得到如下所示的图：",paraId:5,tocIndex:1},{value:"fetch('https://assets.antv.antgroup.com/g6/graph.json')\n  .then((res) => res.json())\n  .then((data) =>\n    createGraph(\n      {\n        data,\n        autoFit: 'view',\n        animation: false,\n        node: {\n          style: {\n            size: 10,\n          },\n          palette: {\n            field: 'group',\n            color: 'tableau',\n          },\n        },\n        layout: {\n          type: 'd3-force',\n          animation: false,\n          manyBody: {},\n          x: {},\n          y: {},\n        },\n        behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n      },\n      { width: 500, height: 500 },\n    ),\n  );\n",paraId:6,tocIndex:1},{value:"下面分析一下这段代码：",paraId:7,tocIndex:1},{value:"首先我们创建一个 ",paraId:8,tocIndex:1},{value:"div",paraId:8,tocIndex:1},{value:" 元素作为图的容器：",paraId:8,tocIndex:1},{value:'<div id="container" style="width: 500px; height: 500px"></div>\n',paraId:9,tocIndex:1},{value:"然后引入 G6 的 JS 文件：",paraId:10,tocIndex:1},{value:'<script src="https://unpkg.com/@antv/g6@5/dist/g6.min.js"><\/script>\n',paraId:11,tocIndex:1},{value:"使用 ",paraId:12,tocIndex:1},{value:"fetch",paraId:12,tocIndex:1},{value:" 方法获取图的数据：",paraId:12,tocIndex:1},{value:"fetch('https://assets.antv.antgroup.com/g6/graph.json').then((res) => res.json());\n",paraId:13,tocIndex:1},{value:"最后创建一个图实例，传入配置对象，并调用 ",paraId:14,tocIndex:1},{value:"render",paraId:14,tocIndex:1},{value:" 方法渲染图：",paraId:14,tocIndex:1},{value:"const { Graph } = G6;\n\nconst graph = new Graph({\n  container: 'container',\n  autoFit: 'view',\n  data,\n  node: {\n    style: {\n      size: 10,\n    },\n    palette: {\n      field: 'group',\n      color: 'tableau',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    manyBody: {},\n    x: {},\n    y: {},\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:15,tocIndex:1},{value:"如果你使用 React、Vue、Angular 等框架，可以查看：",paraId:16,tocIndex:1},{value:"在 React 中使用 G6",paraId:17,tocIndex:1},{value:"在 Vue 中使用 G6",paraId:18,tocIndex:1},{value:"在 Angular 中使用 G6",paraId:19,tocIndex:1}]},22621:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70864);const d=[{value:"本教程将引导你从头开始完成一个 G6 图表开发，并在过程中了解和学习 G6 的主要概念。",paraId:0},{value:"我们将使用 Vite 来创建一个简单的前端应用。",paraId:1,tocIndex:0},{value:"首先创建一个空目录：",paraId:2,tocIndex:1},{value:"mkdir g6-tutorial\n\ncd g6-tutorial\n",paraId:3,tocIndex:1},{value:"初始化项目：",paraId:4,tocIndex:1},{value:"npm init -y\n",paraId:5,tocIndex:1},{value:"安装 G6：",paraId:6,tocIndex:1},{value:"npm install @antv/g6 --save\n",paraId:7,tocIndex:1},{value:"Vite 是一个新型的前端构建工具，它基于 ESModule，可以快速启动项目。",paraId:8,tocIndex:1},{value:"安装 Vite：",paraId:9,tocIndex:1},{value:"npm install vite --save-dev\n",paraId:10,tocIndex:1},{value:"在 ",paraId:11,tocIndex:1},{value:"package.json",paraId:11,tocIndex:1},{value:" 中添加启动脚本：",paraId:11,tocIndex:1},{value:'{\n  "scripts": {\n    "dev": "vite"\n  }\n}\n',paraId:12,tocIndex:1},{value:"创建 ",paraId:13,tocIndex:2},{value:"index.html",paraId:13,tocIndex:2},{value:" 和 ",paraId:13,tocIndex:2},{value:"main.ts",paraId:13,tocIndex:2},{value:" 文件，内容如下：",paraId:13,tocIndex:2},{value:"index.html",paraId:14,tocIndex:2},{value:"：",paraId:14,tocIndex:2},{value:'<!doctype html>\n<html>\n  <head>\n    <title>@antv/g6 Tutorial</title>\n  </head>\n  <body>\n    <div id="container"></div>\n    <script type="module" src="main.ts"><\/script>\n  </body>\n</html>\n',paraId:15,tocIndex:2},{value:"main.ts",paraId:16,tocIndex:2},{value:"：",paraId:16,tocIndex:2},{value:"alert('Hello, G6!');\n",paraId:17,tocIndex:2},{value:"npm run dev\n",paraId:18,tocIndex:3},{value:"打开浏览器访问终端中输出的地址（通常为：",paraId:19,tocIndex:3},{value:"http://127.0.0.1:5173/",paraId:19,tocIndex:3},{value:' ），你将看到一个弹窗显示 "Hello, G6!"。',paraId:19,tocIndex:3},{value:"接下来，我们将使用 G6 创建一个简单的图表。",paraId:20,tocIndex:4},{value:"G6 使用 JSON 格式的数据来描述图，通常包括节点和边。我们将使用下面准备的数据：",paraId:21,tocIndex:5},{value:"const data = {\n  nodes: [\n    { id: 'node-1', style: { x: 50, y: 50 } },\n    { id: 'node-2', style: { x: 150, y: 50 } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2' }],\n};\n",paraId:22,tocIndex:5},{value:"数据中包括两个节点和一条边，节点的 ",paraId:23,tocIndex:5},{value:"id",paraId:23,tocIndex:5},{value:" 属性是必须的，并在 ",paraId:23,tocIndex:5},{value:"style",paraId:23,tocIndex:5},{value:" 设置了每个节点的位置。边的 ",paraId:23,tocIndex:5},{value:"source",paraId:23,tocIndex:5},{value:" 和 ",paraId:23,tocIndex:5},{value:"target",paraId:23,tocIndex:5},{value:" 属性分别表示边的起始节点 ",paraId:23,tocIndex:5},{value:"id",paraId:23,tocIndex:5},{value:" 和结束节点 ",paraId:23,tocIndex:5},{value:"id",paraId:23,tocIndex:5},{value:"。",paraId:23,tocIndex:5},{value:"创建一个图表实例，传入一个配置对象，包括容器和数据，然后调用 ",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:" 方法渲染图表：",paraId:24,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:6},{value:"如下所示，可以看到图表已经顺利绘制出来：",paraId:26,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n});\n\ngraph.render();\n",paraId:27,tocIndex:6},{value:"接下来将介绍如何配置画布中的元素样式和种类。",paraId:28,tocIndex:7},{value:"G6 提供了多种机制来配置元素样式，可以在数据中进行配置，也可以在图表实例中进行配置。前面的示例中，我们在数据中配置了节点的位置，接下来我们在图配置项中配置节点和边的样式：",paraId:29,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    style: {\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:30,tocIndex:7},{value:"正如代码所示，我们在图表实例中配置了节点的填充颜色为粉色，边的描边颜色为浅绿色。你可以在下面的示例中看到效果：",paraId:31,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    style: {\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:32,tocIndex:7},{value:"其中的关键部分是 ",paraId:33,tocIndex:7},{value:"node.style",paraId:33,tocIndex:7},{value:" 和 ",paraId:33,tocIndex:7},{value:"edge.style",paraId:33,tocIndex:7},{value:" 配置项，分别用来配置节点和边的样式。",paraId:33,tocIndex:7},{value:"在后续的代码示例中，我们仅展示配置项的部分代码，本项目的完整代码请查看 ",paraId:34,tocIndex:7},{value:"完整示例",paraId:34,tocIndex:7},{value:"。",paraId:34,tocIndex:7},{value:"下面我们将通过设置节点的类型来展示更多的节点种类：",paraId:35,tocIndex:7},{value:"{\n  node: {\n    type: (datum) => datum.id === 'node-1' ? 'circle' : 'rect',\n    style: {\n      fill: 'pink',\n      size: 20\n    }\n  }\n}\n",paraId:36,tocIndex:7},{value:"上面的代码中，我们设置了节点的 ",paraId:37,tocIndex:7},{value:"type",paraId:37,tocIndex:7},{value:" 属性，其值可以是一个字符串，也可以是一个函数。当 ",paraId:37,tocIndex:7},{value:"type",paraId:37,tocIndex:7},{value:" 是一个函数时，函数的参数是当前节点的数据对象，函数的返回值是节点的类型。",paraId:37,tocIndex:7},{value:"同样的，元素中 ",paraId:38,tocIndex:7},{value:"style",paraId:38,tocIndex:7},{value:" 样式下的每个属性都可以是一个函数，函数的参数是当前元素的数据对象。",paraId:38,tocIndex:7},{value:"你甚至可以将整个 ",paraId:39,tocIndex:7},{value:"style",paraId:39,tocIndex:7},{value:" 属性设置为一个函数，这样你可以根据数据对象动态设置元素的样式。",paraId:39,tocIndex:7},{value:"圆形节点(",paraId:40,tocIndex:7},{value:"circle",paraId:40,tocIndex:7},{value:")是 G6 的默认节点类型，这里我们将第一个节点的类型设置为圆形，第二个节点的类型设置为矩形。",paraId:40,tocIndex:7},{value:"同时我们还将节点的大小设置为 20，因此第一个节点是一个半径为 10 的圆形，第二个节点是一个边长为 20 的正方形。",paraId:41,tocIndex:7},{value:"如果你想将矩形节点的大小设置为 20x10，可以将 ",paraId:42,tocIndex:7},{value:"size",paraId:42,tocIndex:7},{value:" 设置为一个数组 ",paraId:42,tocIndex:7},{value:"[20, 10]",paraId:42,tocIndex:7},{value:"。",paraId:42,tocIndex:7},{value:"你可以在下面的示例中看到效果：",paraId:43,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\n    style: {\n      fill: 'pink',\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n});\n\ngraph.render();\n",paraId:44,tocIndex:7},{value:"在上面的例子中提供的图表是静态的，接下来我们将添加一些交互行为。",paraId:45,tocIndex:8},{value:"G6 提供了多种交互行为，我们添加几个常用的交互，使得用户可以拖拽、缩放画布，拖拽节点。",paraId:46,tocIndex:8},{value:"{\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'];\n}\n",paraId:47,tocIndex:8},{value:"尝试在下面的示例中拖拽节点和画布，并使用滚轮缩放画布：",paraId:48,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 200,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 50, y: 50 } },\n      { id: 'node-2', style: { x: 150, y: 50 } },\n    ],\n    edges: [{ source: 'node-1', target: 'node-2' }],\n  },\n  node: {\n    type: (datum) => (datum.id === 'node-1' ? 'circle' : 'rect'),\n    style: {\n      fill: 'pink',\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:49,tocIndex:8},{value:"在上面的示例中，我们手动设置了节点的位置。但当节点数量较多时，这会变得非常困难。",paraId:50,tocIndex:9},{value:"布局算法可以基于一定的规则自动调整节点的位置，G6 提供了多种布局算法，例如树形布局、力导向布局等。",paraId:51,tocIndex:9},{value:"首先生成一组不包括位置信息的数据：",paraId:52,tocIndex:9},{value:"const data = {\n  nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n};\n",paraId:53,tocIndex:9},{value:"默认情况下，如果节点没有位置信息，G6 会将节点放置在左上角，即 ",paraId:54,tocIndex:9},{value:"(0, 0)",paraId:54,tocIndex:9},{value:"。",paraId:54,tocIndex:9},{value:"接下来我们使用 ",paraId:55,tocIndex:9},{value:"d3-force",paraId:55,tocIndex:9},{value:" 布局算法，它是一种力导向布局算法，可以模拟节点之间的引力和斥力，使得节点自动调整到合适的位置。",paraId:55,tocIndex:9},{value:"{\n  layout: {\n    type: 'd3-force',\n  },\n}\n",paraId:56,tocIndex:9},{value:"查看下面的示例，可以看到节点已经自动调整到合适的位置：",paraId:57,tocIndex:9},{value:"完整代码",paraId:58},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:59,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({ id: `node-${i}` })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n      fill: 'pink',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:60,tocIndex:9},{value:"同样的，当节点数量较多时，手动设置节点的颜色也会变得困难。G6 提供了色板机制，可以便捷地为元素设置颜色。",paraId:61,tocIndex:10},{value:"色板通常会基于数据的某个字段为元素设置颜色，例如节点的类型、边的权重等。",paraId:62,tocIndex:10},{value:"下面我们在数据中的添加 ",paraId:63,tocIndex:10},{value:"category",paraId:63,tocIndex:10},{value:" 字段：",paraId:63,tocIndex:10},{value:"const data = {\n  nodes: Array.from({ length: 10 }).map((_, i) => ({\n    id: `node-${i}`,\n    data: { category: i === 0 ? 'central' : 'around' },\n  })),\n  edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n};\n",paraId:64,tocIndex:10},{value:"然后使用 ",paraId:65,tocIndex:10},{value:"tableau",paraId:65,tocIndex:10},{value:" 色板为节点设置颜色，",paraId:65,tocIndex:10},{value:"field",paraId:65,tocIndex:10},{value:" 属性指定了数据中的字段，",paraId:65,tocIndex:10},{value:"color",paraId:65,tocIndex:10},{value:" 属性指定了色板的名称。",paraId:65,tocIndex:10},{value:"{\n  node: {\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    }\n  }\n}\n",paraId:66,tocIndex:10},{value:"需要注意将 ",paraId:67,tocIndex:10},{value:"node.style",paraId:67,tocIndex:10},{value:" 中的 ",paraId:67,tocIndex:10},{value:"fill",paraId:67,tocIndex:10},{value:" 样式移除，因为其优先级高于色板分配的颜色。",paraId:67,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n});\n\ngraph.render();\n",paraId:68,tocIndex:10},{value:"插件机制是 G6 的一个重要特性，可以通过插件扩展 G6 的功能。G6 提供了丰富的内置插件，例如 ",paraId:69,tocIndex:11},{value:"tooltip",paraId:69,tocIndex:11},{value:"、",paraId:69,tocIndex:11},{value:"legend",paraId:69,tocIndex:11},{value:" 等，也支持用户自定义插件。",paraId:69,tocIndex:11},{value:"下面我们将使用 ",paraId:70,tocIndex:11},{value:"grid-line",paraId:70,tocIndex:11},{value:" 插件为画布添加网格线：",paraId:70,tocIndex:11},{value:"{\n  plugins: ['grid-line'],\n}\n",paraId:71,tocIndex:11},{value:"可以看到画布已经添加了网格线：",paraId:72,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n  plugins: ['grid-line'],\n});\n\ngraph.render();\n",paraId:73,tocIndex:11},{value:"上面的插件配置项中使用了简写形式，大部分的插件都支持传递额外的参数，例如 ",paraId:74,tocIndex:11},{value:"grid-line",paraId:74,tocIndex:11},{value:" 插件可以配置 ",paraId:74,tocIndex:11},{value:"follow",paraId:74,tocIndex:11},{value:" 属性来指定拖拽画布时网格线是否跟随画布移动。",paraId:74,tocIndex:11},{value:"{\n  plugins: [{ type: 'grid-line', follow: true }];\n}\n",paraId:75,tocIndex:11},{value:"尝试在下面的示例中拖拽画布，可以看到网格线跟随画布移动：",paraId:76,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: Array.from({ length: 10 }).map((_, i) => ({\n      id: `node-${i}`,\n      data: { category: i === 0 ? 'central' : 'around' },\n    })),\n    edges: Array.from({ length: 9 }).map((_, i) => ({ source: `node-0`, target: `node-${i + 1}` })),\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n    palette: {\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n  edge: {\n    style: {\n      stroke: 'lightgreen',\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n  layout: {\n    type: 'd3-force',\n  },\n  plugins: [{ type: 'grid-line', follow: true }],\n});\n\ngraph.render();\n",paraId:77,tocIndex:11},{value:"在本教程中，我们从头开始创建了一个 G6 图表，并了解了 G6 的主要概念。我们学习了如何创建一个简单的图表，如何配置元素的样式和种类，如何添加交互行为，如何使用布局算法，如何使用色板，如何使用插件。",paraId:78,tocIndex:12},{value:"关于 G6 更加详细的概念介绍可以在 ",paraId:79,tocIndex:12},{value:"核心概念",paraId:80,tocIndex:12},{value:" 中查看。",paraId:79,tocIndex:12},{value:"图的 API 详细说明可以在 ",paraId:81,tocIndex:12},{value:"API",paraId:82,tocIndex:12},{value:" 中查看。",paraId:81,tocIndex:12}]},13830:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(29197);const d=[{value:"扩展 (Extension) 是 G6 中的一个重要概念，它是 G6 中所有可扩展部分的统称，包括以下几种：",paraId:0,tocIndex:0},{value:"动画 (Animation)",paraId:1,tocIndex:0},{value:"交互 (Behavior)",paraId:1,tocIndex:0},{value:"元素 (Element)",paraId:1,tocIndex:0},{value:"节点 (Node)\n",paraId:1,tocIndex:0},{value:"边 (Edge)",paraId:2,tocIndex:0},{value:"组合 (Combo)",paraId:2,tocIndex:0},{value:"布局 (Layout)",paraId:1,tocIndex:0},{value:"色板 (Palette)",paraId:1,tocIndex:0},{value:"插件 (Plugin)",paraId:1,tocIndex:0},{value:"主题 (Theme)",paraId:1,tocIndex:0},{value:"数据转换 (Transform)",paraId:1,tocIndex:0},{value:"G6 提供了 ",paraId:3,tocIndex:1},{value:"register",paraId:3,tocIndex:1},{value:" 函数用于注册扩展，例如：",paraId:3,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomNode } from './my-custom-node';\n\n// 注册节点\nregister(ExtensionCategory.NODE, 'custom-node', CustomNode);\n",paraId:4,tocIndex:1},{value:"register",paraId:5,tocIndex:1},{value:" 函数的第一个参数是扩展的类型，第二个参数是扩展的名称，第三个参数是扩展的实现。",paraId:5,tocIndex:1},{value:"不同的扩展类型之间",paraId:6,tocIndex:1},{value:"可以",paraId:6,tocIndex:1},{value:"使用相同的扩展名称，但同一类型的扩展重复注册时仅会在第一次注册时生效。",paraId:6,tocIndex:1},{value:"// ✅\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\nregister(ExtensionCategory.COMBO, 'custom-name', CustomCombo);\n\n// ❌\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\nregister(ExtensionCategory.NODE, 'custom-name', CustomNode);\n",paraId:7,tocIndex:1},{value:"不同的扩展类型的配置位置有所不同，但都是通过指定注册时所使用的名称来使用扩展，例如：",paraId:8,tocIndex:2},{value:"使用节点扩展：",paraId:9,tocIndex:2},{value:"options.node.type",paraId:9,tocIndex:2},{value:"使用边扩展：",paraId:9,tocIndex:2},{value:"options.edge.type",paraId:9,tocIndex:2},{value:"使用组合扩展：",paraId:9,tocIndex:2},{value:"options.combo.type",paraId:9,tocIndex:2},{value:"使用交互扩展：",paraId:9,tocIndex:2},{value:"options.behaviors",paraId:9,tocIndex:2},{value:"使用布局扩展：",paraId:9,tocIndex:2},{value:"options.layout.type",paraId:9,tocIndex:2},{value:"使用插件扩展：",paraId:9,tocIndex:2},{value:"options.plugins",paraId:9,tocIndex:2},{value:"使用主题扩展：",paraId:9,tocIndex:2},{value:"options.theme",paraId:9,tocIndex:2},{value:"使用数据转换扩展：",paraId:9,tocIndex:2},{value:"options.transform",paraId:9,tocIndex:2},{value:"使用色板扩展：",paraId:9,tocIndex:2},{value:"options.node.palette",paraId:9,tocIndex:2},{value:" ",paraId:9,tocIndex:2},{value:"options.edge.palette",paraId:9,tocIndex:2},{value:" 等",paraId:9,tocIndex:2},{value:"使用动画扩展：",paraId:9,tocIndex:2},{value:"options.node.animate",paraId:9,tocIndex:2},{value:" ",paraId:9,tocIndex:2},{value:"options.edge.animate",paraId:9,tocIndex:2},{value:" 等",paraId:9,tocIndex:2},{value:"G6 提供了 ",paraId:10,tocIndex:3},{value:"getExtension",paraId:10,tocIndex:3},{value:" 和 ",paraId:10,tocIndex:3},{value:"getExtensions",paraId:10,tocIndex:3},{value:" 方法分别用于获取指定扩展类型下的单个扩展和所有扩展，例如：",paraId:10,tocIndex:3},{value:"import { getExtension, getExtensions, ExtensionCategory } from '@antv/g6';\n\n// 获取注册的名称为 'custom-node' 的节点扩展实现\ngetExtension(ExtensionCategory.NODE, 'custom-node');\n\n// 获取所有注册的节点扩展实现\ngetExtensions(ExtensionCategory.NODE);\n",paraId:11,tocIndex:3}]},56683:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63237);const d=[{value:"G6 内置扩展及注册扩展类型如下：",paraId:0},{value:"扩展",paraId:1,tocIndex:0},{value:"注册类型",paraId:1,tocIndex:0},{value:"描述",paraId:1,tocIndex:0},{value:"ComboCollapse",paraId:1,tocIndex:0},{value:"'combo-collapse'",paraId:1,tocIndex:0},{value:"组合收起",paraId:1,tocIndex:0},{value:"ComboExpand",paraId:1,tocIndex:0},{value:"'combo-expand'",paraId:1,tocIndex:0},{value:"组合展开",paraId:1,tocIndex:0},{value:"NodeCollapse",paraId:1,tocIndex:0},{value:"'node-collapse'",paraId:1,tocIndex:0},{value:"节点收起",paraId:1,tocIndex:0},{value:"NodeExpand",paraId:1,tocIndex:0},{value:"'node-expand'",paraId:1,tocIndex:0},{value:"节点展开",paraId:1,tocIndex:0},{value:"PathIn",paraId:1,tocIndex:0},{value:"'path-in'",paraId:1,tocIndex:0},{value:"路径进入",paraId:1,tocIndex:0},{value:"PathOut",paraId:1,tocIndex:0},{value:"'path-out'",paraId:1,tocIndex:0},{value:"路径退出",paraId:1,tocIndex:0},{value:"Fade",paraId:1,tocIndex:0},{value:"'fade'",paraId:1,tocIndex:0},{value:"渐变",paraId:1,tocIndex:0},{value:"Translate",paraId:1,tocIndex:0},{value:"'translate'",paraId:1,tocIndex:0},{value:"平移",paraId:1,tocIndex:0},{value:"配置方式：",paraId:2,tocIndex:0},{value:"在 ",paraId:3,tocIndex:0},{value:"GraphOptions.[node|edge|combo].animation.[stage]",paraId:3,tocIndex:0},{value:" 中使用，示例：",paraId:3,tocIndex:0},{value:"const graph = new Graph({\n  // ... 其他配置\n  node: {\n    animation: {\n      update: 'translate', // 更新阶段仅使用平移动画\n    },\n  },\n});\n",paraId:4,tocIndex:0},{value:"扩展",paraId:5,tocIndex:1},{value:"注册类型",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"BrushSelect",paraId:5,tocIndex:1},{value:"'brush-select'",paraId:5,tocIndex:1},{value:"框选",paraId:5,tocIndex:1},{value:"ClickSelect",paraId:5,tocIndex:1},{value:"'click-select'",paraId:5,tocIndex:1},{value:"点击选中",paraId:5,tocIndex:1},{value:"CollapseExpand",paraId:5,tocIndex:1},{value:"'collapse-expand'",paraId:5,tocIndex:1},{value:"展开/收起元素",paraId:5,tocIndex:1},{value:"CreateEdge",paraId:5,tocIndex:1},{value:"'create-edge'",paraId:5,tocIndex:1},{value:"创建边",paraId:5,tocIndex:1},{value:"DragCanvas",paraId:5,tocIndex:1},{value:"'drag-canvas'",paraId:5,tocIndex:1},{value:"拖拽画布",paraId:5,tocIndex:1},{value:"DragElementForce",paraId:5,tocIndex:1},{value:"'drag-element-force'",paraId:5,tocIndex:1},{value:"力导向拖拽元素",paraId:5,tocIndex:1},{value:"DragElement",paraId:5,tocIndex:1},{value:"'drag-element'",paraId:5,tocIndex:1},{value:"拖拽元素",paraId:5,tocIndex:1},{value:"FixElementSize",paraId:5,tocIndex:1},{value:"'fix-element-size'",paraId:5,tocIndex:1},{value:"缩放画布时固定元素大小",paraId:5,tocIndex:1},{value:"FocusElement",paraId:5,tocIndex:1},{value:"'focus-element'",paraId:5,tocIndex:1},{value:"聚焦元素",paraId:5,tocIndex:1},{value:"HoverActivate",paraId:5,tocIndex:1},{value:"'hover-activate'",paraId:5,tocIndex:1},{value:"悬停激活",paraId:5,tocIndex:1},{value:"LassoSelect",paraId:5,tocIndex:1},{value:"'lasso-select'",paraId:5,tocIndex:1},{value:"套索选择",paraId:5,tocIndex:1},{value:"OptimizeViewportTransform",paraId:5,tocIndex:1},{value:"'optimize-viewport-transform'",paraId:5,tocIndex:1},{value:"操作画布时隐藏元素",paraId:5,tocIndex:1},{value:"ScrollCanvas",paraId:5,tocIndex:1},{value:"'scroll-canvas'",paraId:5,tocIndex:1},{value:"滚动画布",paraId:5,tocIndex:1},{value:"ZoomCanvas",paraId:5,tocIndex:1},{value:"'zoom-canvas'",paraId:5,tocIndex:1},{value:"缩放画布",paraId:5,tocIndex:1},{value:"配置方式：",paraId:6,tocIndex:1},{value:"在 ",paraId:7,tocIndex:1},{value:"GraphOptions.behaviors",paraId:7,tocIndex:1},{value:" 中配置，示例：",paraId:7,tocIndex:1},{value:"const graph = new Graph({\n  // ... 其他配置\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n});\n",paraId:8,tocIndex:1},{value:"扩展",paraId:9,tocIndex:3},{value:"注册类型",paraId:9,tocIndex:3},{value:"描述",paraId:9,tocIndex:3},{value:"circle",paraId:9,tocIndex:3},{value:"Circle",paraId:9,tocIndex:3},{value:"圆形节点",paraId:9,tocIndex:3},{value:"diamond",paraId:9,tocIndex:3},{value:"Diamond",paraId:9,tocIndex:3},{value:"菱形节点",paraId:9,tocIndex:3},{value:"ellipse",paraId:9,tocIndex:3},{value:"Ellipse",paraId:9,tocIndex:3},{value:"椭圆节点",paraId:9,tocIndex:3},{value:"hexagon",paraId:9,tocIndex:3},{value:"Hexagon",paraId:9,tocIndex:3},{value:"六边形节点",paraId:9,tocIndex:3},{value:"html",paraId:9,tocIndex:3},{value:"HTML",paraId:9,tocIndex:3},{value:"HTML节点",paraId:9,tocIndex:3},{value:"image",paraId:9,tocIndex:3},{value:"Image",paraId:9,tocIndex:3},{value:"图片节点",paraId:9,tocIndex:3},{value:"rect",paraId:9,tocIndex:3},{value:"Rect",paraId:9,tocIndex:3},{value:"矩形节点",paraId:9,tocIndex:3},{value:"star",paraId:9,tocIndex:3},{value:"Star",paraId:9,tocIndex:3},{value:"星形节点",paraId:9,tocIndex:3},{value:"donut",paraId:9,tocIndex:3},{value:"Donut",paraId:9,tocIndex:3},{value:"甜甜圈节点",paraId:9,tocIndex:3},{value:"triangle",paraId:9,tocIndex:3},{value:"Triangle",paraId:9,tocIndex:3},{value:"三角形节点",paraId:9,tocIndex:3},{value:"配置方式：",paraId:10,tocIndex:3},{value:"在 ",paraId:11,tocIndex:3},{value:"GraphOptions.data.nodes[number].type",paraId:11,tocIndex:3},{value:" 中配置；",paraId:11,tocIndex:3},{value:"在 ",paraId:11,tocIndex:3},{value:"GraphOptions.node.type",paraId:11,tocIndex:3},{value:" 中配置；",paraId:11,tocIndex:3},{value:"const graph = new Graph({\n  // ... 其他配置\n  data: {\n    nodes: [{ id: 'node-1', type: 'circle' }],\n  },\n  node: {\n    type: 'circle',\n  },\n});\n",paraId:12,tocIndex:3},{value:"扩展",paraId:13,tocIndex:4},{value:"注册类型",paraId:13,tocIndex:4},{value:"描述",paraId:13,tocIndex:4},{value:"Cubic",paraId:13,tocIndex:4},{value:"'cubic'",paraId:13,tocIndex:4},{value:"三次贝塞尔曲线",paraId:13,tocIndex:4},{value:"Line",paraId:13,tocIndex:4},{value:"'line'",paraId:13,tocIndex:4},{value:"直线",paraId:13,tocIndex:4},{value:"Polyline",paraId:13,tocIndex:4},{value:"'polyline'",paraId:13,tocIndex:4},{value:"折线",paraId:13,tocIndex:4},{value:"Quadratic",paraId:13,tocIndex:4},{value:"'quadratic'",paraId:13,tocIndex:4},{value:"二次贝塞尔曲线",paraId:13,tocIndex:4},{value:"CubicHorizontal",paraId:13,tocIndex:4},{value:"'cubic-horizontal'",paraId:13,tocIndex:4},{value:"水平三次贝塞尔曲线",paraId:13,tocIndex:4},{value:"CubicVertical",paraId:13,tocIndex:4},{value:"'cubic-vertical'",paraId:13,tocIndex:4},{value:"垂直三次贝塞尔曲线",paraId:13,tocIndex:4},{value:"CubicRadial",paraId:13,tocIndex:4},{value:"'cubic-radial'",paraId:13,tocIndex:4},{value:"径向三次贝塞尔曲线",paraId:13,tocIndex:4},{value:"配置方式同 ",paraId:14,tocIndex:4},{value:"节点",paraId:14,tocIndex:4},{value:"：",paraId:14,tocIndex:4},{value:"在 ",paraId:15,tocIndex:4},{value:"GraphOptions.data.edges[number].type",paraId:15,tocIndex:4},{value:" 中配置；",paraId:15,tocIndex:4},{value:"在 ",paraId:15,tocIndex:4},{value:"GraphOptions.edge.type",paraId:15,tocIndex:4},{value:" 中配置；",paraId:15,tocIndex:4},{value:"扩展",paraId:16,tocIndex:5},{value:"注册类型",paraId:16,tocIndex:5},{value:"描述",paraId:16,tocIndex:5},{value:"CircleCombo",paraId:16,tocIndex:5},{value:"'circle'",paraId:16,tocIndex:5},{value:"圆形组合",paraId:16,tocIndex:5},{value:"RectCombo",paraId:16,tocIndex:5},{value:"'rect'",paraId:16,tocIndex:5},{value:"矩形组合",paraId:16,tocIndex:5},{value:"配置方式同 ",paraId:17,tocIndex:5},{value:"节点",paraId:17,tocIndex:5},{value:"：",paraId:17,tocIndex:5},{value:"在 ",paraId:18,tocIndex:5},{value:"GraphOptions.data.combos[number].type",paraId:18,tocIndex:5},{value:" 中配置；",paraId:18,tocIndex:5},{value:"在 ",paraId:18,tocIndex:5},{value:"GraphOptions.combo.type",paraId:18,tocIndex:5},{value:" 中配置；",paraId:18,tocIndex:5},{value:"扩展",paraId:19,tocIndex:6},{value:"注册类型",paraId:19,tocIndex:6},{value:"描述",paraId:19,tocIndex:6},{value:"AntVDagreLayout",paraId:19,tocIndex:6},{value:"'antv-dagre'",paraId:19,tocIndex:6},{value:"AntV Dagre 布局",paraId:19,tocIndex:6},{value:"ComboCombinedLayout",paraId:19,tocIndex:6},{value:"'combo-combined'",paraId:19,tocIndex:6},{value:"组合布局",paraId:19,tocIndex:6},{value:"CompactBoxLayout",paraId:19,tocIndex:6},{value:"'compact-box'",paraId:19,tocIndex:6},{value:"紧凑树",paraId:19,tocIndex:6},{value:"ForceAtlas2Layout",paraId:19,tocIndex:6},{value:"'force-atlas2'",paraId:19,tocIndex:6},{value:"ForceAlas2 力导向布局",paraId:19,tocIndex:6},{value:"CircularLayout",paraId:19,tocIndex:6},{value:"'circular'",paraId:19,tocIndex:6},{value:"环形布局",paraId:19,tocIndex:6},{value:"ConcentricLayout",paraId:19,tocIndex:6},{value:"'concentric'",paraId:19,tocIndex:6},{value:"同心圆布局",paraId:19,tocIndex:6},{value:"D3ForceLayout",paraId:19,tocIndex:6},{value:"'d3-force'",paraId:19,tocIndex:6},{value:"D3 力导向布局",paraId:19,tocIndex:6},{value:"DagreLayout",paraId:19,tocIndex:6},{value:"'dagre'",paraId:19,tocIndex:6},{value:"Dagre 布局",paraId:19,tocIndex:6},{value:"DendrogramLayout",paraId:19,tocIndex:6},{value:"'dendrogram'",paraId:19,tocIndex:6},{value:"生态树",paraId:19,tocIndex:6},{value:"ForceLayout",paraId:19,tocIndex:6},{value:"'force'",paraId:19,tocIndex:6},{value:"力导向布局",paraId:19,tocIndex:6},{value:"FruchtermanLayout",paraId:19,tocIndex:6},{value:"'fruchterman'",paraId:19,tocIndex:6},{value:"Fruchterman 力导向布局",paraId:19,tocIndex:6},{value:"GridLayout",paraId:19,tocIndex:6},{value:"'grid'",paraId:19,tocIndex:6},{value:"网格布局",paraId:19,tocIndex:6},{value:"IndentedLayout",paraId:19,tocIndex:6},{value:"'indented'",paraId:19,tocIndex:6},{value:"缩进树",paraId:19,tocIndex:6},{value:"MDSLayout",paraId:19,tocIndex:6},{value:"'mds'",paraId:19,tocIndex:6},{value:"高维数据降维布局",paraId:19,tocIndex:6},{value:"MindmapLayout",paraId:19,tocIndex:6},{value:"'mindmap'",paraId:19,tocIndex:6},{value:"脑图树",paraId:19,tocIndex:6},{value:"RadialLayout",paraId:19,tocIndex:6},{value:"'radial'",paraId:19,tocIndex:6},{value:"径向布局",paraId:19,tocIndex:6},{value:"RandomLayout",paraId:19,tocIndex:6},{value:"'random'",paraId:19,tocIndex:6},{value:"随机布局",paraId:19,tocIndex:6},{value:"配置方式：",paraId:20,tocIndex:6},{value:"在 ",paraId:21,tocIndex:6},{value:"GraphOptions.layout",paraId:21,tocIndex:6},{value:" 中配置，示例：",paraId:21,tocIndex:6},{value:"const graph = new Graph({\n  // ... 其他配置\n  layout: {\n    type: 'force',\n  },\n});\n",paraId:22,tocIndex:6},{value:"spectral",paraId:23,tocIndex:7},{value:"tableau",paraId:24,tocIndex:7},{value:"oranges",paraId:25,tocIndex:7},{value:"greens",paraId:26,tocIndex:7},{value:"blues",paraId:27,tocIndex:7},{value:"配置方式：",paraId:28,tocIndex:7},{value:"在 ",paraId:29,tocIndex:7},{value:"GraphOptions.[node|edge|combo].palette",paraId:29,tocIndex:7},{value:" 中配置，示例：",paraId:29,tocIndex:7},{value:"const graph = new Graph({\n  // ... 其他配置\n  node: {\n    palette: 'tableau',\n  },\n});\n",paraId:30,tocIndex:7},{value:"注册类型",paraId:31,tocIndex:8},{value:"描述",paraId:31,tocIndex:8},{value:"dark",paraId:31,tocIndex:8},{value:"深色主题",paraId:31,tocIndex:8},{value:"light",paraId:31,tocIndex:8},{value:"浅色主题",paraId:31,tocIndex:8},{value:"配置方式：",paraId:32,tocIndex:8},{value:"在 ",paraId:33,tocIndex:8},{value:"GraphOptions.theme",paraId:33,tocIndex:8},{value:" 中配置，示例：",paraId:33,tocIndex:8},{value:"const graph = new Graph({\n  // ... 其他配置\n  theme: 'dark',\n});\n",paraId:34,tocIndex:8},{value:"扩展",paraId:35,tocIndex:9},{value:"注册类型",paraId:35,tocIndex:9},{value:"描述",paraId:35,tocIndex:9},{value:"BubbleSets",paraId:35,tocIndex:9},{value:"'bubble-sets'",paraId:35,tocIndex:9},{value:"气泡集",paraId:35,tocIndex:9},{value:"EdgeFilterLens",paraId:35,tocIndex:9},{value:"'edge-filter-lens'",paraId:35,tocIndex:9},{value:"边过滤镜",paraId:35,tocIndex:9},{value:"GridLine",paraId:35,tocIndex:9},{value:"'grid-line'",paraId:35,tocIndex:9},{value:"网格线",paraId:35,tocIndex:9},{value:"Background",paraId:35,tocIndex:9},{value:"'background'",paraId:35,tocIndex:9},{value:"背景",paraId:35,tocIndex:9},{value:"Contextmenu",paraId:35,tocIndex:9},{value:"'contextmenu'",paraId:35,tocIndex:9},{value:"上下文菜单",paraId:35,tocIndex:9},{value:"Fisheye",paraId:35,tocIndex:9},{value:"'fisheye'",paraId:35,tocIndex:9},{value:"鱼眼放大镜",paraId:35,tocIndex:9},{value:"Fullscreen",paraId:35,tocIndex:9},{value:"'fullscreen'",paraId:35,tocIndex:9},{value:"全屏展示",paraId:35,tocIndex:9},{value:"History",paraId:35,tocIndex:9},{value:"'history'",paraId:35,tocIndex:9},{value:"历史记录",paraId:35,tocIndex:9},{value:"Hull",paraId:35,tocIndex:9},{value:"'hull'",paraId:35,tocIndex:9},{value:"轮廓包围",paraId:35,tocIndex:9},{value:"Legend",paraId:35,tocIndex:9},{value:"'legend'",paraId:35,tocIndex:9},{value:"图例",paraId:35,tocIndex:9},{value:"Minimap",paraId:35,tocIndex:9},{value:"'minimap'",paraId:35,tocIndex:9},{value:"小地图",paraId:35,tocIndex:9},{value:"Snapline",paraId:35,tocIndex:9},{value:"'snapline'",paraId:35,tocIndex:9},{value:"对齐线",paraId:35,tocIndex:9},{value:"Timebar",paraId:35,tocIndex:9},{value:"'timebar'",paraId:35,tocIndex:9},{value:"时间条",paraId:35,tocIndex:9},{value:"Toolbar",paraId:35,tocIndex:9},{value:"'toolbar'",paraId:35,tocIndex:9},{value:"工具栏",paraId:35,tocIndex:9},{value:"Tooltip",paraId:35,tocIndex:9},{value:"'tooltip'",paraId:35,tocIndex:9},{value:"提示框",paraId:35,tocIndex:9},{value:"Watermark",paraId:35,tocIndex:9},{value:"'watermark'",paraId:35,tocIndex:9},{value:"水印",paraId:35,tocIndex:9},{value:"配置方式：",paraId:36,tocIndex:9},{value:"在 ",paraId:37,tocIndex:9},{value:"GraphOptions.plugins",paraId:37,tocIndex:9},{value:" 中配置，示例：",paraId:37,tocIndex:9},{value:"const graph = new Graph({\n  // ... 其他配置\n  plugins: ['minimap', 'contextmenu'],\n});\n",paraId:38,tocIndex:9},{value:"扩展",paraId:39,tocIndex:10},{value:"注册类型",paraId:39,tocIndex:10},{value:"描述",paraId:39,tocIndex:10},{value:"ProcessParallelEdges",paraId:39,tocIndex:10},{value:"'process-parallel-edges'",paraId:39,tocIndex:10},{value:"平行边",paraId:39,tocIndex:10},{value:"PlaceRadialLabels",paraId:39,tocIndex:10},{value:"'place-radial-labels'",paraId:39,tocIndex:10},{value:"径向标签",paraId:39,tocIndex:10},{value:"配置方式：",paraId:40,tocIndex:10},{value:"在 ",paraId:41,tocIndex:10},{value:"GraphOptions.transforms",paraId:41,tocIndex:10},{value:" 中配置，示例：",paraId:41,tocIndex:10},{value:"const graph = new Graph({\n  // ... 其他配置\n  transform: ['process-parallel-edges', 'place-radial-labels'],\n});\n",paraId:42,tocIndex:10},{value:"注册类型",paraId:43,tocIndex:11},{value:"描述",paraId:43,tocIndex:11},{value:"circle",paraId:43,tocIndex:11},{value:"圆形",paraId:43,tocIndex:11},{value:"ellipse",paraId:43,tocIndex:11},{value:"椭圆",paraId:43,tocIndex:11},{value:"group",paraId:43,tocIndex:11},{value:"分组",paraId:43,tocIndex:11},{value:"html",paraId:43,tocIndex:11},{value:"HTML",paraId:43,tocIndex:11},{value:"image",paraId:43,tocIndex:11},{value:"图片",paraId:43,tocIndex:11},{value:"line",paraId:43,tocIndex:11},{value:"直线",paraId:43,tocIndex:11},{value:"path",paraId:43,tocIndex:11},{value:"路径",paraId:43,tocIndex:11},{value:"polygon",paraId:43,tocIndex:11},{value:"多边形",paraId:43,tocIndex:11},{value:"polyline",paraId:43,tocIndex:11},{value:"折线",paraId:43,tocIndex:11},{value:"rect",paraId:43,tocIndex:11},{value:"矩形",paraId:43,tocIndex:11},{value:"text",paraId:43,tocIndex:11},{value:"文本",paraId:43,tocIndex:11},{value:"label",paraId:43,tocIndex:11},{value:"标签",paraId:43,tocIndex:11},{value:"badge",paraId:43,tocIndex:11},{value:"徽标",paraId:43,tocIndex:11},{value:"使用方式：",paraId:44,tocIndex:11},{value:"自定义图形时，元素类成员方法 ",paraId:45,tocIndex:11},{value:"upsert",paraId:46,tocIndex:11},{value:" 方法第二个参数传入：",paraId:45,tocIndex:11},{value:"this.upsert('shape-key', 'text', { text: 'label', fontSize: 16 }, this);\n",paraId:47,tocIndex:11}]},58798:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(95185);const d=[{value:"中文字“图”在大家的传统认知里指的是图画、图像，而图论与可视化中的“图”—— Graph 则有着更精确的定位：主体（objects）与关系（relationships）的组成。它甚至不局限于视觉，主体与关系的数据也可以称为图。",paraId:0,tocIndex:0},{value:"—— 摘自 ",paraId:1,tocIndex:0},{value:"AntV 专栏",paraId:1,tocIndex:0},{value:"文章：",paraId:1,tocIndex:0},{value:"Graph Visualization · 知多少 之 《HelloWorld 图可视化",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"在 G6 中，Graph 对象是图的载体，它包含了图上的所有元素（节点、边等），同时挂载了图的相关操作（如交互监听、元素操作、渲染等）。",paraId:2,tocIndex:0},{value:"Graph 对象的完整生命周期包括：",paraId:3,tocIndex:0},{value:"创建",paraId:4,tocIndex:0},{value:": 通过 ",paraId:4,tocIndex:0},{value:"new Graph(options)",paraId:4,tocIndex:0},{value:" 实例化",paraId:4,tocIndex:0},{value:"初始化",paraId:4,tocIndex:0},{value:": 在创建时进行内部初始化",paraId:4,tocIndex:0},{value:"渲染",paraId:4,tocIndex:0},{value:": 调用 ",paraId:4,tocIndex:0},{value:"graph.render()",paraId:4,tocIndex:0},{value:" 进行首次渲染",paraId:4,tocIndex:0},{value:"更新",paraId:4,tocIndex:0},{value:": 通过各种 API 更新图的数据和配置",paraId:4,tocIndex:0},{value:"销毁",paraId:4,tocIndex:0},{value:": 调用 ",paraId:4,tocIndex:0},{value:"graph.destroy()",paraId:4,tocIndex:0},{value:" 销毁实例并释放资源",paraId:4,tocIndex:0},{value:"要使用 G6 创建 Graph，首先需要引入 ",paraId:5,tocIndex:1},{value:"@antv/g6",paraId:5,tocIndex:1},{value:" 库，然后实例化 Graph 类。",paraId:5,tocIndex:1},{value:"安装教程参考：",paraId:6,tocIndex:1},{value:"开始使用 - 安装",paraId:7,tocIndex:1},{value:"Graph 类接收一个实例化参数对象，称之为",paraId:8,tocIndex:1},{value:"配置项",paraId:8,tocIndex:1},{value:"(Options，在可视化理论中将其称为：",paraId:8,tocIndex:1},{value:"Specification",paraId:8,tocIndex:1},{value:")，用于配置图的数据、元素样式、布局、交互等。",paraId:8,tocIndex:1},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container', // 通过 DOM ID 指定容器\n  width: 800, // 画布宽高（若容器已设尺寸可省略）\n  height: 600,\n  data: {\n    // 初始数据\n    nodes: [{ id: 'start', data: { label: 'Hello G6!' } }],\n  },\n});\n",paraId:9,tocIndex:1},{value:"实例化过程仅是配置图的基本信息，要将图渲染到页面上，还需要调用 ",paraId:10},{value:"render",paraId:10},{value:" 方法",paraId:10},{value:"通过下表速查图的配置项，更多类型定义说明和详细用法请参考 ",paraId:11,tocIndex:2},{value:"API - 图配置项",paraId:12,tocIndex:2},{value:"。",paraId:11,tocIndex:2},{value:"属性",paraId:13,tocIndex:2},{value:"类型",paraId:13,tocIndex:2},{value:"默认值",paraId:13,tocIndex:2},{value:"描述",paraId:13,tocIndex:2},{value:"container",paraId:13,tocIndex:2},{value:"string | HTMLElement | Canvas",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"图容器，可以是 DOM 元素 ID、DOM 元素实例或 Canvas 实例",paraId:13,tocIndex:2},{value:"width",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"容器宽度",paraId:13,tocIndex:2},{value:"画布宽度(像素)",paraId:13,tocIndex:2},{value:"height",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"容器高度",paraId:13,tocIndex:2},{value:"画布高度(像素)",paraId:13,tocIndex:2},{value:"autoFit",paraId:13,tocIndex:2},{value:"'view' | 'center' | object",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"自动适配策略，'view'(适应视图)或'center'(居中)",paraId:13,tocIndex:2},{value:"autoResize",paraId:13,tocIndex:2},{value:"boolean",paraId:13,tocIndex:2},{value:"false",paraId:13,tocIndex:2},{value:"是否在窗口大小变化时自动调整画布大小",paraId:13,tocIndex:2},{value:"background",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"画布背景色，也作为导出图片时的背景色",paraId:13,tocIndex:2},{value:"canvas",paraId:13,tocIndex:2},{value:"CanvasConfig",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"画布配置",paraId:13,tocIndex:2},{value:"cursor",paraId:13,tocIndex:2},{value:"Cursor",paraId:13,tocIndex:2},{value:"'default'",paraId:13,tocIndex:2},{value:"指针样式",paraId:13,tocIndex:2},{value:"devicePixelRatio",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"2",paraId:13,tocIndex:2},{value:"设备像素比",paraId:13,tocIndex:2},{value:"padding",paraId:13,tocIndex:2},{value:"number | number[]",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"画布内边距，在自适应时会根据内边距进行适配",paraId:13,tocIndex:2},{value:"renderer",paraId:13,tocIndex:2},{value:"(layer: string) => IRenderer",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"手动指定渲染器",paraId:13,tocIndex:2},{value:"rotation",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"0",paraId:13,tocIndex:2},{value:"旋转角度(弧度)",paraId:13,tocIndex:2},{value:"zoom",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"1",paraId:13,tocIndex:2},{value:"缩放比例",paraId:13,tocIndex:2},{value:"zoomRange",paraId:13,tocIndex:2},{value:"[number, number]",paraId:13,tocIndex:2},{value:"[0.01, 10]",paraId:13,tocIndex:2},{value:"缩放比例的限制范围",paraId:13,tocIndex:2},{value:"x",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"视口 x 坐标",paraId:13,tocIndex:2},{value:"y",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"视口 y 坐标",paraId:13,tocIndex:2},{value:"data",paraId:13,tocIndex:2},{value:"GraphData",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"图数据，详见 ",paraId:13,tocIndex:2},{value:"数据",paraId:14,tocIndex:2},{value:"node",paraId:13,tocIndex:2},{value:"NodeOptions",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"节点全局配置，详见 ",paraId:13,tocIndex:2},{value:"节点",paraId:15,tocIndex:2},{value:"edge",paraId:13,tocIndex:2},{value:"EdgeOptions",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"边全局配置，详见 ",paraId:13,tocIndex:2},{value:"边",paraId:16,tocIndex:2},{value:"combo",paraId:13,tocIndex:2},{value:"ComboOptions",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"组合全局配置，详见 ",paraId:13,tocIndex:2},{value:"组合",paraId:17,tocIndex:2},{value:"animation",paraId:13,tocIndex:2},{value:"boolean | AnimationEffectTiming",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"全局动画配置，详见 ",paraId:13,tocIndex:2},{value:"动画",paraId:18,tocIndex:2},{value:"theme",paraId:13,tocIndex:2},{value:"string | false",paraId:13,tocIndex:2},{value:"'light'",paraId:13,tocIndex:2},{value:"主题配置，支持 ",paraId:13,tocIndex:2},{value:"'light'",paraId:13,tocIndex:2},{value:"、",paraId:13,tocIndex:2},{value:"'dark'",paraId:13,tocIndex:2},{value:" 或自定义主题名",paraId:13,tocIndex:2},{value:"layout",paraId:13,tocIndex:2},{value:"LayoutOptions | LayoutOptions[]",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"布局配置，详见 ",paraId:13,tocIndex:2},{value:"布局",paraId:19,tocIndex:2},{value:"behaviors",paraId:13,tocIndex:2},{value:"(string | CustomBehaviorOption)[]",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"交互行为配置，详见 ",paraId:13,tocIndex:2},{value:"交互",paraId:20,tocIndex:2},{value:"plugins",paraId:13,tocIndex:2},{value:"(string | CustomPluginOption)[]",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"插件配置，详见 ",paraId:13,tocIndex:2},{value:"插件",paraId:21,tocIndex:2},{value:"transforms",paraId:13,tocIndex:2},{value:"TransformOptions",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"数据转换器配置，详见 ",paraId:13,tocIndex:2},{value:"数据转换器",paraId:22,tocIndex:2},{value:"图实例提供了一些只读属性，用于获取图的状态信息：",paraId:23,tocIndex:3},{value:"属性",paraId:24,tocIndex:3},{value:"类型",paraId:24,tocIndex:3},{value:"描述",paraId:24,tocIndex:3},{value:"destroyed",paraId:24,tocIndex:3},{value:"boolean",paraId:24,tocIndex:3},{value:"当前图实例是否已被销毁",paraId:24,tocIndex:3},{value:"rendered",paraId:24,tocIndex:3},{value:"boolean",paraId:24,tocIndex:3},{value:"当前图实例是否已完成渲染",paraId:24,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 200,\n  width: 300,\n  height: 200,\n  padding: 30,\n  autoResize: true,\n\n  // 视口配置\n  zoom: 0.8,\n  autoFit: 'view',\n  padding: 20,\n\n  // 主题配置\n  theme: 'dark',\n\n  // 节点配置\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n\n  // 边配置\n  edge: {\n    style: {\n      stroke: '#A4D3EE',\n      lineWidth: 1.5,\n      endArrow: true,\n    },\n  },\n\n  // 布局配置\n  layout: {\n    type: 'force',\n    preventOverlap: true,\n    linkDistance: 100,\n  },\n\n  // 交互行为\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n\n  // 初始数据\n  data: {\n    nodes: [\n      { id: 'node1', data: { label: '节点1' } },\n      { id: 'node2', data: { label: '节点2' } },\n    ],\n    edges: [{ source: 'node1', target: 'node2', data: { label: '关系' } }],\n  },\n});\n\ngraph.render();\n",paraId:25,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\n// 创建图实例\nconst graph = new Graph({\n  // 基础配置\n  container: 'container',\n  width: 300,\n  height: 200,\n  padding: 30,\n  autoResize: true,\n\n  // 视口配置\n  zoom: 0.8,\n  autoFit: 'view',\n  padding: 20,\n\n  // 主题配置\n  theme: 'dark',\n\n  // 节点配置\n  node: {\n    style: {\n      fill: '#7FFFD4',\n      stroke: '#5CACEE',\n      lineWidth: 2,\n    },\n  },\n\n  // 边配置\n  edge: {\n    style: {\n      stroke: '#A4D3EE',\n      lineWidth: 1.5,\n      endArrow: true,\n    },\n  },\n\n  // 布局配置\n  layout: {\n    type: 'force',\n    preventOverlap: true,\n    linkDistance: 100,\n  },\n\n  // 交互行为\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n\n  // 初始数据\n  data: {\n    nodes: [\n      { id: 'node1', data: { label: '节点1' } },\n      { id: 'node2', data: { label: '节点2' } },\n    ],\n    edges: [{ source: 'node1', target: 'node2', data: { label: '关系' } }],\n  },\n});\n\n// 渲染图\ngraph.render();\n",paraId:26,tocIndex:5},{value:"要了解如何快速创建一个图，请参考",paraId:27,tocIndex:5},{value:"快速上手",paraId:28,tocIndex:5},{value:"。",paraId:27,tocIndex:5},{value:"要深入了解配置项中个部分的概念，请阅读本章节的其他内容。",paraId:27,tocIndex:5}]},88249:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(64739);const d=[{value:"{ type: 'view'; options?: ",paraId:0,tocIndex:0},{value:"FitViewOptions",paraId:1,tocIndex:0},{value:"; animation?: ",paraId:0,tocIndex:0},{value:"ViewportAnimationEffectTiming",paraId:2,tocIndex:0},{value:"; } | { type: 'center'; animation?: ",paraId:0,tocIndex:0},{value:"ViewportAnimationEffectTiming",paraId:3,tocIndex:0},{value:"; } | 'view' | 'center'",paraId:0,tocIndex:0},{value:"是否自动适应画布。⚠️ ",paraId:4,tocIndex:0},{value:"注意",paraId:4,tocIndex:0},{value:"：每次执行 ",paraId:4,tocIndex:0},{value:"render",paraId:4,tocIndex:0},{value:" 时，都会根据 ",paraId:4,tocIndex:0},{value:"autoFit",paraId:4,tocIndex:0},{value:" 进行自适应。",paraId:4,tocIndex:0},{value:"两种基本自适应模式：",paraId:5,tocIndex:0},{value:"'view'",paraId:6,tocIndex:0},{value:" - 自动缩放，确保所有内容都在视图内可见",paraId:6,tocIndex:0},{value:"'center'",paraId:6,tocIndex:0},{value:" - 内容居中显示，但不改变缩放比例",paraId:6,tocIndex:0},{value:"还可通过对象形式实现更精细的自适应控制：",paraId:7,tocIndex:0},{value:"const graph = new Graph({\n  autoFit: {\n    type: 'view', // 自适应类型：'view' 或 'center'\n    options: {\n      // 仅适用于 'view' 类型\n      when: 'overflow', // 何时适配：'overflow'(仅当内容溢出时) 或 'always'(总是适配)\n      direction: 'x', // 适配方向：'x'、'y' 或 'both'\n    },\n    animation: {\n      // 自适应动画效果\n      duration: 1000, // 动画持续时间(毫秒)\n      easing: 'ease-in-out', // 动画缓动函数\n    },\n  },\n});\n",paraId:8,tocIndex:0},{value:"属性",paraId:9,tocIndex:1},{value:"描述",paraId:9,tocIndex:1},{value:"类型",paraId:9,tocIndex:1},{value:"默认值",paraId:9,tocIndex:1},{value:"必选",paraId:9,tocIndex:1},{value:"when",paraId:9,tocIndex:1},{value:"在以下情况下进行适配 ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'overflow'",paraId:9,tocIndex:1},{value:" 仅当图内容超出视口时进行适配 ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:" 总是进行适配",paraId:9,tocIndex:1},{value:"'overflow",paraId:9,tocIndex:1},{value:"' | ",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:"'always'",paraId:9,tocIndex:1},{value:"direction",paraId:9,tocIndex:1},{value:"仅对指定方向进行适配 ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'x'",paraId:9,tocIndex:1},{value:" 仅适配 x 方向 ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'y'",paraId:9,tocIndex:1},{value:" 仅适配 y 方向 ",paraId:9,tocIndex:1},{value:" - ",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:" 适配 x 和 y 方向",paraId:9,tocIndex:1},{value:"'x",paraId:9,tocIndex:1},{value:"' | ",paraId:9,tocIndex:1},{value:"'y",paraId:9,tocIndex:1},{value:"' | ",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:"'both'",paraId:9,tocIndex:1},{value:"type ViewportAnimationEffectTiming =\n  | boolean // true 启用默认动画，false 禁用动画\n  | {\n      easing?: string; // 动画缓动函数：'ease-in-out'、'ease-in'、'ease-out'、'linear'\n      duration?: number; // 动画持续时间(毫秒)\n    };\n",paraId:10,tocIndex:2},{value:"boolean",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"默认值:",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"false",paraId:11,tocIndex:3},{value:"是否自动调整画布大小。",paraId:12,tocIndex:3},{value:"基于 ",paraId:13,tocIndex:3},{value:"window.onresize",paraId:13,tocIndex:3},{value:" 事件实现。当浏览器窗口大小变化时，画布将自动调整大小以适应容器。",paraId:13,tocIndex:3},{value:"string",paraId:14,tocIndex:4},{value:"画布背景色。",paraId:15,tocIndex:4},{value:"该颜色作为导出图片时的背景色。可以使用任何有效的 CSS 颜色值，如十六进制、RGB、RGBA 等。",paraId:16,tocIndex:4},{value:"CanvasConfig",paraId:17,tocIndex:5},{value:"画布配置。GraphOptions 下相关配置项（如 ",paraId:18,tocIndex:5},{value:"container",paraId:18,tocIndex:5},{value:"、",paraId:18,tocIndex:5},{value:"width",paraId:18,tocIndex:5},{value:"、",paraId:18,tocIndex:5},{value:"height",paraId:18,tocIndex:5},{value:"、",paraId:18,tocIndex:5},{value:"devicePixelRatio",paraId:18,tocIndex:5},{value:"、",paraId:18,tocIndex:5},{value:"background",paraId:18,tocIndex:5},{value:"、",paraId:18,tocIndex:5},{value:"cursor",paraId:18,tocIndex:5},{value:"）为快捷配置项，会被转换为 canvas 配置项。",paraId:18,tocIndex:5},{value:"属性",paraId:19,tocIndex:6},{value:"描述",paraId:19,tocIndex:6},{value:"类型",paraId:19,tocIndex:6},{value:"默认值",paraId:19,tocIndex:6},{value:"必填",paraId:19,tocIndex:6},{value:"container",paraId:19,tocIndex:6},{value:"画布容器",paraId:19,tocIndex:6},{value:"string | HTMLElement",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"devicePixelRatio",paraId:19,tocIndex:6},{value:"设备像素比",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"width",paraId:19,tocIndex:6},{value:"画布宽度",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"height",paraId:19,tocIndex:6},{value:"画布高度",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"cursor",paraId:19,tocIndex:6},{value:"指针样式，与 ",paraId:19,tocIndex:6},{value:"GraphOptions.cursor",paraId:20,tocIndex:6},{value:" 配置相同",paraId:19,tocIndex:6},{value:"string",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"background",paraId:19,tocIndex:6},{value:"画布背景色",paraId:19,tocIndex:6},{value:"string",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"renderer",paraId:19,tocIndex:6},{value:"渲染器，与 ",paraId:19,tocIndex:6},{value:"GraphOptions.renderer",paraId:21,tocIndex:6},{value:" 配置相同",paraId:19,tocIndex:6},{value:"(layer: ",paraId:19,tocIndex:6},{value:"'background'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'main'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'label'",paraId:19,tocIndex:6},{value:" | ",paraId:19,tocIndex:6},{value:"'transient'",paraId:19,tocIndex:6},{value:") => IRenderer",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"enableMultiLayer",paraId:19,tocIndex:6},{value:"是否启用多图层。非动态参数，仅在初始化时生效",paraId:19,tocIndex:6},{value:"boolean",paraId:19,tocIndex:6},{value:"-",paraId:19,tocIndex:6},{value:"string |",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"HTMLElement",paraId:22,tocIndex:7},{value:" ",paraId:22,tocIndex:7},{value:"|",paraId:22,tocIndex:7},{value:" Canvas",paraId:22,tocIndex:7},{value:"画布容器，可以是以下三种赋值之一：",paraId:23,tocIndex:7},{value:"DOM 元素的 ID 字符串，如 ",paraId:24,tocIndex:7},{value:"'container'",paraId:24,tocIndex:7},{value:"HTML 元素对象，如 ",paraId:24,tocIndex:7},{value:"document.getElementById('container')",paraId:24,tocIndex:7},{value:"Canvas 实例，如 ",paraId:24,tocIndex:7},{value:"new Canvas(options)",paraId:24,tocIndex:7},{value:"，其中 ",paraId:24,tocIndex:7},{value:"options",paraId:24,tocIndex:7},{value:" 为 ",paraId:24,tocIndex:7},{value:"CanvasConfig",paraId:25,tocIndex:7},{value:" 类型。",paraId:24,tocIndex:7},{value:"string",paraId:26,tocIndex:8},{value:"指针样式，控制鼠标悬停在画布上时的光标形状。可以使用任何有效的 CSS cursor 值。",paraId:27,tocIndex:8},{value:"支持的值有： ",paraId:28,tocIndex:8},{value:"'auto'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'default'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'none'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'context-menu'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'help'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'pointer'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'progress'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'wait'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'cell'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'crosshair'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'text'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'vertical-text'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'alias'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'copy'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'move'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'no-drop'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'not-allowed'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'grab'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'grabbing'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'all-scroll'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'col-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'row-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'n-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'e-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'s-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'w-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'ne-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'nw-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'se-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'sw-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'ew-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'ns-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'nesw-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'nwse-resize'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'zoom-in'",paraId:28,tocIndex:8},{value:"、",paraId:28,tocIndex:8},{value:"'zoom-out'",paraId:28,tocIndex:8},{value:"。",paraId:28,tocIndex:8},{value:"这里的 Cursor 值参考 ",paraId:29,tocIndex:8},{value:"MDN - cursor",paraId:29,tocIndex:8},{value:"。",paraId:29,tocIndex:8},{value:"number",paraId:30,tocIndex:9},{value:"设备像素比。",paraId:31,tocIndex:9},{value:"用于高清屏的设备像素比，默认为 ",paraId:32,tocIndex:9},{value:"window.devicePixelRatio",paraId:32,tocIndex:9},{value:"。",paraId:32,tocIndex:9},{value:"number",paraId:33,tocIndex:10},{value:"画布宽度。如果未设置，则会自动获取容器宽度。",paraId:34,tocIndex:10},{value:"number",paraId:35,tocIndex:11},{value:"画布高度。如果未设置，则会自动获取容器高度。",paraId:36,tocIndex:11},{value:"(layer: 'background' | 'main' | 'label' | 'transient') =>",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"IRenderer",paraId:37,tocIndex:12},{value:"手动指定渲染器",paraId:38,tocIndex:12},{value:"G6 采用了分层渲染的方式，分为 ",paraId:39,tocIndex:12},{value:"background",paraId:39,tocIndex:12},{value:"、",paraId:39,tocIndex:12},{value:"main",paraId:39,tocIndex:12},{value:"、",paraId:39,tocIndex:12},{value:"label",paraId:39,tocIndex:12},{value:"、",paraId:39,tocIndex:12},{value:"transient",paraId:39,tocIndex:12},{value:" 四层，用户可以通过该配置项分别设置每层画布的渲染器。",paraId:39,tocIndex:12},{value:"示例",paraId:40,tocIndex:12},{value:": 使用 SVG 渲染器进行渲染",paraId:40,tocIndex:12},{value:"import { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  renderer: () => new SVGRenderer(),\n});\n",paraId:41,tocIndex:12},{value:"number | number[]",paraId:42,tocIndex:13},{value:"画布内边距",paraId:43,tocIndex:13},{value:"通常在自适应时，会根据内边距进行适配。可以是单个数值（四边相同）或者数组形式（按顺序指定上、右、下、左的内边距）。",paraId:44,tocIndex:13},{value:"示例：",paraId:45,tocIndex:13},{value:"// 单个数值\nconst graph1 = new Graph({\n  padding: 20, // 四边均为 20 像素的内边距\n});\n\n// 数组形式\nconst graph2 = new Graph({\n  padding: [20, 40, 20, 40], // 上、右、下、左的内边距\n});\n",paraId:46,tocIndex:13},{value:"number",paraId:47,tocIndex:14},{value:" ",paraId:47,tocIndex:14},{value:"默认值:",paraId:47,tocIndex:14},{value:" ",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"旋转角度（以弧度为单位）",paraId:48,tocIndex:14},{value:"number",paraId:49,tocIndex:15},{value:"视口 x 坐标，设置视口的初始水平位置。",paraId:50,tocIndex:15},{value:"number",paraId:51,tocIndex:16},{value:"视口 y 坐标，设置视口的初始垂直位置。",paraId:52,tocIndex:16},{value:"number",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"默认值:",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"1",paraId:53,tocIndex:17},{value:"设置视口的初始缩放级别，1 表示 100%（原始大小）。",paraId:54,tocIndex:17},{value:"[number, number]",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"默认值:",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"[0.01, 10]",paraId:55,tocIndex:18},{value:"缩放范围，限制用户可以缩放的最小和最大比例。",paraId:56,tocIndex:18},{value:"boolean | ",paraId:57,tocIndex:19},{value:"AnimationEffectTiming",paraId:58,tocIndex:19},{value:"启用或关闭全局动画",paraId:59,tocIndex:19},{value:"为动画配置项时，会启用动画，并将该动画配置作为全局动画的基础配置。",paraId:60,tocIndex:19},{value:"属性",paraId:61,tocIndex:20},{value:"描述",paraId:61,tocIndex:20},{value:"类型",paraId:61,tocIndex:20},{value:"默认值",paraId:61,tocIndex:20},{value:"必选",paraId:61,tocIndex:20},{value:"delay",paraId:61,tocIndex:20},{value:"动画延迟时间",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"direction",paraId:61,tocIndex:20},{value:"动画方向",paraId:61,tocIndex:20},{value:"'alternate'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'alternate-reverse'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'normal'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'reverse'",paraId:61,tocIndex:20},{value:"'forward'",paraId:61,tocIndex:20},{value:"duration",paraId:61,tocIndex:20},{value:"动画持续时间",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"easing",paraId:61,tocIndex:20},{value:"动画缓动函数",paraId:61,tocIndex:20},{value:"string",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"fill",paraId:61,tocIndex:20},{value:"动画结束后的填充模式",paraId:61,tocIndex:20},{value:"'auto'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'backwards'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'both'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'forwards'",paraId:61,tocIndex:20},{value:" | ",paraId:61,tocIndex:20},{value:"'none'",paraId:61,tocIndex:20},{value:"'none'",paraId:61,tocIndex:20},{value:"iterations",paraId:61,tocIndex:20},{value:"动画迭代次数",paraId:61,tocIndex:20},{value:"number",paraId:61,tocIndex:20},{value:"-",paraId:61,tocIndex:20},{value:"示例：",paraId:62,tocIndex:20},{value:"// 简单启用\nconst graph1 = new Graph({\n  animation: true,\n});\n\n// 详细配置\nconst graph2 = new Graph({\n  animation: {\n    duration: 500, // 动画持续时间（毫秒）\n    easing: 'ease-in-out', // 缓动函数\n  },\n});\n",paraId:63,tocIndex:20},{value:"GraphData",paraId:64,tocIndex:21},{value:"数据。",paraId:65,tocIndex:21},{value:"属性",paraId:66,tocIndex:22},{value:"描述",paraId:66,tocIndex:22},{value:"类型",paraId:66,tocIndex:22},{value:"默认值",paraId:66,tocIndex:22},{value:"必选",paraId:66,tocIndex:22},{value:"nodes",paraId:66,tocIndex:22},{value:"节点数据",paraId:66,tocIndex:22},{value:"NodeData",paraId:67,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"edges",paraId:66,tocIndex:22},{value:"边数据",paraId:66,tocIndex:22},{value:"EdgeData",paraId:68,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"combos",paraId:66,tocIndex:22},{value:"组合数据",paraId:66,tocIndex:22},{value:"ComboData",paraId:69,tocIndex:22},{value:"[]",paraId:66,tocIndex:22},{value:"-",paraId:66,tocIndex:22},{value:"✓",paraId:66,tocIndex:22},{value:"属性",paraId:70,tocIndex:23},{value:"描述",paraId:70,tocIndex:23},{value:"类型",paraId:70,tocIndex:23},{value:"默认值",paraId:70,tocIndex:23},{value:"必选",paraId:70,tocIndex:23},{value:"id",paraId:70,tocIndex:23},{value:"节点的唯一标识符，用于区分不同的节点",paraId:70,tocIndex:23},{value:"string",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"✓",paraId:70,tocIndex:23},{value:"type",paraId:70,tocIndex:23},{value:"节点类型，内置节点类型名称或者自定义节点的名称",paraId:70,tocIndex:23},{value:"string",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"data",paraId:70,tocIndex:23},{value:"节点数据，用于存储节点的自定义数据，例如节点的名称、描述等。可以在样式映射中通过回调函数获取",paraId:70,tocIndex:23},{value:"object",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"style",paraId:70,tocIndex:23},{value:"节点样式，包括位置、大小、颜色等视觉属性",paraId:70,tocIndex:23},{value:"object",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"states",paraId:70,tocIndex:23},{value:"节点初始状态，如选中、激活、悬停等",paraId:70,tocIndex:23},{value:"string[]",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"combo",paraId:70,tocIndex:23},{value:"所属的组合 ID，用于组织节点的层级关系，如果没有则为 null",paraId:70,tocIndex:23},{value:"string | null",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"children",paraId:70,tocIndex:23},{value:"子节点 ID 集合，仅在树图场景下使用",paraId:70,tocIndex:23},{value:"string[]",paraId:70,tocIndex:23},{value:"-",paraId:70,tocIndex:23},{value:"属性",paraId:71,tocIndex:24},{value:"描述",paraId:71,tocIndex:24},{value:"类型",paraId:71,tocIndex:24},{value:"默认值",paraId:71,tocIndex:24},{value:"必选",paraId:71,tocIndex:24},{value:"source",paraId:71,tocIndex:24},{value:"边起始节点 ID",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"✓",paraId:71,tocIndex:24},{value:"target",paraId:71,tocIndex:24},{value:"边目标节点 ID",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"✓",paraId:71,tocIndex:24},{value:"id",paraId:71,tocIndex:24},{value:"边的唯一标识符",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"type",paraId:71,tocIndex:24},{value:"边类型，内置边类型名称或者自定义边的名称",paraId:71,tocIndex:24},{value:"string",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"data",paraId:71,tocIndex:24},{value:"边数据，用于存储边的自定义数据，可以在样式映射中通过回调函数获取",paraId:71,tocIndex:24},{value:"object",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"style",paraId:71,tocIndex:24},{value:"边样式，包括线条颜色、宽度、箭头等视觉属性",paraId:71,tocIndex:24},{value:"object",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"states",paraId:71,tocIndex:24},{value:"边初始状态",paraId:71,tocIndex:24},{value:"string[]",paraId:71,tocIndex:24},{value:"-",paraId:71,tocIndex:24},{value:"属性",paraId:72,tocIndex:25},{value:"描述",paraId:72,tocIndex:25},{value:"类型",paraId:72,tocIndex:25},{value:"默认值",paraId:72,tocIndex:25},{value:"必选",paraId:72,tocIndex:25},{value:"id",paraId:72,tocIndex:25},{value:"组合的唯一标识符",paraId:72,tocIndex:25},{value:"string",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"✓",paraId:72,tocIndex:25},{value:"type",paraId:72,tocIndex:25},{value:"组合类型，内置组合类型名称或者自定义组合名称",paraId:72,tocIndex:25},{value:"string",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"data",paraId:72,tocIndex:25},{value:"组合数据，用于存储组合的自定义数据，可以在样式映射中通过回调函数获取",paraId:72,tocIndex:25},{value:"object",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"style",paraId:72,tocIndex:25},{value:"组合样式",paraId:72,tocIndex:25},{value:"object",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"states",paraId:72,tocIndex:25},{value:"组合初始状态",paraId:72,tocIndex:25},{value:"string[]",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"combo",paraId:72,tocIndex:25},{value:"组合的父组合 ID。如果没有父组合，则为 null",paraId:72,tocIndex:25},{value:"string | null",paraId:72,tocIndex:25},{value:"-",paraId:72,tocIndex:25},{value:"示例：",paraId:73,tocIndex:25},{value:"const graph = new Graph({\n  data: {\n    nodes: [\n      { id: 'node1', style: { x: 100, y: 100 } },\n      { id: 'node2', style: { x: 200, y: 200 } },\n    ],\n    edges: [{ id: 'edge1', source: 'node1', target: 'node2' }],\n    combos: [{ id: 'combo1', style: { x: 150, y: 150 } }],\n  },\n});\n",paraId:74,tocIndex:25},{value:"阅读 ",paraId:75,tocIndex:25},{value:"数据",paraId:76,tocIndex:25},{value:" 深入了解图数据，包括不限于数据格式、如何操作数据等。",paraId:75,tocIndex:25},{value:"NodeOptions",paraId:77,tocIndex:26},{value:"节点配置项。",paraId:78,tocIndex:26},{value:"属性",paraId:79,tocIndex:27},{value:"描述",paraId:79,tocIndex:27},{value:"类型",paraId:79,tocIndex:27},{value:"默认值",paraId:79,tocIndex:27},{value:"必选",paraId:79,tocIndex:27},{value:"type",paraId:79,tocIndex:27},{value:"节点类型，内置节点类型名称或自定义节点的名称",paraId:79,tocIndex:27},{value:"Type",paraId:80,tocIndex:27},{value:"circle",paraId:79,tocIndex:27},{value:"style",paraId:79,tocIndex:27},{value:"节点样式，包括颜色、大小等",paraId:79,tocIndex:27},{value:"Style",paraId:81,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"state",paraId:79,tocIndex:27},{value:"定义节点在不同状态下的样式",paraId:79,tocIndex:27},{value:"State",paraId:82,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"palette",paraId:79,tocIndex:27},{value:"定义节点的色板，用于根据不同数据映射颜色",paraId:79,tocIndex:27},{value:"Palette",paraId:83,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"animation",paraId:79,tocIndex:27},{value:"定义节点的动画效果",paraId:79,tocIndex:27},{value:"Animation",paraId:84,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"详见 ",paraId:85,tocIndex:27},{value:"Node",paraId:86,tocIndex:27},{value:"示例：",paraId:87,tocIndex:27},{value:"const graph = new Graph({\n  node: {\n    type: 'circle', // 节点类型\n    style: {\n      fill: '#e6f7ff', // 填充色\n      stroke: '#91d5ff', // 边框色\n      lineWidth: 1, // 边框宽度\n      r: 20, // 半径\n      labelText: (d) => d.id, // 标签文本\n    },\n    // 节点状态样式\n    state: {\n      hover: {\n        lineWidth: 2,\n        stroke: '#69c0ff',\n      },\n      selected: {\n        fill: '#bae7ff',\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n    },\n  },\n});\n",paraId:88,tocIndex:27},{value:"EdgeOptions",paraId:89,tocIndex:28},{value:"边配置项",paraId:90,tocIndex:28},{value:"属性",paraId:91,tocIndex:29},{value:"描述",paraId:91,tocIndex:29},{value:"类型",paraId:91,tocIndex:29},{value:"默认值",paraId:91,tocIndex:29},{value:"必选",paraId:91,tocIndex:29},{value:"type",paraId:91,tocIndex:29},{value:"边类型，内置边类型名称或自定义边的名称",paraId:91,tocIndex:29},{value:"Type",paraId:92,tocIndex:29},{value:"line",paraId:91,tocIndex:29},{value:"style",paraId:91,tocIndex:29},{value:"边样式，包括颜色、大小等",paraId:91,tocIndex:29},{value:"Style",paraId:93,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"state",paraId:91,tocIndex:29},{value:"定义边在不同状态下的样式",paraId:91,tocIndex:29},{value:"State",paraId:94,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"palette",paraId:91,tocIndex:29},{value:"定义边的色板，用于根据不同数据映射颜色",paraId:91,tocIndex:29},{value:"Palette",paraId:95,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"animation",paraId:91,tocIndex:29},{value:"定义边的动画效果",paraId:91,tocIndex:29},{value:"Animation",paraId:96,tocIndex:29},{value:"-",paraId:91,tocIndex:29},{value:"详见 ",paraId:97,tocIndex:29},{value:"Edge",paraId:98,tocIndex:29},{value:"示例：",paraId:99,tocIndex:29},{value:"const graph = new Graph({\n  edge: {\n    type: 'polyline', // 边类型\n    style: {\n      stroke: '#91d5ff', // 边的颜色\n      lineWidth: 2, // 边的宽度\n      endArrow: true, // 是否有箭头\n    },\n    // 边的状态样式\n    state: {\n      selected: {\n        stroke: '#1890ff',\n        lineWidth: 3,\n      },\n    },\n  },\n});\n",paraId:100,tocIndex:29},{value:"ComboOptions",paraId:101,tocIndex:30},{value:"组合配置项",paraId:102,tocIndex:30},{value:"属性",paraId:103,tocIndex:30},{value:"描述",paraId:103,tocIndex:30},{value:"类型",paraId:103,tocIndex:30},{value:"默认值",paraId:103,tocIndex:30},{value:"必选",paraId:103,tocIndex:30},{value:"type",paraId:103,tocIndex:30},{value:"组合类型，内置组合类型名称或自定义组合的名称",paraId:103,tocIndex:30},{value:"Type",paraId:104,tocIndex:30},{value:"circle",paraId:103,tocIndex:30},{value:"style",paraId:103,tocIndex:30},{value:"组合样式，包括颜色、大小等",paraId:103,tocIndex:30},{value:"Style",paraId:105,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"state",paraId:103,tocIndex:30},{value:"定义组合在不同状态下的样式",paraId:103,tocIndex:30},{value:"State",paraId:106,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"palette",paraId:103,tocIndex:30},{value:"定义组合的色板，用于根据不同数据映射颜色",paraId:103,tocIndex:30},{value:"Palette",paraId:107,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"animation",paraId:103,tocIndex:30},{value:"定义组合的动画效果",paraId:103,tocIndex:30},{value:"Animation",paraId:108,tocIndex:30},{value:"-",paraId:103,tocIndex:30},{value:"详见 ",paraId:109,tocIndex:30},{value:"Combo",paraId:110,tocIndex:30},{value:"示例：",paraId:111,tocIndex:30},{value:"const graph = new Graph({\n  combo: {\n    type: 'circle', // 组合类型\n    style: {\n      fill: '#f0f0f0', // 背景色\n      stroke: '#d9d9d9', // 边框色\n      lineWidth: 1, // 边框宽度\n    },\n    // 组合状态样式\n    state: {\n      selected: {\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n    },\n  },\n});\n",paraId:112,tocIndex:30},{value:"CustomLayoutOptions | CustomLayoutOptions[]",paraId:113,tocIndex:31},{value:"布局配置项，可以是对象（普通布局）或数组（流水线布局）。",paraId:114,tocIndex:31},{value:"示例",paraId:115,tocIndex:31},{value:":",paraId:115,tocIndex:31},{value:"const graph = new Graph({\n  container: 'container',\n  layout: {\n    type: 'force', // 力导向布局\n    preventOverlap: true, // 防止节点重叠\n    nodeStrength: -50, // 节点之间的斥力\n    edgeStrength: 0.5, // 边的弹性系数\n    iterations: 200, // 迭代次数\n    animation: true, // 启用布局动画\n  },\n});\n",paraId:116,tocIndex:31},{value:"false | 'light' | 'dark' | string",paraId:117,tocIndex:32},{value:"设置图表的主题，可以是内置的 ",paraId:118,tocIndex:32},{value:"'light'",paraId:118,tocIndex:32},{value:"、",paraId:118,tocIndex:32},{value:"'dark'",paraId:118,tocIndex:32},{value:" 主题，也可以是自定义主题的名称。设为 ",paraId:118,tocIndex:32},{value:"false",paraId:118,tocIndex:32},{value:" 则不使用任何主题。",paraId:118,tocIndex:32},{value:"(string | ",paraId:119,tocIndex:33},{value:"CustomExtensionOptions",paraId:120,tocIndex:33},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:119,tocIndex:33},{value:"配置图表的交互行为，可以是字符串（使用默认配置）、对象（自定义配置）或函数（动态配置、函数内可访问图实例）。",paraId:121,tocIndex:33},{value:"示例：",paraId:122,tocIndex:33},{value:"const graph = new Graph({\n  behaviors: [\n    'drag-canvas', // 使用默认配置启用画布拖拽\n    'zoom-canvas', // 使用默认配置启用画布缩放\n    {\n      type: 'drag-element', // 自定义配置拖拽元素\n      key: 'drag-node-only',\n      enable: (event) => event.targetType === 'node', // 只允许拖拽节点\n    },\n    function () {\n      console.log(this); // 输出 graph 实例\n      return {\n        type: 'hover-activate',\n      };\n    },\n  ],\n});\n",paraId:123,tocIndex:33},{value:"查看 ",paraId:124,tocIndex:33},{value:"交互总览",paraId:125,tocIndex:33},{value:" 深入了解交互原理",paraId:124,tocIndex:33},{value:"浏览 ",paraId:124,tocIndex:33},{value:"内置交互",paraId:126,tocIndex:33},{value:" 获取所有内置交互列表及其配置选项",paraId:124,tocIndex:33},{value:"(string | ",paraId:127,tocIndex:34},{value:"CustomExtensionOptions",paraId:128,tocIndex:34},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:127,tocIndex:34},{value:"设置图表的插件，可以是字符串（使用默认配置）、对象（自定义配置）或函数（动态配置、函数内可访问图实例）。",paraId:129,tocIndex:34},{value:"示例：",paraId:130,tocIndex:34},{value:"const graph = new Graph({\n  container: 'container',\n  plugins: [\n    'minimap', // 启用小地图，使用默认配置\n    {\n      type: 'grid', // 启用网格背景\n      key: 'grid-plugin',\n      line: {\n        stroke: '#d9d9d9',\n        lineWidth: 1,\n      },\n    },\n    {\n      type: 'toolbar', // 启用工具栏\n      key: 'graph-toolbar',\n      position: 'top-right', // 位置\n    },\n  ],\n});\n",paraId:131,tocIndex:34},{value:"查看 ",paraId:132,tocIndex:34},{value:"插件总览",paraId:133,tocIndex:34},{value:" 深入了解插件原理",paraId:132,tocIndex:34},{value:"浏览 ",paraId:132,tocIndex:34},{value:"内置插件",paraId:134,tocIndex:34},{value:" 获取所有内置插件列表及其配置项",paraId:132,tocIndex:34},{value:"(string | ",paraId:135,tocIndex:35},{value:"CustomExtensionOptions",paraId:136,tocIndex:35},{value:" | ((this:Graph) =>CustomExtensionOptions))[]",paraId:135,tocIndex:35},{value:"配置数据处理，用于在渲染前对数据进行处理，不会影响原始数据。可以是字符串（使用默认配置）、对象（自定义配置）或函数（动态配置、函数内可访问图实例）。",paraId:137,tocIndex:35},{value:"示例：",paraId:138,tocIndex:35},{value:"const graph = new Graph({\n  transforms: [\n    'process-parallel-edges', // 处理平行边，使用默认配置\n    {\n      type: 'map-node-size', // 根据节点数据映射节点大小\n      field: 'value', // 使用 value 字段的值\n      max: 50, // 最大半径\n      min: 20, // 最小半径\n    },\n  ],\n});\n",paraId:139,tocIndex:35},{value:"查看 ",paraId:140,tocIndex:35},{value:"数据处理总览",paraId:141,tocIndex:35},{value:" 深入了解数据处理原理",paraId:140,tocIndex:35},{value:"浏览 ",paraId:140,tocIndex:35},{value:"内置数据处理",paraId:142,tocIndex:35},{value:" 获取所有内置数据处理列表及其配置项",paraId:140,tocIndex:35},{value:"interface CustomExtensionOption extends Record<string, any> {\n  /** 拓展类型 */\n  type: string;\n  /** 拓展 key，即唯一标识 */\n  key?: string;\n}\n",paraId:143,tocIndex:36}]},76690:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(436);const d=[{value:"G6 是一个图可视化引擎。它提供了图的绘制、布局、分析、交互、动画等图可视化能力。旨在为开发者提供一套简单易用、专业可靠、可高度定制的图可视化开发工具",paraId:0,tocIndex:1},{value:"内置 10+ 元素，满足常规场景需求",paraId:1,tocIndex:2},{value:"内置 10+ 交互，并可根据不同场景自由组合",paraId:2,tocIndex:3},{value:"高性能布局，内置 10+ 常用的图布局，支持 WebGPU、 WASM 计算加速",paraId:3,tocIndex:4},{value:"支持 3D 元素、布局，打造沉浸式的图可视化场景",paraId:4,tocIndex:6},{value:"元素、布局、交互、插件统统可定制，实现你的每一个创意",paraId:5,tocIndex:7},{value:"点击进入👉 ",paraId:6,tocIndex:8},{value:"快速开始",paraId:7,tocIndex:8}]},73259:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91031);const d=[{value:"AntvDagre 在原先",paraId:0,tocIndex:0},{value:"dagre",paraId:0,tocIndex:0},{value:"布局的基础上增加了更多有用的设置项，比如",paraId:0,tocIndex:0},{value:"nodeOrder",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"edgeLabelSpace",paraId:0,tocIndex:0},{value:"等等。 ",paraId:0,tocIndex:0},{value:"dagre",paraId:0,tocIndex:0},{value:"布局本身一种层次化布局，适用于有向无环图（DAG）的布局场景，能够自动处理节点之间的方向和间距，支持水平和垂直布局。参考更多 Dagre 布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"或",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"以及",paraId:0,tocIndex:0},{value:"官方文档",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'antv-dagre',\n    rankdir: 'TB',\n    align: 'UL',\n    nodesep: 50,\n    ranksep: 50,\n    controlPoints: false,\n  },\n});\n",paraId:2,tocIndex:1},{value:"更多",paraId:3,tocIndex:2},{value:"dagre",paraId:3,tocIndex:2},{value:"原生配置项可参考",paraId:3,tocIndex:2},{value:"官方文档",paraId:3,tocIndex:2},{value:"，这里仅列出部分核心配置和新增的配置",paraId:3,tocIndex:2},{value:"| 属性           | 描述                                                                                                                                                                                                                                  | 类型                                                | 默认值                     | 必选 |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | -------------------------- | ---- | --- |\n| type           | 布局类型                                                                                                                                                                                                                              | ",paraId:4,tocIndex:2},{value:"antv-dagre",paraId:4,tocIndex:2},{value:"                                        | -                          | ✓    |\n| rankdir        | 布局方向，可选值                                                                                                                                                                                                                      | ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:"                        | ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:"                       |      |\n| align          | 节点对齐方式，可选值                                                                                                                                                                                                                  | ",paraId:4,tocIndex:2},{value:"UL",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"UR",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DL",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DR",paraId:4,tocIndex:2},{value:"                        | ",paraId:4,tocIndex:2},{value:"UL",paraId:4,tocIndex:2},{value:"                       |      |\n| nodesep        | 节点间距（px）。在rankdir 为 ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" 时是节点的水平间距；在rankdir 为 ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:" 时代表节点的竖直方向间距                                                                                                                      | number                                              | 50                         |      |\n| nodesepFunc    | 节点间距（px）的回调函数，通过该参数可以对不同节点设置不同的节点间距。在rankdir 为 ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" 时是节点的水平间距；在rankdir 为 ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:" 时代表节点的竖直方向间距。优先级高于 nodesep，即若设置了 nodesepFunc，则 nodesep 不生效 | (d?: Node) => number                                |                            |      |\n| ranksep        | 层间距（px）。在rankdir 为 ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" 时是竖直方向相邻层间距；在rankdir 为 ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:" 时代表水平方向相邻层间距                                                                                                                    | number                                              | 100                        |      |\n| ranksepFunc    | 层间距（px）的回调函数，通过该参数可以对不同层级设置不同的节点间距。在rankdir 为 ",paraId:4,tocIndex:2},{value:"TB",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"BT",paraId:4,tocIndex:2},{value:" 时是节点的水平间距；在rankdir 为 ",paraId:4,tocIndex:2},{value:"LR",paraId:4,tocIndex:2},{value:" 或 ",paraId:4,tocIndex:2},{value:"RL",paraId:4,tocIndex:2},{value:" 时代表节点的竖直方向间距。优先级高于 ranksep，即若设置了 ranksepFunc，则 ranksep 不生效   | (d?: Node) => number                                |                            |      |\n| ranker         | 为每个节点分配等级的算法，共支持三种算法，分别是：",paraId:4,tocIndex:2},{value:"longest-path",paraId:4,tocIndex:2},{value:" 最长路径算法、",paraId:4,tocIndex:2},{value:"tight-tree",paraId:4,tocIndex:2},{value:" 紧凑树算法、",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:" 网络单形法                                                                                                  | ",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"tight-tree",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"longest-path",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"network-simplex",paraId:4,tocIndex:2},{value:"          |      |\n| nodeSize       | 统一指定或为每个节点指定节点大小，用于防止节点重叠时的碰撞检测。如果仅返回单个number，则表示节点的宽度和高度相同；如果返回一个数组，则形如：",paraId:4,tocIndex:2},{value:"[width, height]",paraId:4,tocIndex:2},{value:"                                                                         | Size                                                | ((nodeData: Node) => Size) |      |     |\n| controlPoints  | 是否保留边的控制点，仅在边配置中使用了内置折线（type: 'polyline-edge'） 时，或任何将自定义消费了 ",paraId:4,tocIndex:2},{value:"style.controlPoints",paraId:4,tocIndex:2},{value:" 字段作为控制点位置的边时生效。本质上就是给边数据增加了 ",paraId:4,tocIndex:2},{value:"style.controlPoints",paraId:4,tocIndex:2},{value:"                                   | boolean                                             | false                      |      |\n| begin          | 布局的左上角对齐位置                                                                                                                                                                                                                  | [number, number] | [number, number, number]        |                            |      |\n| sortByCombo    | 同一层节点是否根据每个节点数据中的 parentId 进行排序，以防止 Combo 重叠置                                                                                                                                                             | boolean                                             | false                      |      |\n| edgeLabelSpace | 是否为边的label留位置                                                                                                                                                                                                                 | boolean                                             | true                       |      |\n| nodeOrder      | 同层节点顺序的参考数组，存放节点 id 值，若未指定，则将按照 dagre 本身机制排列同层节点顺序                                                                                                                                             | string[]                                            |                            |      |\n| radial         | 是否基于 ",paraId:4,tocIndex:2},{value:"dagre",paraId:4,tocIndex:2},{value:" 进行辐射布局                                                                                                                                                                                                         | boolean                                             | false                      |      |\n| focusNode      | 关注的节点，注意，仅在",paraId:4,tocIndex:2},{value:"radial",paraId:4,tocIndex:2},{value:" 为 true 时生效                                                                                                                                                                                         | ID | Node | null                                  |                            |      |\n| preset         | 布局计算时参考的节点位置，一般用于切换数据时保证重新布局的连续性。在 G6 中，若是更新数据，则将自动使用已存在的布局结果数据作为输入                                                                                                    | OutNode[]                                           |                            |      |",paraId:4,tocIndex:2},{value:"DagreAlign",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"UL",paraId:5,tocIndex:3},{value:"节点对齐方式 U：upper（上）；D：down（下）；L：left（左）；R：right（右）",paraId:6,tocIndex:3},{value:"UL",paraId:7,tocIndex:3},{value:":对齐到左上角",paraId:7,tocIndex:3},{value:"UR",paraId:7,tocIndex:3},{value:":对齐到右上角",paraId:7,tocIndex:3},{value:"DL",paraId:7,tocIndex:3},{value:":对齐到左下角",paraId:7,tocIndex:3},{value:"DR",paraId:7,tocIndex:3},{value:":对齐到右下角",paraId:7,tocIndex:3},{value:"DagreRankdir",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"Default:",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"TB",paraId:8,tocIndex:4},{value:"布局的方向。T：top（上）；B：bottom（下）；L：left（左）；R：right（右）",paraId:9,tocIndex:4},{value:"TB",paraId:10,tocIndex:4},{value:":从上至下布局",paraId:10,tocIndex:4},{value:"BT",paraId:10,tocIndex:4},{value:":从下至上布局",paraId:10,tocIndex:4},{value:"LR",paraId:10,tocIndex:4},{value:":从左至右布局",paraId:10,tocIndex:4},{value:"RL",paraId:10,tocIndex:4},{value:":从右至左布局",paraId:10,tocIndex:4},{value:"network-simplex",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"tight-tree",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"longest-path",paraId:11,tocIndex:5},{value:"布局的模式",paraId:12,tocIndex:5},{value:"number",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"Default:",paraId:13,tocIndex:6},{value:" 50",paraId:13,tocIndex:6},{value:"层间距（px）",paraId:14,tocIndex:6},{value:"在 rankdir 为 'TB' 或 'BT' 时是竖直方向相邻层间距；在 rankdir 为 'LR' 或 'RL' 时代表水平方向相邻层间距。ranksepFunc 拥有更高的优先级",paraId:15,tocIndex:6},{value:"(d?: Node) => number",paraId:16,tocIndex:7},{value:"层间距（px）的回调函数",paraId:17,tocIndex:7},{value:"在 rankdir 为 'TB' 或 'BT' 时是竖直方向相邻层间距；在 rankdir 为 'LR' 或 'RL' 时代表水平方向相邻层间距。优先级高于 nodesep，即若设置了 nodesepFunc，则 nodesep 不生效",paraId:18,tocIndex:7},{value:"number",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"Default:",paraId:19,tocIndex:8},{value:" 50",paraId:19,tocIndex:8},{value:"节点间距（px）",paraId:20,tocIndex:8},{value:"在 rankdir 为 'TB' 或 'BT' 时是节点的水平间距；在 rankdir 为 'LR' 或 'RL' 时代表节点的竖直方向间距。nodesepFunc 拥有更高的优先级",paraId:21,tocIndex:8},{value:"(d?: Node) => number",paraId:22,tocIndex:9},{value:"节点间距（px）的回调函数，通过该参数可以对不同节点设置不同的节点间距",paraId:23,tocIndex:9},{value:"在 rankdir 为 'TB' 或 'BT' 时是节点的水平间距；在 rankdir 为 'LR' 或 'RL' 时代表节点的竖直方向间距。优先级高于 nodesep，即若设置了 nodesepFunc，则 nodesep 不生效",paraId:24,tocIndex:9},{value:"[number, number] | [number, number, number]",paraId:25,tocIndex:10},{value:" ",paraId:25,tocIndex:10},{value:"Default:",paraId:25,tocIndex:10},{value:" undefined",paraId:25,tocIndex:10},{value:"布局的左上角对齐位置",paraId:26,tocIndex:10},{value:"boolean",paraId:27,tocIndex:11},{value:" ",paraId:27,tocIndex:11},{value:"Default:",paraId:27,tocIndex:11},{value:" false",paraId:27,tocIndex:11},{value:"是否保留边的控制点，仅在边配置中使用了内置折线（type: 'polyline-edge'） 时，或任何将自定义消费了 ",paraId:28,tocIndex:11},{value:"style.controlPoints",paraId:28,tocIndex:11},{value:" 字段作为控制点位置的边时生效。本质上就是给边数据增加了 ",paraId:28,tocIndex:11},{value:"style.controlPoints",paraId:28,tocIndex:11},{value:"boolean",paraId:29,tocIndex:12},{value:" ",paraId:29,tocIndex:12},{value:"Default:",paraId:29,tocIndex:12},{value:" true",paraId:29,tocIndex:12},{value:"是否为边的label留位置",paraId:30,tocIndex:12},{value:"这会影响是否在边中间添加dummy node",paraId:31,tocIndex:12},{value:"ID | Node | null",paraId:32,tocIndex:13},{value:"关注的节点，注意，仅在",paraId:33,tocIndex:13},{value:"radial",paraId:33,tocIndex:13},{value:" 为 true 时生效",paraId:33,tocIndex:13},{value:"ID: 节点 id",paraId:34,tocIndex:13},{value:"Node: 节点实例",paraId:34,tocIndex:13},{value:"null: 取消关注",paraId:34,tocIndex:13},{value:"string[]",paraId:35,tocIndex:14},{value:" ",paraId:35,tocIndex:14},{value:"Default:",paraId:35,tocIndex:14},{value:" undefined",paraId:35,tocIndex:14},{value:"同层节点顺序的参考数组，存放节点 id 值",paraId:36,tocIndex:14},{value:"若未指定，则将按照 dagre 本身机制排列同层节点顺序",paraId:37,tocIndex:14},{value:"Size | ((nodeData: Node) => Size)",paraId:38,tocIndex:15},{value:" ",paraId:38,tocIndex:15},{value:"Default:",paraId:38,tocIndex:15},{value:" undefined",paraId:38,tocIndex:15},{value:"统一指定或为每个节点指定节点大小。",paraId:39,tocIndex:15},{value:"用于防止节点重叠时的碰撞检测",paraId:40,tocIndex:15},{value:"OutNode[]",paraId:41,tocIndex:16},{value:" ",paraId:41,tocIndex:16},{value:"Default:",paraId:41,tocIndex:16},{value:" undefined",paraId:41,tocIndex:16},{value:"布局计算时参考的节点位置",paraId:42,tocIndex:16},{value:"一般用于切换数据时保证重新布局的连续性。在 G6 中，若是更新数据，则将自动使用已存在的布局结果数据作为输入",paraId:43,tocIndex:16},{value:"boolean",paraId:44,tocIndex:17},{value:"是否基于 dagre 进行辐射布局",paraId:45,tocIndex:17},{value:"boolean",paraId:46,tocIndex:18},{value:" ",paraId:46,tocIndex:18},{value:"Default:",paraId:46,tocIndex:18},{value:" false",paraId:46,tocIndex:18},{value:"同一层节点是否根据每个节点数据中的 parentId 进行排序，以防止 Combo 重叠",paraId:47,tocIndex:18},{value:"建议在有 Combo 的情况下配置",paraId:48,tocIndex:18},{value:"流程图",paraId:49,tocIndex:19},{value:"：适合展示流程图，节点之间的方向和间距会自动处理；",paraId:49,tocIndex:19},{value:"依赖关系图",paraId:49,tocIndex:19},{value:"：展示软件包或模块之间的依赖关系；",paraId:49,tocIndex:19},{value:"任务调度图",paraId:49,tocIndex:19},{value:"：展示任务之间的依赖关系和执行顺序。",paraId:49,tocIndex:19},{value:"以下文档可以帮助你更好地理解 Dagre 布局",paraId:50,tocIndex:20},{value:"图布局算法｜详解 Dagre 布局",paraId:51,tocIndex:20},{value:"深入解读Dagre布局算法",paraId:51,tocIndex:20}]},57368:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39509);const d=[{value:"本文介绍内置布局通用属性配置。",paraId:0},{value:"属性",paraId:1,tocIndex:0},{value:"描述",paraId:1,tocIndex:0},{value:"类型",paraId:1,tocIndex:0},{value:"默认值",paraId:1,tocIndex:0},{value:"必选",paraId:1,tocIndex:0},{value:"type",paraId:1,tocIndex:0},{value:"布局类型，内置布局或自定义布局的名称",paraId:1,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"✓",paraId:1,tocIndex:0},{value:"isLayoutInvisibleNodes",paraId:1,tocIndex:0},{value:"不可见节点是否参与布局（当 preLayout 为 true 时生效）",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"false",paraId:1,tocIndex:0},{value:"nodeFilter",paraId:1,tocIndex:0},{value:"参与该布局的节点",paraId:1,tocIndex:0},{value:"(node: NodeData) => boolean",paraId:1,tocIndex:0},{value:"() => true",paraId:1,tocIndex:0},{value:"preLayout",paraId:1,tocIndex:0},{value:"使用前布局，在初始化元素前计算布局",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"false",paraId:1,tocIndex:0},{value:"enableWorker",paraId:1,tocIndex:0},{value:"是否在 WebWorker 中运行布局",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"iterations",paraId:1,tocIndex:0},{value:"迭代布局的迭代次数",paraId:1,tocIndex:0},{value:"number",paraId:1,tocIndex:0},{value:"-",paraId:1,tocIndex:0},{value:"指定布局类型，内置布局类型名称或自定义布局的名称。",paraId:3,tocIndex:1},{value:"const graph = new Graph({\n  // 其他配置...\n  layout: {\n    type: 'antv-dagre',\n  },\n});\n",paraId:4,tocIndex:1},{value:"可选值有：",paraId:5,tocIndex:1},{value:"antv-dagre",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"基于 dagre 定制的布局",paraId:7,tocIndex:1},{value:"circular",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"环形布局",paraId:8,tocIndex:1},{value:"combo-combined",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"适用于存在组合的布局",paraId:9,tocIndex:1},{value:"concentric",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"同心圆布局",paraId:10,tocIndex:1},{value:"d3-force",paraId:6,tocIndex:1},{value:"基于 D3 的力导向布局",paraId:11,tocIndex:1},{value:"d3-force-3d",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"3D力导向布局",paraId:12,tocIndex:1},{value:"dagre",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"dagre 布局",paraId:13,tocIndex:1},{value:"fishbone",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"鱼骨布局",paraId:14,tocIndex:1},{value:"force",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"力导向布局",paraId:15,tocIndex:1},{value:"force-atlas2",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"ForceAtlas2 布局",paraId:16,tocIndex:1},{value:"fruchterman",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"Fruchterman 布局",paraId:17,tocIndex:1},{value:"grid",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"网格布局",paraId:18,tocIndex:1},{value:"mds",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"高维数据降维算法布局",paraId:19,tocIndex:1},{value:"radial",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"径向布局",paraId:20,tocIndex:1},{value:"random",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"随机布局",paraId:21,tocIndex:1},{value:"snake",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"蛇形布局",paraId:22,tocIndex:1},{value:"compact-box",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"紧凑树布局",paraId:23,tocIndex:1},{value:"dendrogram",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"树状布局",paraId:24,tocIndex:1},{value:"mindmap",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"思维导图布局",paraId:25,tocIndex:1},{value:"indented",paraId:6,tocIndex:1},{value:"：",paraId:6,tocIndex:1},{value:"缩进树布局",paraId:26,tocIndex:1}]},36570:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(96450);const d=[{value:"环形布局是一种把节点均匀或者按间隔放置在圆上的布局，也支持通过配置 startRadius 和 endRadius 为不一样的值实现螺旋状布局。参考更多环形布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"或",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"环形布局",paraId:2,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"适用于平等关系网络、无层级结构的图",paraId:3,tocIndex:1},{value:"螺旋状布局",paraId:4,tocIndex:1},{value:":",paraId:4,tocIndex:1},{value:"适用于隐式层级或时间序列图（如组织架构、传播网络）",paraId:5,tocIndex:1},{value:"其余均使用默认配置（布局宽高默认是整个画布容器）",paraId:6,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置\n  layout: {\n    type: 'circular',\n  },\n});\n",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:3},{value:"描述",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"默认值",paraId:8,tocIndex:3},{value:"必选",paraId:8,tocIndex:3},{value:"type",paraId:8,tocIndex:3},{value:"布局类型",paraId:8,tocIndex:3},{value:"circular",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"✓",paraId:8,tocIndex:3},{value:"angleRatio",paraId:8,tocIndex:3},{value:"从第一个节点到最后节点之间相隔多少个 2*PI",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"center",paraId:8,tocIndex:3},{value:"布局的中心",paraId:8,tocIndex:3},{value:"[number, number]|[number, number, number]",paraId:8,tocIndex:3},{value:"[",paraId:8,tocIndex:3},{value:"布局宽度",paraId:8,tocIndex:3},{value:" / 2, ",paraId:8,tocIndex:3},{value:"布局高度",paraId:8,tocIndex:3},{value:" / 2]",paraId:8,tocIndex:3},{value:"clockwise",paraId:8,tocIndex:3},{value:"是否顺时针排列",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"true",paraId:8,tocIndex:3},{value:"divisions",paraId:8,tocIndex:3},{value:"节点在环上的分段数（几个段将均匀分布，在 endRadius - startRadius != 0 时生效）",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"nodeSize",paraId:8,tocIndex:3},{value:"节点大小（直径）。用于防止节点重叠时的碰撞检测",paraId:8,tocIndex:3},{value:"Size | ((nodeData: Node) => Size)",paraId:8,tocIndex:3},{value:"10",paraId:8,tocIndex:3},{value:"nodeSpacing",paraId:8,tocIndex:3},{value:"环与环之间最小间距，用于调整半径",paraId:8,tocIndex:3},{value:"number | ((nodeData: Node) => number)",paraId:8,tocIndex:3},{value:"10",paraId:8,tocIndex:3},{value:"ordering",paraId:8,tocIndex:3},{value:"节点在环上排序的依据，",paraId:8,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"topology",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"topology-directed",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"degree",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"radius",paraId:8,tocIndex:3},{value:"圆的半径，设置了则螺旋状布局的配置",paraId:8,tocIndex:3},{value:"startRadius",paraId:8,tocIndex:3},{value:"、",paraId:8,tocIndex:3},{value:"endRadius",paraId:8,tocIndex:3},{value:"不生效，",paraId:8,tocIndex:3},{value:"说明",paraId:10,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"startAngle",paraId:8,tocIndex:3},{value:"布局的开始角度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"0",paraId:8,tocIndex:3},{value:"endAngle",paraId:8,tocIndex:3},{value:"布局的结束角度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"2 * Math.PI",paraId:8,tocIndex:3},{value:"startRadius",paraId:8,tocIndex:3},{value:"螺旋状布局的开始半径，",paraId:8,tocIndex:3},{value:"用法",paraId:11,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"endRadius",paraId:8,tocIndex:3},{value:"螺旋状布局的结束半径",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-",paraId:8,tocIndex:3},{value:"width",paraId:8,tocIndex:3},{value:"布局的宽度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"画布宽度",paraId:8,tocIndex:3},{value:"height",paraId:8,tocIndex:3},{value:"布局的高度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"画布高度",paraId:8,tocIndex:3},{value:"节点在环上排序的依据",paraId:12,tocIndex:4},{value:"topology",paraId:13,tocIndex:4},{value:": 按照拓扑排序",paraId:13,tocIndex:4},{value:"topology-directed",paraId:13,tocIndex:4},{value:": 按照拓扑排序（有向图）",paraId:13,tocIndex:4},{value:"degree",paraId:13,tocIndex:4},{value:": 按照度数大小排序",paraId:13,tocIndex:4},{value:"不配置（",paraId:14,tocIndex:4},{value:"null",paraId:14,tocIndex:4},{value:"）则直接使用数组中的顺序",paraId:14,tocIndex:4},{value:"如果radius、startRadius、endRadius都没配置，则默认为最终计算出来的",paraId:15,tocIndex:5},{value:"Math.min(布局宽度, 布局高度) / 2",paraId:15,tocIndex:5},{value:"，即布满整个布局区域",paraId:15,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置\n  layout: {\n    type: 'circular',\n  },\n});\n",paraId:16,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置\n  layout: {\n    type: 'circular',\n    startRadius: 10,\n    endRadius: 300,\n  },\n});\n",paraId:17,tocIndex:8}]},77437:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(24655);const d=[{value:"ComboCombined 复合布局适用于复合分组结构的图数据展示场景，支持灵活配置 Combo 内部元素的布局以及最外层 Combo 和节点之间的布局。 默认情况内部元素采用 Concentric 同心圆布局，外部布局采用 gForce 力导向布局，兼顾布局效果与整体稳定性。参考更多 ComboCombined 复合布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"用户画像分析: 分析用户行为与商品关系，将用户兴趣圈层作为 Combo，内部节点展示具体商品和行为标签，帮助运营人员识别用户消费路径。",paraId:2,tocIndex:1},{value:"供应链管理图：供应商、制造商、仓储、分销商按角色或区域划分 Combo，内部节点展示资源、人员或设备，清晰展示供应链各环节内部结构。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"必选",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"布局类型",paraId:3,tocIndex:2},{value:"combo-combined",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:"布局中心",paraId:3,tocIndex:2},{value:"PointTuple",paraId:3,tocIndex:2},{value:"图中心",paraId:3,tocIndex:2},{value:"comboPadding",paraId:3,tocIndex:2},{value:"Combo 内部的 padding 值，不用于渲染，仅用于计算力。推荐设置为与视图上 Combo 内部 padding 值相同的值",paraId:3,tocIndex:2},{value:"((d?: unknown) => number)",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"innerLayout",paraId:3,tocIndex:2},{value:"Combo 内部的布局算法, ",paraId:3,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"Layout",paraId:3,tocIndex:2},{value:"ConcentricLayout",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"节点大小（直径）。用于碰撞检测。若不指定，则根据传入的节点的 size 属性计算。若即不指定，节点中也没有 size，则默认大小为 10",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:" | (d?: ",paraId:3,tocIndex:2},{value:"NodeData",paraId:5,tocIndex:2},{value:") => number",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"outerLayout",paraId:3,tocIndex:2},{value:"最外层的布局算法, ",paraId:3,tocIndex:2},{value:"说明",paraId:6,tocIndex:2},{value:"Layout",paraId:3,tocIndex:2},{value:"ForceLayout",paraId:3,tocIndex:2},{value:"spacing",paraId:3,tocIndex:2},{value:"preventNodeOverlap 或 preventOverlap 为 ",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:" 时生效, 防止重叠时节点 / Combo 边缘间距的最小值。可以是回调函数, 为不同节点设置不同的最小间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" | (d?: ",paraId:3,tocIndex:2},{value:"NodeData",paraId:7,tocIndex:2},{value:") => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"treeKey",paraId:3,tocIndex:2},{value:"treeKey",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"Layout<any>",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"Default:",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"ConcentricLayout",paraId:8,tocIndex:3},{value:"Combo 内部的布局算法，需要使用同步的布局算法，默认为 ",paraId:9,tocIndex:3},{value:"ConcentricLayout",paraId:9,tocIndex:3},{value:"，",paraId:9,tocIndex:3},{value:"更多布局算法",paraId:9,tocIndex:3},{value:"示例",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3},{value:"import { ConcentricLayout } from '@antv/layout';\n\nnew Graph({\n  layout: {\n    type: 'combo-combined',\n    /**\n     * 查看更多 ConcentricLayout 配置参数:\n     * https://github.com/antvis/layout/blob/v5/packages/layout/src/types.ts#L397\n     */\n    innerLayout: new ConcentricLayout({\n      sortBy: 'id',\n      nodeSize: 20,\n      clockwise: true,\n    }),\n  },\n});\n",paraId:11,tocIndex:3},{value:"Layout<any>",paraId:12,tocIndex:4},{value:" ",paraId:12,tocIndex:4},{value:"Default:",paraId:12,tocIndex:4},{value:" ",paraId:12,tocIndex:4},{value:"ForceLayout",paraId:12,tocIndex:4},{value:"最外层的布局算法，默认为 ",paraId:13,tocIndex:4},{value:"ForceLayout",paraId:13,tocIndex:4},{value:"，",paraId:13,tocIndex:4},{value:"更多布局算法",paraId:13,tocIndex:4},{value:"示例",paraId:14,tocIndex:4},{value:"import { ForceLayout } from '@antv/layout';\n\nnew Graph({\n  layout: {\n    type: 'combo-combined',\n    /**\n     * 查看更多 ForceLayout 配置参数:\n     * https://github.com/antvis/layout/blob/v5/packages/layout/src/types.ts#L950\n     */\n    outerLayout: new ForceLayout({\n      gravity: 1,\n      factor: 2,\n      linkDistance: (edge: any, source: any, target: any) => {\n        const nodeSize = ((source.size?.[0] || 30) + (target.size?.[0] || 30)) / 2;\n        return Math.min(nodeSize * 1.5, 70);\n      },\n    }),\n  },\n});\n",paraId:15,tocIndex:4}]},49963:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18688);const d=[{value:"紧凑树布局适用于结构化树形数据的展示，基于经典的 ",paraId:0,tocIndex:0},{value:"Reingold–Tilford tidy 布局算法",paraId:0,tocIndex:0},{value:" 演进而来，通过布局时综合考虑每个树节点的包围盒，有效保持树结构的紧凑性与层次清晰。参考更多 CompactBox 布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"决策树: 通过紧凑树布局可简单直观的图形化展示每个决策路径",paraId:2,tocIndex:1},{value:"知识图谱: 展示概念之间的层级关系和连接，紧凑布局可以在有限空间内呈现复杂的知识网络",paraId:2,tocIndex:1},{value:"const graph = new Graph({\n  layout: {\n    type: 'compact-box',\n    direction: 'LR',\n    getHeight: () => 16,\n    getWidth: () => 16,\n    getVGap: () => 16,\n    getHGap: () => 40,\n  },\n});\n",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"布局类型",paraId:4,tocIndex:3},{value:"compact-box",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"direction",paraId:4,tocIndex:3},{value:"布局方向，",paraId:4,tocIndex:3},{value:"可选值",paraId:5,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"H",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"V",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:"getSide",paraId:4,tocIndex:3},{value:"设置节点排布在根节点的左侧/右侧，如未设置，则算法自动分配左侧/右侧。注意：该参数仅在 ",paraId:4,tocIndex:3},{value:"H",paraId:4,tocIndex:3},{value:" 布局方向上生效",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:6,tocIndex:3},{value:") => string",paraId:4,tocIndex:3},{value:"getId",paraId:4,tocIndex:3},{value:"节点 id 的回调函数",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:7,tocIndex:3},{value:") => string",paraId:4,tocIndex:3},{value:"getWidth",paraId:4,tocIndex:3},{value:"计算每个节点的宽度",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:8,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getHeight",paraId:4,tocIndex:3},{value:"计算每个节点的高度",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:9,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getHGap",paraId:4,tocIndex:3},{value:"计算每个节点的水平间隙",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:10,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"getVGap",paraId:4,tocIndex:3},{value:"计算每个节点的垂直间隙",paraId:4,tocIndex:3},{value:"(d?: ",paraId:4,tocIndex:3},{value:"NodeData",paraId:11,tocIndex:3},{value:") => number",paraId:4,tocIndex:3},{value:"radial",paraId:4,tocIndex:3},{value:"是否启用辐射状布局，",paraId:4,tocIndex:3},{value:"说明",paraId:12,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"LR",paraId:13,tocIndex:4},{value:" | ",paraId:13,tocIndex:4},{value:"RL",paraId:13,tocIndex:4},{value:" | ",paraId:13,tocIndex:4},{value:"TB",paraId:13,tocIndex:4},{value:" | ",paraId:13,tocIndex:4},{value:"BT",paraId:13,tocIndex:4},{value:" | ",paraId:13,tocIndex:4},{value:"H",paraId:13,tocIndex:4},{value:" | ",paraId:13,tocIndex:4},{value:"V",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"Default:",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"LR",paraId:13,tocIndex:4},{value:"树布局方向",paraId:14,tocIndex:4},{value:"TB",paraId:15,tocIndex:4},{value:"：根节点在上，往下布局",paraId:15,tocIndex:4},{value:"BT",paraId:16,tocIndex:4},{value:"：根节点在下，往上布局",paraId:16,tocIndex:4},{value:"LR",paraId:17,tocIndex:4},{value:"：根节点在左，往右布局",paraId:17,tocIndex:4},{value:"RL",paraId:18,tocIndex:4},{value:"：根节点在右，往左布局",paraId:18,tocIndex:4},{value:"H",paraId:19,tocIndex:4},{value:"：根节点在中间，水平对称布局。可传入 ",paraId:19,tocIndex:4},{value:"getSide",paraId:19,tocIndex:4},{value:" 方法指定每个节点的左右分布逻辑",paraId:19,tocIndex:4},{value:"V",paraId:20,tocIndex:4},{value:"：根节点在中间，垂直对称布局",paraId:20,tocIndex:4},{value:"(d?: ",paraId:21,tocIndex:5},{value:"NodeData",paraId:22,tocIndex:5},{value:") => string",paraId:21,tocIndex:5},{value:"设置节点排布在根节点的左侧/右侧。注意：该参数仅在 ",paraId:23,tocIndex:5},{value:"direction",paraId:23,tocIndex:5},{value:" 为 ",paraId:23,tocIndex:5},{value:"H",paraId:23,tocIndex:5},{value:" 时生效。如未设置，会默认将子节点前半部分放置在右侧，后半部分放置在左侧，参考 ",paraId:23,tocIndex:5},{value:"getSide自动计算逻辑",paraId:23,tocIndex:5},{value:"。",paraId:23,tocIndex:5},{value:"示例：",paraId:24,tocIndex:5},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:25,tocIndex:5},{value:"(d?: ",paraId:26,tocIndex:6},{value:"NodeData",paraId:27,tocIndex:6},{value:") => string",paraId:26,tocIndex:6},{value:"节点 id 的回调函数",paraId:28,tocIndex:6},{value:"示例：",paraId:29,tocIndex:6},{value:"(d) => {\n  // d 是一个节点\n  return d.id + '_node';\n};\n",paraId:30,tocIndex:6},{value:"(d?: ",paraId:31,tocIndex:7},{value:"NodeData",paraId:32,tocIndex:7},{value:") => number",paraId:31,tocIndex:7},{value:"每个节点的宽度",paraId:33,tocIndex:7},{value:"示例：",paraId:34,tocIndex:7},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:35,tocIndex:7},{value:"(d?: ",paraId:36,tocIndex:8},{value:"NodeData",paraId:37,tocIndex:8},{value:") => number",paraId:36,tocIndex:8},{value:"每个节点的高度",paraId:38,tocIndex:8},{value:"示例：",paraId:39,tocIndex:8},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:40,tocIndex:8},{value:"(d?: ",paraId:41,tocIndex:9},{value:"NodeData",paraId:42,tocIndex:9},{value:") => number",paraId:41,tocIndex:9},{value:"每个节点的水平间隙",paraId:43,tocIndex:9},{value:"示例：",paraId:44,tocIndex:9},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:45,tocIndex:9},{value:"(d?: ",paraId:46,tocIndex:10},{value:"NodeData",paraId:47,tocIndex:10},{value:") => number",paraId:46,tocIndex:10},{value:"每个节点的垂直间隙",paraId:48,tocIndex:10},{value:"示例：",paraId:49,tocIndex:10},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:50,tocIndex:10},{value:"boolean",paraId:51,tocIndex:11},{value:"是否按照辐射状布局。若 ",paraId:52,tocIndex:11},{value:"radial",paraId:52,tocIndex:11},{value:" 为 ",paraId:52,tocIndex:11},{value:"true",paraId:52,tocIndex:11},{value:"，建议 ",paraId:52,tocIndex:11},{value:"direction",paraId:52,tocIndex:11},{value:" 设置为 ",paraId:52,tocIndex:11},{value:"'LR'",paraId:52,tocIndex:11},{value:" 或 ",paraId:52,tocIndex:11},{value:"'RL'",paraId:52,tocIndex:11}]},16631:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53868);const d=[{value:"同心圆布局是一种将节点根据某种排序规则分层，并以圆心为中心、沿圆周排列每层节点的布局方式。参考更多同心圆布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"或",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"分层数据可视化，如权限控制结构、组织架构图等，中心是顶级角色，外圈为下级节点。",paraId:2,tocIndex:1},{value:"排序分析结果可视化，高重要度放中心，低重要度放外围，快速表达图中节点的相对影响力。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"必选",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"布局类型",paraId:3,tocIndex:2},{value:"concentric",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:"圆形布局的中心位置，默认为当前容器的中心位置",paraId:3,tocIndex:2},{value:"[number, number] | [number, number, number]",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"clockwise",paraId:3,tocIndex:2},{value:"是否按照顺时针排列",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"equidistant",paraId:3,tocIndex:2},{value:"环与环之间的距离是否相等",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"width",paraId:3,tocIndex:2},{value:"布局的宽度，默认使用容器宽度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"height",paraId:3,tocIndex:2},{value:"布局的高度，默认使用容器高度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"sortBy",paraId:3,tocIndex:2},{value:"指定排序的依据（节点属性名）",paraId:3,tocIndex:2},{value:"数值越高则该节点被放置得越中心。若为 degree，则会计算节点的度数，度数越高，节点将被放置得越中心",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:"degree",paraId:3,tocIndex:2},{value:"maxLevelDiff",paraId:3,tocIndex:2},{value:"同一层节点的最大属性差值",paraId:3,tocIndex:2},{value:"若为 undefined，则将会被设置为 maxValue / 4 ，其中 maxValue 为最大的排序依据的属性值。例如，若 sortBy 为 'degree'，则 maxValue 为所有节点中度数最大的节点的度数",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"节点大小（直径）。用于防止节点重叠时的碰撞检测",paraId:3,tocIndex:2},{value:"number | number[] | ((nodeData: Node) => number)",paraId:3,tocIndex:2},{value:"30",paraId:3,tocIndex:2},{value:"nodeSpacing",paraId:3,tocIndex:2},{value:"环与环之间最小间距，用于调整半径",paraId:3,tocIndex:2},{value:"number | number[] | ((node?: Node) => number)",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"preventOverlap",paraId:3,tocIndex:2},{value:"是否防止重叠",paraId:3,tocIndex:2},{value:"必须配合 nodeSize 属性或节点数据中的 data.size 属性，只有在数据中设置了 data.size 或在该布局中配置了与当前图节点大小相同的 nodeSize 值，才能够进行节点重叠的碰撞检测",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"startAngle",paraId:3,tocIndex:2},{value:"开始布局节点的弧度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"3 / 2 * Math.PI",paraId:3,tocIndex:2},{value:"sweep",paraId:3,tocIndex:2},{value:"同一层中第一个节点与最后一个节点之间的弧度差",paraId:3,tocIndex:2},{value:"若为 undefined ，则将会被设置为 2 * Math.PI * (1 - 1 / |level.nodes|) ，其中 level.nodes 为该算法计算出的每一层的节点，|level.nodes| 代表该层节点数量",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"undefined",paraId:3,tocIndex:2},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      { id: 'center', data: { label: '中心', level: 0 } },\n      { id: 'level1-0', data: { label: 'L1-0', level: 1 } },\n      { id: 'level1-1', data: { label: 'L1-1', level: 1 } },\n      { id: 'level1-2', data: { label: 'L1-2', level: 1 } },\n      { id: 'level1-3', data: { label: 'L1-3', level: 1 } },\n      { id: 'level1-4', data: { label: 'L1-4', level: 1 } },\n      { id: 'level1-5', data: { label: 'L1-5', level: 1 } },\n      { id: 'level2-0', data: { label: 'L2-0', level: 2 } },\n      { id: 'level2-1', data: { label: 'L2-1', level: 2 } },\n      { id: 'level2-2', data: { label: 'L2-2', level: 2 } },\n      { id: 'level2-3', data: { label: 'L2-3', level: 2 } },\n      { id: 'level2-4', data: { label: 'L2-4', level: 2 } },\n      { id: 'level2-5', data: { label: 'L2-5', level: 2 } },\n      { id: 'level2-6', data: { label: 'L2-6', level: 2 } },\n      { id: 'level2-7', data: { label: 'L2-7', level: 2 } },\n      { id: 'level2-8', data: { label: 'L2-8', level: 2 } },\n      { id: 'level2-9', data: { label: 'L2-9', level: 2 } },\n      { id: 'level2-10', data: { label: 'L2-10', level: 2 } },\n      { id: 'level2-11', data: { label: 'L2-11', level: 2 } },\n    ],\n    edges: [\n      { id: 'e-center-level1-0', source: 'center', target: 'level1-0' },\n      { id: 'e-center-level1-1', source: 'center', target: 'level1-1' },\n      { id: 'e-center-level1-2', source: 'center', target: 'level1-2' },\n      { id: 'e-center-level1-3', source: 'center', target: 'level1-3' },\n      { id: 'e-center-level1-4', source: 'center', target: 'level1-4' },\n      { id: 'e-center-level1-5', source: 'center', target: 'level1-5' },\n\n      { id: 'e-level1-0-level2-0', source: 'level1-0', target: 'level2-0' },\n      { id: 'e-level1-0-level2-1', source: 'level1-0', target: 'level2-1' },\n      { id: 'e-level1-1-level2-2', source: 'level1-1', target: 'level2-2' },\n      { id: 'e-level1-1-level2-3', source: 'level1-1', target: 'level2-3' },\n      { id: 'e-level1-2-level2-4', source: 'level1-2', target: 'level2-4' },\n      { id: 'e-level1-2-level2-5', source: 'level1-2', target: 'level2-5' },\n      { id: 'e-level1-3-level2-6', source: 'level1-3', target: 'level2-6' },\n      { id: 'e-level1-3-level2-7', source: 'level1-3', target: 'level2-7' },\n      { id: 'e-level1-4-level2-8', source: 'level1-4', target: 'level2-8' },\n      { id: 'e-level1-4-level2-9', source: 'level1-4', target: 'level2-9' },\n      { id: 'e-level1-5-level2-10', source: 'level1-5', target: 'level2-10' },\n      { id: 'e-level1-5-level2-11', source: 'level1-5', target: 'level2-11' },\n    ],\n  },\n  layout: {\n    type: 'concentric',\n    nodeSize: 32,\n    sortBy: 'degree',\n    preventOverlap: true,\n  },\n  behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n  animation: false,\n});\n\ngraph.render();\n",paraId:4,tocIndex:3},{value:"展开查看完整代码",paraId:5},{value:"import { Graph } from '@antv/g6';\nconst graph = new Graph({\n  container: 'container',\n  autoFit: 'view',\n  data: {\n    nodes: [\n      { id: 'center', data: { label: '中心', level: 0 } },\n\n      { id: 'level1-0', data: { label: 'L1-0', level: 1 } },\n      { id: 'level1-1', data: { label: 'L1-1', level: 1 } },\n      { id: 'level1-2', data: { label: 'L1-2', level: 1 } },\n      { id: 'level1-3', data: { label: 'L1-3', level: 1 } },\n      { id: 'level1-4', data: { label: 'L1-4', level: 1 } },\n      { id: 'level1-5', data: { label: 'L1-5', level: 1 } },\n\n      { id: 'level2-0', data: { label: 'L2-0', level: 2 } },\n      { id: 'level2-1', data: { label: 'L2-1', level: 2 } },\n      { id: 'level2-2', data: { label: 'L2-2', level: 2 } },\n      { id: 'level2-3', data: { label: 'L2-3', level: 2 } },\n      { id: 'level2-4', data: { label: 'L2-4', level: 2 } },\n      { id: 'level2-5', data: { label: 'L2-5', level: 2 } },\n      { id: 'level2-6', data: { label: 'L2-6', level: 2 } },\n      { id: 'level2-7', data: { label: 'L2-7', level: 2 } },\n      { id: 'level2-8', data: { label: 'L2-8', level: 2 } },\n      { id: 'level2-9', data: { label: 'L2-9', level: 2 } },\n      { id: 'level2-10', data: { label: 'L2-10', level: 2 } },\n      { id: 'level2-11', data: { label: 'L2-11', level: 2 } },\n    ],\n    edges: [\n      { id: 'e-center-level1-0', source: 'center', target: 'level1-0' },\n      { id: 'e-center-level1-1', source: 'center', target: 'level1-1' },\n      { id: 'e-center-level1-2', source: 'center', target: 'level1-2' },\n      { id: 'e-center-level1-3', source: 'center', target: 'level1-3' },\n      { id: 'e-center-level1-4', source: 'center', target: 'level1-4' },\n      { id: 'e-center-level1-5', source: 'center', target: 'level1-5' },\n\n      { id: 'e-level1-0-level2-0', source: 'level1-0', target: 'level2-0' },\n      { id: 'e-level1-0-level2-1', source: 'level1-0', target: 'level2-1' },\n      { id: 'e-level1-1-level2-2', source: 'level1-1', target: 'level2-2' },\n      { id: 'e-level1-1-level2-3', source: 'level1-1', target: 'level2-3' },\n      { id: 'e-level1-2-level2-4', source: 'level1-2', target: 'level2-4' },\n      { id: 'e-level1-2-level2-5', source: 'level1-2', target: 'level2-5' },\n      { id: 'e-level1-3-level2-6', source: 'level1-3', target: 'level2-6' },\n      { id: 'e-level1-3-level2-7', source: 'level1-3', target: 'level2-7' },\n      { id: 'e-level1-4-level2-8', source: 'level1-4', target: 'level2-8' },\n      { id: 'e-level1-4-level2-9', source: 'level1-4', target: 'level2-9' },\n      { id: 'e-level1-5-level2-10', source: 'level1-5', target: 'level2-10' },\n      { id: 'e-level1-5-level2-11', source: 'level1-5', target: 'level2-11' },\n    ],\n  },\n  layout: {\n    type: 'concentric',\n    nodeSize: 32,\n    sortBy: 'degree',\n    preventOverlap: true,\n  },\n  behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n  animation: false,\n});\n\ngraph.render();\n",paraId:6,tocIndex:3}]},17043:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(4675);const d=[{value:"D3Force3D 布局是基于 ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:" 的三维扩展版本，通过在三维空间中模拟物理力的作用来实现自动布局。相比二维布局，它增加了 Z 轴方向的力作用，能够在三维空间中展现更丰富的数据关系。",paraId:0,tocIndex:0},{value:"D3Force3D 在传统二维力导向布局的基础上，扩展了以下力的作用：",paraId:1,tocIndex:2},{value:"三维中心力",paraId:2,tocIndex:2},{value:"：将节点拉向三维空间的中心点",paraId:2,tocIndex:2},{value:"三维碰撞力",paraId:2,tocIndex:2},{value:"：在三维空间中防止节点重叠",paraId:2,tocIndex:2},{value:"三维径向力",paraId:2,tocIndex:2},{value:"：将节点吸引到三维空间中的球面上",paraId:2,tocIndex:2},{value:"三维坐标力",paraId:2,tocIndex:2},{value:"：分别在 X、Y、Z 三个方向上施加作用力",paraId:2,tocIndex:2},{value:"布局计算通过迭代来实现，主要涉及以下参数：",paraId:3,tocIndex:3},{value:"alpha",paraId:4,tocIndex:3},{value:"：当前迭代的活力值，控制节点移动速度",paraId:4,tocIndex:3},{value:"alphaDecay",paraId:4,tocIndex:3},{value:"：活力值的衰减率",paraId:4,tocIndex:3},{value:"alphaMin",paraId:4,tocIndex:3},{value:"：最小活力值，低于此值停止迭代",paraId:4,tocIndex:3},{value:"velocityDecay",paraId:4,tocIndex:3},{value:"：速度衰减因子",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"必选",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"布局类型",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"d3-force-3d",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"nodeSize",paraId:5,tocIndex:4},{value:"节点大小（直径），用于碰撞检测防止节点重叠",paraId:5,tocIndex:4},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"iterations",paraId:5,tocIndex:4},{value:"力的迭代次数，值越大布局越精确但性能消耗越大",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"numDimensions",paraId:5,tocIndex:4},{value:"维度数量（2 或 3）",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"3",paraId:5,tocIndex:4},{value:"forceSimulation",paraId:5,tocIndex:4},{value:"自定义力模拟方法",paraId:5,tocIndex:4},{value:"Simulation<NodeDatum, EdgeDatum>",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onTick",paraId:5,tocIndex:4},{value:"每次迭代的回调函数",paraId:5,tocIndex:4},{value:"(data: LayoutMapping) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"randomSource",paraId:5,tocIndex:4},{value:"随机数生成函数",paraId:5,tocIndex:4},{value:"() => number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"属性",paraId:6,tocIndex:5},{value:"描述",paraId:6,tocIndex:5},{value:"类型",paraId:6,tocIndex:5},{value:"默认值",paraId:6,tocIndex:5},{value:"必选",paraId:6,tocIndex:5},{value:"alpha",paraId:6,tocIndex:5},{value:"当前迭代收敛阈值",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"1",paraId:6,tocIndex:5},{value:"alphaDecay",paraId:6,tocIndex:5},{value:"收敛阈值衰减率（0-1）",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.028",paraId:6,tocIndex:5},{value:"alphaMin",paraId:6,tocIndex:5},{value:"停止迭代的阈值",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.001",paraId:6,tocIndex:5},{value:"alphaTarget",paraId:6,tocIndex:5},{value:"目标收敛阈值",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0",paraId:6,tocIndex:5},{value:"velocityDecay",paraId:6,tocIndex:5},{value:"速度衰减因子",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0.4",paraId:6,tocIndex:5},{value:"属性",paraId:7,tocIndex:7},{value:"描述",paraId:7,tocIndex:7},{value:"类型",paraId:7,tocIndex:7},{value:"默认值",paraId:7,tocIndex:7},{value:"必选",paraId:7,tocIndex:7},{value:"center.x",paraId:7,tocIndex:7},{value:"中心点 x 坐标",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.y",paraId:7,tocIndex:7},{value:"中心点 y 坐标",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.z",paraId:7,tocIndex:7},{value:"中心点 z 坐标",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"0",paraId:7,tocIndex:7},{value:"center.strength",paraId:7,tocIndex:7},{value:"力的强度",paraId:7,tocIndex:7},{value:"number",paraId:7,tocIndex:7},{value:"1",paraId:7,tocIndex:7},{value:"属性",paraId:8,tocIndex:8},{value:"描述",paraId:8,tocIndex:8},{value:"类型",paraId:8,tocIndex:8},{value:"默认值",paraId:8,tocIndex:8},{value:"必选",paraId:8,tocIndex:8},{value:"collide.radius",paraId:8,tocIndex:8},{value:"碰撞半径",paraId:8,tocIndex:8},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:8,tocIndex:8},{value:"10",paraId:8,tocIndex:8},{value:"collide.strength",paraId:8,tocIndex:8},{value:"力的强度",paraId:8,tocIndex:8},{value:"number",paraId:8,tocIndex:8},{value:"1",paraId:8,tocIndex:8},{value:"collide.iterations",paraId:8,tocIndex:8},{value:"碰撞检测的迭代次数",paraId:8,tocIndex:8},{value:"number",paraId:8,tocIndex:8},{value:"1",paraId:8,tocIndex:8},{value:"属性",paraId:9,tocIndex:9},{value:"描述",paraId:9,tocIndex:9},{value:"类型",paraId:9,tocIndex:9},{value:"默认值",paraId:9,tocIndex:9},{value:"必选",paraId:9,tocIndex:9},{value:"link.id",paraId:9,tocIndex:9},{value:"边的 id 生成函数",paraId:9,tocIndex:9},{value:"(edge: EdgeDatum, index: number, edges: EdgeDatum[]) => string",paraId:9,tocIndex:9},{value:"edge.id",paraId:9,tocIndex:9},{value:"link.distance",paraId:9,tocIndex:9},{value:"理想边长",paraId:9,tocIndex:9},{value:"number | ((edge: EdgeDatum, index: number, edges: EdgeDatum[]) => number)",paraId:9,tocIndex:9},{value:"30",paraId:9,tocIndex:9},{value:"link.strength",paraId:9,tocIndex:9},{value:"力的强度",paraId:9,tocIndex:9},{value:"number | ((edge: EdgeDatum, index: number, edges: EdgeDatum[]) => number)",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:"link.iterations",paraId:9,tocIndex:9},{value:"链接力的迭代次数",paraId:9,tocIndex:9},{value:"number",paraId:9,tocIndex:9},{value:"1",paraId:9,tocIndex:9},{value:"属性",paraId:10,tocIndex:10},{value:"描述",paraId:10,tocIndex:10},{value:"类型",paraId:10,tocIndex:10},{value:"默认值",paraId:10,tocIndex:10},{value:"必选",paraId:10,tocIndex:10},{value:"manyBody.strength",paraId:10,tocIndex:10},{value:"力的强度",paraId:10,tocIndex:10},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:10,tocIndex:10},{value:"-30",paraId:10,tocIndex:10},{value:"manyBody.theta",paraId:10,tocIndex:10},{value:"Barnes-Hut 算法的精度参数",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"0.9",paraId:10,tocIndex:10},{value:"manyBody.distanceMin",paraId:10,tocIndex:10},{value:"最小作用距离",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"1",paraId:10,tocIndex:10},{value:"manyBody.distanceMax",paraId:10,tocIndex:10},{value:"最大作用距离",paraId:10,tocIndex:10},{value:"number",paraId:10,tocIndex:10},{value:"Infinity",paraId:10,tocIndex:10},{value:"属性",paraId:11,tocIndex:11},{value:"描述",paraId:11,tocIndex:11},{value:"类型",paraId:11,tocIndex:11},{value:"默认值",paraId:11,tocIndex:11},{value:"必选",paraId:11,tocIndex:11},{value:"radial.strength",paraId:11,tocIndex:11},{value:"力的强度",paraId:11,tocIndex:11},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:11,tocIndex:11},{value:"0.1",paraId:11,tocIndex:11},{value:"radial.radius",paraId:11,tocIndex:11},{value:"目标半径",paraId:11,tocIndex:11},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:11,tocIndex:11},{value:"100",paraId:11,tocIndex:11},{value:"radial.x",paraId:11,tocIndex:11},{value:"球心 x 坐标",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"radial.y",paraId:11,tocIndex:11},{value:"球心 y 坐标",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"radial.z",paraId:11,tocIndex:11},{value:"球心 z 坐标",paraId:11,tocIndex:11},{value:"number",paraId:11,tocIndex:11},{value:"0",paraId:11,tocIndex:11},{value:"每个方向的力可以单独配置：",paraId:12,tocIndex:12},{value:"属性",paraId:13,tocIndex:12},{value:"描述",paraId:13,tocIndex:12},{value:"类型",paraId:13,tocIndex:12},{value:"默认值",paraId:13,tocIndex:12},{value:"必选",paraId:13,tocIndex:12},{value:"x.strength",paraId:13,tocIndex:12},{value:"X 轴方向的力强度",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"x.x",paraId:13,tocIndex:12},{value:"目标 x 坐标",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"y.strength",paraId:13,tocIndex:12},{value:"Y 轴方向的力强度",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"y.y",paraId:13,tocIndex:12},{value:"目标 y 坐标",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"z.strength",paraId:13,tocIndex:12},{value:"Z 轴方向的力强度",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12},{value:"z.z",paraId:13,tocIndex:12},{value:"目标 z 坐标",paraId:13,tocIndex:12},{value:"number | ((node: NodeDatum, index: number, nodes: NodeDatum[]) => number)",paraId:13,tocIndex:12},{value:"-",paraId:13,tocIndex:12}]},22661:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(28925);const d=[{value:"D3Force 布局是基于 ",paraId:0,tocIndex:0},{value:"d3-force",paraId:0,tocIndex:0},{value:" 实现的力导向布局。它通过模拟物理力的作用（如引力、斥力、碰撞等），使图布局达到一个能量最小的稳定状态。",paraId:0,tocIndex:0},{value:"这种布局的主要特点是：",paraId:1,tocIndex:0},{value:"自动排列",paraId:2,tocIndex:0},{value:"：不需要手动设置节点位置，系统会自动找到合适的位置",paraId:2,tocIndex:0},{value:"实时调整",paraId:2,tocIndex:0},{value:"：当你拖动某个节点时，其他节点会实时跟随调整位置",paraId:2,tocIndex:0},{value:"灵活配置",paraId:2,tocIndex:0},{value:"：\n",paraId:2,tocIndex:0},{value:"可以调整节点间的吸引力和排斥力",paraId:3,tocIndex:0},{value:"可以设置边的理想长度",paraId:3,tocIndex:0},{value:"可以固定某些重要节点的位置",paraId:3,tocIndex:0},{value:"动画效果",paraId:2,tocIndex:0},{value:"：节点移动时会有平滑的动画，让变化更自然",paraId:2,tocIndex:0},{value:"D3Force 布局通过模拟五种不同的力来实现自动布局。想象一个物理世界，这些力同时作用，最终达到平衡：",paraId:4,tocIndex:2},{value:"注：图中不同颜色的箭头代表不同类型的力，实际布局中这些力是无形的，同时也会受其他力影响。",paraId:5,tocIndex:2},{value:"链接力",paraId:6,tocIndex:2},{value:"（Link Force）：想象节点之间连着橡皮筋，可以把相连的节点拉到合适的距离。橡皮筋的松紧度就是力的强度（strength），理想长度就是我们设置的距离（distance）。",paraId:6,tocIndex:2},{value:"多体力",paraId:6,tocIndex:2},{value:"（Many-Body Force）：类似磁铁的效果，可以让所有节点互相吸引或排斥。力的强度为负值时节点会互相排斥（像相同磁极），为正值时会互相吸引（像相反磁极）。这个力决定了图的疏密程度。",paraId:6,tocIndex:2},{value:"中心力",paraId:6,tocIndex:2},{value:"（Center Force）：就像所有节点都被一根看不见的绳子拴在画布中心。这个力可以防止节点飘得太远，让整个图保持在画布的中心位置。",paraId:6,tocIndex:2},{value:"碰撞力",paraId:6,tocIndex:2},{value:"（Collision Force）：让节点变成有实体大小的小球，当节点太近时会自动弹开。这个力主要用来防止节点重叠，提高图的可读性。",paraId:6,tocIndex:2},{value:"径向力",paraId:6,tocIndex:2},{value:"（Radial Force）：想象有一个看不见的圆环，这个力会把节点吸引到圆环上。通过设置圆的半径和力的强度，可以让节点形成漂亮的环形布局。",paraId:6,tocIndex:2},{value:"布局计算是一个反复调整的过程，包含两个关键概念：",paraId:7,tocIndex:3},{value:'就像布局的"能量"，决定节点移动的剧烈程度：',paraId:8,tocIndex:4},{value:"初始状态",paraId:9,tocIndex:4},{value:"：Alpha = 1，节点移动剧烈",paraId:9,tocIndex:4},{value:"计算过程",paraId:9,tocIndex:4},{value:"：Alpha 值逐渐降低，节点移动变缓",paraId:9,tocIndex:4},{value:"结束状态",paraId:9,tocIndex:4},{value:"：当 Alpha < alphaMin 时，节点停止移动",paraId:9,tocIndex:4},{value:"控制每次计算时力的作用次数：",paraId:10,tocIndex:5},{value:"作用",paraId:11,tocIndex:5},{value:"：值越大，布局越精确，但计算越慢",paraId:11,tocIndex:5},{value:"调节",paraId:11,tocIndex:5},{value:"：\n",paraId:11,tocIndex:5},{value:"简单图：使用默认值即可",paraId:12,tocIndex:5},{value:"复杂图：可以适当增加迭代次数",paraId:12,tocIndex:5},{value:"实时交互：建议使用较小的迭代次数",paraId:12,tocIndex:5},{value:"提示：迭代次数（iterations）和活力值（alpha）是相互配合的。增加迭代次数可以让每一步计算更精确，而活力值则控制整体计算的进度。",paraId:13,tocIndex:5},{value:"属性",paraId:14,tocIndex:6},{value:"描述",paraId:14,tocIndex:6},{value:"类型",paraId:14,tocIndex:6},{value:"默认值",paraId:14,tocIndex:6},{value:"必选",paraId:14,tocIndex:6},{value:"type",paraId:14,tocIndex:6},{value:"布局类型",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"'d3-force'",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"nodeSize",paraId:14,tocIndex:6},{value:"节点大小（直径），用于碰撞检测防止节点重叠",paraId:14,tocIndex:6},{value:"number | ((node, index, nodes) => number)",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"iterations",paraId:14,tocIndex:6},{value:"力的迭代次数，值越大布局越精确但性能消耗越大",paraId:14,tocIndex:6},{value:"number",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"onTick",paraId:14,tocIndex:6},{value:"每次迭代的回调函数，用于实时获取布局结果",paraId:14,tocIndex:6},{value:"(data: LayoutMapping) => void",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"forceSimulation",paraId:14,tocIndex:6},{value:"自定义力模拟方法，若不指定则使用 d3.js 的方法",paraId:14,tocIndex:6},{value:"Simulation<NodeDatum, EdgeDatum>",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"randomSource",paraId:14,tocIndex:6},{value:"用于生成随机数的函数",paraId:14,tocIndex:6},{value:"() => number",paraId:14,tocIndex:6},{value:"-",paraId:14,tocIndex:6},{value:"属性",paraId:15,tocIndex:7},{value:"描述",paraId:15,tocIndex:7},{value:"类型",paraId:15,tocIndex:7},{value:"默认值",paraId:15,tocIndex:7},{value:"必选",paraId:15,tocIndex:7},{value:"alpha",paraId:15,tocIndex:7},{value:"当前迭代的收敛阈值，控制布局的活跃程度",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"1",paraId:15,tocIndex:7},{value:"alphaMin",paraId:15,tocIndex:7},{value:"停止迭代的最小阈值，当 alpha 小于该值时停止迭代",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.001",paraId:15,tocIndex:7},{value:"alphaDecay",paraId:15,tocIndex:7},{value:"收敛阈值的衰减率，范围 [0, 1]，0.028 对应约 300 次迭代",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.028",paraId:15,tocIndex:7},{value:"alphaTarget",paraId:15,tocIndex:7},{value:"目标收敛阈值，系统会尝试将 alpha 收敛到该值",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0",paraId:15,tocIndex:7},{value:"velocityDecay",paraId:15,tocIndex:7},{value:"速度衰减因子，值越大节点运动越缓慢",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"0.4",paraId:15,tocIndex:7},{value:"属性",paraId:16,tocIndex:9},{value:"描述",paraId:16,tocIndex:9},{value:"类型",paraId:16,tocIndex:9},{value:"默认值",paraId:16,tocIndex:9},{value:"必选",paraId:16,tocIndex:9},{value:"link.id",paraId:16,tocIndex:9},{value:"边的 id 生成函数",paraId:16,tocIndex:9},{value:"(edge, index, edges) => string",paraId:16,tocIndex:9},{value:"(e) => e.id",paraId:16,tocIndex:9},{value:"link.distance",paraId:16,tocIndex:9},{value:"理想边长，边会趋向于该长度",paraId:16,tocIndex:9},{value:"number | ((edge, index, edges) => number)",paraId:16,tocIndex:9},{value:"30",paraId:16,tocIndex:9},{value:"link.strength",paraId:16,tocIndex:9},{value:"力的强度，值越大边长越接近理想边长",paraId:16,tocIndex:9},{value:"number | ((edge, index, edges) => number)",paraId:16,tocIndex:9},{value:"1",paraId:16,tocIndex:9},{value:"link.iterations",paraId:16,tocIndex:9},{value:"链接力的迭代次数",paraId:16,tocIndex:9},{value:"number",paraId:16,tocIndex:9},{value:"1",paraId:16,tocIndex:9},{value:"属性",paraId:17,tocIndex:10},{value:"描述",paraId:17,tocIndex:10},{value:"类型",paraId:17,tocIndex:10},{value:"默认值",paraId:17,tocIndex:10},{value:"必选",paraId:17,tocIndex:10},{value:"manyBody.strength",paraId:17,tocIndex:10},{value:"力的强度，负值为斥力，正值为引力",paraId:17,tocIndex:10},{value:"number | ((node, index, nodes) => number)",paraId:17,tocIndex:10},{value:"-30",paraId:17,tocIndex:10},{value:"manyBody.theta",paraId:17,tocIndex:10},{value:"Barnes-Hut 算法的精度参数，值越小越精确但性能消耗越大",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"0.9",paraId:17,tocIndex:10},{value:"manyBody.distanceMin",paraId:17,tocIndex:10},{value:"最小作用距离，防止力过大",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"1",paraId:17,tocIndex:10},{value:"manyBody.distanceMax",paraId:17,tocIndex:10},{value:"最大作用距离，超过该距离的节点不产生力",paraId:17,tocIndex:10},{value:"number",paraId:17,tocIndex:10},{value:"Infinity",paraId:17,tocIndex:10},{value:"属性",paraId:18,tocIndex:11},{value:"描述",paraId:18,tocIndex:11},{value:"类型",paraId:18,tocIndex:11},{value:"默认值",paraId:18,tocIndex:11},{value:"必选",paraId:18,tocIndex:11},{value:"center.x",paraId:18,tocIndex:11},{value:"中心点 x 坐标",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"0",paraId:18,tocIndex:11},{value:"center.y",paraId:18,tocIndex:11},{value:"中心点 y 坐标",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"0",paraId:18,tocIndex:11},{value:"center.strength",paraId:18,tocIndex:11},{value:"力的强度，值越大节点越趋向于中心点",paraId:18,tocIndex:11},{value:"number",paraId:18,tocIndex:11},{value:"1",paraId:18,tocIndex:11},{value:"属性",paraId:19,tocIndex:12},{value:"描述",paraId:19,tocIndex:12},{value:"类型",paraId:19,tocIndex:12},{value:"默认值",paraId:19,tocIndex:12},{value:"必选",paraId:19,tocIndex:12},{value:"collide.radius",paraId:19,tocIndex:12},{value:"碰撞半径，小于该距离的节点会产生排斥力",paraId:19,tocIndex:12},{value:"number | ((node, index, nodes) => number)",paraId:19,tocIndex:12},{value:"10",paraId:19,tocIndex:12},{value:"collide.strength",paraId:19,tocIndex:12},{value:"力的强度，值越大排斥效果越明显",paraId:19,tocIndex:12},{value:"number",paraId:19,tocIndex:12},{value:"1",paraId:19,tocIndex:12},{value:"collide.iterations",paraId:19,tocIndex:12},{value:"碰撞检测的迭代次数",paraId:19,tocIndex:12},{value:"number",paraId:19,tocIndex:12},{value:"1",paraId:19,tocIndex:12},{value:"属性",paraId:20,tocIndex:13},{value:"描述",paraId:20,tocIndex:13},{value:"类型",paraId:20,tocIndex:13},{value:"默认值",paraId:20,tocIndex:13},{value:"必选",paraId:20,tocIndex:13},{value:"radial.strength",paraId:20,tocIndex:13},{value:"力的强度，值越大节点越趋向于目标半径",paraId:20,tocIndex:13},{value:"number | ((node, index, nodes) => number)",paraId:20,tocIndex:13},{value:"0.1",paraId:20,tocIndex:13},{value:"radial.radius",paraId:20,tocIndex:13},{value:"目标半径，节点会被吸引到该半径的圆周上",paraId:20,tocIndex:13},{value:"number | ((node, index, nodes) => number)",paraId:20,tocIndex:13},{value:"100",paraId:20,tocIndex:13},{value:"radial.x",paraId:20,tocIndex:13},{value:"圆心 x 坐标",paraId:20,tocIndex:13},{value:"number",paraId:20,tocIndex:13},{value:"0",paraId:20,tocIndex:13},{value:"radial.y",paraId:20,tocIndex:13},{value:"圆心 y 坐标",paraId:20,tocIndex:13},{value:"number",paraId:20,tocIndex:13},{value:"0",paraId:20,tocIndex:13},{value:"属性",paraId:21,tocIndex:14},{value:"描述",paraId:21,tocIndex:14},{value:"类型",paraId:21,tocIndex:14},{value:"默认值",paraId:21,tocIndex:14},{value:"必选",paraId:21,tocIndex:14},{value:"x.strength",paraId:21,tocIndex:14},{value:"X 轴方向的力强度",paraId:21,tocIndex:14},{value:"number | ((node, index, nodes) => number)",paraId:21,tocIndex:14},{value:"-",paraId:21,tocIndex:14},{value:"x.x",paraId:21,tocIndex:14},{value:"目标 x 坐标，节点会被吸引到这个位置",paraId:21,tocIndex:14},{value:"number | ((node, index, nodes) => number)",paraId:21,tocIndex:14},{value:"-",paraId:21,tocIndex:14},{value:"属性",paraId:22,tocIndex:15},{value:"描述",paraId:22,tocIndex:15},{value:"类型",paraId:22,tocIndex:15},{value:"默认值",paraId:22,tocIndex:15},{value:"必选",paraId:22,tocIndex:15},{value:"y.strength",paraId:22,tocIndex:15},{value:"Y 轴方向的力强度",paraId:22,tocIndex:15},{value:"number | ((node, index, nodes) => number)",paraId:22,tocIndex:15},{value:"-",paraId:22,tocIndex:15},{value:"y.y",paraId:22,tocIndex:15},{value:"目标 y 坐标，节点会被吸引到这个位置",paraId:22,tocIndex:15},{value:"number | ((node, index, nodes) => number)",paraId:22,tocIndex:15},{value:"-",paraId:22,tocIndex:15},{value:"{\n  layout: {\n    type: 'd3-force',\n    collide: {\n      // Prevent nodes from overlapping by specifying a collision radius for each node.\n      radius: (d) => d.size / 2,\n    },\n  },\n}\n",paraId:23,tocIndex:17},{value:"效果见 ",paraId:24,tocIndex:17},{value:"示例 - 力导向布局防止节点重叠",paraId:25,tocIndex:17},{value:"该示例展示了如何使用力导向布局实现团队聚类效果，不同团队的节点会自动聚集在一起。",paraId:26,tocIndex:18},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      // 团队 A\n      { id: 'A1', team: 'A', label: 'A1', size: 30 },\n      { id: 'A2', team: 'A', label: 'A2', size: 20 },\n      { id: 'A3', team: 'A', label: 'A3', size: 20 },\n      { id: 'A4', team: 'A', label: 'A4', size: 20 },\n      // 团队 B\n      { id: 'B1', team: 'B', label: 'B1', size: 30 },\n      { id: 'B2', team: 'B', label: 'B2', size: 20 },\n      { id: 'B3', team: 'B', label: 'B3', size: 20 },\n      { id: 'B4', team: 'B', label: 'B4', size: 20 },\n      // 团队 C\n      { id: 'C1', team: 'C', label: 'C1', size: 30 },\n      { id: 'C2', team: 'C', label: 'C2', size: 20 },\n      { id: 'C3', team: 'C', label: 'C3', size: 20 },\n      { id: 'C4', team: 'C', label: 'C4', size: 20 },\n    ],\n    edges: [\n      // 团队 A 内部连接\n      { source: 'A1', target: 'A2' },\n      { source: 'A1', target: 'A3' },\n      { source: 'A1', target: 'A4' },\n      // 团队 B 内部连接\n      { source: 'B1', target: 'B2' },\n      { source: 'B1', target: 'B3' },\n      { source: 'B1', target: 'B4' },\n      // 团队 C 内部连接\n      { source: 'C1', target: 'C2' },\n      { source: 'C1', target: 'C3' },\n      { source: 'C1', target: 'C4' },\n      // 团队间的少量连接\n      { source: 'A1', target: 'B1' },\n      { source: 'B1', target: 'C1' },\n    ],\n  },\n  node: {\n    style: {\n      size: (d) => d.size,\n      fill: (d) => {\n        // 不同团队使用不同颜色\n        const colors = {\n          A: '#FF6B6B',\n          B: '#4ECDC4',\n          C: '#45B7D1',\n        };\n        return colors[d.team];\n      },\n      labelText: (d) => d.label,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#aaa',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    // 配置链接力 - 团队内部节点更靠近\n    link: {\n      distance: (d) => {\n        // 同一团队内的连接距离更短\n        if (d.source.team === d.target.team) return 50;\n        // 不同团队间的连接距离更长\n        return 200;\n      },\n      strength: (d) => {\n        // 同一团队内的连接强度更大\n        if (d.source.team === d.target.team) return 0.7;\n        // 不同团队间的连接强度更小\n        return 0.1;\n      },\n    },\n    // 配置多体力 - 控制节点间的排斥力\n    manyBody: {\n      strength: (d) => {\n        // 团队领导节点（编号1）的排斥力更强\n        if (d.label.endsWith('1')) return -100;\n        return -30;\n      },\n    },\n    // 配置碰撞力 - 防止节点重叠\n    collide: {\n      radius: 35,\n      strength: 0.8,\n    },\n    // 配置中心力 - 保持图形在画布中心\n    center: {\n      strength: 0.05,\n    },\n  },\n  behaviors: ['drag-element-force'],\n});\n\ngraph.render();\n",paraId:27,tocIndex:18},{value:"展开查看完整代码",paraId:28},{value:"import { Graph } from '@antv/g6';\n\n// 创建模拟数据，包含不同团队的节点\nconst data = {\n  nodes: [\n    // 团队 A\n    { id: 'A1', team: 'A', label: 'A1', size: 30 },\n    { id: 'A2', team: 'A', label: 'A2', size: 20 },\n    { id: 'A3', team: 'A', label: 'A3', size: 20 },\n    { id: 'A4', team: 'A', label: 'A4', size: 20 },\n    // 团队 B\n    { id: 'B1', team: 'B', label: 'B1', size: 30 },\n    { id: 'B2', team: 'B', label: 'B2', size: 20 },\n    { id: 'B3', team: 'B', label: 'B3', size: 20 },\n    { id: 'B4', team: 'B', label: 'B4', size: 20 },\n    // 团队 C\n    { id: 'C1', team: 'C', label: 'C1', size: 30 },\n    { id: 'C2', team: 'C', label: 'C2', size: 20 },\n    { id: 'C3', team: 'C', label: 'C3', size: 20 },\n    { id: 'C4', team: 'C', label: 'C4', size: 20 },\n  ],\n  edges: [\n    // 团队 A 内部连接\n    { source: 'A1', target: 'A2' },\n    { source: 'A1', target: 'A3' },\n    { source: 'A1', target: 'A4' },\n    // 团队 B 内部连接\n    { source: 'B1', target: 'B2' },\n    { source: 'B1', target: 'B3' },\n    { source: 'B1', target: 'B4' },\n    // 团队 C 内部连接\n    { source: 'C1', target: 'C2' },\n    { source: 'C1', target: 'C3' },\n    { source: 'C1', target: 'C4' },\n    // 团队间的少量连接\n    { source: 'A1', target: 'B1' },\n    { source: 'B1', target: 'C1' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      size: (d) => d.size,\n      fill: (d) => {\n        // 不同团队使用不同颜色\n        const colors = {\n          A: '#FF6B6B',\n          B: '#4ECDC4',\n          C: '#45B7D1',\n        };\n        return colors[d.team];\n      },\n      labelText: (d) => d.label,\n      labelPlacement: 'center',\n      labelFill: '#fff',\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#aaa',\n    },\n  },\n  layout: {\n    type: 'd3-force',\n    // 配置链接力 - 团队内部节点更靠近\n    link: {\n      distance: (d) => {\n        // 同一团队内的连接距离更短\n        if (d.source.team === d.target.team) return 50;\n        // 不同团队间的连接距离更长\n        return 200;\n      },\n      strength: (d) => {\n        // 同一团队内的连接强度更大\n        if (d.source.team === d.target.team) return 0.7;\n        // 不同团队间的连接强度更小\n        return 0.1;\n      },\n    },\n    // 配置多体力 - 控制节点间的排斥力\n    manyBody: {\n      strength: (d) => {\n        // 团队领导节点（编号1）的排斥力更强\n        if (d.label.endsWith('1')) return -100;\n        return -30;\n      },\n    },\n    // 配置碰撞力 - 防止节点重叠\n    collide: {\n      radius: 35,\n      strength: 0.8,\n    },\n    // 配置中心力 - 保持图形在画布中心\n    center: {\n      strength: 0.05,\n    },\n  },\n  behaviors: ['drag-element-force'],\n});\n\ngraph.render();\n",paraId:29,tocIndex:18},{value:"主要配置说明：",paraId:30,tocIndex:18},{value:"link.distance",paraId:31,tocIndex:18},{value:"：团队内部距离短，团队间距离长",paraId:31,tocIndex:18},{value:"link.strength",paraId:31,tocIndex:18},{value:"：团队内部连接强度大，团队间连接强度小",paraId:31,tocIndex:18},{value:"manyBody.strength",paraId:31,tocIndex:18},{value:"：控制节点间排斥力",paraId:31,tocIndex:18},{value:"collide",paraId:31,tocIndex:18},{value:"：防止节点重叠",paraId:31,tocIndex:18},{value:"center",paraId:31,tocIndex:18},{value:"：保持整体布局在画布中心",paraId:31,tocIndex:18},{value:"还可以参考 ",paraId:32,tocIndex:18},{value:"定制不同节点的参数",paraId:33,tocIndex:18},{value:" 示例。",paraId:32,tocIndex:18}]},35445:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(5273);const d=[{value:"Dagre 是一种层次化布局，适用于有向无环图（DAG）的布局场景，能够自动处理节点之间的方向和间距，支持水平和垂直布局。参考更多 Dagre 布局",paraId:0,tocIndex:1},{value:"样例",paraId:1,tocIndex:1},{value:"或",paraId:0,tocIndex:1},{value:"源码",paraId:0,tocIndex:1},{value:"以及",paraId:0,tocIndex:1},{value:"官方文档",paraId:0,tocIndex:1},{value:"。",paraId:0,tocIndex:1},{value:"const graph = new Graph({\n  layout: {\n    type: 'dagre',\n    rankdir: 'TB',\n    align: 'UL',\n    nodesep: 50,\n    ranksep: 50,\n    controlPoints: false,\n  },\n});\n",paraId:2,tocIndex:2},{value:"更多配置项可参考",paraId:3,tocIndex:3},{value:"官方文档",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"布局类型",paraId:4,tocIndex:3},{value:"dagre",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"rankdir",paraId:4,tocIndex:3},{value:"布局方向，可选值",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:"align",paraId:4,tocIndex:3},{value:"节点对齐方式，可选值",paraId:4,tocIndex:3},{value:"UL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"UR",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"DL",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"DR",paraId:4,tocIndex:3},{value:"UL",paraId:4,tocIndex:3},{value:"nodesep",paraId:4,tocIndex:3},{value:"节点间距（px）。在rankdir 为 ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" 或 ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" 时是节点的水平间距；在rankdir 为 ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" 或 ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:" 时代表节点的竖直方向间距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"50",paraId:4,tocIndex:3},{value:"ranksep",paraId:4,tocIndex:3},{value:"层间距（px）。在rankdir 为 ",paraId:4,tocIndex:3},{value:"TB",paraId:4,tocIndex:3},{value:" 或 ",paraId:4,tocIndex:3},{value:"BT",paraId:4,tocIndex:3},{value:" 时是竖直方向相邻层间距；在rankdir 为 ",paraId:4,tocIndex:3},{value:"LR",paraId:4,tocIndex:3},{value:" 或 ",paraId:4,tocIndex:3},{value:"RL",paraId:4,tocIndex:3},{value:" 时代表水平方向相邻层间距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"100",paraId:4,tocIndex:3},{value:"ranker",paraId:4,tocIndex:3},{value:"为每个节点分配等级的算法，共支持三种算法，分别是：",paraId:4,tocIndex:3},{value:"longest-path",paraId:4,tocIndex:3},{value:" 最长路径算法、",paraId:4,tocIndex:3},{value:"tight-tree",paraId:4,tocIndex:3},{value:" 紧凑树算法、",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:" 网络单形法",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"tight-tree",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"longest-path",paraId:4,tocIndex:3},{value:"network-simplex",paraId:4,tocIndex:3},{value:"nodeSize",paraId:4,tocIndex:3},{value:"G6自定义属性，统一指定或为每个节点指定节点大小。如果仅返回单个number，则表示节点的宽度和高度相同；如果返回一个数组，则形如：",paraId:4,tocIndex:3},{value:"[width, height]",paraId:4,tocIndex:3},{value:"number | number[] | () => (number | number[])",paraId:4,tocIndex:3},{value:"controlPoints",paraId:4,tocIndex:3},{value:"是否保留边的控制点",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"TB",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"BT",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"LR",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"RL",paraId:5,tocIndex:4},{value:"， ",paraId:5,tocIndex:4},{value:"Default",paraId:5,tocIndex:4},{value:": ",paraId:5,tocIndex:4},{value:"TB",paraId:5,tocIndex:4},{value:"布局方向",paraId:6,tocIndex:4},{value:"TB",paraId:7,tocIndex:4},{value:"：从上到下；",paraId:7,tocIndex:4},{value:"BT",paraId:8,tocIndex:4},{value:"：从下到上；",paraId:8,tocIndex:4},{value:"LR",paraId:9,tocIndex:4},{value:"：从左到右；",paraId:9,tocIndex:4},{value:"RL",paraId:10,tocIndex:4},{value:"：从右到左。",paraId:10,tocIndex:4},{value:"UL",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"UR",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"DL",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"DR",paraId:11,tocIndex:5},{value:"， ",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:": ",paraId:11,tocIndex:5},{value:"UL",paraId:11,tocIndex:5},{value:"节点对齐方式",paraId:12,tocIndex:5},{value:"UL",paraId:13,tocIndex:5},{value:"：左上对齐",paraId:13,tocIndex:5},{value:"UR",paraId:13,tocIndex:5},{value:"：右上对齐",paraId:13,tocIndex:5},{value:"DL",paraId:13,tocIndex:5},{value:"：左下对齐",paraId:13,tocIndex:5},{value:"DR",paraId:13,tocIndex:5},{value:"：右下对齐",paraId:13,tocIndex:5},{value:"number， ",paraId:14,tocIndex:6},{value:"Default",paraId:14,tocIndex:6},{value:": 50",paraId:14,tocIndex:6},{value:"节点间距（px）。在rankdir 为 ",paraId:15,tocIndex:6},{value:"TB",paraId:15,tocIndex:6},{value:" 或 ",paraId:15,tocIndex:6},{value:"BT",paraId:15,tocIndex:6},{value:" 时是节点的水平间距；在rankdir 为 ",paraId:15,tocIndex:6},{value:"LR",paraId:15,tocIndex:6},{value:" 或 ",paraId:15,tocIndex:6},{value:"RL",paraId:15,tocIndex:6},{value:" 时代表节点的竖直方向间距",paraId:15,tocIndex:6},{value:"number， ",paraId:16,tocIndex:7},{value:"Default",paraId:16,tocIndex:7},{value:": 50",paraId:16,tocIndex:7},{value:"层间距（px）。在rankdir 为 ",paraId:17,tocIndex:7},{value:"TB",paraId:17,tocIndex:7},{value:" 或 ",paraId:17,tocIndex:7},{value:"BT",paraId:17,tocIndex:7},{value:" 时是竖直方向相邻层间距；在rankdir 为 ",paraId:17,tocIndex:7},{value:"LR",paraId:17,tocIndex:7},{value:" 或 ",paraId:17,tocIndex:7},{value:"RL",paraId:17,tocIndex:7},{value:" 时代表水平方向相邻层间距",paraId:17,tocIndex:7},{value:"network-simplex",paraId:18,tocIndex:8},{value:" | ",paraId:18,tocIndex:8},{value:"tight-tree",paraId:18,tocIndex:8},{value:" | ",paraId:18,tocIndex:8},{value:"longest-path",paraId:18,tocIndex:8},{value:"， ",paraId:18,tocIndex:8},{value:"Default",paraId:18,tocIndex:8},{value:": ",paraId:18,tocIndex:8},{value:"network-simplex",paraId:18,tocIndex:8},{value:"为每个节点分配层级的算法，共支持三种算法，分别是：",paraId:19,tocIndex:8},{value:"longest-path",paraId:20,tocIndex:8},{value:"： 最长路径算法，使用DFS深度优先搜索，递归查找每个节点的最长路径。优点是计算简单速度快，但会导致长边过多；",paraId:20,tocIndex:8},{value:"tight-tree",paraId:20,tocIndex:8},{value:"： 紧凑树算法，一种优化算法，目的是减少长边的数量。先用最长路径算法",paraId:20,tocIndex:8},{value:"longest-path",paraId:20,tocIndex:8},{value:"计算出初始层级，然后调整松弛边的长度，从而构建可行树。",paraId:20,tocIndex:8},{value:"network-simplex",paraId:20,tocIndex:8},{value:"： 网络单形法，参考算法",paraId:20,tocIndex:8},{value:"A Technique for Drawing Directed Graphs",paraId:20,tocIndex:8},{value:"，核心思想是迭代修改节点的层级，缩小松弛边。",paraId:20,tocIndex:8},{value:"number | number[] | () => (number | number[])",paraId:21,tocIndex:9},{value:"G6自定义属性，统一指定或为每个节点指定节点大小。如果仅返回单个number，则表示节点的宽度和高度相同；如果返回一个数组，则形如：",paraId:22,tocIndex:9},{value:"[width, height]",paraId:22,tocIndex:9},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 20;\n  return [10, 20];\n};\n",paraId:23,tocIndex:9},{value:"boolean， ",paraId:24,tocIndex:10},{value:"Default",paraId:24,tocIndex:10},{value:": false",paraId:24,tocIndex:10},{value:"是否保留边的控制点。",paraId:25,tocIndex:10},{value:"流程图",paraId:26,tocIndex:11},{value:"：适合展示流程图，节点之间的方向和间距会自动处理；",paraId:26,tocIndex:11},{value:"依赖关系图",paraId:26,tocIndex:11},{value:"：展示软件包或模块之间的依赖关系；",paraId:26,tocIndex:11},{value:"任务调度图",paraId:26,tocIndex:11},{value:"：展示任务之间的依赖关系和执行顺序。",paraId:26,tocIndex:11},{value:"以下文档可以帮助你更好地理解Dagre 布局",paraId:27,tocIndex:12},{value:"图布局算法｜详解 Dagre 布局",paraId:28,tocIndex:12},{value:"深入解读Dagre布局算法",paraId:28,tocIndex:12}]},11121:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59379);const d=[{value:"生态树布局适用于层次聚类数据的可视化，其特点是所有子节点布局在同一层级，不考虑节点大小，每个节点被当成 1px 处理。",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'dendrogram',\n    direction: 'LR',\n    nodeSep: 30,\n    rankSep: 250,\n    radial: false,\n  },\n});\n",paraId:1,tocIndex:1},{value:"属性",paraId:2,tocIndex:2},{value:"描述",paraId:2,tocIndex:2},{value:"类型",paraId:2,tocIndex:2},{value:"默认值",paraId:2,tocIndex:2},{value:"必选",paraId:2,tocIndex:2},{value:"type",paraId:2,tocIndex:2},{value:"布局类型",paraId:2,tocIndex:2},{value:"dendrogram",paraId:2,tocIndex:2},{value:"-",paraId:2,tocIndex:2},{value:"✓",paraId:2,tocIndex:2},{value:"direction",paraId:2,tocIndex:2},{value:"布局方向，",paraId:2,tocIndex:2},{value:"可选值",paraId:3,tocIndex:2},{value:"LR",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"RL",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"TB",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"BT",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"H",paraId:2,tocIndex:2},{value:" | ",paraId:2,tocIndex:2},{value:"V",paraId:2,tocIndex:2},{value:"LR",paraId:2,tocIndex:2},{value:"nodeSep",paraId:2,tocIndex:2},{value:"节点间距，即同一层级节点之间的距离，单位为像素",paraId:2,tocIndex:2},{value:"number",paraId:2,tocIndex:2},{value:"20",paraId:2,tocIndex:2},{value:"rankSep",paraId:2,tocIndex:2},{value:"层级间距，即不同层级之间的距离，单位为像素",paraId:2,tocIndex:2},{value:"number",paraId:2,tocIndex:2},{value:"200",paraId:2,tocIndex:2},{value:"radial",paraId:2,tocIndex:2},{value:"是否启用辐射状布局，",paraId:2,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"树布局的方向，有以下选项：",paraId:5,tocIndex:3},{value:"TB",paraId:6,tocIndex:3},{value:"：根节点在上，往下布局",paraId:6,tocIndex:3},{value:"BT",paraId:7,tocIndex:3},{value:"：根节点在下，往上布局",paraId:7,tocIndex:3},{value:"LR",paraId:8,tocIndex:3},{value:"：根节点在左，往右布局",paraId:8,tocIndex:3},{value:"RL",paraId:9,tocIndex:3},{value:"：根节点在右，往左布局",paraId:9,tocIndex:3},{value:"H",paraId:10,tocIndex:3},{value:"：根节点在中间，水平对称布局",paraId:10,tocIndex:3},{value:"V",paraId:11,tocIndex:3},{value:"：根节点在中间，垂直对称布局",paraId:11,tocIndex:3},{value:"是否启用辐射状布局模式。启用后，节点将以根节点为中心呈辐射状分布。",paraId:12,tocIndex:4},{value:"若 ",paraId:13,tocIndex:4},{value:"radial",paraId:13,tocIndex:4},{value:" 设置为 ",paraId:13,tocIndex:4},{value:"true",paraId:13,tocIndex:4},{value:"，建议将 ",paraId:13,tocIndex:4},{value:"direction",paraId:13,tocIndex:4},{value:" 设置为 ",paraId:13,tocIndex:4},{value:"'LR'",paraId:13,tocIndex:4},{value:" 或 ",paraId:13,tocIndex:4},{value:"'RL'",paraId:13,tocIndex:4},{value:" 以获得最佳效果。",paraId:13,tocIndex:4}]},40197:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18129);const d=[{value:"鱼骨布局是一种专门用于表示层次结构数据的图形布局方式。它通过模拟鱼骨的形状，将数据节点按照层次结构排列，使得数据的层次关系更加清晰直观。鱼骨布局特别适用于需要展示因果关系、层次结构或分类信息的数据集。",paraId:0,tocIndex:0},{value:"需要展示层次结构数据，如组织结构、分类体系",paraId:1,tocIndex:1},{value:"需要展示问题分析过程，如故障分析、质量分析",paraId:1,tocIndex:1},{value:"需要展示决策过程，如决策树、影响因素分析",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'Quality',\n          depth: 0,\n          children: ['Machine', 'Method', 'Material', 'Man Power', 'Measurement', 'Milieu'],\n        },\n        {\n          id: 'Machine',\n          depth: 1,\n          children: ['Mill', 'Mixer', 'Metal Lathe'],\n        },\n        {\n          id: 'Mill',\n          depth: 2,\n        },\n        {\n          id: 'Mixer',\n          depth: 2,\n        },\n        {\n          id: 'Metal Lathe',\n          depth: 2,\n          children: ['Milling'],\n        },\n        {\n          id: 'Milling',\n          depth: 3,\n        },\n        {\n          id: 'Method',\n          depth: 1,\n        },\n        {\n          id: 'Material',\n          depth: 1,\n          children: ['Masonite', 'Marscapone', 'Meat'],\n        },\n        {\n          id: 'Masonite',\n          depth: 2,\n          children: ['spearMint', 'pepperMint', 'test1'],\n        },\n        {\n          id: 'spearMint',\n          depth: 3,\n        },\n        {\n          id: 'pepperMint',\n          depth: 3,\n          children: ['test3'],\n        },\n        {\n          id: 'test3',\n          depth: 4,\n        },\n        {\n          id: 'test1',\n          depth: 3,\n          children: ['test4'],\n        },\n        {\n          id: 'test4',\n          depth: 4,\n        },\n        {\n          id: 'Marscapone',\n          depth: 2,\n          children: ['Malty', 'Minty'],\n        },\n        {\n          id: 'Malty',\n          depth: 3,\n        },\n        {\n          id: 'Minty',\n          depth: 3,\n        },\n        {\n          id: 'Meat',\n          depth: 2,\n          children: ['Mutton'],\n        },\n        {\n          id: 'Mutton',\n          depth: 3,\n        },\n        {\n          id: 'Man Power',\n          depth: 1,\n          children: ['Manager', \"Master's Student\", 'Magician', 'Miner', 'Magister', 'Massage Artist'],\n        },\n        {\n          id: 'Manager',\n          depth: 2,\n        },\n        {\n          id: \"Master's Student\",\n          depth: 2,\n        },\n        {\n          id: 'Magician',\n          depth: 2,\n        },\n        {\n          id: 'Miner',\n          depth: 2,\n        },\n        {\n          id: 'Magister',\n          depth: 2,\n          children: ['Malpractice'],\n        },\n        {\n          id: 'Malpractice',\n          depth: 3,\n        },\n        {\n          id: 'Massage Artist',\n          depth: 2,\n          children: ['Masseur', 'Masseuse'],\n        },\n        {\n          id: 'Masseur',\n          depth: 3,\n        },\n        {\n          id: 'Masseuse',\n          depth: 3,\n        },\n        {\n          id: 'Measurement',\n          depth: 1,\n          children: ['Malleability'],\n        },\n        {\n          id: 'Malleability',\n          depth: 2,\n        },\n        {\n          id: 'Milieu',\n          depth: 1,\n          children: ['Marine'],\n        },\n        {\n          id: 'Marine',\n          depth: 2,\n        },\n      ],\n      edges: [\n        {\n          source: 'Quality',\n          target: 'Machine',\n        },\n        {\n          source: 'Quality',\n          target: 'Method',\n        },\n        {\n          source: 'Quality',\n          target: 'Material',\n        },\n        {\n          source: 'Quality',\n          target: 'Man Power',\n        },\n        {\n          source: 'Quality',\n          target: 'Measurement',\n        },\n        {\n          source: 'Quality',\n          target: 'Milieu',\n        },\n        {\n          source: 'Machine',\n          target: 'Mill',\n        },\n        {\n          source: 'Machine',\n          target: 'Mixer',\n        },\n        {\n          source: 'Machine',\n          target: 'Metal Lathe',\n        },\n        {\n          source: 'Metal Lathe',\n          target: 'Milling',\n        },\n        {\n          source: 'Material',\n          target: 'Masonite',\n        },\n        {\n          source: 'Material',\n          target: 'Marscapone',\n        },\n        {\n          source: 'Material',\n          target: 'Meat',\n        },\n        {\n          source: 'Masonite',\n          target: 'spearMint',\n        },\n        {\n          source: 'Masonite',\n          target: 'pepperMint',\n        },\n        {\n          source: 'Masonite',\n          target: 'test1',\n        },\n        {\n          source: 'pepperMint',\n          target: 'test3',\n        },\n        {\n          source: 'test1',\n          target: 'test4',\n        },\n        {\n          source: 'Marscapone',\n          target: 'Malty',\n        },\n        {\n          source: 'Marscapone',\n          target: 'Minty',\n        },\n        {\n          source: 'Meat',\n          target: 'Mutton',\n        },\n        {\n          source: 'Man Power',\n          target: 'Manager',\n        },\n        {\n          source: 'Man Power',\n          target: \"Master's Student\",\n        },\n        {\n          source: 'Man Power',\n          target: 'Magician',\n        },\n        {\n          source: 'Man Power',\n          target: 'Miner',\n        },\n        {\n          source: 'Man Power',\n          target: 'Magister',\n        },\n        {\n          source: 'Man Power',\n          target: 'Massage Artist',\n        },\n        {\n          source: 'Magister',\n          target: 'Malpractice',\n        },\n        {\n          source: 'Massage Artist',\n          target: 'Masseur',\n        },\n        {\n          source: 'Massage Artist',\n          target: 'Masseuse',\n        },\n        {\n          source: 'Measurement',\n          target: 'Malleability',\n        },\n        {\n          source: 'Milieu',\n          target: 'Marine',\n        },\n      ],\n    },\n    node: {\n      type: 'rect',\n      style: {\n        size: [32, 32],\n        // fill: () => randomColor(),\n        label: false,\n        labelFill: '#262626',\n        labelFontFamily: 'Gill Sans',\n        labelMaxLines: 2,\n        labelMaxWidth: '100%',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n        labelWordWrap: true,\n      },\n    },\n    edge: {\n      type: 'polyline',\n      style: {\n        lineWidth: 3,\n      },\n    },\n    behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n    autoFit: 'view',\n    layout: {\n      type: 'fishbone',\n      direction: 'RL',\n      hGap: 50,\n      vGap: 50,\n      getRibSep: () => 60,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'fishbone',\n      direction: 'RL',\n      hGap: 50,\n      vGap: 50,\n      getRibSep: 60,\n    };\n\n    const optionFolder = gui.addFolder('Fishbone Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'direction', ['RL', 'LR']);\n    optionFolder.add(options, 'hGap', 20, 100, 10);\n    optionFolder.add(options, 'vGap', 20, 100, 10);\n    optionFolder.add(options, 'getRibSep', 30, 100, 10);\n\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: property === 'getRibSep' ? () => value : value,\n        }),\n      );\n      await graph.layout();\n      // 调整 direction 后部分node可能会溢出屏幕，重新执行下fitView\n      if (property === 'direction') {\n        graph.fitView();\n      }\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'fishbone',\n    direction: 'LR',\n    hGap: 50,\n    vGap: 50,\n    getRibSep: () => 60,\n  },\n});\n",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"默认值",paraId:4,tocIndex:4},{value:"必选",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"布局类型",paraId:4,tocIndex:4},{value:"fishbone",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"direction",paraId:4,tocIndex:4},{value:"排布方向，",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:" 从右到左，鱼头在右；",paraId:4,tocIndex:4},{value:"LR",paraId:4,tocIndex:4},{value:" 从左到右，鱼头在左",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:" | ",paraId:4,tocIndex:4},{value:"LR",paraId:4,tocIndex:4},{value:"RL",paraId:4,tocIndex:4},{value:"hGap",paraId:4,tocIndex:4},{value:"水平间距",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"vGap",paraId:4,tocIndex:4},{value:"垂直间距",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"getRibSep",paraId:4,tocIndex:4},{value:"获取鱼骨间距",paraId:4,tocIndex:4},{value:"(node: NodeData) => number",paraId:4,tocIndex:4},{value:"() => 60",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"布局宽度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"布局高度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"节点大小",paraId:4,tocIndex:4},{value:"number | [number, number] | [number, number, number] | ((node: NodeData) => number | [number, number] | [number, number, number])",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"isLayoutInvisibleNodes",paraId:4,tocIndex:4},{value:"不可见节点是否参与布局，当 preLayout 为 true 时生效",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeFilter",paraId:4,tocIndex:4},{value:"参与该布局的节点",paraId:4,tocIndex:4},{value:"(node: NodeData) => boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"preLayout",paraId:4,tocIndex:4},{value:"使用前布局，在初始化元素前计算布局，不适用于流水线布局",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"最简单的配置方式：",paraId:5,tocIndex:6},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nconst graph = new Graph({\n  layout: {\n    type: 'fishbone',\n  },\n  autoFit: 'view',\n  data: treeToGraphData({\n    nodes: [\n      { id: 'root', data: { label: 'Root' } },\n      { id: 'child1', data: { label: 'Child 1' } },\n      { id: 'child2', data: { label: 'Child 2' } },\n      { id: 'child3', data: { label: 'Child 3' } },\n    ],\n    edges: [\n      { id: 'e1', source: 'root', target: 'child1' },\n      { id: 'e2', source: 'root', target: 'child2' },\n      { id: 'e3', source: 'root', target: 'child3' },\n    ],\n  }),\n  edge: {\n    type: 'polyline',\n    style: {\n      lineWidth: 3,\n    },\n  },\n  behaviors: ['drag-canvas'],\n});\n",paraId:6,tocIndex:6},{value:"效果如下：",paraId:7,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'fishbone',\n  },\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'Quality',\n        depth: 0,\n        children: ['Machine', 'Method', 'Material', 'Man Power', 'Measurement', 'Milieu'],\n      },\n      {\n        id: 'Machine',\n        depth: 1,\n        children: ['Mill', 'Mixer', 'Metal Lathe'],\n      },\n      {\n        id: 'Mill',\n        depth: 2,\n      },\n      {\n        id: 'Mixer',\n        depth: 2,\n      },\n      {\n        id: 'Metal Lathe',\n        depth: 2,\n        children: ['Milling'],\n      },\n      {\n        id: 'Milling',\n        depth: 3,\n      },\n      {\n        id: 'Method',\n        depth: 1,\n      },\n      {\n        id: 'Material',\n        depth: 1,\n        children: ['Masonite', 'Marscapone', 'Meat'],\n      },\n      {\n        id: 'Masonite',\n        depth: 2,\n        children: ['spearMint', 'pepperMint', 'test1'],\n      },\n      {\n        id: 'spearMint',\n        depth: 3,\n      },\n      {\n        id: 'pepperMint',\n        depth: 3,\n        children: ['test3'],\n      },\n      {\n        id: 'test3',\n        depth: 4,\n      },\n      {\n        id: 'test1',\n        depth: 3,\n        children: ['test4'],\n      },\n      {\n        id: 'test4',\n        depth: 4,\n      },\n      {\n        id: 'Marscapone',\n        depth: 2,\n        children: ['Malty', 'Minty'],\n      },\n      {\n        id: 'Malty',\n        depth: 3,\n      },\n      {\n        id: 'Minty',\n        depth: 3,\n      },\n      {\n        id: 'Meat',\n        depth: 2,\n        children: ['Mutton'],\n      },\n      {\n        id: 'Mutton',\n        depth: 3,\n      },\n      {\n        id: 'Man Power',\n        depth: 1,\n        children: ['Manager', \"Master's Student\", 'Magician', 'Miner', 'Magister', 'Massage Artist'],\n      },\n      {\n        id: 'Manager',\n        depth: 2,\n      },\n      {\n        id: \"Master's Student\",\n        depth: 2,\n      },\n      {\n        id: 'Magician',\n        depth: 2,\n      },\n      {\n        id: 'Miner',\n        depth: 2,\n      },\n      {\n        id: 'Magister',\n        depth: 2,\n        children: ['Malpractice'],\n      },\n      {\n        id: 'Malpractice',\n        depth: 3,\n      },\n      {\n        id: 'Massage Artist',\n        depth: 2,\n        children: ['Masseur', 'Masseuse'],\n      },\n      {\n        id: 'Masseur',\n        depth: 3,\n      },\n      {\n        id: 'Masseuse',\n        depth: 3,\n      },\n      {\n        id: 'Measurement',\n        depth: 1,\n        children: ['Malleability'],\n      },\n      {\n        id: 'Malleability',\n        depth: 2,\n      },\n      {\n        id: 'Milieu',\n        depth: 1,\n        children: ['Marine'],\n      },\n      {\n        id: 'Marine',\n        depth: 2,\n      },\n    ],\n    edges: [\n      {\n        source: 'Quality',\n        target: 'Machine',\n      },\n      {\n        source: 'Quality',\n        target: 'Method',\n      },\n      {\n        source: 'Quality',\n        target: 'Material',\n      },\n      {\n        source: 'Quality',\n        target: 'Man Power',\n      },\n      {\n        source: 'Quality',\n        target: 'Measurement',\n      },\n      {\n        source: 'Quality',\n        target: 'Milieu',\n      },\n      {\n        source: 'Machine',\n        target: 'Mill',\n      },\n      {\n        source: 'Machine',\n        target: 'Mixer',\n      },\n      {\n        source: 'Machine',\n        target: 'Metal Lathe',\n      },\n      {\n        source: 'Metal Lathe',\n        target: 'Milling',\n      },\n      {\n        source: 'Material',\n        target: 'Masonite',\n      },\n      {\n        source: 'Material',\n        target: 'Marscapone',\n      },\n      {\n        source: 'Material',\n        target: 'Meat',\n      },\n      {\n        source: 'Masonite',\n        target: 'spearMint',\n      },\n      {\n        source: 'Masonite',\n        target: 'pepperMint',\n      },\n      {\n        source: 'Masonite',\n        target: 'test1',\n      },\n      {\n        source: 'pepperMint',\n        target: 'test3',\n      },\n      {\n        source: 'test1',\n        target: 'test4',\n      },\n      {\n        source: 'Marscapone',\n        target: 'Malty',\n      },\n      {\n        source: 'Marscapone',\n        target: 'Minty',\n      },\n      {\n        source: 'Meat',\n        target: 'Mutton',\n      },\n      {\n        source: 'Man Power',\n        target: 'Manager',\n      },\n      {\n        source: 'Man Power',\n        target: \"Master's Student\",\n      },\n      {\n        source: 'Man Power',\n        target: 'Magician',\n      },\n      {\n        source: 'Man Power',\n        target: 'Miner',\n      },\n      {\n        source: 'Man Power',\n        target: 'Magister',\n      },\n      {\n        source: 'Man Power',\n        target: 'Massage Artist',\n      },\n      {\n        source: 'Magister',\n        target: 'Malpractice',\n      },\n      {\n        source: 'Massage Artist',\n        target: 'Masseur',\n      },\n      {\n        source: 'Massage Artist',\n        target: 'Masseuse',\n      },\n      {\n        source: 'Measurement',\n        target: 'Malleability',\n      },\n      {\n        source: 'Milieu',\n        target: 'Marine',\n      },\n    ],\n  },\n  edge: {\n    type: 'polyline',\n    style: {\n      lineWidth: 3,\n    },\n  },\n  behaviors: ['drag-canvas'],\n});\n\ngraph.render();\n",paraId:8,tocIndex:6},{value:"Fishbone布局",paraId:9}]},98037:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(22259);const d=[{value:"ForceAtlas2 是一种基于力导向的布局算法，它通过模拟物理系统中的力来优化节点位置。该布局特别适用于大规模网络数据的可视化，能够有效地展示节点之间的关系和聚类结构。",paraId:0,tocIndex:0},{value:"社交网络分析：展示用户之间的关系网络，通过节点度数反映用户影响力",paraId:1,tocIndex:1},{value:"知识图谱：展示概念之间的关联关系，通过聚类效果发现知识领域",paraId:1,tocIndex:1},{value:"系统架构图：展示系统组件之间的依赖关系，通过 hub 模式突出核心组件",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'Myriel' },\n        { id: 'Napoleon' },\n        { id: 'Mlle.Baptistine' },\n        { id: 'Mme.Magloire' },\n        { id: 'CountessdeLo' },\n        { id: 'Geborand' },\n        { id: 'Champtercier' },\n        { id: 'Cravatte' },\n        { id: 'Count' },\n        { id: 'OldMan' },\n        { id: 'Labarre' },\n        { id: 'Valjean' },\n        { id: 'Marguerite' },\n        { id: 'Mme.deR' },\n        { id: 'Isabeau' },\n        { id: 'Gervais' },\n        { id: 'Tholomyes' },\n        { id: 'Listolier' },\n        { id: 'Fameuil' },\n        { id: 'Blacheville' },\n        { id: 'Favourite' },\n        { id: 'Dahlia' },\n        { id: 'Zephine' },\n        { id: 'Fantine' },\n        { id: 'Mme.Thenardier' },\n        { id: 'Thenardier' },\n        { id: 'Cosette' },\n        { id: 'Javert' },\n        { id: 'Fauchelevent' },\n        { id: 'Bamatabois' },\n        { id: 'Perpetue' },\n        { id: 'Simplice' },\n        { id: 'Scaufflaire' },\n        { id: 'Woman1' },\n        { id: 'Judge' },\n        { id: 'Champmathieu' },\n        { id: 'Brevet' },\n        { id: 'Chenildieu' },\n        { id: 'Cochepaille' },\n        { id: 'Pontmercy' },\n        { id: 'Boulatruelle' },\n        { id: 'Eponine' },\n        { id: 'Anzelma' },\n        { id: 'Woman2' },\n        { id: 'MotherInnocent' },\n        { id: 'Gribier' },\n        { id: 'Jondrette' },\n        { id: 'Mme.Burgon' },\n        { id: 'Gavroche' },\n        { id: 'Gillenormand' },\n        { id: 'Magnon' },\n        { id: 'Mlle.Gillenormand' },\n        { id: 'Mme.Pontmercy' },\n        { id: 'Mlle.Vaubois' },\n        { id: 'Lt.Gillenormand' },\n        { id: 'Marius' },\n        { id: 'BaronessT' },\n        { id: 'Mabeuf' },\n        { id: 'Enjolras' },\n        { id: 'Combeferre' },\n        { id: 'Prouvaire' },\n        { id: 'Feuilly' },\n        { id: 'Courfeyrac' },\n        { id: 'Bahorel' },\n        { id: 'Bossuet' },\n        { id: 'Joly' },\n        { id: 'Grantaire' },\n        { id: 'MotherPlutarch' },\n        { id: 'Gueulemer' },\n        { id: 'Babet' },\n        { id: 'Claquesous' },\n        { id: 'Montparnasse' },\n        { id: 'Toussaint' },\n        { id: 'Child1' },\n        { id: 'Child2' },\n        { id: 'Brujon' },\n        { id: 'Mme.Hucheloup' },\n      ],\n      edges: [\n        { source: 'Napoleon', target: 'Myriel', value: 1 },\n        { source: 'Mlle.Baptistine', target: 'Myriel', value: 8 },\n        { source: 'Mme.Magloire', target: 'Myriel', value: 10 },\n        { source: 'Mme.Magloire', target: 'Mlle.Baptistine', value: 6 },\n        { source: 'CountessdeLo', target: 'Myriel', value: 1 },\n        { source: 'Geborand', target: 'Myriel', value: 1 },\n        { source: 'Champtercier', target: 'Myriel', value: 1 },\n        { source: 'Cravatte', target: 'Myriel', value: 1 },\n        { source: 'Count', target: 'Myriel', value: 2 },\n        { source: 'OldMan', target: 'Myriel', value: 1 },\n        { source: 'Valjean', target: 'Labarre', value: 1 },\n        { source: 'Valjean', target: 'Mme.Magloire', value: 3 },\n        { source: 'Valjean', target: 'Mlle.Baptistine', value: 3 },\n        { source: 'Valjean', target: 'Myriel', value: 5 },\n        { source: 'Marguerite', target: 'Valjean', value: 1 },\n        { source: 'Mme.deR', target: 'Valjean', value: 1 },\n        { source: 'Isabeau', target: 'Valjean', value: 1 },\n        { source: 'Gervais', target: 'Valjean', value: 1 },\n        { source: 'Listolier', target: 'Tholomyes', value: 4 },\n        { source: 'Fameuil', target: 'Tholomyes', value: 4 },\n        { source: 'Fameuil', target: 'Listolier', value: 4 },\n        { source: 'Blacheville', target: 'Tholomyes', value: 4 },\n        { source: 'Blacheville', target: 'Listolier', value: 4 },\n        { source: 'Blacheville', target: 'Fameuil', value: 4 },\n        { source: 'Favourite', target: 'Tholomyes', value: 3 },\n        { source: 'Favourite', target: 'Listolier', value: 3 },\n        { source: 'Favourite', target: 'Fameuil', value: 3 },\n        { source: 'Favourite', target: 'Blacheville', value: 4 },\n        { source: 'Dahlia', target: 'Tholomyes', value: 3 },\n        { source: 'Dahlia', target: 'Listolier', value: 3 },\n        { source: 'Dahlia', target: 'Fameuil', value: 3 },\n        { source: 'Dahlia', target: 'Blacheville', value: 3 },\n        { source: 'Dahlia', target: 'Favourite', value: 5 },\n        { source: 'Zephine', target: 'Tholomyes', value: 3 },\n        { source: 'Zephine', target: 'Listolier', value: 3 },\n        { source: 'Zephine', target: 'Fameuil', value: 3 },\n        { source: 'Zephine', target: 'Blacheville', value: 3 },\n        { source: 'Zephine', target: 'Favourite', value: 4 },\n        { source: 'Zephine', target: 'Dahlia', value: 4 },\n        { source: 'Fantine', target: 'Tholomyes', value: 3 },\n        { source: 'Fantine', target: 'Listolier', value: 3 },\n        { source: 'Fantine', target: 'Fameuil', value: 3 },\n        { source: 'Fantine', target: 'Blacheville', value: 3 },\n        { source: 'Fantine', target: 'Favourite', value: 4 },\n        { source: 'Fantine', target: 'Dahlia', value: 4 },\n        { source: 'Fantine', target: 'Zephine', value: 4 },\n        { source: 'Fantine', target: 'Marguerite', value: 2 },\n        { source: 'Fantine', target: 'Valjean', value: 9 },\n        { source: 'Mme.Thenardier', target: 'Fantine', value: 2 },\n        { source: 'Mme.Thenardier', target: 'Valjean', value: 7 },\n        { source: 'Thenardier', target: 'Mme.Thenardier', value: 13 },\n        { source: 'Thenardier', target: 'Fantine', value: 1 },\n        { source: 'Thenardier', target: 'Valjean', value: 12 },\n        { source: 'Cosette', target: 'Mme.Thenardier', value: 4 },\n        { source: 'Cosette', target: 'Valjean', value: 31 },\n        { source: 'Cosette', target: 'Tholomyes', value: 1 },\n        { source: 'Cosette', target: 'Thenardier', value: 1 },\n        { source: 'Javert', target: 'Valjean', value: 17 },\n        { source: 'Javert', target: 'Fantine', value: 5 },\n        { source: 'Javert', target: 'Thenardier', value: 5 },\n        { source: 'Javert', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Javert', target: 'Cosette', value: 1 },\n        { source: 'Fauchelevent', target: 'Valjean', value: 8 },\n        { source: 'Fauchelevent', target: 'Javert', value: 1 },\n        { source: 'Bamatabois', target: 'Fantine', value: 1 },\n        { source: 'Bamatabois', target: 'Javert', value: 1 },\n        { source: 'Bamatabois', target: 'Valjean', value: 2 },\n        { source: 'Perpetue', target: 'Fantine', value: 1 },\n        { source: 'Simplice', target: 'Perpetue', value: 2 },\n        { source: 'Simplice', target: 'Valjean', value: 3 },\n        { source: 'Simplice', target: 'Fantine', value: 2 },\n        { source: 'Simplice', target: 'Javert', value: 1 },\n        { source: 'Scaufflaire', target: 'Valjean', value: 1 },\n        { source: 'Woman1', target: 'Valjean', value: 2 },\n        { source: 'Woman1', target: 'Javert', value: 1 },\n        { source: 'Judge', target: 'Valjean', value: 3 },\n        { source: 'Judge', target: 'Bamatabois', value: 2 },\n        { source: 'Champmathieu', target: 'Valjean', value: 3 },\n        { source: 'Champmathieu', target: 'Judge', value: 3 },\n        { source: 'Champmathieu', target: 'Bamatabois', value: 2 },\n        { source: 'Brevet', target: 'Judge', value: 2 },\n        { source: 'Brevet', target: 'Champmathieu', value: 2 },\n        { source: 'Brevet', target: 'Valjean', value: 2 },\n        { source: 'Brevet', target: 'Bamatabois', value: 1 },\n        { source: 'Chenildieu', target: 'Judge', value: 2 },\n        { source: 'Chenildieu', target: 'Champmathieu', value: 2 },\n        { source: 'Chenildieu', target: 'Brevet', value: 2 },\n        { source: 'Chenildieu', target: 'Valjean', value: 2 },\n        { source: 'Chenildieu', target: 'Bamatabois', value: 1 },\n        { source: 'Cochepaille', target: 'Judge', value: 2 },\n        { source: 'Cochepaille', target: 'Champmathieu', value: 2 },\n        { source: 'Cochepaille', target: 'Brevet', value: 2 },\n        { source: 'Cochepaille', target: 'Chenildieu', value: 2 },\n        { source: 'Cochepaille', target: 'Valjean', value: 2 },\n        { source: 'Cochepaille', target: 'Bamatabois', value: 1 },\n        { source: 'Pontmercy', target: 'Thenardier', value: 1 },\n        { source: 'Boulatruelle', target: 'Thenardier', value: 1 },\n        { source: 'Eponine', target: 'Mme.Thenardier', value: 5 },\n        { source: 'Eponine', target: 'Thenardier', value: 1 },\n        { source: 'Anzelma', target: 'Eponine', value: 1 },\n        { source: 'Anzelma', target: 'Thenardier', value: 1 },\n        { source: 'Anzelma', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Woman2', target: 'Valjean', value: 3 },\n        { source: 'Woman2', target: 'Cosette', value: 1 },\n        { source: 'Woman2', target: 'Javert', value: 1 },\n        { source: 'MotherInnocent', target: 'Fauchelevent', value: 3 },\n        { source: 'MotherInnocent', target: 'Valjean', value: 1 },\n        { source: 'Gribier', target: 'Fauchelevent', value: 2 },\n        { source: 'Mme.Burgon', target: 'Jondrette', value: 1 },\n        { source: 'Jondrette', target: 'Mme.Burgon', value: 2 },\n        { source: 'Jondrette', target: 'Valjean', value: 1 },\n        { source: 'Gavroche', target: 'Mme.Burgon', value: 2 },\n        { source: 'Gavroche', target: 'Thenardier', value: 1 },\n        { source: 'Gavroche', target: 'Javert', value: 1 },\n        { source: 'Gavroche', target: 'Valjean', value: 2 },\n        { source: 'Gillenormand', target: 'Cosette', value: 3 },\n        { source: 'Gillenormand', target: 'Valjean', value: 2 },\n        { source: 'Magnon', target: 'Gillenormand', value: 1 },\n        { source: 'Magnon', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Mlle.Gillenormand', target: 'Gillenormand', value: 9 },\n        { source: 'Mlle.Gillenormand', target: 'Cosette', value: 2 },\n        { source: 'Mlle.Gillenormand', target: 'Valjean', value: 2 },\n        { source: 'Mme.Pontmercy', target: 'Mlle.Gillenormand', value: 1 },\n        { source: 'Mme.Pontmercy', target: 'Pontmercy', value: 1 },\n        { source: 'Mlle.Vaubois', target: 'Mlle.Gillenormand', value: 1 },\n        { source: 'Lt.Gillenormand', target: 'Mlle.Gillenormand', value: 2 },\n        { source: 'Lt.Gillenormand', target: 'Gillenormand', value: 1 },\n        { source: 'Lt.Gillenormand', target: 'Cosette', value: 1 },\n        { source: 'Marius', target: 'Mlle.Gillenormand', value: 6 },\n        { source: 'Marius', target: 'Gillenormand', value: 12 },\n        { source: 'Marius', target: 'Pontmercy', value: 1 },\n        { source: 'Marius', target: 'Lt.Gillenormand', value: 1 },\n        { source: 'Marius', target: 'Cosette', value: 21 },\n        { source: 'Marius', target: 'Valjean', value: 19 },\n        { source: 'Marius', target: 'Tholomyes', value: 1 },\n        { source: 'Marius', target: 'Thenardier', value: 2 },\n        { source: 'Marius', target: 'Eponine', value: 5 },\n        { source: 'Marius', target: 'Gavroche', value: 4 },\n        { source: 'BaronessT', target: 'Gillenormand', value: 1 },\n        { source: 'BaronessT', target: 'Marius', value: 1 },\n        { source: 'Mabeuf', target: 'Marius', value: 1 },\n        { source: 'Mabeuf', target: 'Eponine', value: 1 },\n        { source: 'Mabeuf', target: 'Gavroche', value: 1 },\n        { source: 'Enjolras', target: 'Marius', value: 7 },\n        { source: 'Enjolras', target: 'Gavroche', value: 7 },\n        { source: 'Enjolras', target: 'Javert', value: 6 },\n        { source: 'Enjolras', target: 'Mabeuf', value: 1 },\n        { source: 'Enjolras', target: 'Valjean', value: 4 },\n        { source: 'Combeferre', target: 'Enjolras', value: 15 },\n        { source: 'Combeferre', target: 'Marius', value: 5 },\n        { source: 'Combeferre', target: 'Gavroche', value: 6 },\n        { source: 'Combeferre', target: 'Mabeuf', value: 2 },\n        { source: 'Prouvaire', target: 'Gavroche', value: 1 },\n        { source: 'Prouvaire', target: 'Enjolras', value: 4 },\n        { source: 'Prouvaire', target: 'Combeferre', value: 2 },\n        { source: 'Feuilly', target: 'Gavroche', value: 2 },\n        { source: 'Feuilly', target: 'Enjolras', value: 6 },\n        { source: 'Feuilly', target: 'Prouvaire', value: 2 },\n        { source: 'Feuilly', target: 'Combeferre', value: 5 },\n        { source: 'Feuilly', target: 'Mabeuf', value: 1 },\n        { source: 'Feuilly', target: 'Marius', value: 1 },\n        { source: 'Courfeyrac', target: 'Marius', value: 9 },\n        { source: 'Courfeyrac', target: 'Enjolras', value: 17 },\n        { source: 'Courfeyrac', target: 'Combeferre', value: 13 },\n        { source: 'Courfeyrac', target: 'Gavroche', value: 7 },\n        { source: 'Courfeyrac', target: 'Mabeuf', value: 2 },\n        { source: 'Courfeyrac', target: 'Eponine', value: 1 },\n        { source: 'Courfeyrac', target: 'Feuilly', value: 6 },\n        { source: 'Courfeyrac', target: 'Prouvaire', value: 3 },\n        { source: 'Bahorel', target: 'Combeferre', value: 5 },\n        { source: 'Bahorel', target: 'Gavroche', value: 5 },\n        { source: 'Bahorel', target: 'Courfeyrac', value: 6 },\n        { source: 'Bahorel', target: 'Mabeuf', value: 2 },\n        { source: 'Bahorel', target: 'Enjolras', value: 4 },\n        { source: 'Bahorel', target: 'Feuilly', value: 3 },\n        { source: 'Bahorel', target: 'Prouvaire', value: 2 },\n        { source: 'Bahorel', target: 'Marius', value: 1 },\n        { source: 'Bossuet', target: 'Marius', value: 5 },\n        { source: 'Bossuet', target: 'Courfeyrac', value: 12 },\n        { source: 'Bossuet', target: 'Gavroche', value: 5 },\n        { source: 'Bossuet', target: 'Bahorel', value: 4 },\n        { source: 'Bossuet', target: 'Enjolras', value: 10 },\n        { source: 'Bossuet', target: 'Feuilly', value: 6 },\n        { source: 'Bossuet', target: 'Prouvaire', value: 2 },\n        { source: 'Bossuet', target: 'Combeferre', value: 9 },\n        { source: 'Bossuet', target: 'Mabeuf', value: 1 },\n        { source: 'Bossuet', target: 'Valjean', value: 1 },\n        { source: 'Joly', target: 'Bahorel', value: 5 },\n        { source: 'Joly', target: 'Bossuet', value: 7 },\n        { source: 'Joly', target: 'Gavroche', value: 3 },\n        { source: 'Joly', target: 'Courfeyrac', value: 5 },\n        { source: 'Joly', target: 'Enjolras', value: 5 },\n        { source: 'Joly', target: 'Feuilly', value: 5 },\n        { source: 'Joly', target: 'Prouvaire', value: 2 },\n        { source: 'Joly', target: 'Combeferre', value: 5 },\n        { source: 'Joly', target: 'Mabeuf', value: 1 },\n        { source: 'Joly', target: 'Marius', value: 2 },\n        { source: 'Grantaire', target: 'Bossuet', value: 3 },\n        { source: 'Grantaire', target: 'Enjolras', value: 3 },\n        { source: 'Grantaire', target: 'Combeferre', value: 1 },\n        { source: 'Grantaire', target: 'Courfeyrac', value: 2 },\n        { source: 'Grantaire', target: 'Joly', value: 2 },\n        { source: 'Grantaire', target: 'Gavroche', value: 1 },\n        { source: 'Grantaire', target: 'Bahorel', value: 1 },\n        { source: 'Grantaire', target: 'Feuilly', value: 1 },\n        { source: 'Grantaire', target: 'Prouvaire', value: 1 },\n        { source: 'MotherPlutarch', target: 'Mabeuf', value: 3 },\n        { source: 'Gueulemer', target: 'Thenardier', value: 5 },\n        { source: 'Gueulemer', target: 'Valjean', value: 1 },\n        { source: 'Gueulemer', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Gueulemer', target: 'Javert', value: 1 },\n        { source: 'Gueulemer', target: 'Gavroche', value: 1 },\n        { source: 'Gueulemer', target: 'Eponine', value: 1 },\n        { source: 'Babet', target: 'Thenardier', value: 6 },\n        { source: 'Babet', target: 'Gueulemer', value: 6 },\n        { source: 'Babet', target: 'Valjean', value: 1 },\n        { source: 'Babet', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Babet', target: 'Javert', value: 2 },\n        { source: 'Babet', target: 'Gavroche', value: 1 },\n        { source: 'Babet', target: 'Eponine', value: 1 },\n        { source: 'Claquesous', target: 'Thenardier', value: 4 },\n        { source: 'Claquesous', target: 'Babet', value: 4 },\n        { source: 'Claquesous', target: 'Gueulemer', value: 4 },\n        { source: 'Claquesous', target: 'Valjean', value: 1 },\n        { source: 'Claquesous', target: 'Mme.Thenardier', value: 1 },\n        { source: 'Claquesous', target: 'Javert', value: 1 },\n        { source: 'Claquesous', target: 'Eponine', value: 1 },\n        { source: 'Claquesous', target: 'Enjolras', value: 1 },\n        { source: 'Montparnasse', target: 'Javert', value: 1 },\n        { source: 'Montparnasse', target: 'Babet', value: 2 },\n        { source: 'Montparnasse', target: 'Gueulemer', value: 2 },\n        { source: 'Montparnasse', target: 'Claquesous', value: 2 },\n        { source: 'Montparnasse', target: 'Valjean', value: 1 },\n        { source: 'Montparnasse', target: 'Gavroche', value: 1 },\n        { source: 'Montparnasse', target: 'Eponine', value: 1 },\n        { source: 'Montparnasse', target: 'Thenardier', value: 1 },\n        { source: 'Toussaint', target: 'Cosette', value: 2 },\n        { source: 'Toussaint', target: 'Javert', value: 1 },\n        { source: 'Toussaint', target: 'Valjean', value: 1 },\n        { source: 'Child1', target: 'Gavroche', value: 2 },\n        { source: 'Child2', target: 'Gavroche', value: 2 },\n        { source: 'Child2', target: 'Child1', value: 3 },\n        { source: 'Brujon', target: 'Babet', value: 3 },\n        { source: 'Brujon', target: 'Gueulemer', value: 3 },\n        { source: 'Brujon', target: 'Thenardier', value: 3 },\n        { source: 'Brujon', target: 'Gavroche', value: 1 },\n        { source: 'Brujon', target: 'Eponine', value: 1 },\n        { source: 'Brujon', target: 'Claquesous', value: 1 },\n        { source: 'Brujon', target: 'Montparnasse', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Bossuet', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Joly', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Grantaire', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Bahorel', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Courfeyrac', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Gavroche', value: 1 },\n        { source: 'Mme.Hucheloup', target: 'Enjolras', value: 1 },\n      ],\n    },\n    autoFit: 'view',\n    layout: {\n      type: 'force-atlas2',\n      preventOverlap: true,\n      kr: 20,\n      center: [250, 250],\n      ks: 0.1,\n      ksmax: 10,\n      tao: 0.1,\n      mode: 'normal',\n    },\n    behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n    autoResize: true,\n    zoomRange: [0.1, 5],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'force-atlas2',\n      preventOverlap: true,\n      kr: 20,\n      ks: 0.1,\n      ksmax: 10,\n      tao: 0.1,\n      mode: 'normal',\n      kg: 1,\n      barnesHut: false,\n      dissuadeHubs: false,\n      prune: false,\n    };\n\n    const optionFolder = gui.addFolder('ForceAtlas2 Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'kr', 1, 100, 1);\n    optionFolder.add(options, 'ks', 0.01, 1, 0.01);\n    optionFolder.add(options, 'ksmax', 1, 20, 1);\n    optionFolder.add(options, 'tao', 0.01, 1, 0.01);\n    optionFolder.add(options, 'kg', 0, 10, 0.1);\n    optionFolder.add(options, 'barnesHut');\n    optionFolder.add(options, 'dissuadeHubs');\n    optionFolder.add(options, 'prune');\n    optionFolder.add(options, 'mode', ['normal', 'linlog']);\n\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: value,\n        }),\n      );\n      await graph.layout();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n    center: [250, 250],\n  },\n});\n",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"默认值",paraId:4,tocIndex:4},{value:"必选",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"布局类型，必须为 ",paraId:4,tocIndex:4},{value:"force-atlas2",paraId:4,tocIndex:4},{value:"force-atlas2",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"barnesHut",paraId:4,tocIndex:4},{value:"是否开启四叉树加速，开启后可以提升大规模图的布局性能，但可能会影响布局质量。默认情况下为 undefined，当节点数量大于 250 时它将会被激活。设置为 false 则不会自动被激活",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"dissuadeHubs",paraId:4,tocIndex:4},{value:"是否开启 hub 模式。若为 true，相比与出度大的节点，入度大的节点将会有更高的优先级被放置在中心位置",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"布局高度，默认使用容器高度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"kg",paraId:4,tocIndex:4},{value:"重力系数，",paraId:4,tocIndex:4},{value:"kg",paraId:4,tocIndex:4},{value:" 越大，布局越聚集在中心",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"1",paraId:4,tocIndex:4},{value:"kr",paraId:4,tocIndex:4},{value:"斥力系数，可用于调整布局的紧凑程度。kr 越大，布局越松散",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"5",paraId:4,tocIndex:4},{value:"ks",paraId:4,tocIndex:4},{value:"控制迭代过程中，节点移动的速度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"0.1",paraId:4,tocIndex:4},{value:"ksmax",paraId:4,tocIndex:4},{value:"迭代过程中，最大的节点移动的速度上限",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"mode",paraId:4,tocIndex:4},{value:"聚类模式，",paraId:4,tocIndex:4},{value:"linlog",paraId:4,tocIndex:4},{value:" 模式下，聚类将更加紧凑",paraId:4,tocIndex:4},{value:"normal",paraId:4,tocIndex:4},{value:" | ",paraId:4,tocIndex:4},{value:"linlog",paraId:4,tocIndex:4},{value:"normal",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"节点大小（直径）。当开启 ",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:" 时，用于计算节点之间的斥力。如果不设置，则使用节点数据中的 data.size 属性",paraId:4,tocIndex:4},{value:"Size | ((node?: Node) => Size)",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"onTick",paraId:4,tocIndex:4},{value:"每一次迭代的回调函数",paraId:4,tocIndex:4},{value:"(data: LayoutMapping) => void",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"是否防止节点重叠。开启后，布局会考虑节点大小，避免节点重叠。节点大小通过 ",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:" 配置指定，如果没有设置 ",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"，则通过节点数据中的 data.size 属性指定",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"prune",paraId:4,tocIndex:4},{value:"是否开启自动剪枝模式。默认情况下为 undefined，当节点数量大于 100 时它将会被激活。注意，剪枝能够提高收敛速度，但可能会降低图的布局质量。设置为 false 则不会自动被激活",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"tao",paraId:4,tocIndex:4},{value:"迭代接近收敛时停止震荡的容忍度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"0.1",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"布局宽度，默认使用容器宽度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"布局中心点，用于指定重力的中心，格式为 [x, y]。每个节点都会受到一个指向该中心点的重力，重力大小由 ",paraId:4,tocIndex:4},{value:"kg",paraId:4,tocIndex:4},{value:" 参数控制。如果不设置，则使用画布中心点",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n  },\n  autoFit: 'view',\n  data: {\n    nodes: [\n      { id: 'node1' },\n      { id: 'node2' },\n      { id: 'node3' },\n      { id: 'node4' },\n      { id: 'node5' },\n      { id: 'node6' },\n      { id: 'node7' },\n      { id: 'node8' },\n      { id: 'node9' },\n      { id: 'node10' },\n      { id: 'node11' },\n      { id: 'node12' },\n      { id: 'node13' },\n      { id: 'node14' },\n      { id: 'node15' },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n      { source: 'node5', target: 'node6' },\n      { source: 'node6', target: 'node7' },\n      { source: 'node7', target: 'node8' },\n      { source: 'node8', target: 'node9' },\n      { source: 'node9', target: 'node10' },\n      { source: 'node10', target: 'node11' },\n      { source: 'node11', target: 'node12' },\n      { source: 'node12', target: 'node13' },\n      { source: 'node13', target: 'node14' },\n      { source: 'node14', target: 'node15' },\n      { source: 'node15', target: 'node1' },\n      { source: 'node1', target: 'node8' },\n      { source: 'node2', target: 'node9' },\n      { source: 'node3', target: 'node10' },\n      { source: 'node4', target: 'node11' },\n      { source: 'node5', target: 'node12' },\n      { source: 'node6', target: 'node13' },\n      { source: 'node7', target: 'node14' },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n",paraId:5,tocIndex:6},{value:"效果如下：",paraId:6,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  layout: {\n    type: 'force-atlas2',\n    preventOverlap: true,\n    kr: 20,\n  },\n  data: {\n    nodes: [\n      { id: 'node1' },\n      { id: 'node2' },\n      { id: 'node3' },\n      { id: 'node4' },\n      { id: 'node5' },\n      { id: 'node6' },\n      { id: 'node7' },\n      { id: 'node8' },\n      { id: 'node9' },\n      { id: 'node10' },\n      { id: 'node11' },\n      { id: 'node12' },\n      { id: 'node13' },\n      { id: 'node14' },\n      { id: 'node15' },\n    ],\n    edges: [\n      { source: 'node1', target: 'node2' },\n      { source: 'node2', target: 'node3' },\n      { source: 'node3', target: 'node4' },\n      { source: 'node4', target: 'node5' },\n      { source: 'node5', target: 'node6' },\n      { source: 'node6', target: 'node7' },\n      { source: 'node7', target: 'node8' },\n      { source: 'node8', target: 'node9' },\n      { source: 'node9', target: 'node10' },\n      { source: 'node10', target: 'node11' },\n      { source: 'node11', target: 'node12' },\n      { source: 'node12', target: 'node13' },\n      { source: 'node13', target: 'node14' },\n      { source: 'node14', target: 'node15' },\n      { source: 'node15', target: 'node1' },\n      { source: 'node1', target: 'node8' },\n      { source: 'node2', target: 'node9' },\n      { source: 'node3', target: 'node10' },\n      { source: 'node4', target: 'node11' },\n      { source: 'node5', target: 'node12' },\n      { source: 'node6', target: 'node13' },\n      { source: 'node7', target: 'node14' },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:7,tocIndex:6},{value:"ForceAtlas2布局",paraId:8}]},98673:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(43813);const d=[{value:"CentripetalOptions",paraId:0,tocIndex:1},{value:"向心力配置，包括叶子节点、离散点、其他节点的向心中心及向心力大小",paraId:1,tocIndex:1},{value:"boolean",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"Default:",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"是否需要全部节点聚类",paraId:3,tocIndex:2},{value:"若为 true，将使用 nodeClusterBy 配置的节点数据中的字段作为聚类依据。 centripetalOptions.single、centripetalOptions.leaf、centripetalOptions.others 将使用 getClusterNodeStrength 返回值；leaf、centripetalOptions.center 将使用当前节点所属聚类中所有节点的平均中心",paraId:4,tocIndex:2},{value:"number | ((node: Node) => number)",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"20",paraId:5,tocIndex:3},{value:"配合 clustering 和 nodeClusterBy 使用，指定聚类向心力的大小",paraId:6,tocIndex:3},{value:"number",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"Default:",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"1",paraId:7,tocIndex:4},{value:"防止重叠的力强度，范围 [0, 1]",paraId:8,tocIndex:4},{value:"number",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"Default:",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"0.005",paraId:9,tocIndex:5},{value:"库伦系数，斥力的一个系数，数字越大，节点之间的斥力越大",paraId:10,tocIndex:5},{value:"number",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"Default:",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"0.9",paraId:11,tocIndex:6},{value:"阻尼系数，取值范围 [0, 1]。数字越大，速度降低得越慢",paraId:12,tocIndex:6},{value:"number | ((d?: Edge) => number)",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"Default:",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"50",paraId:13,tocIndex:7},{value:"边的作用力（引力）大小",paraId:14,tocIndex:7},{value:"number",paraId:15,tocIndex:8},{value:" ",paraId:15,tocIndex:8},{value:"Default:",paraId:15,tocIndex:8},{value:" ",paraId:15,tocIndex:8},{value:"1",paraId:15,tocIndex:8},{value:"斥力系数，数值越大，斥力越大",paraId:16,tocIndex:8},{value:"(node?: Node, degree?: number) => number[]",paraId:17,tocIndex:9},{value:"每个节点中心力的 x、y、强度的回调函数，若不指定，则没有额外中心力",paraId:18,tocIndex:9},{value:"(node?: Node) => number",paraId:19,tocIndex:10},{value:"每个节点质量的回调函数，如参为节点内部流转数据，返回值为质量大小",paraId:20,tocIndex:10},{value:"number",paraId:21,tocIndex:11},{value:" ",paraId:21,tocIndex:11},{value:"Default:",paraId:21,tocIndex:11},{value:" ",paraId:21,tocIndex:11},{value:"10",paraId:21,tocIndex:11},{value:"中心力大小，指所有节点被吸引到 center 的力。数字越大，布局越紧凑",paraId:22,tocIndex:11},{value:"number",paraId:23,tocIndex:12},{value:"布局的高度、默认为画布高度",paraId:24,tocIndex:12},{value:"number",paraId:25,tocIndex:13},{value:" ",paraId:25,tocIndex:13},{value:"Default:",paraId:25,tocIndex:13},{value:" ",paraId:25,tocIndex:13},{value:"0.02",paraId:25,tocIndex:13},{value:"控制每个迭代节点的移动速度",paraId:26,tocIndex:13},{value:"boolean",paraId:27,tocIndex:14},{value:" ",paraId:27,tocIndex:14},{value:"Default:",paraId:27,tocIndex:14},{value:" ",paraId:27,tocIndex:14},{value:"false",paraId:27,tocIndex:14},{value:"是否需要叶子结点聚类",paraId:28,tocIndex:14},{value:"若为 true，则 centripetalOptions.single 将为 100；centripetalOptions.leaf 将使用 getClusterNodeStrength 返回值；getClusterNodeStrength.center 将为叶子节点返回当前所有叶子节点的平均中心",paraId:29,tocIndex:14},{value:"number | ((edge?: Edge, source?: any, target?: any) => number)",paraId:30,tocIndex:15},{value:" ",paraId:30,tocIndex:15},{value:"Default:",paraId:30,tocIndex:15},{value:" ",paraId:30,tocIndex:15},{value:"200",paraId:30,tocIndex:15},{value:"边的长度",paraId:31,tocIndex:15},{value:"number: 固定长度",paraId:32,tocIndex:15},{value:"((edge?: Edge, source?: any, target?: any) => number): 根据边的信息返回长度",paraId:32,tocIndex:15},{value:"number",paraId:33,tocIndex:16},{value:" ",paraId:33,tocIndex:16},{value:"Default:",paraId:33,tocIndex:16},{value:" ",paraId:33,tocIndex:16},{value:"200",paraId:33,tocIndex:16},{value:"一次迭代的最大移动长度",paraId:34,tocIndex:16},{value:"(params: { energy: number; nodes: Node[]; edges: Edge[]; iterations: number; }) => void",paraId:35,tocIndex:17},{value:"每个迭代的监控信息回调，energy 表示布局的收敛能量。若配置可能带来额外的计算能量性能消耗，不配置则不计算",paraId:36,tocIndex:17},{value:"string",paraId:37,tocIndex:18},{value:"指定节点数据中的字段名称作为节点聚类的依据，clustering 为 true 时生效，自动生成 centripetalOptions，可配合 clusterNodeStrength 使用",paraId:38,tocIndex:18},{value:"Size | ((d?: Node) => Size)",paraId:39,tocIndex:19},{value:"节点大小（直径）。用于防止节点重叠时的碰撞检测",paraId:40,tocIndex:19},{value:"number | ((d?: Node) => number)",paraId:41,tocIndex:20},{value:"preventOverlap 为 true 时生效, 防止重叠时节点边缘间距的最小值。可以是回调函数, 为不同节点设置不同的最小间距",paraId:42,tocIndex:20},{value:"number | ((d?: Node) => number)",paraId:43,tocIndex:21},{value:" ",paraId:43,tocIndex:21},{value:"Default:",paraId:43,tocIndex:21},{value:" ",paraId:43,tocIndex:21},{value:"1000",paraId:43,tocIndex:21},{value:"节点作用力，正数代表节点之间的引力作用，负数代表节点之间的斥力作用",paraId:44,tocIndex:21},{value:"(data: LayoutMapping) => void",paraId:45,tocIndex:22},{value:"每一次迭代的回调函数",paraId:46,tocIndex:22},{value:"boolean",paraId:47,tocIndex:23},{value:" ",paraId:47,tocIndex:23},{value:"Default:",paraId:47,tocIndex:23},{value:" ",paraId:47,tocIndex:23},{value:"true",paraId:47,tocIndex:23},{value:"是否防止重叠，必须配合下面属性 nodeSize 或节点数据中的 data.size 属性，只有在数据中设置了 data.size 或在该布局中配置了与当前图节点大小相同的 nodeSize 值，才能够进行节点重叠的碰撞检测",paraId:48,tocIndex:23},{value:"number",paraId:49,tocIndex:24},{value:"布局的宽度、默认为画布宽度",paraId:50,tocIndex:24}]},6266:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(93602);const d=[{value:"Fruchterman 布局是基于 ",paraId:0,tocIndex:0},{value:"Graph Drawing by Force-directed Placement",paraId:0,tocIndex:0},{value:" 算法实现的一种力导向布局，通过灵活的参数配置模拟物理作用，使整个布局自动达到能量最小的稳定平衡状态，支持基础均匀分布和聚类布局。参考更多 Fruchterman 力导向布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"基础均匀分布: 适用于展示节点均匀分布，整体结构清晰的网络关系图, 比如网络拓扑、知识图谱。",paraId:2,tocIndex:1},{value:"聚类布局: 适用于具有内部聚合特性或分组的数据可视化展示, 比如社区结构展示、关联组分析。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"必选",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"布局类型",paraId:3,tocIndex:2},{value:"'fruchterman'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"height",paraId:3,tocIndex:2},{value:"布局的高度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"容器高度",paraId:3,tocIndex:2},{value:"width",paraId:3,tocIndex:2},{value:"布局的宽度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"容器宽度",paraId:3,tocIndex:2},{value:"gravity",paraId:3,tocIndex:2},{value:"中心力大小，指所有节点被吸引到 ",paraId:3,tocIndex:2},{value:"center",paraId:3,tocIndex:2},{value:" 的力。数字越大，布局越紧凑",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"10",paraId:3,tocIndex:2},{value:"speed",paraId:3,tocIndex:2},{value:"每次迭代节点移动的速度。速度太快可能会导致强烈震荡",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"5",paraId:3,tocIndex:2},{value:"onTick",paraId:3,tocIndex:2},{value:"每一次迭代的回调函数",paraId:3,tocIndex:2},{value:"(data: ",paraId:3,tocIndex:2},{value:"LayoutMapping",paraId:3,tocIndex:2},{value:") => void",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:"是否按照聚类布局",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"nodeClusterBy",paraId:4,tocIndex:3},{value:"聚类布局依据的节点数据 ",paraId:4,tocIndex:3},{value:"data",paraId:4,tocIndex:3},{value:" 中的字段名，在 ",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:" 为 ",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:" 时生效",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"'cluster'",paraId:4,tocIndex:3},{value:"clusterGravity",paraId:4,tocIndex:3},{value:"聚类内部的重力大小，影响聚类的紧凑程度，在 ",paraId:4,tocIndex:3},{value:"clustering",paraId:4,tocIndex:3},{value:" 为 ",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:" 时生效",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  data: {\n    nodes: [\n      { id: '0' },\n      { id: '1' },\n      { id: '2' },\n      { id: '3' },\n      { id: '4' },\n      { id: '5' },\n      { id: '6' },\n      { id: '7' },\n      { id: '8' },\n      { id: '9' },\n      { id: '10' },\n    ],\n    edges: [\n      { source: '0', target: '1' },\n      { source: '0', target: '2' },\n      { source: '0', target: '3' },\n      { source: '0', target: '4' },\n      { source: '0', target: '7' },\n      { source: '0', target: '8' },\n      { source: '0', target: '9' },\n      { source: '0', target: '10' },\n      { source: '2', target: '3' },\n      { source: '4', target: '5' },\n      { source: '4', target: '6' },\n      { source: '5', target: '6' },\n      { source: '9', target: '10' },\n    ],\n  },\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => d.id,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 5,\n    speed: 5,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:5,tocIndex:5},{value:"展开查看完整代码",paraId:6},{value:"import { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '0' },\n    { id: '1' },\n    { id: '2' },\n    { id: '3' },\n    { id: '4' },\n    { id: '5' },\n    { id: '6' },\n    { id: '7' },\n    { id: '8' },\n    { id: '9' },\n    { id: '10' },\n  ],\n  edges: [\n    { source: '0', target: '1' },\n    { source: '0', target: '2' },\n    { source: '0', target: '3' },\n    { source: '0', target: '4' },\n    { source: '0', target: '7' },\n    { source: '0', target: '8' },\n    { source: '0', target: '9' },\n    { source: '0', target: '10' },\n    { source: '2', target: '3' },\n    { source: '4', target: '5' },\n    { source: '4', target: '6' },\n    { source: '5', target: '6' },\n    { source: '9', target: '10' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => d.id,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 5,\n    speed: 5,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:7,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 500,\n  height: 250,\n  data: {\n    nodes: [\n      { id: '0', data: { cluster: 'a' } },\n      { id: '1', data: { cluster: 'a' } },\n      { id: '2', data: { cluster: 'a' } },\n      { id: '3', data: { cluster: 'a' } },\n      { id: '4', data: { cluster: 'a' } },\n      { id: '5', data: { cluster: 'b' } },\n      { id: '6', data: { cluster: 'b' } },\n      { id: '7', data: { cluster: 'b' } },\n      { id: '8', data: { cluster: 'c' } },\n      { id: '9', data: { cluster: 'c' } },\n      { id: '10', data: { cluster: 'c' } },\n    ],\n    edges: [\n      { source: '0', target: '1' },\n      { source: '0', target: '2' },\n      { source: '0', target: '4' },\n      { source: '0', target: '6' },\n      { source: '2', target: '3' },\n      { source: '2', target: '4' },\n      { source: '3', target: '4' },\n      { source: '5', target: '6' },\n      { source: '6', target: '7' },\n      { source: '7', target: '8' },\n      { source: '8', target: '9' },\n      { source: '8', target: '10' },\n    ],\n  },\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => `${d.data.cluster}-${d.id}`,\n    },\n    palette: {\n      type: 'group',\n      field: 'cluster',\n    },\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 6,\n    speed: 5,\n\n    // 聚类布局参数\n    clustering: true,\n    nodeClusterBy: 'cluster',\n    clusterGravity: 3,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:8,tocIndex:6},{value:"展开查看完整代码",paraId:6},{value:"import { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '0', data: { cluster: 'a' } },\n    { id: '1', data: { cluster: 'a' } },\n    { id: '2', data: { cluster: 'a' } },\n    { id: '3', data: { cluster: 'a' } },\n    { id: '4', data: { cluster: 'a' } },\n    { id: '5', data: { cluster: 'b' } },\n    { id: '6', data: { cluster: 'b' } },\n    { id: '7', data: { cluster: 'b' } },\n    { id: '8', data: { cluster: 'c' } },\n    { id: '9', data: { cluster: 'c' } },\n    { id: '10', data: { cluster: 'c' } },\n  ],\n  edges: [\n    { source: '0', target: '1' },\n    { source: '0', target: '2' },\n    { source: '0', target: '4' },\n    { source: '0', target: '6' },\n    { source: '2', target: '3' },\n    { source: '2', target: '4' },\n    { source: '3', target: '4' },\n    { source: '5', target: '6' },\n    { source: '6', target: '7' },\n    { source: '7', target: '8' },\n    { source: '8', target: '9' },\n    { source: '8', target: '10' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  data,\n  node: {\n    style: {\n      labelFill: '#fff',\n      labelPlacement: 'center',\n      labelText: (d) => `${d.data.cluster}-${d.id}`,\n    },\n    palette: {\n      type: 'group',\n      field: 'cluster',\n    },\n  },\n  edge: {\n    style: {\n      endArrow: true,\n    },\n  },\n  layout: {\n    type: 'fruchterman',\n    gravity: 6,\n    speed: 5,\n\n    // 聚类布局参数\n    clustering: true,\n    nodeClusterBy: 'cluster',\n    clusterGravity: 3,\n  },\n  behaviors: ['drag-canvas', 'drag-element'],\n});\n\ngraph.render();\n",paraId:9,tocIndex:6}]},30113:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(22006);const d=[{value:"网格布局将节点按照网格形式排列，适用于需要整齐排列节点的场景。该布局支持自动计算行列数，也可以手动指定行列数，并支持防止节点重叠。",paraId:0,tocIndex:0},{value:"在数据可视化中需要展示矩阵或表格形式的数据关系",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: {\n      nodes: Array.from({ length: 25 }, (_, i) => ({\n        id: `node-${i}`,\n        data: {\n          value: Math.random() * 100,\n        },\n      })),\n      edges: Array.from({ length: 20 }, (_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 25)}`,\n        target: `node-${Math.floor(Math.random() * 25)}`,\n      })),\n    },\n    autoFit: 'view',\n    node: {\n      style: {\n        size: 20,\n        label: true,\n        labelText: (datum) => datum.id,\n        labelBackground: true,\n        icon: false,\n      },\n      palette: {\n        type: 'group',\n        field: (datum) => datum.data.value,\n        color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#bfbfbf',\n      },\n    },\n    behaviors: ['drag-canvas'],\n    layout: {\n      type: 'grid',\n      cols: 5,\n      rows: 5,\n      width: 400,\n      height: 400,\n      preventOverlap: true,\n      nodeSize: 30,\n      condense: false,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'grid',\n      cols: 5,\n      rows: 5,\n      width: 400,\n      height: 400,\n      preventOverlap: true,\n      nodeSize: 30,\n      condense: false,\n    };\n\n    const optionFolder = gui.addFolder('Grid Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'cols', 2, 10, 1);\n    optionFolder.add(options, 'rows', 2, 10, 1);\n    optionFolder.add(options, 'width', 200, 600, 50);\n    optionFolder.add(options, 'height', 200, 600, 50);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'nodeSize', 10, 50, 5);\n    optionFolder.add(options, 'condense');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.setLayout({\n        type: 'grid',\n        [property]: value,\n      });\n      graph.layout();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    begin: [0, 0],\n    cols: 5,\n    rows: 5,\n    width: 300,\n    height: 300,\n    preventOverlap: true,\n    nodeSize: 30,\n    condense: false,\n  },\n});\n",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"默认值",paraId:4,tocIndex:4},{value:"必选",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"布局类型",paraId:4,tocIndex:4},{value:"grid",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"begin",paraId:4,tocIndex:4},{value:"网格开始位置（左上角），默认为 ",paraId:4,tocIndex:4},{value:"[0, 0]",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"[0, 0]",paraId:4,tocIndex:4},{value:"cols",paraId:4,tocIndex:4},{value:"网格的列数，为 undefined 时算法根据节点数量、布局空间、rows（若指定）自动计算",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"rows",paraId:4,tocIndex:4},{value:"网格的行数，为 undefined 时算法根据节点数量、布局空间、cols（若指定）自动计算",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"布局区域宽度，在 G6 中使用当前容器的宽度作为默认值",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"300",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"布局区域高度，在 G6 中使用当前容器的高度作为默认值",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"300",paraId:4,tocIndex:4},{value:"condense",paraId:4,tocIndex:4},{value:"为 false 时表示利用所有可用画布空间，为 true 时表示利用最小的画布空间",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"节点大小（直径），用于防止节点重叠时的碰撞检测",paraId:4,tocIndex:4},{value:"Size | ((nodeData: Node) => Size)",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSpacing",paraId:4,tocIndex:4},{value:"节点间距，用于调整节点之间的间隔",paraId:4,tocIndex:4},{value:"((node?: Node) => number) | number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"position",paraId:4,tocIndex:4},{value:"指定每个节点所在的行和列",paraId:4,tocIndex:4},{value:"(node?: Node) => { row?: number; col?: number; }",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"是否防止节点重叠，需要配合 nodeSize 或节点数据中的 size 属性使用",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"preventOverlapPadding",paraId:4,tocIndex:4},{value:"避免重叠时节点的间距 padding，preventOverlap 为 true 时生效",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"sortBy",paraId:4,tocIndex:4},{value:"指定排序的依据（节点属性名），数值越高则该节点被放置得越中心。若为 undefined，则会计算节点的度数，度数越高，节点将被放置得越中心",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"undefined",paraId:4,tocIndex:4},{value:"boolean",paraId:5,tocIndex:5},{value:" ",paraId:5,tocIndex:5},{value:"Default:",paraId:5,tocIndex:5},{value:" ",paraId:5,tocIndex:5},{value:"false",paraId:5,tocIndex:5},{value:"是否防止重叠",paraId:6,tocIndex:5},{value:"必须配合下面属性 nodeSize 或节点数据中的 data.size 属性，只有在数据中设置了 data.size 或在该布局中配置了与当前图节点大小相同的 nodeSize 值，才能够进行节点重叠的碰撞检测",paraId:7,tocIndex:5},{value:"number",paraId:8,tocIndex:6},{value:" ",paraId:8,tocIndex:6},{value:"Default:",paraId:8,tocIndex:6},{value:" ",paraId:8,tocIndex:6},{value:"10",paraId:8,tocIndex:6},{value:"避免重叠时节点的间距 padding，preventOverlap 为 true 时生效",paraId:9,tocIndex:6},{value:"string",paraId:10,tocIndex:7},{value:" ",paraId:10,tocIndex:7},{value:"Default:",paraId:10,tocIndex:7},{value:" ",paraId:10,tocIndex:7},{value:"undefined",paraId:10,tocIndex:7},{value:"指定排序的依据（节点属性名），数值越高则该节点被放置得越中心。若为 undefined，则会计算节点的度数，度数越高，节点将被放置得越中心",paraId:11,tocIndex:7},{value:"在 G6 中使用当前容器的宽度作为 grid 布局 width 的默认值。单独使用此布局时默认值为 300",paraId:12,tocIndex:7},{value:"最简单的配置方式：",paraId:13,tocIndex:9},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n});\n",paraId:14,tocIndex:9},{value:"效果如下：",paraId:15,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:16,tocIndex:9},{value:"可以通过多种方式自定义网格布局：",paraId:17,tocIndex:10},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    begin: [50, 50], // 从坐标 [50, 50] 开始布局\n    cols: 4, // 指定 4 列\n    rows: 6, // 指定 6 行\n    width: 400, // 布局区域宽度\n    height: 600, // 布局区域高度\n    preventOverlap: true, // 防止节点重叠\n    nodeSize: 30, // 节点大小\n    condense: true, // 使用最小空间\n    sortBy: 'value', // 按 value 属性排序\n  },\n  data: {\n    nodes: Array.from({ length: 24 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100, // 用于排序的属性\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 24)}`,\n      target: `node-${Math.floor(Math.random() * 24)}`,\n    })),\n  },\n});\n",paraId:18,tocIndex:10},{value:"效果如下：",paraId:19,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    begin: [50, 50],\n    cols: 4,\n    rows: 6,\n    width: 400,\n    height: 600,\n    preventOverlap: true,\n    nodeSize: 30,\n    condense: true,\n    sortBy: 'value',\n  },\n  data: {\n    nodes: Array.from({ length: 24 }, (_, i) => ({\n      id: `node-${i}`,\n      data: {\n        value: Math.random() * 100,\n      },\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 24)}`,\n      target: `node-${Math.floor(Math.random() * 24)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n    palette: {\n      type: 'group',\n      field: (datum) => datum.data.value,\n      color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:20,tocIndex:10},{value:"可以通过 ",paraId:21,tocIndex:11},{value:"position",paraId:21,tocIndex:11},{value:" 属性为特定节点指定位置：",paraId:21,tocIndex:11},{value:"const graph = new Graph({\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n    position: (node) => {\n      // 为特定节点指定位置\n      if (node.id === 'node-0') return { row: 0, col: 0 }; // 左上角\n      if (node.id === 'node-1') return { row: 0, col: 4 }; // 右上角\n      if (node.id === 'node-2') return { row: 4, col: 0 }; // 左下角\n      if (node.id === 'node-3') return { row: 4, col: 4 }; // 右下角\n      return undefined; // 其他节点自动布局\n    },\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n});\n",paraId:22,tocIndex:11},{value:"效果如下：",paraId:23,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  layout: {\n    type: 'grid',\n    cols: 5,\n    rows: 5,\n    position: (node) => {\n      if (node.id === 'node-0') return { row: 0, col: 0 };\n      if (node.id === 'node-1') return { row: 0, col: 4 };\n      if (node.id === 'node-2') return { row: 4, col: 0 };\n      if (node.id === 'node-3') return { row: 4, col: 4 };\n      return undefined;\n    },\n  },\n  data: {\n    nodes: Array.from({ length: 25 }, (_, i) => ({\n      id: `node-${i}`,\n    })),\n    edges: Array.from({ length: 20 }, (_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 25)}`,\n      target: `node-${Math.floor(Math.random() * 25)}`,\n    })),\n  },\n  node: {\n    style: {\n      size: 20,\n      label: true,\n      labelText: (datum) => datum.id,\n      labelBackground: true,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#bfbfbf',\n    },\n  },\n});\n\ngraph.render();\n",paraId:24,tocIndex:11},{value:"Grid布局",paraId:25,tocIndex:12}]},27415:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(3723);const d=[{value:"Indented（缩进树）布局是一种通过水平方向的缩进量来表示树节点层级的布局方式。每个元素占据一行或一列，常用于文件目录结构、组织架构等场景。该布局结构清晰，便于展示层级关系。",paraId:0,tocIndex:0},{value:"文件目录结构可视化",paraId:1,tocIndex:1},{value:"组织架构树",paraId:1,tocIndex:1},{value:"分类体系展示",paraId:1,tocIndex:1},{value:"需要突出层级关系的树状数据",paraId:1,tocIndex:1},{value:"IndentedLayout 支持通用布局配置项和专有配置项，详见下表。",paraId:2,tocIndex:2},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"必选",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"布局类型，需为 'indented'",paraId:3,tocIndex:2},{value:"'indented'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"direction",paraId:3,tocIndex:2},{value:"布局方向，根节点在左/右/中间，详见下方说明",paraId:3,tocIndex:2},{value:"'LR' | 'RL' | 'H'",paraId:3,tocIndex:2},{value:"'LR'",paraId:3,tocIndex:2},{value:"indent",paraId:3,tocIndex:2},{value:"列间间距，支持固定值或函数",paraId:3,tocIndex:2},{value:"number | (d?: Node) => number",paraId:3,tocIndex:2},{value:"20",paraId:3,tocIndex:2},{value:"getWidth",paraId:3,tocIndex:2},{value:"获取每个节点宽度，仅 direction='H' 时生效",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"getHeight",paraId:3,tocIndex:2},{value:"获取每个节点高度",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"getSide",paraId:3,tocIndex:2},{value:"节点排布在根节点的左/右侧，设置后 direction='H' 失效",paraId:3,tocIndex:2},{value:"(d?: Node) => 'left' | 'right'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"dropCap",paraId:3,tocIndex:2},{value:"每个节点的第一个子节点是否换行",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:"isLayoutInvisibleNodes",paraId:3,tocIndex:2},{value:"不可见节点是否参与布局（preLayout=true 时生效）",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"nodeFilter",paraId:3,tocIndex:2},{value:"参与该布局的节点",paraId:3,tocIndex:2},{value:"(node: NodeData) => boolean",paraId:3,tocIndex:2},{value:"() => true",paraId:3,tocIndex:2},{value:"preLayout",paraId:3,tocIndex:2},{value:"使用前布局，在初始化元素前计算布局",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"false",paraId:3,tocIndex:2},{value:"enableWorker",paraId:3,tocIndex:2},{value:"是否在 WebWorker 中运行布局",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"iterations",paraId:3,tocIndex:2},{value:"迭代布局的迭代次数",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"direction",paraId:4,tocIndex:3},{value:"'LR'",paraId:5,tocIndex:3},{value:"：根节点在左，向右布局\n",paraId:5,tocIndex:3},{value:"'RL'",paraId:5,tocIndex:3},{value:"：根节点在右，向左布局\n",paraId:5,tocIndex:3},{value:"'H'",paraId:5,tocIndex:3},{value:"：根节点在中间，水平对称布局\n",paraId:5,tocIndex:3},{value:"indent",paraId:6,tocIndex:3},{value:"固定数值：所有层级缩进一致",paraId:7,tocIndex:3},{value:"函数：(d?: Node) => number，可根据节点自定义缩进",paraId:7,tocIndex:3},{value:"示例：\n",paraId:7,tocIndex:3},{value:"(d) => {\n  if (d.parent?.id === 'testId') return d.parent.x + 50;\n  return 100;\n};\n",paraId:8,tocIndex:3},{value:"getWidth/getHeight",paraId:9,tocIndex:3},{value:"用于自定义每个节点的宽度/高度，常用于自适应内容",paraId:10,tocIndex:3},{value:"示例：\n",paraId:10,tocIndex:3},{value:"(d) => (d.id === 'testId' ? 50 : 100);\n",paraId:11,tocIndex:3},{value:"getSide",paraId:12,tocIndex:3},{value:"指定节点在根节点的哪一侧，仅 direction='H' 时生效",paraId:13,tocIndex:3},{value:"示例：\n",paraId:13,tocIndex:3},{value:"(d) => (d.id === 'testId' ? 'left' : 'right');\n",paraId:14,tocIndex:3},{value:"更多示例可参考 ",paraId:15,tocIndex:4},{value:"在线 Demo",paraId:15,tocIndex:4},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nfetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const graph = new Graph({\n      container: 'container',\n      data: treeToGraphData(data),\n      autoFit: 'view',\n      layout: {\n        type: 'indented',\n        direction: 'H',\n        indent: 80,\n        getHeight: () => 16,\n        getWidth: () => 32,\n      },\n    });\n    graph.render();\n  });\n",paraId:16,tocIndex:5},{value:"// ... 代码同上，layout.direction: 'LR'\n",paraId:17,tocIndex:6},{value:"// ... 代码同上，layout.direction: 'RL'\n",paraId:18,tocIndex:7},{value:"layout: {\n  type: 'indented',\n  direction: 'H',\n  indent: 80,\n  getHeight: () => 16,\n  getWidth: () => 32,\n  getSide: (d) => {\n    if (d.id === 'Regression' || d.id === 'Classification') return 'left';\n    return 'right';\n  },\n}\n",paraId:19,tocIndex:8},{value:"layout: {\n  type: 'indented',\n  direction: 'LR',\n  indent: 80,\n  getHeight: () => 16,\n  getWidth: () => 32,\n  dropCap: false,\n}\n",paraId:20,tocIndex:9}]},1572:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(89334);const d=[{value:"MDS（多维尺度分析，Multidimensional Scaling）是一种经典的降维算法。在 G6 中，MDS 布局通过构造节点间的距离矩阵，在二维空间中尽可能还原它们在高维空间中的相对距离。适用于展示节点之间相似度、距离或结构关系的图可视化场景。",paraId:0,tocIndex:1},{value:"数据降维可视化",paraId:1,tocIndex:2},{value:"展示节点之间的距离关系",paraId:1,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'mds',\n    center: [300, 300],\n    linkDistance: 100,\n  },\n});\n",paraId:2,tocIndex:3},{value:"配置项",paraId:3,tocIndex:4},{value:"描述",paraId:3,tocIndex:4},{value:"类型",paraId:3,tocIndex:4},{value:"默认值",paraId:3,tocIndex:4},{value:"必选",paraId:3,tocIndex:4},{value:"type",paraId:3,tocIndex:4},{value:"布局类型",paraId:3,tocIndex:4},{value:"mds",paraId:3,tocIndex:4},{value:"-",paraId:3,tocIndex:4},{value:"是",paraId:3,tocIndex:4},{value:"center",paraId:3,tocIndex:4},{value:"圆形布局的中心位置",paraId:3,tocIndex:4},{value:"[number,number]",paraId:3,tocIndex:4},{value:"[0,0]",paraId:3,tocIndex:4},{value:"否",paraId:3,tocIndex:4},{value:"linkDistance",paraId:3,tocIndex:4},{value:"边的理想长度（弹簧未受力时的长度）",paraId:3,tocIndex:4},{value:"number",paraId:3,tocIndex:4},{value:"50",paraId:3,tocIndex:4},{value:"否",paraId:3,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"布局的中心点坐标，所有节点会围绕该点对称分布。",paraId:5,tocIndex:4},{value:"linkDistance",paraId:6,tocIndex:4},{value:"number Default: 50",paraId:7,tocIndex:4},{value:"节点之间的理想距离，越大则节点间距离越分散。",paraId:8,tocIndex:4},{value:"createGraph(\n  {\n    autoFit: 'view',\n    data: {\n      nodes: Array.from({ length: 25 }, (_, i) => ({\n        id: `node-${i}`,\n        data: {\n          value: Math.random() * 100,\n        },\n      })),\n      edges: Array.from({ length: 20 }, (_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 25)}`,\n        target: `node-${Math.floor(Math.random() * 25)}`,\n      })),\n    }\n    node: {\n      style: {\n        labelText: (d) => d.id,\n      },\n    },\n    layout: {\n      type: 'mds',\n      nodeSize: 32,\n      linkDistance: 100,\n    },\n    behaviors: ['drag-element', 'drag-canvas', 'zoom-canvas'],\n  }\n  { width: 600, height: 300 },\n);\n\n",paraId:9,tocIndex:5}]},8987:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67640);const d=[{value:"脑图树布局适用于树状结构的层次化布局，支持左右两侧展开，深度相同的节点将会被放置在同一层。需要注意：布局",paraId:0,tocIndex:0},{value:"会",paraId:0,tocIndex:0},{value:"考虑节点的大小。参考更多脑图布局",paraId:0,tocIndex:0},{value:"样例",paraId:1,tocIndex:0},{value:"或",paraId:0,tocIndex:0},{value:"源码",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"const graph = new Graph({\n  layout: {\n    type: 'mindmap',\n    direction: 'H',\n    preLayout: false,\n    getHeight: () => 32,\n    getWidth: () => 32,\n    getVGap: () => 16,\n    getHGap: () => 72,\n  },\n});\n",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"必选",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:"布局类型",paraId:3,tocIndex:2},{value:"mindmap",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"direction",paraId:3,tocIndex:2},{value:"布局方向，",paraId:3,tocIndex:2},{value:"可选值",paraId:4,tocIndex:2},{value:"H",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"LR",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"RL",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"TB",paraId:3,tocIndex:2},{value:" | ",paraId:3,tocIndex:2},{value:"BT",paraId:3,tocIndex:2},{value:"LR",paraId:3,tocIndex:2},{value:"getHeight",paraId:3,tocIndex:2},{value:"计算每个节点的高度",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"getWidth",paraId:3,tocIndex:2},{value:"计算每个节点的宽度",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"✓",paraId:3,tocIndex:2},{value:"getVGap",paraId:3,tocIndex:2},{value:"每个节点的垂直间隙，注意实际两个节点间的垂直间隙是2倍的vgap",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"getHGap",paraId:3,tocIndex:2},{value:"每个节点的水平间隙，注意实际两个节点间的水平间隙是2倍的hgap",paraId:3,tocIndex:2},{value:"(d?: Node) => number",paraId:3,tocIndex:2},{value:"getSide",paraId:3,tocIndex:2},{value:"设置节点排布在根节点的左侧/右侧，如未设置，则算法自动分配左侧/右侧。注意：该参数仅在",paraId:3,tocIndex:2},{value:"H",paraId:3,tocIndex:2},{value:"布局方向上生效",paraId:3,tocIndex:2},{value:"(d?: Node) => string",paraId:3,tocIndex:2},{value:"H",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"LR",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"RL",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"TB",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"BT",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"Default:",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"'LR'",paraId:5,tocIndex:3},{value:"树布局的方向",paraId:6,tocIndex:3},{value:"'H'",paraId:7,tocIndex:3},{value:"：horizontal（水平）—— 根节点的子节点分成两部分横向放置在根节点左右两侧。可传入",paraId:7,tocIndex:3},{value:"getSide",paraId:7,tocIndex:3},{value:"方法指定每个节点的左右分布逻辑，不传则默认将前半部分放置在右侧，后半部分放置在左侧。",paraId:7,tocIndex:3},{value:"'LR' | 'TB'",paraId:8,tocIndex:3},{value:"：将子节点排布在根节点的右侧；",paraId:8,tocIndex:3},{value:"'RL'",paraId:9,tocIndex:3},{value:"：将子节点排布在根节点的左侧；",paraId:9,tocIndex:3},{value:"BT",paraId:10,tocIndex:3},{value:"：将子节点排布在根节点右侧，然后将整个图沿X轴旋转180°；",paraId:10,tocIndex:3},{value:"(d?: Node) => number",paraId:11,tocIndex:4},{value:"每个节点的宽度",paraId:12,tocIndex:4},{value:"示例：",paraId:13,tocIndex:4},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:14,tocIndex:4},{value:"(d?: Node) => number",paraId:15,tocIndex:5},{value:"每个节点的高度",paraId:16,tocIndex:5},{value:"示例：",paraId:17,tocIndex:5},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:18,tocIndex:5},{value:"(d?: Node) => number",paraId:19,tocIndex:6},{value:"每个节点的水平间隙",paraId:20,tocIndex:6},{value:"示例：",paraId:21,tocIndex:6},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:22,tocIndex:6},{value:"(d?: Node) => number",paraId:23,tocIndex:7},{value:"每个节点的垂直间隙",paraId:24,tocIndex:7},{value:"示例：",paraId:25,tocIndex:7},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:26,tocIndex:7},{value:"(d?: Node) => string",paraId:27,tocIndex:8},{value:"设置节点排布在根节点的左侧/右侧。注意：该参数仅在",paraId:28,tocIndex:8},{value:"direction",paraId:28,tocIndex:8},{value:"为",paraId:28,tocIndex:8},{value:"H",paraId:28,tocIndex:8},{value:"时生效。如未设置，会默认将子节点前半部分放置在右侧，后半部分放置在左侧，参考",paraId:28,tocIndex:8},{value:"getSide自动计算逻辑",paraId:28,tocIndex:8},{value:"。",paraId:28,tocIndex:8},{value:"示例：",paraId:29,tocIndex:8},{value:"(d) => {\n  // d 是一个节点\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:30,tocIndex:8},{value:"数据血缘图：",paraId:31,tocIndex:9},{value:"direction='H'",paraId:31,tocIndex:9},{value:"很适合渲染血缘图中查看指定节点的上下游血缘的场景，上游分布在中心节点的左侧，下游分布在右侧；",paraId:31,tocIndex:9},{value:"思维导图：构建自定义的思维导图组件。",paraId:31,tocIndex:9}]},13814:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13387);const d=[{value:"径向（Radial）布局是一种将节点以同心圆方式分层排列的图布局算法，常用于展示层级关系、社群结构等。该布局支持节点防重叠、分组排序等高级特性，适用于多种网络结构的可视化。",paraId:0,tocIndex:0},{value:"展示层级结构（如组织架构、家谱等）",paraId:1,tocIndex:1},{value:"社群结构分析",paraId:1,tocIndex:1},{value:"需要突出中心节点及其辐射关系的场景",paraId:1,tocIndex:1},{value:"需要节点分组、排序的复杂网络",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    autoFit: 'view',\n    data: {\n      nodes: [\n        { id: '0' },\n        { id: '1' },\n        { id: '2' },\n        { id: '3' },\n        { id: '4' },\n        { id: '5' },\n        { id: '6' },\n        { id: '7' },\n        { id: '8' },\n        { id: '9' },\n        { id: '10' },\n        { id: '11' },\n        { id: '12' },\n        { id: '13' },\n        { id: '14' },\n        { id: '15' },\n        { id: '16' },\n        { id: '17' },\n        { id: '18' },\n        { id: '19' },\n        { id: '20' },\n        { id: '21' },\n        { id: '22' },\n        { id: '23' },\n        { id: '24' },\n        { id: '25' },\n        { id: '26' },\n        { id: '27' },\n        { id: '28' },\n        { id: '29' },\n        { id: '30' },\n        { id: '31' },\n        { id: '32' },\n        { id: '33' },\n      ],\n      edges: [\n        { source: '0', target: '1' },\n        { source: '0', target: '2' },\n        { source: '0', target: '3' },\n        { source: '0', target: '4' },\n        { source: '0', target: '5' },\n        { source: '0', target: '7' },\n        { source: '0', target: '8' },\n        { source: '0', target: '9' },\n        { source: '0', target: '10' },\n        { source: '0', target: '11' },\n        { source: '0', target: '13' },\n        { source: '0', target: '14' },\n        { source: '0', target: '15' },\n        { source: '0', target: '16' },\n        { source: '2', target: '3' },\n        { source: '4', target: '5' },\n        { source: '4', target: '6' },\n        { source: '5', target: '6' },\n        { source: '7', target: '13' },\n        { source: '8', target: '14' },\n        { source: '10', target: '22' },\n        { source: '10', target: '14' },\n        { source: '10', target: '12' },\n        { source: '10', target: '24' },\n        { source: '10', target: '21' },\n        { source: '10', target: '20' },\n        { source: '11', target: '24' },\n        { source: '11', target: '22' },\n        { source: '11', target: '14' },\n        { source: '12', target: '13' },\n        { source: '16', target: '17' },\n        { source: '16', target: '18' },\n        { source: '16', target: '21' },\n        { source: '16', target: '22' },\n        { source: '17', target: '18' },\n        { source: '17', target: '20' },\n        { source: '18', target: '19' },\n        { source: '19', target: '20' },\n        { source: '19', target: '33' },\n        { source: '19', target: '22' },\n        { source: '19', target: '23' },\n        { source: '20', target: '21' },\n        { source: '21', target: '22' },\n        { source: '22', target: '24' },\n        { source: '22', target: '26' },\n        { source: '22', target: '23' },\n        { source: '22', target: '28' },\n        { source: '22', target: '30' },\n        { source: '22', target: '31' },\n        { source: '22', target: '32' },\n        { source: '22', target: '33' },\n        { source: '23', target: '28' },\n        { source: '23', target: '27' },\n        { source: '23', target: '29' },\n        { source: '23', target: '30' },\n        { source: '23', target: '31' },\n        { source: '23', target: '33' },\n        { source: '32', target: '33' },\n      ],\n    },\n    node: {\n      style: {\n        labelFill: '#fff',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n      },\n    },\n    layout: {\n      type: 'radial',\n      nodeSize: 32,\n      unitRadius: 100,\n      linkDistance: 200,\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      nodeSize: 32,\n      unitRadius: 100,\n      linkDistance: 200,\n      preventOverlap: false,\n      strictRadial: true,\n      sortBy: undefined,\n      sortStrength: 10,\n    };\n    const optionFolder = gui.addFolder('Radial Layout Options');\n    optionFolder.add(options, 'nodeSize', 1, 100, 1);\n    optionFolder.add(options, 'unitRadius', 10, 300, 1);\n    optionFolder.add(options, 'linkDistance', 10, 400, 1);\n    optionFolder.add(options, 'preventOverlap');\n    optionFolder.add(options, 'strictRadial');\n    optionFolder.add(options, 'sortStrength', 1, 100, 1);\n    optionFolder.add(options, 'sortBy', [undefined, 'data', 'id']);\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.setLayout(\n        Object.assign({}, graph.getLayout(), {\n          [property]: value,\n        }),\n      );\n      await graph.layout();\n      graph.fitView();\n    });\n  },\n);\n",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  layout: {\n    type: 'radial',\n    nodeSize: 32,\n    unitRadius: 100,\n    linkDistance: 200,\n  },\n  // 其他配置...\n});\n",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"默认值",paraId:4,tocIndex:4},{value:"必选",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"布局类型",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"radial",paraId:4,tocIndex:4},{value:"✓",paraId:4,tocIndex:4},{value:"center",paraId:4,tocIndex:4},{value:"圆心坐标",paraId:4,tocIndex:4},{value:"[number, number]",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"focusNode",paraId:4,tocIndex:4},{value:"辐射中心节点",paraId:4,tocIndex:4},{value:"string | Node | null",paraId:4,tocIndex:4},{value:"null",paraId:4,tocIndex:4},{value:"height",paraId:4,tocIndex:4},{value:"画布高度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"width",paraId:4,tocIndex:4},{value:"画布宽度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSize",paraId:4,tocIndex:4},{value:"节点大小（直径）",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"nodeSpacing",paraId:4,tocIndex:4},{value:"节点最小间距（防重叠时生效）",paraId:4,tocIndex:4},{value:"number | (nodeData: Node) => number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"linkDistance",paraId:4,tocIndex:4},{value:"边长度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"50",paraId:4,tocIndex:4},{value:"unitRadius",paraId:4,tocIndex:4},{value:"每圈半径",paraId:4,tocIndex:4},{value:"number | null",paraId:4,tocIndex:4},{value:"100",paraId:4,tocIndex:4},{value:"maxIteration",paraId:4,tocIndex:4},{value:"最大迭代次数",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"1000",paraId:4,tocIndex:4},{value:"maxPreventOverlapIteration",paraId:4,tocIndex:4},{value:"防重叠最大迭代次数",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"200",paraId:4,tocIndex:4},{value:"preventOverlap",paraId:4,tocIndex:4},{value:"是否防止节点重叠",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:"sortBy",paraId:4,tocIndex:4},{value:"同层节点排序字段",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"-",paraId:4,tocIndex:4},{value:"sortStrength",paraId:4,tocIndex:4},{value:"同层节点排序强度",paraId:4,tocIndex:4},{value:"number",paraId:4,tocIndex:4},{value:"10",paraId:4,tocIndex:4},{value:"strictRadial",paraId:4,tocIndex:4},{value:"是否严格每层节点在同一圆环上（防重叠时生效）",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nfetch('https://assets.antv.antgroup.com/g6/radial.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const graph = new Graph({\n      container: 'container',\n      data,\n      autoFit: 'center',\n      layout: {\n        type: 'radial',\n        nodeSize: 32,\n        unitRadius: 100,\n        linkDistance: 200,\n      },\n      node: {\n        style: {\n          labelFill: '#fff',\n          labelPlacement: 'center',\n          labelText: (d) => d.id,\n        },\n      },\n      behaviors: ['drag-canvas', 'drag-element'],\n    });\n    graph.render();\n  });\n",paraId:5,tocIndex:6},{value:"效果如下：",paraId:6,tocIndex:6},{value:"基本 Radial 辐射布局",paraId:7,tocIndex:7},{value:"防止节点重叠的严格辐射布局",paraId:8,tocIndex:7},{value:"防止节点重叠的非严格辐射布局",paraId:9,tocIndex:7},{value:"排序聚类",paraId:10,tocIndex:7}]},49714:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(82545);const d=[{value:"随机布局（Random Layout）",paraId:0,tocIndex:0},{value:" 是一种基于简单规则的布局方式，其核心逻辑是为每个节点在指定布局区域（由布局中心点、宽度和高度定义）内生成随机坐标（完全随机，无节点防碰撞）。",paraId:0,tocIndex:0},{value:"随机布局的使用场景非常局限，只推荐以下场景使用：",paraId:1,tocIndex:1},{value:"数据初步展示",paraId:2,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"在开发初期调试数据加载逻辑或需要快速验证数据结构的情况下，可使用随机布局先行验证",paraId:3,tocIndex:1},{value:"业务最终交付推荐使用更能体现业务价值的布局方式，比如 ",paraId:4,tocIndex:1},{value:"AntVDagreLayout",paraId:5,tocIndex:1},{value:" 、",paraId:4,tocIndex:1},{value:"ForceLayout",paraId:6,tocIndex:1},{value:" 或者",paraId:4,tocIndex:1},{value:"自定义布局",paraId:7,tocIndex:1},{value:"等。",paraId:4,tocIndex:1},{value:"其余均使用默认配置（布局宽高默认是整个画布容器）",paraId:8,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置\n  layout: {\n    type: 'random',\n  },\n});\n",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"必选",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"布局类型",paraId:10,tocIndex:3},{value:"random",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"center",paraId:10,tocIndex:3},{value:"布局的中心",paraId:10,tocIndex:3},{value:"[number, number] | [number, number, number]",paraId:10,tocIndex:3},{value:"[",paraId:10,tocIndex:3},{value:"布局宽度",paraId:10,tocIndex:3},{value:" / 2, ",paraId:10,tocIndex:3},{value:"布局高度",paraId:10,tocIndex:3},{value:" / 2]",paraId:10,tocIndex:3},{value:"height",paraId:10,tocIndex:3},{value:"布局的高度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"画布高度",paraId:10,tocIndex:3},{value:"width",paraId:10,tocIndex:3},{value:"布局的宽度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"画布宽度",paraId:10,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  autoFit: 'view',\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `${i}`,\n    })),\n  },\n  node: {\n    style: {\n      labelText: (d) => d.id,\n    },\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  layout: {\n    type: 'random',\n  },\n});\n\ngraph.render();\n",paraId:11,tocIndex:4}]},91081:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67282);const d=[{value:"蛇形布局（Snake Layout）是一种特殊的图形布局方式，能够在较小的空间内更有效地展示长链结构。需要注意的是，其图数据需要确保节点按照从源节点到汇节点的顺序进行线性排列，形成一条明确的路径。",paraId:0,tocIndex:0},{value:"节点按 S 字型排列，第一个节点位于第一行的起始位置，接下来的节点在第一行向右排列，直到行末尾。到达行末尾后，下一行的节点从右向左反向排列。这个过程重复进行，直到所有节点排列完毕。",paraId:1,tocIndex:0},{value:"适合需要紧凑呈现线性关系的场景：",paraId:2,tocIndex:1},{value:"长流程可视化",paraId:3,tocIndex:1},{value:"完美适配流程步骤过多的场景，如审批流程、生产线工序、物流运输路径等。",paraId:4,tocIndex:1},{value:"有限空间内的层级结构",paraId:5,tocIndex:1},{value:"层级结构过长但画布受限，需通过折叠行节省空间，比如 API 调用依赖（客户端 → 网关 → 服务A → 服务B → 数据库，蛇形布局将 5 层压缩为 2 行）、文件目录树（深度嵌套的文件夹结构，如 src/components/utils/helpers/... ，用蛇形布局横向折叠子目录）。",paraId:6,tocIndex:1},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: new Array(16).fill(0).map((_, i) => ({ id: `${i}` })),\n      edges: new Array(15).fill(0).map((_, i) => ({ source: `${i}`, target: `${i + 1}` })),\n    },\n    node: {\n      style: {\n        labelFill: '#fff',\n        labelPlacement: 'center',\n        labelText: (d) => d.id,\n      },\n    },\n    behaviors: ['drag-canvas'],\n    layout: {\n      type: 'snake',\n      clockwise: true,\n      cols: 4,\n      colGap: 30,\n      rowGap: 30,\n      padding: 15,\n      nodeSize: 30,\n    },\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'snake',\n      clockwise: true,\n      cols: 4,\n      colGap: 30,\n      rowGap: 30,\n      padding: 15,\n      nodeSize: 30,\n    };\n\n    const optionFolder = gui.addFolder('Grid Layout Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'cols', 2, 10, 1);\n    optionFolder.add(options, 'colGap', 10, 150, 1);\n    optionFolder.add(options, 'rowGap', 10, 150, 1);\n    optionFolder.add(options, 'padding', 5, 100, 1);\n    optionFolder.add(options, 'nodeSize', 10, 50, 30);\n    optionFolder.add(options, 'clockwise');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.setLayout({\n        type: 'snake',\n        [property]: value,\n      });\n      graph.layout();\n    });\n  },\n);\n",paraId:7,tocIndex:2},{value:"如果布局有其特定的属性，我们将在下面列出。对于所有布局的通用属性，见",paraId:8,tocIndex:3},{value:"布局通用配置项",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"必选",paraId:10,tocIndex:3},{value:"type",paraId:10,tocIndex:3},{value:"布局类型",paraId:10,tocIndex:3},{value:"snake",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"clockwise",paraId:11,tocIndex:3},{value:"节点排布方向是否顺时针",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"colGap",paraId:10,tocIndex:3},{value:"节点列之间的间隙大小",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"默认将根据画布宽度和节点总列数自动计算",paraId:10,tocIndex:3},{value:"cols",paraId:10,tocIndex:3},{value:"节点列数",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"5",paraId:10,tocIndex:3},{value:"nodeSize",paraId:10,tocIndex:3},{value:"节点尺寸",paraId:10,tocIndex:3},{value:"Size | ((node: NodeData) => Size)",paraId:10,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"padding",paraId:10,tocIndex:3},{value:"内边距，即布局区域与画布边界的距离",paraId:10,tocIndex:3},{value:"number | number[]",paraId:10,tocIndex:3},{value:"0",paraId:10,tocIndex:3},{value:"rowGap",paraId:10,tocIndex:3},{value:"节点行之间的间隙大小",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"默认将根据画布高度和节点总行数自动计算",paraId:10,tocIndex:3},{value:"sortBy",paraId:10,tocIndex:3},{value:"节点排序方法",paraId:10,tocIndex:3},{value:"(nodeA: NodeData, nodeB: NodeData) => -1 | 0 | 1",paraId:10,tocIndex:3},{value:"默认按照在图中的路径顺序进行展示",paraId:10,tocIndex:3},{value:"在顺时针排布时，节点从左上角开始，第一行从左到右排列，第二行从右到左排列，依次类推，形成 S 型路径。",paraId:12,tocIndex:4},{value:"在逆时针排布时，节点从右上角开始，第一行从右到左排列，第二行从左到右排列，依次类推，形成反向 S 型路径。",paraId:13,tocIndex:4},{value:"Snake布局",paraId:14,tocIndex:5}]},41931:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(20283);const d=[{value:"G6 中布局分为",paraId:0,tocIndex:0},{value:"迭代布局",paraId:0,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"非迭代布局",paraId:0,tocIndex:0},{value:"两种，迭代布局是指布局算法会迭代多次直到收敛，非迭代布局是指布局算法只执行一次。",paraId:0,tocIndex:0},{value:"实现一个非迭代布局相对简单，只需要实现 ",paraId:1,tocIndex:2},{value:"BaseLayout",paraId:1,tocIndex:2},{value:" 中的 ",paraId:1,tocIndex:2},{value:"execute",paraId:1,tocIndex:2},{value:" 方法即可，下面是一个简单的自定义布局实现：",paraId:1,tocIndex:2},{value:"import { BaseLayout } from '@antv/g6';\nimport type { GraphData } from '@antv/g6';\n\nclass DiagonalLayout extends BaseLayout {\n  id = 'diagonal-layout';\n\n  async execute(data: GraphData): Promise<GraphData> {\n    const { nodes = [] } = data;\n    return {\n      nodes: nodes.map((node, index) => ({\n        id: node.id,\n        style: {\n          x: 50 * index + 25,\n          y: 50 * index + 25,\n        },\n      })),\n    };\n  }\n}\n",paraId:2,tocIndex:2},{value:"在上面的代码中，我们实现了一个简单的布局算法，将节点从左上角沿对角线排列。",paraId:3,tocIndex:2},{value:"import { Graph, BaseLayout, register, ExtensionCategory } from '@antv/g6';\n\nclass DiagonalLayout extends BaseLayout {\n  id = 'diagonal-layout';\n\n  async execute(data) {\n    const { nodes = [] } = data;\n    return {\n      nodes: nodes.map((node, index) => ({\n        id: node.id,\n        style: {\n          x: 50 * index + 25,\n          y: 50 * index + 25,\n        },\n      })),\n    };\n  }\n}\n\nregister(ExtensionCategory.LAYOUT, 'diagonal', DiagonalLayout);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  data: {\n    nodes: [{ id: 'node-1' }, { id: 'node-2' }, { id: 'node-3' }, { id: 'node-4' }],\n  },\n  layout: {\n    type: 'diagonal',\n  },\n});\n\ngraph.render();\n",paraId:4,tocIndex:2},{value:"execute",paraId:5},{value:" 方法返回的是一个 GraphData 对象，里面仅需要包含元素的基本信息（如 id、source、target）以及布局新增的属性（如 x、y、边的控制点等），不需要包含其他无用的信息。\n如果仅需要对节点进行布局，可以只返回节点信息，不需要返回边的信息。",paraId:5},{value:"迭代布局的实现同样需要继承 ",paraId:6,tocIndex:3},{value:"BaseLayout",paraId:6,tocIndex:3},{value:"，但是除 ",paraId:6,tocIndex:3},{value:"execute",paraId:6,tocIndex:3},{value:" 外还需要实现 ",paraId:6,tocIndex:3},{value:"tick",paraId:6,tocIndex:3},{value:" 和 ",paraId:6,tocIndex:3},{value:"stop",paraId:6,tocIndex:3},{value:" 方法，",paraId:6,tocIndex:3},{value:"tick",paraId:6,tocIndex:3},{value:" 方法用于将布局迭代到指定轮次，",paraId:6,tocIndex:3},{value:"stop",paraId:6,tocIndex:3},{value:" 方法用于停止布局迭代。",paraId:6,tocIndex:3},{value:"此外，迭代布局中需要在每次迭代调用 ",paraId:7,tocIndex:3},{value:"options.onTick",paraId:7,tocIndex:3},{value:" 以触发图的更新。",paraId:7,tocIndex:3},{value:"type onTick = (data: GraphData) => void;\n",paraId:8,tocIndex:3},{value:"下面是一个简单的迭代布局实现：",paraId:9,tocIndex:3},{value:"import { BaseLayout } from '@antv/g6';\nimport type { GraphData, BaseLayoutOptions } from '@antv/g6';\n\ninterface TickTockLayoutOptions extends BaseLayoutOptions {\n  onTick: (data: GraphData) => void;\n}\n\nclass TickTockLayout extends BaseLayout<TickTockLayoutOptions> {\n  public id = 'custom-layout';\n\n  private tickCount = 0;\n\n  private data?: GraphData;\n\n  private timer?: number;\n\n  private resolve?: () => void;\n\n  private promise?: Promise<void>;\n\n  async execute(data: GraphData, options: TickTockLayoutOptions): Promise<GraphData> {\n    const { onTick } = { ...this.options, ...options };\n\n    this.tickCount = 0;\n    this.data = data;\n\n    this.promise = new Promise((resolve) => {\n      this.resolve = resolve;\n    });\n\n    this.timer = window.setInterval(() => {\n      onTick(this.simulateTick());\n      if (this.tickCount === 10) this.stop();\n    }, 200);\n\n    await this.promise;\n\n    return this.simulateTick();\n  }\n\n  simulateTick = () => {\n    const x = this.tickCount++ % 2 === 0 ? 50 : 150;\n\n    return {\n      nodes: (this?.data?.nodes || []).map((node, index) => ({\n        id: node.id,\n        style: { x, y: (index + 1) * 30 },\n      })),\n    };\n  };\n\n  tick = () => {\n    return this.simulateTick();\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    this.resolve?.();\n  };\n}\n",paraId:10,tocIndex:3},{value:"在这个例子中，我们实现了一个简单的迭代布局算法，每 200ms 将节点的 x 坐标在 50 和 150 之间切换，并按照节点顺序在 y 方向上排列。",paraId:11,tocIndex:3},{value:"import { Graph, BaseLayout, register, ExtensionCategory } from '@antv/g6';\n\nclass TickTockLayout extends BaseLayout {\n  id = 'tick-tock-layout';\n\n  async execute(data, options) {\n    const { onTick } = { ...this.options, ...options };\n\n    this.tickCount = 0;\n    this.data = data;\n\n    this.promise = new Promise((resolve) => {\n      this.resolve = resolve;\n    });\n\n    this.timer = window.setInterval(() => {\n      onTick(this.simulateTick());\n      if (this.tickCount === 10) this.stop();\n    }, 200);\n\n    await this.promise;\n\n    return this.simulateTick();\n  }\n\n  simulateTick = () => {\n    const x = this.tickCount++ % 2 === 0 ? 50 : 150;\n\n    return {\n      nodes: (this?.data?.nodes || []).map((node, index) => ({\n        id: node.id,\n        style: { x, y: (index + 1) * 30 },\n      })),\n    };\n  };\n\n  tick = () => {\n    return this.simulateTick();\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    this.resolve?.();\n  };\n}\n\nregister(ExtensionCategory.LAYOUT, 'tick-tock', TickTockLayout);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  animation: true,\n  data: {\n    nodes: [{ id: 'node-1' }, { id: 'node-2' }, { id: 'node-3' }, { id: 'node-4' }, { id: 'node-5' }],\n  },\n  layout: {\n    type: 'tick-tock',\n  },\n});\n\ngraph.render();\n",paraId:12,tocIndex:3},{value:"通过 G6 提供的 register 方法注册即可，详见",paraId:13,tocIndex:4},{value:"注册布局",paraId:14,tocIndex:4},{value:"可在 ",paraId:15,tocIndex:5},{value:"options.layout",paraId:15,tocIndex:5},{value:" 中配置布局的类型和参数，详见",paraId:15,tocIndex:5},{value:"配置布局",paraId:16,tocIndex:5}]},51994:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(61818);const d=[{value:"图布局是指将图中的元素按照一定的规则进行排列的过程，例如基于电荷弹性模型的力导向布局、逐次排布的网格布局、基于层次结构的树布局等。",paraId:0,tocIndex:0},{value:"G6 提供了多种布局算法，用户可以根据自己的需求选择合适的布局算法：",paraId:1,tocIndex:1},{value:"AntVDagreLayout",paraId:2,tocIndex:1},{value:"：基于 dagre 定制的布局",paraId:3,tocIndex:1},{value:"CircularLayout",paraId:4,tocIndex:1},{value:"：环形布局",paraId:3,tocIndex:1},{value:"ComboCombinedLayout",paraId:5,tocIndex:1},{value:"：适用于存在组合的布局",paraId:3,tocIndex:1},{value:"ConcentricLayout",paraId:6,tocIndex:1},{value:"：同心圆布局",paraId:3,tocIndex:1},{value:"D3Force3DLayout",paraId:7,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"3D 力导向",paraId:3,tocIndex:1},{value:"布局",paraId:3,tocIndex:1},{value:"D3ForceLayout",paraId:8,tocIndex:1},{value:"：基于 ",paraId:3,tocIndex:1},{value:"D3",paraId:3,tocIndex:1},{value:" 的力导向布局",paraId:3,tocIndex:1},{value:"DagreLayout",paraId:9,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"dagre",paraId:3,tocIndex:1},{value:" 布局",paraId:3,tocIndex:1},{value:"FishboneLayout",paraId:10,tocIndex:1},{value:"：鱼骨布局",paraId:3,tocIndex:1},{value:"ForceAtlas2Layout",paraId:11,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"ForceAtlas2",paraId:3,tocIndex:1},{value:" 布局",paraId:3,tocIndex:1},{value:"ForceLayout",paraId:12,tocIndex:1},{value:"：力导向布局",paraId:3,tocIndex:1},{value:"FruchtermanLayout",paraId:13,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"Fruchterman",paraId:3,tocIndex:1},{value:" 布局",paraId:3,tocIndex:1},{value:"GridLayout",paraId:14,tocIndex:1},{value:"：网格布局",paraId:3,tocIndex:1},{value:"MDSLayout",paraId:15,tocIndex:1},{value:"：高维数据降维算法布局",paraId:3,tocIndex:1},{value:"RadialLayout",paraId:16,tocIndex:1},{value:"：径向布局",paraId:3,tocIndex:1},{value:"RandomLayout",paraId:17,tocIndex:1},{value:"：随机布局",paraId:3,tocIndex:1},{value:"SnakeLayout",paraId:18,tocIndex:1},{value:"：蛇形布局",paraId:3,tocIndex:1},{value:"CompactBoxLayout",paraId:19,tocIndex:1},{value:": 紧凑树布局",paraId:3,tocIndex:1},{value:"DendrogramLayout",paraId:20,tocIndex:1},{value:": 树状布局",paraId:3,tocIndex:1},{value:"MindmapLayout",paraId:21,tocIndex:1},{value:": 思维导图布局",paraId:3,tocIndex:1},{value:"IndentedLayout",paraId:22,tocIndex:1},{value:": 缩进树布局",paraId:3,tocIndex:1},{value:"其中 ",paraId:23,tocIndex:1},{value:"CompactBox Layout",paraId:23,tocIndex:1},{value:"、",paraId:23,tocIndex:1},{value:"Dendrogram Layout",paraId:23,tocIndex:1},{value:"、",paraId:23,tocIndex:1},{value:"Mindmap Layout",paraId:23,tocIndex:1},{value:"、",paraId:23,tocIndex:1},{value:"Indented Layout",paraId:23,tocIndex:1},{value:" 是树布局的一种，适用于树状结构的图。",paraId:23,tocIndex:1},{value:"你可以直接使用内置布局，如果想要使用其他布局，需要先进行注册：",paraId:24,tocIndex:2},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomLayout } from 'package-name/or/path-to-your-custom-layout';\n\nregister(ExtensionCategory.LAYOUT, 'custom-layout', CustomLayout);\n",paraId:25,tocIndex:2},{value:"通过 ",paraId:26,tocIndex:3},{value:"layout",paraId:26,tocIndex:3},{value:" 配置项可以指定图的布局算法，例如：",paraId:26,tocIndex:3},{value:"{\n  layout: {\n    // 指定要使用的布局算法\n    type: 'force',\n    // 布局算法的配置项\n    gravity: 10\n    // ...\n  }\n}\n",paraId:27,tocIndex:3},{value:"也可在图实例化之后使用 ",paraId:28,tocIndex:3},{value:"graph.setLayout",paraId:28,tocIndex:3},{value:" 来更新布局配置。",paraId:28,tocIndex:3},{value:"G6 对一些布局算法提供了加速版本，包括：在 Web Worker 中执行布局算法、提供 ",paraId:29,tocIndex:4},{value:"WASM",paraId:29,tocIndex:4},{value:" 版本的布局算法、GPU 加速的布局算法等。可按照下列方式使用：",paraId:29,tocIndex:4},{value:"除树布局外，G6 的所有内置布局算法都支持在 Web Worker 中执行。只需将 ",paraId:30,tocIndex:5},{value:"enableWorker",paraId:30,tocIndex:5},{value:" 设置为 ",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:" 即可：",paraId:30,tocIndex:5},{value:"{\n  layout: {\n    type: 'force',\n    enableWorker: true,\n    // ...\n  }\n}\n",paraId:31,tocIndex:5},{value:"目前支持 WASM 版本的布局算法有：",paraId:32,tocIndex:6},{value:"Fruchterman Layout",paraId:32,tocIndex:6},{value:" ",paraId:32,tocIndex:6},{value:"ForceAtlas Layout",paraId:32,tocIndex:6},{value:" ",paraId:32,tocIndex:6},{value:"Force Layout",paraId:32,tocIndex:6},{value:" ",paraId:32,tocIndex:6},{value:"Dagre Layout",paraId:32,tocIndex:6},{value:"。",paraId:32,tocIndex:6},{value:"首先安装 ",paraId:33,tocIndex:6},{value:"@antv/layout-wasm",paraId:33,tocIndex:6},{value:"：",paraId:33,tocIndex:6},{value:"npm install @antv/layout-wasm --save\n",paraId:34,tocIndex:6},{value:"引入并注册布局算法：",paraId:35,tocIndex:6},{value:"import { register, Graph, ExtensionCategory } from '@antv/g6';\nimport { FruchtermanLayout, initThreads, supportsThreads } from '@antv/layout-wasm';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-wasm', FruchtermanLayout);\n",paraId:36,tocIndex:6},{value:"初始化线程：",paraId:37,tocIndex:6},{value:"const supported = await supportsThreads();\nconst threads = await initThreads(supported);\n",paraId:38,tocIndex:6},{value:"初始化图并传入布局配置：",paraId:39,tocIndex:6},{value:"const graph = new Graph({\n  // ... 其他配置\n  layout: {\n    type: 'fruchterman-wasm',\n    threads,\n    // ... 其他配置\n  },\n});\n",paraId:40,tocIndex:6},{value:"目前支持 GPU 加速的布局算法有：",paraId:41,tocIndex:7},{value:"Fruchterman Layout",paraId:41,tocIndex:7},{value:" ",paraId:41,tocIndex:7},{value:"GForce Layout",paraId:41,tocIndex:7},{value:"。",paraId:41,tocIndex:7},{value:"首先安装 ",paraId:42,tocIndex:7},{value:"@antv/layout-gpu",paraId:42,tocIndex:7},{value:"：",paraId:42,tocIndex:7},{value:"npm install @antv/layout-gpu --save\n",paraId:43,tocIndex:7},{value:"引入并注册布局算法：",paraId:44,tocIndex:7},{value:"import { register, Graph, ExtensionCategory } from '@antv/g6';\nimport { FruchtermanLayout } from '@antv/layout-gpu';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-gpu', FruchtermanLayout);\n",paraId:45,tocIndex:7},{value:"初始化图并传入布局配置：",paraId:46,tocIndex:7},{value:"const graph = new Graph({\n  // ... 其他配置\n  layout: {\n    type: 'fruchterman-gpu',\n    // ... 其他配置\n  },\n});\n",paraId:47,tocIndex:7},{value:"通常，在调用 ",paraId:48,tocIndex:8},{value:"graph.render()",paraId:48,tocIndex:8},{value:" 后，G6 会自动执行布局算法。",paraId:48,tocIndex:8},{value:"如果需要手动执行布局算法，G6 提供了以下 API：",paraId:49,tocIndex:8},{value:"layout",paraId:50,tocIndex:8},{value:"：执行布局算法",paraId:51,tocIndex:8},{value:"setLayout",paraId:52,tocIndex:8},{value:"：设置布局算法",paraId:51,tocIndex:8},{value:"stopLayout",paraId:53,tocIndex:8},{value:"：停止布局算法",paraId:51,tocIndex:8},{value:"如果内置布局算法无法满足需求，可以自定义布局算法，具体请参考",paraId:54,tocIndex:9},{value:"自定义布局",paraId:55,tocIndex:9},{value:"。",paraId:54,tocIndex:9}]},57001:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(71758);const d=[{value:"支持为图画布设置一个背景图片，让画布更有层次感、叙事性。",paraId:0,tocIndex:0},{value:"这一插件主要用于：",paraId:1,tocIndex:1},{value:"为图表设置统一的品牌背景色或图片",paraId:2,tocIndex:1},{value:"通过背景区分不同的功能区域",paraId:2,tocIndex:1},{value:"增强图表的视觉层次感和美观度",paraId:2,tocIndex:1},{value:"以下是一个简单的 Background 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'background',\n      key: 'my-background', // 为插件指定标识符，方便动态更新\n      backgroundColor: '#f0f2f5', // 设置背景色\n      backgroundImage: 'url(https://example.com/bg.png)', // 设置背景图\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"Background 插件的配置项继承了所有 CSS 样式属性（",paraId:5,tocIndex:3},{value:"CSSStyleDeclaration",paraId:5,tocIndex:3},{value:"），因此你可以使用任何合法的 CSS 属性来配置背景。以下是一些常用配置：",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:3},{value:"描述",paraId:6,tocIndex:3},{value:"类型",paraId:6,tocIndex:3},{value:"默认值",paraId:6,tocIndex:3},{value:"必选",paraId:6,tocIndex:3},{value:"type",paraId:6,tocIndex:3},{value:"插件类型",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"background",paraId:6,tocIndex:3},{value:"✓",paraId:6,tocIndex:3},{value:"key",paraId:6,tocIndex:3},{value:"插件唯一标识符，用于后续更新",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"width",paraId:6,tocIndex:3},{value:"背景宽度",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"100%",paraId:6,tocIndex:3},{value:"height",paraId:6,tocIndex:3},{value:"背景高度",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"100%",paraId:6,tocIndex:3},{value:"backgroundColor",paraId:6,tocIndex:3},{value:"背景颜色",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundImage",paraId:6,tocIndex:3},{value:"背景图片",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundSize",paraId:6,tocIndex:3},{value:"背景尺寸",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"cover",paraId:6,tocIndex:3},{value:"backgroundPosition",paraId:6,tocIndex:3},{value:"背景位置",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"backgroundRepeat",paraId:6,tocIndex:3},{value:"背景重复方式",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"opacity",paraId:6,tocIndex:3},{value:"背景透明度",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"transition",paraId:6,tocIndex:3},{value:"过渡动画",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"background 0.5s",paraId:6,tocIndex:3},{value:"zIndex",paraId:6,tocIndex:3},{value:"层叠顺序",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-1",paraId:6,tocIndex:3},{value:"注意：",paraId:7,tocIndex:3},{value:"zIndex",paraId:7,tocIndex:3},{value:" 默认为 -1，这是为了避免背景覆盖其他插件的 DOM 元素，如网格线。",paraId:7,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'background',\n      backgroundColor: '#f0f2f5',\n    },\n  ],\n});\n",paraId:8,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'background',\n      backgroundImage: 'url(https://example.com/bg.png)',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    },\n  ],\n});\n",paraId:9,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'background',\n      background: 'linear-gradient(45deg, #1890ff, #722ed1)',\n      opacity: '0.8',\n    },\n  ],\n});\n",paraId:10,tocIndex:7},{value:"// 初始化时配置\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'background',\n      key: 'my-background',\n      backgroundColor: '#f0f2f5',\n    },\n  ],\n});\n\n// 后续更新\ngraph.updatePlugin({\n  key: 'my-background',\n  backgroundColor: '#e6f7ff',\n  transition: 'background 1s ease',\n});\n",paraId:11,tocIndex:8},{value:"默认情况下，背景插件的 ",paraId:12,tocIndex:10},{value:"zIndex",paraId:12,tocIndex:10},{value:" 设为 ",paraId:12,tocIndex:10},{value:"-1",paraId:12,tocIndex:10},{value:"，以确保它位于其他元素之下。如果仍有冲突，可以调整 ",paraId:12,tocIndex:10},{value:"zIndex",paraId:12,tocIndex:10},{value:" 值：",paraId:12,tocIndex:10},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'background',\n      zIndex: '-2', // 降低 z-index 避免冲突\n    },\n  ],\n});\n",paraId:13,tocIndex:10}]},35639:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(31871);const d=[{value:"BubbleSets 插件通过创建气泡形状来表示集合及其关系，帮助用户直观地理解集合间的交集、并集等逻辑关系。它是一种增强数据可视化效果的工具，特别适用于展示复杂的数据集合关系。",paraId:0,tocIndex:0},{value:"BubbleSets 插件主要适用于以下场景：",paraId:1,tocIndex:1},{value:"展示集合间的关系（如交集、并集）",paraId:2,tocIndex:1},{value:"增强数据可视化的表达能力",paraId:2,tocIndex:1},{value:"在复杂网络图中标识特定节点或边的集合",paraId:2,tocIndex:1},{value:"以下是一个简单的 BubbleSets 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node1', 'node2'], // 需要包裹的节点 ID 列表\n      label: true, // 是否显示标签\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        {\n          id: 'node-0',\n          data: { cluster: 'a' },\n          style: { x: 555, y: 151 },\n        },\n        {\n          id: 'node-1',\n          data: { cluster: 'a' },\n          style: { x: 532, y: 323 },\n        },\n        {\n          id: 'node-2',\n          data: { cluster: 'a' },\n          style: { x: 473, y: 227 },\n        },\n        {\n          id: 'node-3',\n          data: { cluster: 'a' },\n          style: { x: 349, y: 212 },\n        },\n        {\n          id: 'node-4',\n          data: { cluster: 'b' },\n          style: { x: 234, y: 201 },\n        },\n        {\n          id: 'node-5',\n          data: { cluster: 'b' },\n          style: { x: 338, y: 333 },\n        },\n        {\n          id: 'node-6',\n          data: { cluster: 'b' },\n          style: { x: 365, y: 91 },\n        },\n      ],\n      edges: [\n        {\n          id: 'edge-0',\n          source: 'node-0',\n          target: 'node-2',\n        },\n        {\n          id: 'edge-1',\n          source: 'node-1',\n          target: 'node-2',\n        },\n        {\n          id: 'edge-2',\n          source: 'node-2',\n          target: 'node-3',\n        },\n        {\n          id: 'edge-3',\n          source: 'node-3',\n          target: 'node-4',\n        },\n        {\n          id: 'edge-4',\n          source: 'node-3',\n          target: 'node-5',\n        },\n        {\n          id: 'edge-5',\n          source: 'node-3',\n          target: 'node-6',\n        },\n      ],\n    },\n    node: {\n      style: { labelText: (d) => d.id },\n      palette: { field: 'cluster', color: ['#7e3feb', '#ffa940'] },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'bubble-sets',\n        key: 'bubble-sets',\n        members: ['node-0', 'node-1', 'node-2', 'node-3'],\n        labelText: 'bubblesets-a',\n        fill: '#7e3feb',\n        fillOpacity: 0.1,\n        stroke: '#7e3feb',\n        strokeOpacity: 1,\n        labelFill: '#fff',\n        labelPadding: 2,\n        labelBackgroundFill: '#7e3feb',\n        labelBackgroundRadius: 5,\n      },\n    ],\n  },\n  { width: 600, height: 450 },\n  (gui, graph) => {\n    const options = {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      avoidMembers: [],\n      // style\n      fill: '#7e3feb',\n      fillOpacity: 0.1,\n      stroke: '#7e3feb',\n      strokeOpacity: 1,\n      // label\n      label: true,\n      labelCloseToPath: true,\n      labelAutoRotate: true,\n      labelOffsetX: 0,\n      labelOffsetY: 0,\n      labelPlacement: 'bottom',\n      // bubblesets\n      maxRoutingIterations: 100,\n      maxMarchingIterations: 20,\n      pixelGroup: 4,\n      edgeR0: 10,\n      edgeR1: 20,\n      nodeR0: 15,\n      nodeR1: 50,\n      morphBuffer: 10,\n      threshold: 1,\n      memberInfluenceFactor: 1,\n      edgeInfluenceFactor: 1,\n      nonMemberInfluenceFactor: -0.8,\n      virtualEdges: true,\n    };\n\n    const optionFolder = gui.addFolder('Bubblesets Options');\n    optionFolder.add(options, 'type').disable();\n    optionFolder.addColor(options, 'fill');\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'fillOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'strokeOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'label');\n    optionFolder.add(options, 'labelCloseToPath');\n    optionFolder.add(options, 'labelAutoRotate');\n    optionFolder.add(options, 'labelOffsetX', 0, 20, 1);\n    optionFolder.add(options, 'labelOffsetY', 0, 20, 1);\n    optionFolder.add(options, 'labelPlacement', ['left', 'right', 'top', 'bottom', 'center']);\n    optionFolder.add(options, 'maxRoutingIterations', 0, 200, 1);\n    optionFolder.add(options, 'maxMarchingIterations', 0, 40, 1);\n    optionFolder.add(options, 'pixelGroup', 0, 20, 1);\n    optionFolder.add(options, 'edgeR0', 0, 50, 1);\n    optionFolder.add(options, 'edgeR1', 0, 50, 1);\n    optionFolder.add(options, 'nodeR0', 0, 50, 1);\n    optionFolder.add(options, 'nodeR1', 0, 50, 1);\n    optionFolder.add(options, 'morphBuffer', 0, 20, 1);\n    optionFolder.add(options, 'threshold', -1, 1, 0.1);\n    optionFolder.add(options, 'memberInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'edgeInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'nonMemberInfluenceFactor', -1, 1, 0.1);\n    optionFolder.add(options, 'virtualEdges');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'bubble-sets',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiConfig = {\n      member: 'node-1',\n      avoidMember: 'node-1',\n    };\n    const apiFolder = gui.addFolder('Bubblesets API');\n    const instance = graph.getPluginInstance('bubble-sets');\n    const nodeIds = graph.getData().nodes.map((node) => node.id);\n    const edgeIds = graph.getData().edges.map((edge) => edge.id);\n    apiFolder.add(apiConfig, 'member', [...nodeIds, ...edgeIds]);\n    apiFolder.add({ addMember: () => instance.addMember(apiConfig.member) }, 'addMember').name('add member');\n    apiFolder\n      .add({ removeMember: () => instance.removeMember(apiConfig.member) }, 'removeMember')\n      .name('remove member');\n    apiFolder\n      .add({ removeMember: () => alert('Members in Bubblesets: ' + instance.getMember()) }, 'removeMember')\n      .name('get member');\n    apiFolder.add(apiConfig, 'avoidMember', nodeIds);\n    apiFolder\n      .add({ addAvoidMember: () => instance.addAvoidMember(apiConfig.avoidMember) }, 'addAvoidMember')\n      .name('add avoid member');\n    apiFolder\n      .add({ removeAvoidMember: () => instance.removeAvoidMember(apiConfig.avoidMember) }, 'removeAvoidMember')\n      .name('remove avoid member');\n    apiFolder\n      .add({ removeMember: () => alert('Avoid members in Bubblesets: ' + instance.getAvoidMember()) }, 'removeMember')\n      .name('get avoid member');\n  },\n);\n",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:4},{value:"描述",paraId:6,tocIndex:4},{value:"类型",paraId:6,tocIndex:4},{value:"默认值",paraId:6,tocIndex:4},{value:"必选",paraId:6,tocIndex:4},{value:"type",paraId:6,tocIndex:4},{value:"插件类型",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"bubble-sets",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"key",paraId:6,tocIndex:4},{value:"插件唯一标识符，用于后续更新",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"members",paraId:6,tocIndex:4},{value:"成员元素，包括节点和边，",paraId:6,tocIndex:4},{value:"示例",paraId:7,tocIndex:4},{value:"string[]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"avoidMembers",paraId:6,tocIndex:4},{value:"需要避开的元素，在绘制轮廓时不会包含这些元素（目前支持设置节点）",paraId:6,tocIndex:4},{value:"string[]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"label",paraId:6,tocIndex:4},{value:"是否显示标签",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelPlacement",paraId:6,tocIndex:4},{value:"标签位置",paraId:6,tocIndex:4},{value:"left",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"right",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"top",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"center",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:"bottom",paraId:6,tocIndex:4},{value:"labelBackground",paraId:6,tocIndex:4},{value:"是否显示背景",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"false",paraId:6,tocIndex:4},{value:"labelPadding",paraId:6,tocIndex:4},{value:"标签内边距",paraId:6,tocIndex:4},{value:"number | number[]",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelCloseToPath",paraId:6,tocIndex:4},{value:"标签是否贴合轮廓，",paraId:6,tocIndex:4},{value:"示例",paraId:8,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelAutoRotate",paraId:6,tocIndex:4},{value:"标签是否跟随轮廓旋转，",paraId:6,tocIndex:4},{value:"示例",paraId:9,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"labelOffsetX",paraId:6,tocIndex:4},{value:"标签 x 轴偏移量",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelOffsetY",paraId:6,tocIndex:4},{value:"标签 y 轴偏移量",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"labelMaxWidth",paraId:6,tocIndex:4},{value:"文本的最大宽度，超出会自动省略",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"maxRoutingIterations",paraId:6,tocIndex:4},{value:"计算成员之间路径的最大迭代次数",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"100",paraId:6,tocIndex:4},{value:"maxMarchingIterations",paraId:6,tocIndex:4},{value:"计算轮廓的最大迭代次数",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"20",paraId:6,tocIndex:4},{value:"pixelGroup",paraId:6,tocIndex:4},{value:"每个潜在区域组的像素数，用于提高速度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"4",paraId:6,tocIndex:4},{value:"edgeR0",paraId:6,tocIndex:4},{value:"边的半径参数 R0",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"edgeR1",paraId:6,tocIndex:4},{value:"边的半径参数 R1",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nodeR0",paraId:6,tocIndex:4},{value:"节点的半径参数 R0",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nodeR1",paraId:6,tocIndex:4},{value:"节点的半径参数 R1",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"morphBuffer",paraId:6,tocIndex:4},{value:"形态缓冲区大小",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"threshold",paraId:6,tocIndex:4},{value:"阈值",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"memberInfluenceFactor",paraId:6,tocIndex:4},{value:"成员影响因子",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"edgeInfluenceFactor",paraId:6,tocIndex:4},{value:"边影响因子",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"nonMemberInfluenceFactor",paraId:6,tocIndex:4},{value:"非成员影响因子",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"virtualEdges",paraId:6,tocIndex:4},{value:"是否使用虚拟边",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"成员元素，包括节点和边。",paraId:10,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2'],\n    },\n  ],\n});\n",paraId:11,tocIndex:5},{value:"效果如下：",paraId:12,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'bubble-sets',\n      key: 'bubble-sets-a',\n      members: ['node-0', 'node-1', 'node-2'],\n    },\n  ],\n});\n\ngraph.render();\n",paraId:13,tocIndex:5},{value:"示例：不让 label 贴合轮廓",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelText: 'cluster-a',\n      labelCloseToPath: false,\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"效果如下：",paraId:16,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelText: 'cluster-a',\n      labelCloseToPath: false,\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:17,tocIndex:6},{value:"示例：不让label标签跟随轮廓旋转",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelText: 'cluster-a',\n      labelAutoRotate: false,\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"效果如下：",paraId:20,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelText: 'cluster-a',\n      labelAutoRotate: false,\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:21,tocIndex:7},{value:"最简单的方式是直接使用预设配置：",paraId:22,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n    },\n  ],\n});\n",paraId:23,tocIndex:9},{value:"效果如下：",paraId:24,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'bubble-sets',\n      key: 'bubble-sets-a',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n    },\n  ],\n});\n\ngraph.render();\n",paraId:25,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      fill: '#7e3feb', // 气泡填充颜色\n      fillOpacity: 0.1, // 填充透明度\n      stroke: '#7e3feb', // 边框颜色\n      strokeOpacity: 1, // 边框透明度\n    },\n  ],\n});\n",paraId:26,tocIndex:10},{value:"效果如下：",paraId:27,tocIndex:10},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      fill: '#7e3feb', // 气泡填充颜色\n      fillOpacity: 0.1, // 填充透明度\n      stroke: '#7e3feb', // 边框颜色\n      strokeOpacity: 1, // 边框透明度\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:28,tocIndex:10},{value:"您可以配置标签的位置、背景、偏移量等属性，以增强可视化效果。",paraId:29,tocIndex:11},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelPlacement: 'top', // 标签位置\n      labelBackground: true, // 显示标签背景\n      labelPadding: 5, // 标签内边距\n    },\n  ],\n});\n",paraId:30,tocIndex:11},{value:"效果如下：",paraId:31,tocIndex:11},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge-0',\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-1',\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        id: 'edge-2',\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        id: 'edge-3',\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        id: 'edge-4',\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        id: 'edge-5',\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      key: 'bubble-sets-a',\n      type: 'bubble-sets',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      label: true, // 显示标签\n      labelText: 'cluster-a',\n      labelPlacement: 'top', // 标签位置\n      labelBackground: true, // 显示标签背景\n      labelPadding: 5, // 标签内边距\n    },\n  ],\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n});\n\ngraph.render();\n",paraId:32,tocIndex:11}]},2869:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(1008);const d=[{value:"上下文菜单（Contextmenu），也被称为右键菜单，是当用户在某个特定区域上点击后出现的一个菜单。支持在点击前后，触发自定义事件。通过上下文菜单，可以将一些具体元素的操作集成在其中，方便对某一项来进行需要时的单独控制。",paraId:0,tocIndex:0},{value:"这一插件主要用于：",paraId:1,tocIndex:1},{value:"元素的各种交互：查看节点、查看边、删除节点等等交互操作",paraId:2,tocIndex:1},{value:"以下是一个简单的 Contextmenu 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'contextmenu',\n      // 只在节点上开启右键菜单，默认全部元素都开启\n      enable: (e) => e.targetType === 'node',\n      getItems: () => {\n        return [{ name: '查看详情', value: 'detail' }];\n      },\n      onClick: (value) => {\n        if (value === 'detail') console.log('展示节点详情');\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"必选",paraId:5,tocIndex:3},{value:"className",paraId:5,tocIndex:3},{value:"给菜单的 DOM 追加的类名",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"g6-contextmenu",paraId:5,tocIndex:3},{value:"trigger",paraId:5,tocIndex:3},{value:"如何触发右键菜单：",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:" 表示右键触发，",paraId:5,tocIndex:3},{value:"click",paraId:5,tocIndex:3},{value:" 表示点击触发",paraId:5,tocIndex:3},{value:"click",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:"contextmenu",paraId:5,tocIndex:3},{value:"offset",paraId:5,tocIndex:3},{value:"菜单显式 X、Y 方向的偏移量",paraId:5,tocIndex:3},{value:"[number, number]",paraId:5,tocIndex:3},{value:"[4, 4]",paraId:5,tocIndex:3},{value:"onClick",paraId:5,tocIndex:3},{value:"当菜单被点击后，触发的回调方法，",paraId:5,tocIndex:3},{value:"示例",paraId:6,tocIndex:3},{value:"(value: string, target: HTMLElement, current: Element) => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:"返回菜单的项目列表，支持 ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:" 类型的返回值。是 ",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:" 的快捷配置",paraId:5,tocIndex:3},{value:"(event: IElementEvent) => ",paraId:5,tocIndex:3},{value:"Item",paraId:7,tocIndex:3},{value:"[] | Promise<",paraId:5,tocIndex:3},{value:"Item",paraId:8,tocIndex:3},{value:"[]>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:"返回菜单的内容，支持 ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:" 类型的返回值，也可以使用 ",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:" 进行快捷配置",paraId:5,tocIndex:3},{value:"(event: IElementEvent) => HTMLElement | string | Promise<HTMLElement | string>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"loadingContent",paraId:5,tocIndex:3},{value:"当 ",paraId:5,tocIndex:3},{value:"getContent",paraId:5,tocIndex:3},{value:" 返回一个 ",paraId:5,tocIndex:3},{value:"Promise",paraId:5,tocIndex:3},{value:" 时，使用的菜单内容",paraId:5,tocIndex:3},{value:"HTMLElement | string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"enable",paraId:5,tocIndex:3},{value:"是否可用，通过参数判断是否支持右键菜单，默认是全部可用",paraId:5,tocIndex:3},{value:"boolean | (event: IElementEvent) => boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"每个菜单项目 (Item) 包含以下属性：",paraId:9,tocIndex:4},{value:"属性",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"name",paraId:10,tocIndex:4},{value:"菜单项显示的名字",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:"菜单项对应的值",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"点击菜单项后会触发该函数，函数有三个参数：",paraId:11,tocIndex:5},{value:"value: 对应菜单项的 value",paraId:12,tocIndex:5},{value:"target: 对应菜单项容器的 dom 节点",paraId:12,tocIndex:5},{value:"current: 对应触发菜单项的元素，例如是节点则可以通过 ",paraId:12,tocIndex:5},{value:"current",paraId:12,tocIndex:5},{value:" 来获取到节点的信息(id)等，或者来对元素进行修改",paraId:12,tocIndex:5},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu', // 'click' or 'contextmenu'\n      onClick: (value, target, current) => {\n        alert('You have clicked the「' + v + '」item');\n      },\n      getItems: () => {\n        return [\n          { name: '查看详情', value: 'detail' },\n          { name: '删除', value: 'delete' },\n        ];\n      },\n    },\n  ],\n});\n",paraId:13,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: () => {\n        return [{ name: '变更起点', value: 'change' }];\n      },\n      onClick: (value) => {\n        if (value === 'change') console.log('这里执行变更起点操作');\n      },\n      // 仅在边上开启右键菜单\n      enable: (e) => e.targetType === 'edge',\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: async () => {\n        // 可以从服务器或其他异步源获取工具栏配置\n        const response = await fetch('/api/contextmenu-config');\n        const items = await response.json();\n        return items;\n      },\n      // 仅在边上开启右键菜单\n      enable: (e) => e.targetType === 'node',\n    },\n  ],\n});\n",paraId:15,tocIndex:9},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  layout: { type: 'grid' },\n  plugins: [\n    {\n      type: 'contextmenu',\n      trigger: 'contextmenu',\n      getItems: (e) => {\n        if (e.target.id === 'node-1') {\n          return [\n            {\n              name: '删除节点',\n              value: 'delete',\n            },\n          ];\n        }\n        if (e.target.type === 'edge') {\n          return [\n            {\n              name: '移动边',\n              value: 'move',\n            },\n          ];\n        }\n        return [];\n      },\n    },\n  ],\n});\n",paraId:16,tocIndex:10}]},48835:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(16334);const d=[{value:"边绑定（Edge Bundling）是一种图可视化技术，用于减少复杂网络图中的视觉混乱，并展示图中的高级别模式和结构。其目的是将相邻的边捆绑在一起。",paraId:0,tocIndex:0},{value:"G6 中提供的边绑定插件是基于 ",paraId:1,tocIndex:0},{value:"FEDB（Force-Directed Edge Bundling for Graph Visualization）",paraId:1,tocIndex:0},{value:"论文的实现：将边建模为可以相互吸引的柔性弹簧，通过自组织的方式进行捆绑。",paraId:1,tocIndex:0},{value:"边绑定插件主要适用于以下场景：",paraId:2,tocIndex:1},{value:"减少复杂网络图中的视觉混乱",paraId:3,tocIndex:1},{value:"揭示图中的高级别模式和结构",paraId:3,tocIndex:1},{value:"提高大规模图数据的可读性和美观性",paraId:3,tocIndex:1},{value:"以下是一个简单的 EdgeBundling 插件初始化示例：",paraId:4,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.6,\n      cycles: 6,\n      divisions: 3,\n      divRate: 2,\n      iterations: 90,\n      iterRate: 2 / 3,\n      K: 0.1,\n      lambda: 0.1,\n    },\n  ],\n});\n",paraId:5,tocIndex:2},{value:"属性",paraId:6,tocIndex:3},{value:"描述",paraId:6,tocIndex:3},{value:"类型",paraId:6,tocIndex:3},{value:"默认值",paraId:6,tocIndex:3},{value:"必选",paraId:6,tocIndex:3},{value:"type",paraId:6,tocIndex:3},{value:"插件类型，用于标识该插件为边捆绑插件",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"edge-bundling",paraId:6,tocIndex:3},{value:"✓",paraId:6,tocIndex:3},{value:"key",paraId:6,tocIndex:3},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"-",paraId:6,tocIndex:3},{value:"bundleThreshold",paraId:6,tocIndex:3},{value:"边兼容性阈值，该值决定了哪些边应该被绑定在一起，值越大，绑定的边越少，",paraId:6,tocIndex:3},{value:"示例",paraId:7,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.6",paraId:6,tocIndex:3},{value:"cycles",paraId:6,tocIndex:3},{value:"模拟周期数，控制边捆绑模拟的执行轮数",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"6",paraId:6,tocIndex:3},{value:"divisions",paraId:6,tocIndex:3},{value:"初始切割点数，在后续的周期中，切割点数将根据 divRate 逐步递增，影响边的细分程度",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"1",paraId:6,tocIndex:3},{value:"divRate",paraId:6,tocIndex:3},{value:"切割点数增长率，决定了每一轮周期中切割点数的增长幅度",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"2",paraId:6,tocIndex:3},{value:"iterations",paraId:6,tocIndex:3},{value:"指定在第一个周期中执行的迭代次数，在后续的周期中，迭代次数将根据 iterRate 逐步递减，影响模拟的精度",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"90",paraId:6,tocIndex:3},{value:"iterRate",paraId:6,tocIndex:3},{value:"迭代次数递减率，控制每一轮周期中迭代次数的减少比例",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"2/3",paraId:6,tocIndex:3},{value:"K",paraId:6,tocIndex:3},{value:"边的强度，影响边之间的吸引力和排斥力，",paraId:6,tocIndex:3},{value:"示例",paraId:8,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.1",paraId:6,tocIndex:3},{value:"lambda",paraId:6,tocIndex:3},{value:"初始步长，在后续的周期中，步长将双倍递增，影响边捆绑过程中节点移动的幅度",paraId:6,tocIndex:3},{value:"number",paraId:6,tocIndex:3},{value:"0.1",paraId:6,tocIndex:3},{value:"边兼容性阈值，该值决定了哪些边应该被绑定在一起。值越大，绑定的边越少，反之则绑定的边越多。",paraId:9,tocIndex:4},{value:"较低的 bundleThreshold 值（如 0.4）会使更多的边被绑定在一起，形成更明显的捆绑效果。",paraId:10,tocIndex:4},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.4, // 较低的边兼容性阈值\n    },\n  ],\n});\n",paraId:11,tocIndex:4},{value:"效果如下：\n",paraId:12,tocIndex:4},{value:"较高的 bundleThreshold 值（如 0.8）会使较少的边被绑定在一起，保持更多的独立边。",paraId:13,tocIndex:4},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.8, // 较高的边兼容性阈值\n    },\n  ],\n});\n",paraId:14,tocIndex:4},{value:"效果如下：\n",paraId:15,tocIndex:4},{value:"边的强度，影响边之间的吸引力和排斥力。较高的 K 值会使边之间的吸引力更强，从而形成更紧密的捆绑效果。",paraId:16,tocIndex:5},{value:"较低的 K 值（如 0.05）会使边之间的吸引力较弱，边的捆绑效果较弱。",paraId:17,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      K: 0.05, // 较低的边强度\n    },\n  ],\n});\n",paraId:18,tocIndex:5},{value:"效果如下：\n",paraId:19,tocIndex:5},{value:"较高的 K 值（如 0.2）会使边之间的吸引力较强，边的捆绑效果更明显。",paraId:20,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-bundling',\n      K: 0.2, // 较高的边强度\n    },\n  ],\n});\n",paraId:21,tocIndex:5},{value:"效果如下：\n",paraId:22,tocIndex:5},{value:"最简单的方式是直接使用预设配置：",paraId:23,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: ['edge-bundling'],\n});\n",paraId:24,tocIndex:7},{value:"您可以根据需要自定义边绑定的参数：",paraId:25,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'edge-bundling',\n      bundleThreshold: 0.8, // 更高的边兼容性阈值\n      cycles: 8, // 更多模拟周期\n      K: 0.2, // 更强的边强度\n    },\n  ],\n});\n",paraId:26,tocIndex:8},{value:"使用 key 标识符可以在运行时动态更新边绑定属性：",paraId:27,tocIndex:9},{value:"// 初始化配置\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'edge-bundling',\n      key: 'my-edge-bundling',\n      bundleThreshold: 0.6,\n    },\n  ],\n});\n\n// 后续动态更新\ngraph.updatePlugin({\n  key: 'my-edge-bundling',\n  bundleThreshold: 0.8, // 更新边兼容性阈值\n  cycles: 10, // 更新模拟周期数\n});\n",paraId:28,tocIndex:9}]},2284:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(24804);const d=[{value:"边过滤镜插件可以将关注的边保留在过滤镜范围内，其他边将在该范围内不显示。这是一个重要的可视化探索工具，可以帮助用户聚焦于特定区域的边关系。",paraId:0,tocIndex:0},{value:"需要聚焦查看局部区域的边关系",paraId:1,tocIndex:1},{value:"在复杂网络中突出显示特定节点之间的连接",paraId:1,tocIndex:1},{value:"以下是一个简单的 EdgeFilterLens 插件初始化示例：",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      trigger: 'pointermove', // 跟随鼠标移动\n      r: 60, // 设置透镜半径\n      nodeType: 'both', // 边的显示条件\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        // 上部疏散区域\n        { id: 'Myriel', style: { x: 207, y: 78, label: 'Myriel' } },\n        { id: 'Napoleon', style: { x: 127, y: 62, label: 'Napoleon' } },\n        { id: 'CountessdeLo', style: { x: 171, y: 47, label: 'CountessdeLo' } },\n        { id: 'Geborand', style: { x: 106, y: 81, label: 'Geborand' } },\n        { id: 'Champtercier', style: { x: 247, y: 58, label: 'Champtercier' } },\n        { id: 'Cravatte', style: { x: 152, y: 50, label: 'Cravatte' } },\n\n        // 中上部区域\n        { id: 'Mlle.Baptistine', style: { x: 205, y: 141, label: 'Mlle.Baptistine' } },\n        { id: 'Mme.Magloire', style: { x: 275, y: 120, label: 'Mme.Magloire' } },\n        { id: 'Labarre', style: { x: 246, y: 183, label: 'Labarre' } },\n        { id: 'Valjean', style: { x: 342, y: 221, label: 'Valjean' } },\n        { id: 'Marguerite', style: { x: 285, y: 171, label: 'Marguerite' } },\n\n        // 中部密集区域\n        { id: 'Tholomyes', style: { x: 379, y: 158, label: 'Tholomyes' } },\n        { id: 'Listolier', style: { x: 288, y: 80, label: 'Listolier' } },\n        { id: 'Fameuil', style: { x: 349, y: 89, label: 'Fameuil' } },\n        { id: 'Blacheville', style: { x: 381, y: 95, label: 'Blacheville' } },\n        { id: 'Favourite', style: { x: 264, y: 153, label: 'Favourite' } },\n        { id: 'Dahlia', style: { x: 323, y: 170, label: 'Dahlia' } },\n        { id: 'Zephine', style: { x: 306, y: 114, label: 'Zephine' } },\n        { id: 'Fantine', style: { x: 357, y: 187, label: 'Fantine' } },\n\n        // 右侧区域\n        { id: 'Bamatabois', style: { x: 411, y: 156, label: 'Bamatabois' } },\n        { id: 'Perpetue', style: { x: 454, y: 195, label: 'Perpetue' } },\n        { id: 'Simplice', style: { x: 406, y: 227, label: 'Simplice' } },\n\n        // 下部区域\n        { id: 'Cosette', style: { x: 343, y: 248, label: 'Cosette' } },\n        { id: 'Javert', style: { x: 388, y: 263, label: 'Javert' } },\n        { id: 'Fauchelevent', style: { x: 397, y: 276, label: 'Fauchelevent' } },\n        { id: 'Thenardier', style: { x: 317, y: 300, label: 'Thenardier' } },\n        { id: 'Eponine', style: { x: 268, y: 365, label: 'Eponine' } },\n        { id: 'Anzelma', style: { x: 234, y: 303, label: 'Anzelma' } },\n        { id: 'Woman2', style: { x: 304, y: 254, label: 'Woman2' } },\n\n        // 最右侧独立节点\n        { id: 'Gribier', style: { x: 457, y: 160, label: 'Gribier' } },\n        { id: 'Jondrette', style: { x: 510, y: 327, label: 'Jondrette' } },\n      ],\n      edges: [\n        // 上部连接\n        { id: 'e1', source: 'Myriel', target: 'CountessdeLo' },\n        { id: 'e2', source: 'Napoleon', target: 'Myriel' },\n        { id: 'e3', source: 'Geborand', target: 'Napoleon' },\n        { id: 'e4', source: 'Champtercier', target: 'Myriel' },\n        { id: 'e5', source: 'Cravatte', target: 'CountessdeLo' },\n\n        // 中上部连接\n        { id: 'e6', source: 'Mlle.Baptistine', target: 'Mme.Magloire' },\n        { id: 'e7', source: 'Labarre', target: 'Valjean' },\n        { id: 'e8', source: 'Valjean', target: 'Marguerite' },\n        { id: 'e9', source: 'Marguerite', target: 'Mme.Magloire' },\n\n        // 中部密集连接\n        { id: 'e10', source: 'Tholomyes', target: 'Listolier' },\n        { id: 'e11', source: 'Listolier', target: 'Fameuil' },\n        { id: 'e12', source: 'Fameuil', target: 'Blacheville' },\n        { id: 'e13', source: 'Blacheville', target: 'Favourite' },\n        { id: 'e14', source: 'Favourite', target: 'Dahlia' },\n        { id: 'e15', source: 'Dahlia', target: 'Zephine' },\n        { id: 'e16', source: 'Zephine', target: 'Fantine' },\n        { id: 'e17', source: 'Tholomyes', target: 'Fantine' },\n        { id: 'e18', source: 'Valjean', target: 'Fantine' },\n\n        // 右侧连接\n        { id: 'e19', source: 'Bamatabois', target: 'Perpetue' },\n        { id: 'e20', source: 'Perpetue', target: 'Simplice' },\n        { id: 'e21', source: 'Bamatabois', target: 'Gribier' },\n\n        // 下部连接\n        { id: 'e22', source: 'Valjean', target: 'Cosette' },\n        { id: 'e23', source: 'Cosette', target: 'Javert' },\n        { id: 'e24', source: 'Javert', target: 'Fauchelevent' },\n        { id: 'e25', source: 'Fauchelevent', target: 'Thenardier' },\n        { id: 'e26', source: 'Thenardier', target: 'Eponine' },\n        { id: 'e27', source: 'Eponine', target: 'Anzelma' },\n        { id: 'e28', source: 'Woman2', target: 'Cosette' },\n\n        // 跨区域连接\n        { id: 'e29', source: 'Fantine', target: 'Bamatabois' },\n        { id: 'e30', source: 'Javert', target: 'Bamatabois' },\n        { id: 'e31', source: 'Simplice', target: 'Jondrette' },\n        { id: 'e32', source: 'Thenardier', target: 'Jondrette' },\n        { id: 'e33', source: 'Favourite', target: 'Valjean' },\n        { id: 'e34', source: 'Tholomyes', target: 'Cosette' },\n      ],\n    },\n    node: {\n      style: {\n        label: true,\n        size: 16,\n      },\n      palette: {\n        field: (datum) => Math.floor(datum.style?.y / 60),\n      },\n    },\n    edge: {\n      style: {\n        label: true,\n        labelText: (d) => d.data.value?.toString(),\n        stroke: '#ccc',\n        endArrow: true,\n        endArrowType: 'triangle',\n      },\n    },\n    plugins: [\n      {\n        type: 'edge-filter-lens',\n        key: 'edge-filter-lens',\n        r: 80,\n        trigger: 'pointermove',\n      },\n    ],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const TRIGGER_TYPES = ['pointermove', 'click', 'drag'];\n    const NODE_TYPES = ['both', 'source', 'target', 'either'];\n\n    const options = {\n      type: 'edge-filter-lens',\n      r: 80, // 透镜半径\n      trigger: 'pointermove', // 触发方式\n      nodeType: 'both', // 边显示条件\n      minR: 50, // 最小半径\n      maxR: 150, // 最大半径\n      scaleRBy: 'wheel', // 缩放方式\n      style: {\n        fill: '#f0f5ff',\n        fillOpacity: 0.4,\n        stroke: '#1d39c4',\n        strokeOpacity: 0.8,\n        lineWidth: 1.5,\n      },\n      nodeStyle: {\n        size: 35,\n        fill: '#d6e4ff',\n        stroke: '#2f54eb',\n        lineWidth: 2,\n        labelFontSize: 14,\n        labelFontWeight: 'bold',\n        labelFill: '#1d39c4',\n      },\n      edgeStyle: {\n        stroke: '#1d39c4',\n        lineWidth: 2,\n        strokeOpacity: 0.8,\n      },\n    };\n\n    const optionFolder = gui.addFolder('Edge Filter Lens Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'r', 50, 150, 5);\n    optionFolder.add(options, 'trigger', TRIGGER_TYPES);\n    optionFolder.add(options, 'nodeType', NODE_TYPES);\n    optionFolder.add(options, 'minR', 20, 100, 5);\n    optionFolder.add(options, 'maxR', 100, 200, 5);\n\n    optionFolder.onChange(({ property, value }) => {\n      if (property.includes('.')) {\n        const [group, prop] = property.split('.');\n        graph.updatePlugin({\n          key: 'edge-filter-lens',\n          [group]: {\n            ...options[group],\n            [prop]: value,\n          },\n        });\n      } else {\n        graph.updatePlugin({\n          key: 'edge-filter-lens',\n          [property]: value,\n        });\n      }\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"必选",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"插件类型",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"edge-filter-lens",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"trigger",paraId:5,tocIndex:4},{value:"移动透镜的方式：",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"：透镜始终跟随鼠标移动 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:"：点击画布时移动透镜到点击位置 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"：通过拖拽方式移动透镜",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"r",paraId:5,tocIndex:4},{value:"透镜的半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"60",paraId:5,tocIndex:4},{value:"maxR",paraId:5,tocIndex:4},{value:"透镜的最大半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"画布宽高最小值的一半",paraId:5,tocIndex:4},{value:"minR",paraId:5,tocIndex:4},{value:"透镜的最小半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"scaleRBy",paraId:5,tocIndex:4},{value:"缩放透镜半径的方式：",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:"：通过滚轮缩放透镜的半径",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"nodeType",paraId:5,tocIndex:4},{value:"边显示的条件：",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:"：只有起始节点和目标节点都在透镜中时，边才会显示 ",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"source",paraId:5,tocIndex:4},{value:"：只有起始节点在透镜中时，边才会显示",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"target",paraId:5,tocIndex:4},{value:"：只有目标节点在透镜中时，边才会显示 ",paraId:5,tocIndex:4},{value:" - ",paraId:5,tocIndex:4},{value:"either",paraId:5,tocIndex:4},{value:"：只要起始节点或目标节点有一个在透镜中时，边就会显示",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"source",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"target",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"either",paraId:5,tocIndex:4},{value:"both",paraId:5,tocIndex:4},{value:"filter",paraId:5,tocIndex:4},{value:"过滤出始终不在透镜中显示的元素",paraId:5,tocIndex:4},{value:"(id: string, elementType: ",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"edge",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"combo",paraId:5,tocIndex:4},{value:") => boolean",paraId:5,tocIndex:4},{value:"() => true",paraId:5,tocIndex:4},{value:"style",paraId:5,tocIndex:4},{value:"透镜的样式，",paraId:5,tocIndex:4},{value:"配置项",paraId:6,tocIndex:4},{value:"object",paraId:5,tocIndex:4},{value:"nodeStyle",paraId:5,tocIndex:4},{value:"在透镜中节点的样式",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:7,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"NodeData",paraId:8,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:9,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: false }",paraId:5,tocIndex:4},{value:"edgeStyle",paraId:5,tocIndex:4},{value:"在透镜中边的样式",paraId:5,tocIndex:4},{value:"EdgeStyle",paraId:10,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"EdgeData",paraId:11,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"EdgeStyle",paraId:12,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: true }",paraId:5,tocIndex:4},{value:"preventDefault",paraId:5,tocIndex:4},{value:"是否阻止默认事件",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"圆形透镜的样式属性。",paraId:13,tocIndex:5},{value:"属性",paraId:14,tocIndex:5},{value:"描述",paraId:14,tocIndex:5},{value:"类型",paraId:14,tocIndex:5},{value:"默认值",paraId:14,tocIndex:5},{value:"fill",paraId:14,tocIndex:5},{value:"填充颜色",paraId:14,tocIndex:5},{value:"string | Pattern | null",paraId:14,tocIndex:5},{value:"#fff",paraId:14,tocIndex:5},{value:"stroke",paraId:14,tocIndex:5},{value:"描边颜色",paraId:14,tocIndex:5},{value:"string | Pattern | null",paraId:14,tocIndex:5},{value:"#000",paraId:14,tocIndex:5},{value:"opacity",paraId:14,tocIndex:5},{value:"整体透明度",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"1",paraId:14,tocIndex:5},{value:"fillOpacity",paraId:14,tocIndex:5},{value:"填充透明度",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"0.8",paraId:14,tocIndex:5},{value:"strokeOpacity",paraId:14,tocIndex:5},{value:"描边透明度",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"lineWidth",paraId:14,tocIndex:5},{value:"线宽度",paraId:14,tocIndex:5},{value:"number | string",paraId:14,tocIndex:5},{value:"2",paraId:14,tocIndex:5},{value:"lineCap",paraId:14,tocIndex:5},{value:"线段端点样式",paraId:14,tocIndex:5},{value:"butt",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"round",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"square",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"lineJoin",paraId:14,tocIndex:5},{value:"线段连接处样式",paraId:14,tocIndex:5},{value:"miter",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"round",paraId:14,tocIndex:5},{value:" | ",paraId:14,tocIndex:5},{value:"bevel",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowColor",paraId:14,tocIndex:5},{value:"阴影颜色",paraId:14,tocIndex:5},{value:"string",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowBlur",paraId:14,tocIndex:5},{value:"阴影模糊程度",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowOffsetX",paraId:14,tocIndex:5},{value:"阴影 X 方向偏移",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"shadowOffsetY",paraId:14,tocIndex:5},{value:"阴影 Y 方向偏移",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:"-",paraId:14,tocIndex:5},{value:"完整样式属性参考 ",paraId:15,tocIndex:5},{value:"元素 -节点 - 内置节点 - 通用样式属性 - style",paraId:16,tocIndex:5},{value:"最简单的配置方式：",paraId:17,tocIndex:7},{value:"const graph = new Graph({\n  plugins: ['edge-filter-lens'],\n});\n",paraId:18,tocIndex:7},{value:"效果如下：",paraId:19,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      // 上部疏散区域\n      { id: 'node1', style: { x: 150, y: 60, label: 'Node 1' } },\n      { id: 'node2', style: { x: 100, y: 40, label: 'Node 2' } },\n      { id: 'node3', style: { x: 200, y: 35, label: 'Node 3' } },\n      { id: 'node4', style: { x: 150, y: 30, label: 'Node 4' } },\n\n      // 中部区域\n      { id: 'node5', style: { x: 220, y: 140, label: 'Node 5' } },\n      { id: 'node6', style: { x: 280, y: 160, label: 'Node 6' } },\n      { id: 'node7', style: { x: 220, y: 120, label: 'Node 7' } },\n      { id: 'node8', style: { x: 260, y: 100, label: 'Node 8' } },\n      { id: 'node9', style: { x: 240, y: 130, label: 'Node 9' } },\n      { id: 'node10', style: { x: 300, y: 110, label: 'Node 10' } },\n\n      // 下部区域\n      { id: 'node11', style: { x: 240, y: 200, label: 'Node 11' } },\n      { id: 'node12', style: { x: 280, y: 220, label: 'Node 12' } },\n      { id: 'node13', style: { x: 300, y: 190, label: 'Node 13' } },\n      { id: 'node14', style: { x: 320, y: 210, label: 'Node 14' } },\n    ],\n    edges: [\n      // 上部连接\n      { id: 'edge1', source: 'node1', target: 'node2' },\n      { id: 'edge2', source: 'node2', target: 'node3' },\n      { id: 'edge3', source: 'node3', target: 'node4' },\n\n      // 中部连接\n      { id: 'edge4', source: 'node5', target: 'node6' },\n      { id: 'edge5', source: 'node6', target: 'node7' },\n      { id: 'edge6', source: 'node7', target: 'node8' },\n      { id: 'edge7', source: 'node8', target: 'node9' },\n      { id: 'edge8', source: 'node9', target: 'node10' },\n\n      // 下部连接\n      { id: 'edge9', source: 'node11', target: 'node12' },\n      { id: 'edge10', source: 'node12', target: 'node13' },\n      { id: 'edge11', source: 'node13', target: 'node14' },\n\n      // 跨区域连接\n      { id: 'edge12', source: 'node4', target: 'node8' },\n      { id: 'edge13', source: 'node7', target: 'node11' },\n      { id: 'edge14', source: 'node10', target: 'node13' },\n    ],\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n  },\n  plugins: ['edge-filter-lens'],\n});\n\ngraph.render();\n",paraId:20,tocIndex:7},{value:"可以自定义透镜的外观和行为：",paraId:21,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      r: 80,\n      style: {\n        fill: '#f0f5ff', // 透镜区域的填充颜色\n        fillOpacity: 0.6, // 填充区域的透明度\n        stroke: '#7e3feb', // 透镜边框改为紫色\n        strokeOpacity: 0.8, // 边框的透明度\n        lineWidth: 1.5, // 边框的线宽\n      },\n      nodeStyle: {\n        size: 24, // 放大节点\n        fill: '#7e3feb', // 紫色填充\n        stroke: '#5719c9', // 深紫色描边\n        lineWidth: 1, // 细边框\n        label: true, // 显示标签\n        labelFill: '#ffffff', // 白色文字\n        labelFontSize: 14, // 放大文字\n        labelFontWeight: 'bold', // 文字加粗\n      },\n      edgeStyle: {\n        stroke: '#8b9baf', // 灰色边\n        lineWidth: 2, // 加粗边线\n        label: true, // 显示标签\n        labelFill: '#5719c9', // 深紫色文字\n        opacity: 0.8, // 适当的透明度\n      },\n    },\n  ],\n});\n",paraId:22,tocIndex:8},{value:"效果如下：",paraId:23,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      // 上部疏散区域\n      { id: 'node1', style: { x: 150, y: 60, label: 'Node 1' } },\n      { id: 'node2', style: { x: 100, y: 40, label: 'Node 2' } },\n      { id: 'node3', style: { x: 200, y: 35, label: 'Node 3' } },\n      { id: 'node4', style: { x: 150, y: 30, label: 'Node 4' } },\n\n      // 中部区域\n      { id: 'node5', style: { x: 220, y: 140, label: 'Node 5' } },\n      { id: 'node6', style: { x: 280, y: 160, label: 'Node 6' } },\n      { id: 'node7', style: { x: 220, y: 120, label: 'Node 7' } },\n      { id: 'node8', style: { x: 260, y: 100, label: 'Node 8' } },\n      { id: 'node9', style: { x: 240, y: 130, label: 'Node 9' } },\n      { id: 'node10', style: { x: 300, y: 110, label: 'Node 10' } },\n\n      // 下部区域\n      { id: 'node11', style: { x: 240, y: 200, label: 'Node 11' } },\n      { id: 'node12', style: { x: 280, y: 220, label: 'Node 12' } },\n      { id: 'node13', style: { x: 300, y: 190, label: 'Node 13' } },\n      { id: 'node14', style: { x: 320, y: 210, label: 'Node 14' } },\n    ],\n    edges: [\n      // 上部连接\n      { id: 'edge1', source: 'node1', target: 'node2' },\n      { id: 'edge2', source: 'node2', target: 'node3' },\n      { id: 'edge3', source: 'node3', target: 'node4' },\n\n      // 中部连接\n      { id: 'edge4', source: 'node5', target: 'node6' },\n      { id: 'edge5', source: 'node6', target: 'node7' },\n      { id: 'edge6', source: 'node7', target: 'node8' },\n      { id: 'edge7', source: 'node8', target: 'node9' },\n      { id: 'edge8', source: 'node9', target: 'node10' },\n\n      // 下部连接\n      { id: 'edge9', source: 'node11', target: 'node12' },\n      { id: 'edge10', source: 'node12', target: 'node13' },\n      { id: 'edge11', source: 'node13', target: 'node14' },\n\n      // 跨区域连接\n      { id: 'edge12', source: 'node4', target: 'node8' },\n      { id: 'edge13', source: 'node7', target: 'node11' },\n      { id: 'edge14', source: 'node10', target: 'node13' },\n    ],\n  },\n  node: {\n    style: {\n      size: 20,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 1,\n    },\n  },\n  plugins: [\n    {\n      type: 'edge-filter-lens',\n      r: 80,\n      style: {\n        fill: '#f0f5ff', // 透镜区域的填充颜色\n        fillOpacity: 0.6, // 填充区域的透明度\n        stroke: '#7e3feb', // 透镜边框改为紫色\n        strokeOpacity: 0.8, // 边框的透明度\n        lineWidth: 1.5, // 边框的线宽\n      },\n      nodeStyle: {\n        size: 24, // 放大节点\n        fill: '#7e3feb', // 紫色填充\n        stroke: '#5719c9', // 深紫色描边\n        lineWidth: 1, // 细边框\n        label: true, // 显示标签\n        labelFill: '#ffffff', // 白色文字\n        labelFontSize: 14, // 放大文字\n        labelFontWeight: 'bold', // 文字加粗\n      },\n      edgeStyle: {\n        stroke: '#8b9baf', // 灰色边\n        lineWidth: 2, // 加粗边线\n        label: true, // 显示标签\n        labelFill: '#5719c9', // 深紫色文字\n        opacity: 0.8, // 适当的透明度\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:24,tocIndex:8},{value:"边过滤镜",paraId:25,tocIndex:9}]},74633:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39738);const d=[{value:"鱼眼放大镜插件是为 focus+context 的探索场景设计的，它能够在放大关注区域的同时，保证上下文以及上下文与关注中心的关系不丢失，是一个重要的可视化探索工具。",paraId:0,tocIndex:0},{value:"在演示过程中需要突出展示某些区域内容",paraId:1,tocIndex:1},{value:"需要局部放大查看细节时，同时又不想失去整体视图",paraId:1,tocIndex:1},{value:"以下是一个简单的 Fisheye 插件初始化示例：",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      trigger: 'drag', // 通过拖拽移动鱼眼\n      d: 1.5, // 设置畸变因子\n      r: 120, // 设置鱼眼半径\n      showDPercent: true, // 显示畸变程度\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        // 上部节点\n        { id: 'Myriel', style: { x: 197, y: 58 } },\n        { id: 'Napoleon', style: { x: 147, y: 22 } },\n        { id: 'Mlle.Baptistine', style: { x: 225, y: 141 } },\n        { id: 'Mme.Magloire', style: { x: 255, y: 120 } },\n        { id: 'CountessdeLo', style: { x: 151, y: -3 } },\n        { id: 'Geborand', style: { x: 136, y: 41 } },\n        { id: 'Champtercier', style: { x: 227, y: 8 } },\n        { id: 'Cravatte', style: { x: 172, y: -10 } },\n        { id: 'Count', style: { x: 172, y: 12 } },\n        { id: 'OldMan', style: { x: 198, y: -6 } },\n        // 中上部节点\n        { id: 'Labarre', style: { x: 266, y: 203 } },\n        { id: 'Marguerite', style: { x: 265, y: 171 } },\n        { id: 'Mme.deR', style: { x: 299, y: 133 } },\n        { id: 'Isabeau', style: { x: 282, y: 191 } },\n        { id: 'Gervais', style: { x: 334, y: 148 } },\n        { id: 'Simplice', style: { x: 286, y: 227 } },\n        { id: 'Scaufflaire', style: { x: 250, y: 231 } },\n        { id: 'Woman1', style: { x: 375, y: 202 } },\n        { id: 'Judge', style: { x: 370, y: 139 } },\n        { id: 'Champmathieu', style: { x: 404, y: 216 } },\n        // 中部主要节点\n        { id: 'Valjean', style: { x: 322, y: 221 } },\n        { id: 'Fantine', style: { x: 337, y: 187 } },\n        { id: 'Cosette', style: { x: 343, y: 248 } },\n        { id: 'Javert', style: { x: 368, y: 263 } },\n        { id: 'Thenardier', style: { x: 317, y: 300 } },\n        { id: 'Mme.Thenardier', style: { x: 283, y: 267 } },\n        { id: 'Eponine', style: { x: 268, y: 365 } },\n        { id: 'Gavroche', style: { x: 393, y: 380 } },\n        { id: 'Marius', style: { x: 336, y: 350 } },\n        { id: 'Enjolras', style: { x: 376, y: 371 } },\n        // 右侧和右上节点\n        { id: 'Gribier', style: { x: 437, y: 160 } },\n        { id: 'Jondrette', style: { x: 510, y: 327 } },\n        { id: 'Mme.Burgon', style: { x: 466, y: 368 } },\n        { id: 'Brevet', style: { x: 399, y: 183 } },\n        { id: 'Chenildieu', style: { x: 425, y: 194 } },\n        { id: 'Cochepaille', style: { x: 419, y: 148 } },\n        { id: 'Child1', style: { x: 361, y: 387 } },\n        { id: 'Child2', style: { x: 415, y: 432 } },\n        { id: 'Brujon', style: { x: 330, y: 394 } },\n        { id: 'Mme.Hucheloup', style: { x: 394, y: 450 } },\n        // 中部其他节点\n        { id: 'Favourite', style: { x: 284, y: 153 } },\n        { id: 'Dahlia', style: { x: 303, y: 170 } },\n        { id: 'Zephine', style: { x: 286, y: 94 } },\n        { id: 'Tholomyes', style: { x: 359, y: 158 } },\n        { id: 'Listolier', style: { x: 308, y: 80 } },\n        { id: 'Fameuil', style: { x: 329, y: 89 } },\n        { id: 'Blacheville', style: { x: 351, y: 95 } },\n        { id: 'Perpetue', style: { x: 234, y: 195 } },\n        { id: 'Woman2', style: { x: 304, y: 254 } },\n        { id: 'MotherInnocent', style: { x: 350, y: 214 } },\n        // 下部节点\n        { id: 'Pontmercy', style: { x: 375, y: 307 } },\n        { id: 'Boulatruelle', style: { x: 260, y: 279 } },\n        { id: 'Anzelma', style: { x: 234, y: 303 } },\n        { id: 'Gillenormand', style: { x: 338, y: 286 } },\n        { id: 'Magnon', style: { x: 277, y: 317 } },\n        { id: 'Mlle.Gillenormand', style: { x: 257, y: 306 } },\n        { id: 'Mme.Pontmercy', style: { x: 307, y: 318 } },\n        { id: 'Mlle.Vaubois', style: { x: 197, y: 325 } },\n        { id: 'Lt.Gillenormand', style: { x: 294, y: 296 } },\n        { id: 'Toussaint', style: { x: 306, y: 277 } },\n        { id: 'Gueulemer', style: { x: 344, y: 323 } },\n        { id: 'Babet', style: { x: 367, y: 319 } },\n        { id: 'Claquesous', style: { x: 303, y: 347 } },\n        { id: 'Montparnasse', style: { x: 322, y: 330 } },\n        // 最下部节点\n        { id: 'Combeferre', style: { x: 397, y: 416 } },\n        { id: 'Prouvaire', style: { x: 309, y: 426 } },\n        { id: 'Feuilly', style: { x: 314, y: 456 } },\n        { id: 'Courfeyrac', style: { x: 332, y: 435 } },\n        { id: 'Bahorel', style: { x: 343, y: 466 } },\n        { id: 'Bossuet', style: { x: 305, y: 382 } },\n        { id: 'Joly', style: { x: 371, y: 415 } },\n        { id: 'Grantaire', style: { x: 370, y: 466 } },\n        { id: 'MotherPlutarch', style: { x: 424, y: 461 } },\n      ],\n      edges: [\n        // 主要连接\n        { id: 'e1', source: 'Valjean', target: 'Javert' },\n        { id: 'e2', source: 'Valjean', target: 'Cosette' },\n        { id: 'e3', source: 'Javert', target: 'Thenardier' },\n        { id: 'e4', source: 'Cosette', target: 'Marius' },\n        { id: 'e5', source: 'Eponine', target: 'Marius' },\n        { id: 'e6', source: 'Enjolras', target: 'Marius' },\n        { id: 'e7', source: 'Gavroche', target: 'Enjolras' },\n        { id: 'e8', source: 'Valjean', target: 'Fantine' },\n        { id: 'e9', source: 'Cosette', target: 'Thenardier' },\n        { id: 'e10', source: 'Eponine', target: 'Thenardier' },\n        // 上部连接\n        { id: 'e11', source: 'Myriel', target: 'Napoleon' },\n        { id: 'e12', source: 'Myriel', target: 'Mlle.Baptistine' },\n        { id: 'e13', source: 'Mlle.Baptistine', target: 'Mme.Magloire' },\n        { id: 'e14', source: 'CountessdeLo', target: 'Myriel' },\n        { id: 'e15', source: 'Geborand', target: 'Myriel' },\n        // 中部连接\n        { id: 'e16', source: 'Favourite', target: 'Tholomyes' },\n        { id: 'e17', source: 'Dahlia', target: 'Favourite' },\n        { id: 'e18', source: 'Zephine', target: 'Favourite' },\n        { id: 'e19', source: 'Tholomyes', target: 'Listolier' },\n        { id: 'e20', source: 'Fameuil', target: 'Blacheville' },\n        // 下部连接\n        { id: 'e21', source: 'Combeferre', target: 'Enjolras' },\n        { id: 'e22', source: 'Prouvaire', target: 'Combeferre' },\n        { id: 'e23', source: 'Feuilly', target: 'Courfeyrac' },\n        { id: 'e24', source: 'Bahorel', target: 'Bossuet' },\n        { id: 'e25', source: 'Joly', target: 'Grantaire' },\n        // 额外的中部连接\n        { id: 'e26', source: 'Gueulemer', target: 'Thenardier' },\n        { id: 'e27', source: 'Babet', target: 'Gueulemer' },\n        { id: 'e28', source: 'Claquesous', target: 'Montparnasse' },\n        { id: 'e29', source: 'Brujon', target: 'Babet' },\n        { id: 'e30', source: 'Child1', target: 'Gavroche' },\n        // 新增更多连接\n        { id: 'e31', source: 'Valjean', target: 'Simplice' },\n        { id: 'e32', source: 'Fantine', target: 'Simplice' },\n        { id: 'e33', source: 'Javert', target: 'Simplice' },\n        { id: 'e34', source: 'Marius', target: 'Gillenormand' },\n        { id: 'e35', source: 'Cosette', target: 'Gillenormand' },\n        { id: 'e36', source: 'Marius', target: 'Lt.Gillenormand' },\n        { id: 'e37', source: 'Gillenormand', target: 'Lt.Gillenormand' },\n        { id: 'e38', source: 'Cosette', target: 'Toussaint' },\n        { id: 'e39', source: 'Javert', target: 'Toussaint' },\n        { id: 'e40', source: 'Valjean', target: 'Toussaint' },\n        // 随机添加更多连接\n        ...Array.from({ length: 50 }, (_, i) => ({\n          // 从40增加到50个随机连接\n          id: `edge-${i + 41}`,\n          source: [\n            'Valjean',\n            'Javert',\n            'Cosette',\n            'Marius',\n            'Enjolras',\n            'Fantine',\n            'Thenardier',\n            'Eponine',\n            'Gavroche',\n            'Gueulemer',\n            'Babet',\n            'Claquesous',\n            'Favourite',\n            'Tholomyes',\n            'Simplice',\n          ][Math.floor(Math.random() * 15)],\n          target: [\n            'Favourite',\n            'Dahlia',\n            'Tholomyes',\n            'Combeferre',\n            'Prouvaire',\n            'Feuilly',\n            'Courfeyrac',\n            'Bahorel',\n            'Bossuet',\n            'Montparnasse',\n            'Brujon',\n            'Child1',\n            'Simplice',\n            'Toussaint',\n            'Gillenormand',\n          ][Math.floor(Math.random() * 15)],\n        })),\n      ],\n    },\n    autoFit: 'view',\n    node: {\n      style: {\n        size: (datum) => datum.id.length * 2 + 10,\n        label: false,\n        labelText: (datum) => datum.id,\n        labelBackground: true,\n        icon: false,\n        iconFontFamily: 'iconfont',\n        iconText: '\\ue6f6',\n        iconFill: '#fff',\n      },\n      palette: {\n        type: 'group',\n        field: (datum) => datum.id,\n        color: ['#1783FF', '#00C9C9', '#F08F56', '#D580FF'],\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#bfbfbf',\n      },\n    },\n    behaviors: ['drag-canvas'],\n    plugins: [\n      {\n        type: 'fisheye',\n        key: 'fisheye',\n        r: 120,\n        d: 1.5,\n        nodeStyle: {\n          label: true,\n          icon: true,\n        },\n      },\n    ],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const TRIGGER_OPTIONS = ['pointermove', 'drag', 'click'];\n    const SCALE_OPTIONS = ['wheel', 'drag', '-'];\n\n    const options = {\n      type: 'fisheye',\n      trigger: 'pointermove',\n      r: 120,\n      d: 1.5,\n      maxR: 200,\n      minR: 50,\n      maxD: 5,\n      minD: 0.5,\n      scaleRBy: '-',\n      scaleDBy: '-',\n      showDPercent: true,\n      preventDefault: true,\n    };\n\n    const optionFolder = gui.addFolder('Fisheye Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'trigger', TRIGGER_OPTIONS);\n    optionFolder.add(options, 'r', 50, 200, 10);\n    optionFolder.add(options, 'd', 0.5, 5, 0.1);\n    optionFolder.add(options, 'scaleRBy', SCALE_OPTIONS);\n    optionFolder.add(options, 'scaleDBy', SCALE_OPTIONS);\n    optionFolder.add(options, 'showDPercent');\n    optionFolder.add(options, 'preventDefault');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'fisheye',\n        [property]: value === '-' ? undefined : value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"必选",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"插件类型",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"fisheye",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"trigger",paraId:5,tocIndex:4},{value:"用于控制鱼眼放大镜的移动方式，支持以下三种配置：",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"：鱼眼放大镜始终跟随鼠标移动 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:"：点击画布时移动鱼眼放大镜到点击位置 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"：通过拖拽方式移动鱼眼放大镜",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"click",paraId:5,tocIndex:4},{value:"pointermove",paraId:5,tocIndex:4},{value:"r",paraId:5,tocIndex:4},{value:"鱼眼放大镜半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"120",paraId:5,tocIndex:4},{value:"maxR",paraId:5,tocIndex:4},{value:"鱼眼放大镜可调整的最大半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"画布宽高的最小值的一半",paraId:5,tocIndex:4},{value:"minR",paraId:5,tocIndex:4},{value:"鱼眼放大镜可调整的最小半径",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"d",paraId:5,tocIndex:4},{value:"畸变因子",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"1.5",paraId:5,tocIndex:4},{value:"maxD",paraId:5,tocIndex:4},{value:"鱼眼放大镜可调整的最大畸变因子",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"5",paraId:5,tocIndex:4},{value:"minD",paraId:5,tocIndex:4},{value:"鱼眼放大镜可调整的最小畸变因子",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0",paraId:5,tocIndex:4},{value:"scaleRBy",paraId:5,tocIndex:4},{value:"调整鱼眼放大镜范围半径的方式：",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'wheel'",paraId:5,tocIndex:4},{value:"：滚轮调整 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'drag'",paraId:5,tocIndex:4},{value:"：拖拽调整",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"scaleDBy",paraId:5,tocIndex:4},{value:"调整鱼眼放大镜畸变因子的方式：",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'wheel'",paraId:5,tocIndex:4},{value:"：滚轮调整 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"'drag'",paraId:5,tocIndex:4},{value:"：拖拽调整",paraId:5,tocIndex:4},{value:"wheel",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"drag",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"showDPercent",paraId:5,tocIndex:4},{value:"是否在鱼眼放大镜中显示畸变因子数值",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"style",paraId:5,tocIndex:4},{value:"鱼眼放大镜样式，",paraId:5,tocIndex:4},{value:"配置项",paraId:6,tocIndex:4},{value:"object",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"nodeStyle",paraId:5,tocIndex:4},{value:"在鱼眼放大镜中的节点样式",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:7,tocIndex:4},{value:" | ((datum: ",paraId:5,tocIndex:4},{value:"NodeData",paraId:8,tocIndex:4},{value:") => ",paraId:5,tocIndex:4},{value:"NodeStyle",paraId:9,tocIndex:4},{value:")",paraId:5,tocIndex:4},{value:"{ label: true }",paraId:5,tocIndex:4},{value:"preventDefault",paraId:5,tocIndex:4},{value:"是否阻止默认事件",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"圆形样式属性，用于配置鱼眼放大镜的外观。",paraId:10,tocIndex:5},{value:"属性",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"fill",paraId:11,tocIndex:5},{value:"填充颜色",paraId:11,tocIndex:5},{value:"string | Pattern | null",paraId:11,tocIndex:5},{value:"#ccc",paraId:11,tocIndex:5},{value:"stroke",paraId:11,tocIndex:5},{value:"描边颜色",paraId:11,tocIndex:5},{value:"string | Pattern | null",paraId:11,tocIndex:5},{value:"#000",paraId:11,tocIndex:5},{value:"opacity",paraId:11,tocIndex:5},{value:"整体透明度",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"fillOpacity",paraId:11,tocIndex:5},{value:"填充透明度",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"0.1",paraId:11,tocIndex:5},{value:"strokeOpacity",paraId:11,tocIndex:5},{value:"描边透明度",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"lineWidth",paraId:11,tocIndex:5},{value:"线宽度",paraId:11,tocIndex:5},{value:"number | string",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"lineCap",paraId:11,tocIndex:5},{value:"线段端点样式",paraId:11,tocIndex:5},{value:"butt",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"round",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"square",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"lineJoin",paraId:11,tocIndex:5},{value:"线段连接处样式",paraId:11,tocIndex:5},{value:"miter",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"round",paraId:11,tocIndex:5},{value:" | ",paraId:11,tocIndex:5},{value:"bevel",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowColor",paraId:11,tocIndex:5},{value:"阴影颜色",paraId:11,tocIndex:5},{value:"string",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowBlur",paraId:11,tocIndex:5},{value:"阴影模糊程度",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowOffsetX",paraId:11,tocIndex:5},{value:"阴影 X 方向偏移",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"shadowOffsetY",paraId:11,tocIndex:5},{value:"阴影 Y 方向偏移",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"完整样式属性参考 ",paraId:12,tocIndex:5},{value:"元素 -节点 - 内置节点 - 通用样式属性 - style",paraId:13,tocIndex:5},{value:"通过 ",paraId:14,tocIndex:6},{value:"scaleRBy",paraId:14,tocIndex:6},{value:" 和 ",paraId:14,tocIndex:6},{value:"scaleDBy",paraId:14,tocIndex:6},{value:" 可以分别控制鱼眼放大镜的半径和畸变因子的调整方式：",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      // 通过滚轮调整半径\n      scaleRBy: 'wheel',\n      // 通过拖拽调整畸变因子\n      scaleDBy: 'drag',\n      // 设置半径和畸变因子的范围\n      minR: 50,\n      maxR: 200,\n      minD: 1,\n      maxD: 3,\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"注意：当 ",paraId:16,tocIndex:6},{value:"trigger",paraId:16,tocIndex:6},{value:"、",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" 和 ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:" 同时设置为 ",paraId:16,tocIndex:6},{value:"'drag'",paraId:16,tocIndex:6},{value:" 时，优先级顺序为 ",paraId:16,tocIndex:6},{value:"trigger",paraId:16,tocIndex:6},{value:" > ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" > ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:"，只会为优先级最高的配置项绑定拖拽事件。同理，如果 ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" 和 ",paraId:16,tocIndex:6},{value:"scaleDBy",paraId:16,tocIndex:6},{value:" 同时设置为 ",paraId:16,tocIndex:6},{value:"'wheel'",paraId:16,tocIndex:6},{value:"，只会为 ",paraId:16,tocIndex:6},{value:"scaleRBy",paraId:16,tocIndex:6},{value:" 绑定滚轮事件。",paraId:16,tocIndex:6},{value:"最简单的配置方式：",paraId:17,tocIndex:8},{value:"const graph = new Graph({\n  plugins: ['fisheye'],\n});\n",paraId:18,tocIndex:8},{value:"可以自定义鱼眼放大镜的外观和行为：",paraId:19,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fisheye',\n      r: 150,\n      d: 2,\n      style: {\n        fill: '#2f54eb', // 鱼眼区域的填充颜色\n        fillOpacity: 0.2, // 填充区域的透明度\n        stroke: '#1d39c4', // 鱼眼边框的颜色\n        strokeOpacity: 0.8, // 边框的透明度\n        lineWidth: 1.5, // 边框的线宽\n        shadowColor: '#1d39c4', // 阴影颜色\n        shadowBlur: 10, // 阴影的模糊半径\n        shadowOffsetX: 0, // 阴影的水平偏移\n        shadowOffsetY: 0, // 阴影的垂直偏移\n        cursor: 'pointer', // 鼠标悬停时的指针样式\n      },\n      nodeStyle: {\n        // 节点基础样式\n        size: 40, // 节点大小\n        fill: '#d6e4ff', // 节点填充颜色\n        stroke: '#2f54eb', // 节点边框颜色\n        lineWidth: 2, // 节点边框宽度\n        shadowColor: '#2f54eb', // 节点阴影颜色\n        shadowBlur: 5, // 节点阴影模糊半径\n        cursor: 'pointer', // 鼠标悬停时的指针样式\n\n        // 标签样式\n        label: true, // 是否显示标签\n        labelFontSize: 14, // 标签字体大小\n        labelFontWeight: 'bold', // 标签字体粗细\n        labelFill: '#1d39c4', // 标签文字颜色\n        labelBackground: true, // 是否显示标签背景\n        labelBackgroundFill: '#fff', // 标签背景填充颜色\n        labelBackgroundStroke: '#1d39c4', // 标签背景边框颜色\n        labelBackgroundOpacity: 0.8, // 标签背景透明度\n        labelBackgroundPadding: [4, 8, 4, 8], // 标签背景内边距 [上,右,下,左]\n\n        // 图标样式\n        icon: true, // 是否显示图标\n        iconFontFamily: 'iconfont', // 图标字体\n        iconText: '\\ue6f6', // 图标的 Unicode 编码\n        iconFill: '#1d39c4', // 图标颜色\n        iconSize: 16, // 图标大小\n        iconFontWeight: 'normal', // 图标字体粗细\n      },\n    },\n  ],\n});\n",paraId:20,tocIndex:9},{value:"效果如下：",paraId:21,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 300,\n  data: {\n    nodes: [\n      { id: 'node-1', style: { x: 150, y: 100 } },\n      { id: 'node-2', style: { x: 250, y: 100 } },\n      { id: 'node-3', style: { x: 200, y: 180 } },\n      { id: 'node-4', style: { x: 120, y: 180 } },\n      { id: 'node-5', style: { x: 280, y: 180 } },\n    ],\n    edges: [\n      { id: 'edge-1', source: 'node-1', target: 'node-2' },\n      { id: 'edge-2', source: 'node-1', target: 'node-3' },\n      { id: 'edge-3', source: 'node-2', target: 'node-3' },\n      { id: 'edge-4', source: 'node-3', target: 'node-4' },\n      { id: 'edge-5', source: 'node-3', target: 'node-5' },\n    ],\n  },\n  node: {\n    style: {\n      size: 30,\n      fill: '#e6f7ff',\n      stroke: '#1890ff',\n      lineWidth: 1,\n      label: false,\n      icon: false,\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#91d5ff',\n      lineWidth: 1,\n    },\n  },\n  plugins: [\n    {\n      type: 'fisheye',\n      key: 'fisheye',\n      r: 100,\n      d: 2,\n      style: {\n        fill: '#2f54eb', // 鱼眼区域的填充颜色\n        fillOpacity: 0.2, // 填充区域的透明度\n        stroke: '#1d39c4', // 鱼眼边框的颜色\n        strokeOpacity: 0.8, // 边框的透明度\n        lineWidth: 1.5, // 边框的线宽\n        shadowColor: '#1d39c4', // 阴影颜色\n        shadowBlur: 10, // 阴影的模糊半径\n        shadowOffsetX: 0, // 阴影的水平偏移\n        shadowOffsetY: 0, // 阴影的垂直偏移\n        cursor: 'pointer', // 鼠标悬停时的指针样式\n      },\n      nodeStyle: {\n        // 节点基础样式\n        size: 40, // 节点大小\n        fill: '#d6e4ff', // 节点填充颜色\n        stroke: '#2f54eb', // 节点边框颜色\n        lineWidth: 2, // 节点边框宽度\n        shadowColor: '#2f54eb', // 节点阴影颜色\n        shadowBlur: 5, // 节点阴影模糊半径\n        cursor: 'pointer', // 鼠标悬停时的指针样式\n\n        // 标签样式\n        label: true, // 是否显示标签\n        labelFontSize: 14, // 标签字体大小\n        labelFontWeight: 'bold', // 标签字体粗细\n        labelFill: '#1d39c4', // 标签文字颜色\n        labelBackground: true, // 是否显示标签背景\n        labelBackgroundFill: '#fff', // 标签背景填充颜色\n        labelBackgroundStroke: '#1d39c4', // 标签背景边框颜色\n        labelBackgroundOpacity: 0.8, // 标签背景透明度\n        labelBackgroundPadding: [4, 8, 4, 8], // 标签背景内边距 [上,右,下,左]\n\n        // 图标样式\n        icon: true, // 是否显示图标\n        iconFontFamily: 'iconfont', // 图标字体\n        iconText: '\\ue6f6', // 图标的 Unicode 编码\n        iconFill: '#1d39c4', // 图标颜色\n        iconSize: 16, // 图标大小\n        iconFontWeight: 'normal', // 图标字体粗细\n      },\n    },\n  ],\n});\n\ngraph.render();\n",paraId:22,tocIndex:9}]},14277:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(8944);const d=[{value:"全屏展示插件允许用户将图可视化内容扩展到整个屏幕，提供更广阔的视图和更好的沉浸式体验。",paraId:0,tocIndex:0},{value:"全屏展示插件主要适用于以下场景：",paraId:1,tocIndex:1},{value:"提供更广阔的视图，便于查看复杂图数据",paraId:2,tocIndex:1},{value:"增强沉浸式体验，专注于图可视化内容",paraId:2,tocIndex:1},{value:"在演示或报告中展示图数据",paraId:2,tocIndex:1},{value:"以下是一个简单的 Fullscreen 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      autoFit: true,\n      trigger: {\n        request: 'F', // 使用快捷键 F 进入全屏\n        exit: 'Esc', // 使用快捷键 Esc 退出全屏\n      },\n      onEnter: () => {\n        console.log('进入全屏模式');\n      },\n      onExit: () => {\n        console.log('退出全屏模式');\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"必选",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"插件类型",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"fullscreen",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"key",paraId:5,tocIndex:3},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"autoFit",paraId:5,tocIndex:3},{value:"是否自适应画布尺寸，全屏后画布尺寸会自动适应屏幕尺寸",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"trigger",paraId:5,tocIndex:3},{value:"触发全屏的方式，",paraId:5,tocIndex:3},{value:"示例",paraId:6,tocIndex:3},{value:"{ request?: string; exit?: string; }",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"onEnter",paraId:5,tocIndex:3},{value:"进入全屏后的回调",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"onExit",paraId:5,tocIndex:3},{value:"退出全屏后的回调",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"trigger 属性用于控制触发全屏的方式。它支持两种配置方式：",paraId:7,tocIndex:4},{value:"使用键盘快捷键来触发全屏和退出全屏。",paraId:8,tocIndex:5},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      trigger: {\n        request: 'F', // 使用快捷键 F 进入全屏\n        exit: 'Esc', // 使用快捷键 Esc 退出全屏\n      },\n    },\n  ],\n});\n",paraId:9,tocIndex:5},{value:"通过调用 request 和 exit 方法来控制全屏。",paraId:10,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// 进入全屏\ngraph.getPluginInstance('my-fullscreen').request();\n\n// 退出全屏\ngraph.getPluginInstance('my-fullscreen').exit();\n",paraId:11,tocIndex:6},{value:"是否自适应画布尺寸，全屏后画布尺寸会自动适应屏幕尺寸。",paraId:12,tocIndex:7},{value:"设置为 true 时，画布会自动调整大小以适应整个屏幕。",paraId:13,tocIndex:7},{value:"设置为 false 时，画布大小保持不变。",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      autoFit: true,\n    },\n  ],\n});\n",paraId:14,tocIndex:7},{value:"这个方法可以让你通过代码进入全屏模式。调用插件实例上的这个方法，就能把图形内容扩展到整个屏幕。",paraId:15,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// 进入全屏\ngraph.getPluginInstance('my-fullscreen').request();\n",paraId:16,tocIndex:9},{value:"这个方法可以让你通过代码退出全屏模式。调用插件实例上的这个方法，就能把图形内容恢复到原来的大小。",paraId:17,tocIndex:10},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'fullscreen',\n      key: 'my-fullscreen',\n    },\n  ],\n});\n\n// 退出全屏\ngraph.getPluginInstance('my-fullscreen').exit();\n",paraId:18,tocIndex:10}]},11684:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(68440);const d=[{value:"网格线插件为画布提供可视化辅助线，帮助用户精确定位和对齐图形元素，是图形绘制中不可或缺的辅助工具。",paraId:0,tocIndex:0},{value:"网格线插件主要适用于以下场景：",paraId:1,tocIndex:1},{value:"辅助用户精确绘图和元素对齐",paraId:2,tocIndex:1},{value:"提供视觉参考，增强空间感知",paraId:2,tocIndex:1},{value:"在设计和编辑图形时构建结构化的参考系统",paraId:2,tocIndex:1},{value:"以下是一个简单的 GridLine 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      key: 'my-grid-line', // 指定唯一标识符，便于后续动态更新\n      size: 20,\n      stroke: '#0001',\n      follow: true,\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'grid-line', key: 'grid-line', size: 30 }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const LINE_STYLE = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n    const options = {\n      type: 'grid-line',\n      border: true,\n      borderLineWidth: 1,\n      borderStroke: '#eee',\n      borderStyle: 'solid',\n      follow: false,\n      lineWidth: 1,\n      size: 20,\n      stroke: '#eee',\n    };\n    const optionFolder = gui.addFolder('Gird Line Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'size', 1, 50, 1);\n    optionFolder.add(options, 'lineWidth', 1, 10, 1);\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'border');\n    optionFolder.add(options, 'borderLineWidth', 1, 10, 1);\n    optionFolder.add(options, 'borderStyle', LINE_STYLE);\n    optionFolder.addColor(options, 'borderStroke');\n    optionFolder.add(options, 'follow');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'grid-line',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:4},{value:"描述",paraId:6,tocIndex:4},{value:"类型",paraId:6,tocIndex:4},{value:"默认值",paraId:6,tocIndex:4},{value:"必选",paraId:6,tocIndex:4},{value:"type",paraId:6,tocIndex:4},{value:"插件类型",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"grid-line",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"key",paraId:6,tocIndex:4},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"border",paraId:6,tocIndex:4},{value:"是否显示边框",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"borderLineWidth",paraId:6,tocIndex:4},{value:"边框线宽",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"1",paraId:6,tocIndex:4},{value:"borderStroke",paraId:6,tocIndex:4},{value:"边框颜色，详细属性参考 ",paraId:6,tocIndex:4},{value:"CSS border-color",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"#eee",paraId:6,tocIndex:4},{value:"borderStyle",paraId:6,tocIndex:4},{value:"边框样式，详细属性参考 ",paraId:6,tocIndex:4},{value:"CSS border-style",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"solid",paraId:6,tocIndex:4},{value:"follow",paraId:6,tocIndex:4},{value:"是否跟随画布移动",paraId:6,tocIndex:4},{value:"boolean \\｜ {translate ?: boolean, zoom?: boolean}",paraId:6,tocIndex:4},{value:"false",paraId:6,tocIndex:4},{value:"lineWidth",paraId:6,tocIndex:4},{value:"网格线宽度",paraId:6,tocIndex:4},{value:"number | string",paraId:6,tocIndex:4},{value:"1",paraId:6,tocIndex:4},{value:"size",paraId:6,tocIndex:4},{value:"网格单元大小，单位为像素",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"20",paraId:6,tocIndex:4},{value:"stroke",paraId:6,tocIndex:4},{value:"网格线颜色",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"#eee",paraId:6,tocIndex:4},{value:"follow",paraId:7,tocIndex:5},{value:" 属性用于控制网格线是否跟随画布的变换操作。它支持两种配置方式：",paraId:7,tocIndex:5},{value:"布尔值配置",paraId:8,tocIndex:5},{value:"：当设置为 ",paraId:8,tocIndex:5},{value:"true",paraId:8,tocIndex:5},{value:" 时，网格线会同时跟随画布的平移和缩放；设置为 ",paraId:8,tocIndex:5},{value:"false",paraId:8,tocIndex:5},{value:" 时则保持静态。",paraId:8,tocIndex:5},{value:"// 同时启用跟随平移和缩放\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true,\n    },\n  ],\n});\n",paraId:9,tocIndex:5},{value:"对象配置",paraId:10,tocIndex:5},{value:"：可以更精细地控制网格线的跟随行为。",paraId:10,tocIndex:5},{value:"// 仅跟随平移，不跟随缩放\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: {\n        translate: true, // 跟随平移\n        zoom: false, // 不跟随缩放\n      },\n    },\n  ],\n});\n\n// 仅跟随缩放，不跟随平移\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: {\n        translate: false, // 不跟随平移\n        zoom: true, // 跟随缩放\n      },\n    },\n  ],\n});\n",paraId:11,tocIndex:5},{value:"当网格线跟随缩放时，它会保持与画布内容的相对位置关系，使得对齐参考更加精准。跟随平移则让网格随着画布内容一起移动，增强空间连续性的视觉体验。",paraId:12,tocIndex:5},{value:"最简单的方式是直接使用预设配置：",paraId:13,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: ['grid-line'],\n});\n",paraId:14,tocIndex:7},{value:"效果如下：",paraId:15,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas'],\n  plugins: ['grid-line'],\n});\n\ngraph.render();\n",paraId:16,tocIndex:7},{value:"您可以根据需要自定义网格线的样式：",paraId:17,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'grid-line',\n      stroke: '#1890ff33', // 蓝色半透明网格线\n      lineWidth: 2,\n      size: 40, // 更大的网格单元\n      borderStroke: '#1890ff', // 蓝色边框\n      borderLineWidth: 2,\n    },\n  ],\n});\n",paraId:18,tocIndex:8},{value:"效果如下：",paraId:19,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      stroke: '#1890ff33', // 蓝色半透明网格线\n      lineWidth: 2,\n      size: 40, // 更大的网格\n      borderStroke: '#1890ff', // 蓝色边框\n      borderLineWidth: 2,\n    },\n  ],\n});\n\ngraph.render();\n",paraId:20,tocIndex:8},{value:"启用 follow 选项可以让网格跟随画布移动，增强用户体验：",paraId:21,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true, // 网格跟随画布移动\n    },\n  ],\n});\n",paraId:22,tocIndex:9},{value:"试着拖拽/缩放画布，观察网格的跟随效果：",paraId:23,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  data: { nodes: [{ id: 'node-1', style: { x: 150, y: 75 } }] },\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n  plugins: [\n    {\n      type: 'grid-line',\n      follow: true, // 网格跟随画布移动\n    },\n  ],\n});\n\ngraph.render();\n",paraId:24,tocIndex:9},{value:"使用 key 标识符可以在运行时动态更新网格属性：",paraId:25,tocIndex:10},{value:"// 初始化配置\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'grid-line',\n      key: 'my-grid',\n      size: 20,\n    },\n  ],\n});\n\n// 后续动态更新\ngraph.updatePlugin({\n  key: 'my-grid',\n  size: 40, // 更新网格大小\n  stroke: '#ff4d4f', // 更新网格颜色\n});\n",paraId:26,tocIndex:10}]},20460:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(84230);const d=[{value:"该插件用于实现图编辑的 ",paraId:0,tocIndex:0},{value:"撤销（Undo）",paraId:0,tocIndex:0},{value:" 和 ",paraId:0,tocIndex:0},{value:"重做（Redo）",paraId:0,tocIndex:0},{value:" 功能，通过记录用户操作的历史状态堆栈，支持在图交互过程中进行回溯或恢复操作。该插件为用户提供了完善的配置项和 API 。",paraId:0,tocIndex:0},{value:"历史记录插件适用于所有涉及到图编辑的场景。",paraId:1,tocIndex:1},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    layout: { type: 'force' },\n    node: {\n      style: {\n        size: 60,\n        labelText: 'Drag Me!',\n        labelPlacement: 'middle',\n        labelFill: '#fff',\n        fill: '#7e3feb',\n      },\n    },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: ['drag-element'],\n    plugins: ['grid-line', { type: 'history', key: 'history' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'history',\n      stackSize: 0,\n    };\n    const optionFolder = gui.addFolder('History Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'stackSize', 0, 10, 1);\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'history',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiFolder = gui.addFolder('History API');\n    const instance = graph.getPluginInstance('history');\n    apiFolder.add(instance, 'undo');\n    apiFolder.add(instance, 'redo');\n    apiFolder.add(instance, 'clear');\n  },\n);\n",paraId:2,tocIndex:2},{value:"在图配置中添加这一插件：",paraId:3,tocIndex:3},{value:"1. 快速配置（静态）",paraId:4,tocIndex:3},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:5,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: ['history'],\n});\n",paraId:6,tocIndex:3},{value:"2. 对象配置（推荐）",paraId:7,tocIndex:3},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:8,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history-1',\n      stackSize: 10,\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"默认值",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"afterAddCommand",paraId:10,tocIndex:4},{value:"当一个命令被添加到 ",paraId:10,tocIndex:4},{value:"Undo/Redo",paraId:10,tocIndex:4},{value:" 队列后被调用。",paraId:10,tocIndex:4},{value:"revert",paraId:10,tocIndex:4},{value:" 为 ",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:" 时表示撤销操作，为 ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:" 时表示重做操作",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:11,tocIndex:4},{value:", revert: boolean) => void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"beforeAddCommand",paraId:10,tocIndex:4},{value:"当一个命令被添加到 ",paraId:10,tocIndex:4},{value:"Undo/Redo",paraId:10,tocIndex:4},{value:" 队列前被调用，如果该方法返回 ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:"，那么这个命令将不会被添加到队列中。",paraId:10,tocIndex:4},{value:"revert",paraId:10,tocIndex:4},{value:" 为 ",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:" 时表示撤销操作，为 ",paraId:10,tocIndex:4},{value:"false",paraId:10,tocIndex:4},{value:" 时表示重做操作",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:12,tocIndex:4},{value:", revert: boolean) => boolean | void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"executeCommand",paraId:10,tocIndex:4},{value:"执行命令时的回调函数",paraId:10,tocIndex:4},{value:"(cmd: ",paraId:10,tocIndex:4},{value:"Command",paraId:13,tocIndex:4},{value:") => void",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"stackSize",paraId:10,tocIndex:4},{value:"最多记录该数据长度的历史记录",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:"0（不限制）",paraId:10,tocIndex:4},{value:"Command",paraId:14},{value:"// 单条历史记录命令\ninterface Command {\n  current: CommandData; // 当前数据\n  original: CommandData; // 原始数据\n  animation: boolean; // 是否开启动画\n}\n// 单条历史记录命令数据\ninterface CommandData {\n  add: GraphData; // 新增的数据\n  update: GraphData; // 更新的数据\n  remove: GraphData; // 移除的数据\n}\n// 图数据\ninterface GraphData {\n  nodes?: NodeData[]; // 节点数据\n  edges?: EdgeData[]; // 边数据\n  combos?: ComboData[]; // Combo 数据\n}\n",paraId:15,tocIndex:6},{value:"history 插件提供了以下 API 供用户按需使用，调用插件方法的方式请参考 ",paraId:16,tocIndex:7},{value:"插件总览文档",paraId:17,tocIndex:7},{value:"判断是否可以进行",paraId:18,tocIndex:8},{value:"重做",paraId:18,tocIndex:8},{value:"操作。如果重做堆栈中有记录，则返回 ",paraId:18,tocIndex:8},{value:"true",paraId:18,tocIndex:8},{value:"，否则返回 ",paraId:18,tocIndex:8},{value:"false",paraId:18,tocIndex:8},{value:"。",paraId:18,tocIndex:8},{value:"canRedo(): boolean;\n",paraId:19,tocIndex:8},{value:"示例：",paraId:20,tocIndex:8},{value:"const canRedo = historyInstance.canRedo();\nif (canRedo) {\n  console.log('可以进行重做操作');\n} else {\n  console.log('重做堆栈为空，无法重做');\n}\n",paraId:21,tocIndex:8},{value:"判断是否可以进行",paraId:22,tocIndex:9},{value:"撤销",paraId:22,tocIndex:9},{value:"操作。如果撤销堆栈中有记录，则返回 ",paraId:22,tocIndex:9},{value:"true",paraId:22,tocIndex:9},{value:"，否则返回 ",paraId:22,tocIndex:9},{value:"false",paraId:22,tocIndex:9},{value:"。",paraId:22,tocIndex:9},{value:"canUndo(): boolean;\n",paraId:23,tocIndex:9},{value:"示例：",paraId:24,tocIndex:9},{value:"const canUndo = historyInstance.canUndo();\nif (canUndo) {\n  console.log('可以进行撤销操作');\n} else {\n  console.log('撤销堆栈为空，无法撤销');\n}\n",paraId:25,tocIndex:9},{value:"清空历史记录，包括撤销和重做堆栈。",paraId:26,tocIndex:10},{value:"clear(): void;\n",paraId:27,tocIndex:10},{value:"示例：",paraId:28,tocIndex:10},{value:"historyInstance.clear();\nconsole.log('历史记录已清空');\n",paraId:29,tocIndex:10},{value:"监听历史记录事件，允许用户在特定事件发生时执行自定义逻辑。",paraId:30,tocIndex:11},{value:"on(event: Loosen/<HistoryEvent/>, handler: (e: { cmd?: Command | null }) => void): void;\n",paraId:31,tocIndex:11},{value:"参数类型说明：",paraId:32,tocIndex:11},{value:"HistoryEvent",paraId:33,tocIndex:11},{value:"enum HistoryEvent {\n  UNDO = 'undo', // 当命令被撤销时\n  REDO = 'redo', // 当命令被重做时\n  CANCEL = 'cancel', // 当命令被取消时\n  ADD = 'add', // 当命令被添加到队列时\n  CLEAR = 'clear', // 当历史队列被清空时\n  CHANGE = 'change', // 当历史队列发生变化时\n}\n",paraId:34,tocIndex:11},{value:"Command",paraId:35,tocIndex:11},{value:"请参考前面的 ",paraId:36,tocIndex:11},{value:"Command",paraId:37,tocIndex:11},{value:" 类型说明",paraId:36,tocIndex:11},{value:"示例：",paraId:38,tocIndex:11},{value:"historyInstance.on(HistoryEvent.UNDO, () => {\n  console.log('执行了撤销操作');\n});\n",paraId:39,tocIndex:11},{value:"执行",paraId:40,tocIndex:12},{value:"重做",paraId:40,tocIndex:12},{value:"操作，并返回插件实例。如果重做堆栈为空，则不执行任何操作。",paraId:40,tocIndex:12},{value:"redo(): History;\n",paraId:41,tocIndex:12},{value:"示例：",paraId:42,tocIndex:12},{value:"historyInstance.redo();\nconsole.log('执行了重做操作');\n",paraId:43,tocIndex:12},{value:"执行",paraId:44,tocIndex:13},{value:"撤销",paraId:44,tocIndex:13},{value:"操作，并返回插件实例。如果撤销堆栈为空，则不执行任何操作。",paraId:44,tocIndex:13},{value:"undo(): History;\n",paraId:45,tocIndex:13},{value:"示例：",paraId:46,tocIndex:13},{value:"historyInstance.undo();\nconsole.log('执行了撤销操作');\n",paraId:47,tocIndex:13},{value:"执行撤销操作且不计入历史记录，并返回插件实例。注意，执行该操作会清空",paraId:48,tocIndex:14},{value:"重做",paraId:48,tocIndex:14},{value:"栈。",paraId:48,tocIndex:14},{value:"undoAndCancel(): History;\n",paraId:49,tocIndex:14},{value:"示例：",paraId:50,tocIndex:14},{value:"historyInstance.undoAndCancel();\nconsole.log('执行了撤销并取消操作');\n",paraId:51,tocIndex:14},{value:"该插件支持两种历史记录模式：",paraId:52,tocIndex:15},{value:"默认模式下，每一次触发",paraId:53,tocIndex:16},{value:"渲染后",paraId:53,tocIndex:16},{value:"（比如更新元素数据后，用户主动执行 ",paraId:53,tocIndex:16},{value:"graph.draw()",paraId:53,tocIndex:16},{value:" 方法触发渲染），插件会把",paraId:53,tocIndex:16},{value:"渲染前",paraId:53,tocIndex:16},{value:"和",paraId:53,tocIndex:16},{value:"渲染后",paraId:53,tocIndex:16},{value:"的数据记录下来并作为一次操作记录入栈。",paraId:53,tocIndex:16},{value:"实际需求中，用户的一次图编辑操作可能涉及到",paraId:54,tocIndex:18},{value:"多次渲染",paraId:54,tocIndex:18},{value:"，比如，一次编辑操作中，首先把节点 A、B 展示出来，然后展示 A->B 的连线，这里就涉及到两次渲染（即用户需要进行两次 ",paraId:54,tocIndex:18},{value:"graph.draw()",paraId:54,tocIndex:18},{value:" ），这种场景下，默认模式会入栈两次历史记录，分别是：",paraId:54,tocIndex:18},{value:"展示节点 A 和 B",paraId:55,tocIndex:18},{value:"展示 A->B 的连线",paraId:55,tocIndex:18},{value:"显然，实际业务中，一次操作，也应该只需一次撤销。",paraId:56,tocIndex:18},{value:"但这里在撤销本次操作时，用户需要调用两次 ",paraId:57,tocIndex:18},{value:"undo",paraId:57,tocIndex:18},{value:" 方法，也就是需要进行两次撤销。",paraId:57,tocIndex:18},{value:"为了支持这样的场景，G6 提供了一个批量控制器（ ",paraId:58,tocIndex:19},{value:"BatchController",paraId:58,tocIndex:19},{value:"，",paraId:58,tocIndex:19},{value:"可参考源码",paraId:58,tocIndex:19},{value:"），在图实例上下文中提供了这个批量控制器实例。",paraId:58,tocIndex:19},{value:"历史记录插件则基于这个批量控制器，来实现自定义操作记录，代码示例如下：",paraId:59,tocIndex:19},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n  ],\n});\n\ngraph.context.batch.startBatch(); // 开始批量操作\ngraph.addNodeData(...); // 把节点 A、B 展示出来\ngraph.draw(); // 第一次触发渲染\ngraph.addEdgeData(...); // 把 A->B 连线展示出来\ngraph.draw(); // 第二次触发渲染\ngraph.context.batch.endBatch(); // 结束批量操作\n",paraId:60,tocIndex:19},{value:"示例中：",paraId:61,tocIndex:19},{value:"通过调用批量控制器实例的 ",paraId:62,tocIndex:19},{value:"startBatch",paraId:62,tocIndex:19},{value:" 方法，告诉历史记录插件，现在开始进行批量操作，在批量操作没有结束前，不管触发多少次渲染，都不能进行历史记录入栈（历史记录插件会把每次触发渲染的变更数据记录下来）",paraId:62,tocIndex:19},{value:"在完成最后一次数据变更后，调用 ",paraId:62,tocIndex:19},{value:"endBatch()",paraId:62,tocIndex:19},{value:" 方法，历史记录插件监听到批量操作完成，则把本次批量操作作为一次历史记录入栈",paraId:62,tocIndex:19},{value:"最终，用户只需要进行一次 ",paraId:63,tocIndex:19},{value:"undo",paraId:63,tocIndex:19},{value:" 即可撤销。",paraId:63,tocIndex:19},{value:"下面列举一些常见的案例，并给出相应的代码参考",paraId:64,tocIndex:20},{value:"实际业务场景中，可能需要自定义画布的工具栏，也就涉及到撤销和重做按钮的启禁用状态",paraId:65,tocIndex:21},{value:"const canUndo = false;\nconst canRedo = false;\n\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n  ],\n});\nconst historyInstance = graph.getPluginInstance('history');\n\nhistoryInstance.on(HistoryEvent.CHANGE, () => {\n  canUndo = historyInstance.canUndo();\n  canRedo = historyInstance.canRedo();\n});\n",paraId:66,tocIndex:21},{value:"示例中通过监听 ",paraId:67,tocIndex:21},{value:"HistoryEvent.CHANGE",paraId:67,tocIndex:21},{value:" 事件，这个事件在历史队列发生变化时会触发，每次发生变化后，实时判断当前是否可以进行撤销和重做操作",paraId:67,tocIndex:21},{value:"这里实现一个简单的场景：只有移除元素的操作才允许进入历史记录队列",paraId:68,tocIndex:22},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n      beforeAddCommand: (cmd) => {\n        return (\n          cmd.current.remove?.nodes?.length > 0 ||\n          cmd.current.remove?.combos?.length > 0 ||\n          cmd.current.remove?.edges?.length > 0\n        );\n      },\n    },\n  ],\n});\n",paraId:69,tocIndex:22},{value:"示例中通过配置项 ",paraId:70,tocIndex:22},{value:"beforeAddCommand",paraId:71,tocIndex:22},{value:" 来实现，判断 ",paraId:70,tocIndex:22},{value:"cmd.current.remove",paraId:70,tocIndex:22},{value:" 里面是否存在被移除的元素",paraId:70,tocIndex:22}]},53009:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(21368);const d=[{value:"轮廓包围（Hull）用于处理和表示一组点的凸多边形或凹多边形包围盒。它可以将一组节点包裹在一个最小的几何形状中，帮助用户更好地理解和分析数据集。",paraId:0,tocIndex:0},{value:"凸包（Convex Hull）",paraId:1,tocIndex:0},{value:"：这是一个凸多边形，它包含所有的点，并且没有任何凹陷。",paraId:1,tocIndex:0},{value:"凹包（Concave Hull）",paraId:1,tocIndex:0},{value:"：这是一个凹多边形，它同样包含所有的点，但是可能会有凹陷。凹包的凹陷程度由 concavity 参数控制。",paraId:1,tocIndex:0},{value:"轮廓包围插件主要适用于以下场景：",paraId:2,tocIndex:1},{value:"数据可视化中的节点集合包裹",paraId:3,tocIndex:1},{value:"提供视觉参考，增强空间感知",paraId:3,tocIndex:1},{value:"在复杂网络图中标识特定节点的集合关系",paraId:3,tocIndex:1},{value:"以下是一个简单的 Hull 插件初始化示例：",paraId:4,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      key: 'my-hull', // 指定唯一标识符，便于后续动态更新\n      members: ['node-1', 'node-2'], // 需要包裹的节点 ID 列表\n      concavity: Infinity, // 默认为凸包\n    },\n  ],\n});\n",paraId:5,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        {\n          id: 'node-0',\n          data: { cluster: 'a' },\n          style: { x: 555, y: 151 },\n        },\n        {\n          id: 'node-1',\n          data: { cluster: 'a' },\n          style: { x: 532, y: 323 },\n        },\n        {\n          id: 'node-2',\n          data: { cluster: 'a' },\n          style: { x: 473, y: 227 },\n        },\n        {\n          id: 'node-3',\n          data: { cluster: 'a' },\n          style: { x: 349, y: 212 },\n        },\n        {\n          id: 'node-4',\n          data: { cluster: 'b' },\n          style: { x: 234, y: 201 },\n        },\n        {\n          id: 'node-5',\n          data: { cluster: 'b' },\n          style: { x: 338, y: 333 },\n        },\n        {\n          id: 'node-6',\n          data: { cluster: 'b' },\n          style: { x: 365, y: 91 },\n        },\n      ],\n      edges: [\n        {\n          source: 'node-0',\n          target: 'node-2',\n        },\n        {\n          source: 'node-1',\n          target: 'node-2',\n        },\n        {\n          source: 'node-2',\n          target: 'node-3',\n        },\n        {\n          source: 'node-3',\n          target: 'node-4',\n        },\n        {\n          source: 'node-3',\n          target: 'node-5',\n        },\n        {\n          source: 'node-3',\n          target: 'node-6',\n        },\n      ],\n    },\n    node: {\n      style: { labelText: (d) => d.id },\n      palette: { field: 'cluster', color: ['#7e3feb', '#ffa940'] },\n    },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'hull',\n        key: 'hull-a',\n        members: ['node-0', 'node-1', 'node-2', 'node-3'],\n        labelText: 'hull-a',\n        fill: '#7e3feb',\n        stroke: '#7e3feb',\n        fillOpacity: 0.1,\n        strokeOpacity: 1,\n        labelFill: '#fff',\n        labelPadding: 2,\n        labelBackgroundFill: '#7e3feb',\n        labelBackgroundRadius: 5,\n      },\n    ],\n  },\n  { width: 600, height: 450 },\n  (gui, graph) => {\n    const options = {\n      type: 'hull',\n      members: ['node-0', 'node-1', 'node-2', 'node-3'],\n      concavity: Infinity,\n      corner: 'rounded',\n      padding: 10,\n      // style\n      fill: '#7e3feb',\n      stroke: '#7e3feb',\n      fillOpacity: 0.1,\n      strokeOpacity: 1,\n      // label\n      label: true,\n      labelCloseToPath: true,\n      labelAutoRotate: true,\n      labelOffsetX: 0,\n      labelOffsetY: 0,\n      labelPlacement: 'bottom',\n    };\n\n    const optionFolder = gui.addFolder('Hull Options');\n    optionFolder.add(options, 'type').disable();\n    optionFolder.add(options, 'concavity', 0, 200, 1);\n    optionFolder.add(options, 'corner', ['rounded', 'smooth', 'sharp']);\n    optionFolder.add(options, 'padding', 0, 20, 1);\n    optionFolder.addColor(options, 'fill');\n    optionFolder.addColor(options, 'stroke');\n    optionFolder.add(options, 'fillOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'strokeOpacity', 0, 1, 0.1);\n    optionFolder.add(options, 'label');\n    optionFolder.add(options, 'labelCloseToPath');\n    optionFolder.add(options, 'labelAutoRotate');\n    optionFolder.add(options, 'labelOffsetX', 0, 20, 1);\n    optionFolder.add(options, 'labelOffsetY', 0, 20, 1);\n    optionFolder.add(options, 'labelPlacement', ['left', 'right', 'top', 'bottom', 'center']);\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'hull-a',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiConfig = {\n      member: 'node-1',\n    };\n    const apiFolder = gui.addFolder('Hull API');\n    const instance = graph.getPluginInstance('hull-a');\n    apiFolder.add(\n      apiConfig,\n      'member',\n      new Array(7).fill(0).map((_, index) => `node-${index}`),\n    );\n    apiFolder.add({ addMember: () => instance.addMember(apiConfig.member) }, 'addMember').name('add member');\n    apiFolder\n      .add({ removeMember: () => instance.removeMember(apiConfig.member) }, 'removeMember')\n      .name('remove member');\n    apiFolder\n      .add({ removeMember: () => alert('Members in Hull-a: ' + instance.getMember()) }, 'removeMember')\n      .name('get member');\n  },\n);\n",paraId:6,tocIndex:3},{value:"属性",paraId:7,tocIndex:4},{value:"描述",paraId:7,tocIndex:4},{value:"类型",paraId:7,tocIndex:4},{value:"默认值",paraId:7,tocIndex:4},{value:"必选",paraId:7,tocIndex:4},{value:"type",paraId:7,tocIndex:4},{value:"插件类型",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"hull",paraId:7,tocIndex:4},{value:"✓",paraId:7,tocIndex:4},{value:"key",paraId:7,tocIndex:4},{value:"插件唯一标识符，用于后续更新",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"members",paraId:7,tocIndex:4},{value:"Hull 内的元素，包括节点和边",paraId:7,tocIndex:4},{value:"string[]",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"✓",paraId:7,tocIndex:4},{value:"concavity",paraId:7,tocIndex:4},{value:"凹度，数值越大凹度越小；默认为 Infinity 代表为 Convex Hull",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"Infinity",paraId:7,tocIndex:4},{value:"corner",paraId:7,tocIndex:4},{value:"拐角类型，可选值为 ",paraId:7,tocIndex:4},{value:"rounded",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"smooth",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"sharp",paraId:7,tocIndex:4},{value:"string",paraId:7,tocIndex:4},{value:"rounded",paraId:7,tocIndex:4},{value:"padding",paraId:7,tocIndex:4},{value:"内边距",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"10",paraId:7,tocIndex:4},{value:"label",paraId:7,tocIndex:4},{value:"是否显示标签",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelPlacement",paraId:7,tocIndex:4},{value:"标签位置",paraId:7,tocIndex:4},{value:"left",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"right",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"top",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"bottom",paraId:7,tocIndex:4},{value:" | ",paraId:7,tocIndex:4},{value:"center",paraId:7,tocIndex:4},{value:"bottom",paraId:7,tocIndex:4},{value:"labelBackground",paraId:7,tocIndex:4},{value:"是否显示背景",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"false",paraId:7,tocIndex:4},{value:"labelPadding",paraId:7,tocIndex:4},{value:"标签内边距",paraId:7,tocIndex:4},{value:"number | number[]",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelCloseToPath",paraId:7,tocIndex:4},{value:"标签是否贴合轮廓",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelAutoRotate",paraId:7,tocIndex:4},{value:"标签是否跟随轮廓旋转，仅在 closeToPath 为 true 时生效",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"labelOffsetX",paraId:7,tocIndex:4},{value:"x 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelOffsetY",paraId:7,tocIndex:4},{value:"y 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"labelMaxWidth",paraId:7,tocIndex:4},{value:"文本的最大宽度，超出会自动省略",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"完整的标签样式见",paraId:8,tocIndex:4},{value:"此链接",paraId:8,tocIndex:4},{value:"concavity 属性用于控制 Hull 的凹度。当设置为 Infinity 时，生成的是凸包；否则会生成凹包。",paraId:9,tocIndex:5},{value:"// 凸包示例\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      concavity: Infinity, // 凸包\n      members: ['node-1', 'node-2'],\n    },\n  ],\n});\n\n// 凹包示例\nconst graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      concavity: 50, // 凹包\n      members: ['node-1', 'node-2'],\n    },\n  ],\n});\n",paraId:10,tocIndex:5},{value:"最简单的方式是直接使用预设配置：",paraId:11,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'], // 需要包裹的节点 ID 列表\n    },\n  ],\n});\n",paraId:12,tocIndex:7},{value:"效果如下：",paraId:13,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'], // 需要包裹的节点 ID 列表\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:14,tocIndex:7},{value:"您可以根据需要自定义 Hull 的样式，例如调整颜色、透明度等属性。",paraId:15,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2', 'node-3'],\n      stroke: '#ff000033', // 红色半透明边框\n      fill: '#7e3feb', // 浅紫色填充\n      fillOpacity: 0.2,\n      lineWidth: 2,\n      padding: 15, // 更大的内边距\n    },\n  ],\n});\n",paraId:16,tocIndex:8},{value:"效果如下：",paraId:17,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'view',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2', 'node-3'],\n      stroke: '#ff000033', // 红色半透明边框\n      fill: '#7e3feb', // 浅紫色填充\n      fillOpacity: 0.2,\n      lineWidth: 2,\n      padding: 15, // 更大的内边距\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:18,tocIndex:8},{value:"您可以配置标签的位置、背景、偏移量等属性，以增强可视化效果。",paraId:19,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'],\n      label: true, // 显示标签\n      labelText: 'hull-a',\n      labelPlacement: 'top', // 标签位置\n      labelBackground: true, // 显示标签背景\n      labelPadding: 5, // 标签内边距\n    },\n  ],\n});\n",paraId:20,tocIndex:9},{value:"效果如下：",paraId:21,tocIndex:9},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 300,\n  height: 150,\n  autoFit: 'center',\n  data: {\n    nodes: [\n      {\n        id: 'node-0',\n        data: { cluster: 'a' },\n        style: { x: 555, y: 151 },\n      },\n      {\n        id: 'node-1',\n        data: { cluster: 'a' },\n        style: { x: 532, y: 323 },\n      },\n      {\n        id: 'node-2',\n        data: { cluster: 'a' },\n        style: { x: 473, y: 227 },\n      },\n      {\n        id: 'node-3',\n        data: { cluster: 'a' },\n        style: { x: 349, y: 212 },\n      },\n      {\n        id: 'node-4',\n        data: { cluster: 'b' },\n        style: { x: 234, y: 201 },\n      },\n      {\n        id: 'node-5',\n        data: { cluster: 'b' },\n        style: { x: 338, y: 333 },\n      },\n      {\n        id: 'node-6',\n        data: { cluster: 'b' },\n        style: { x: 365, y: 91 },\n      },\n    ],\n    edges: [\n      {\n        source: 'node-0',\n        target: 'node-2',\n      },\n      {\n        source: 'node-1',\n        target: 'node-2',\n      },\n      {\n        source: 'node-2',\n        target: 'node-3',\n      },\n      {\n        source: 'node-3',\n        target: 'node-4',\n      },\n      {\n        source: 'node-3',\n        target: 'node-5',\n      },\n      {\n        source: 'node-3',\n        target: 'node-6',\n      },\n    ],\n  },\n  plugins: [\n    {\n      type: 'hull',\n      members: ['node-1', 'node-2'],\n      label: true, // 显示标签\n      labelText: 'hull-a',\n      labelPlacement: 'top', // 标签位置\n      labelBackground: true, // 显示标签背景\n      labelPadding: 5, // 标签内边距\n    },\n  ],\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n});\n\ngraph.render();\n",paraId:22,tocIndex:9},{value:"",paraId:23}]},27514:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(16234);const d=[{value:"图例（Legend）插件用于展示图中元素的分类信息，支持节点、边、组合的分类信息展示。通过图例，用户可以快速感知到图中相关元素的分类信息，也可以通过点击对应图例项来快速定位到元素，提高用户的浏览效率。",paraId:0,tocIndex:0},{value:"这一插件主要用于：",paraId:1,tocIndex:1},{value:"通过图例快速对元素进行分类",paraId:2,tocIndex:1},{value:"通过图例快速高亮定位到对应元素",paraId:2,tocIndex:1},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // 其他配置...\n  plugins: [\n    {\n      type: 'legend', // 插件类型为 legend\n      nodeField: 'cluster', // 用于节点分组的数组字段名称\n      edgeField: 'cluster', // 用于边分组的数组字段名称\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"插件类型",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"legend",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"key",paraId:4,tocIndex:3},{value:"插件唯一标识符，用于后续更新",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"trigger",paraId:4,tocIndex:3},{value:"图例项触发对应项高亮的方式：",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:"：鼠标移入图例项时触发 ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:"：鼠标点击图例项时触发",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:"position",paraId:4,tocIndex:3},{value:"图例在画布中的相对位置，",paraId:4,tocIndex:3},{value:"可选值",paraId:5,tocIndex:3},{value:"CardinalPlacement",paraId:6,tocIndex:3},{value:"bottom",paraId:4,tocIndex:3},{value:"container",paraId:4,tocIndex:3},{value:"图例挂载的容器，无则挂载到 Graph 所在容器",paraId:4,tocIndex:3},{value:"HTMLElement | string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"className",paraId:4,tocIndex:3},{value:"图例画布类名，传入外置容器时不生效",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"containerStyle",paraId:4,tocIndex:3},{value:"图例的容器样式，传入外置容器时不生效",paraId:4,tocIndex:3},{value:"CSSStyleDeclaration",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"nodeField",paraId:4,tocIndex:3},{value:"节点分类标识",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"edgeField",paraId:4,tocIndex:3},{value:"边分类标识",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"comboField",paraId:4,tocIndex:3},{value:"组合分类标识",paraId:4,tocIndex:3},{value:"string | (item: ElementDatum) => string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"orientation",paraId:4,tocIndex:3},{value:"图例项的布局方向：",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"horizontal",paraId:4,tocIndex:3},{value:"：水平方向 ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"vertical",paraId:4,tocIndex:3},{value:"：垂直方向",paraId:4,tocIndex:3},{value:"horizontal",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"vertical",paraId:4,tocIndex:3},{value:"'horizontal'",paraId:4,tocIndex:3},{value:"layout",paraId:4,tocIndex:3},{value:"布局方式：",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:"：弹性布局 ",paraId:4,tocIndex:3},{value:"- ",paraId:4,tocIndex:3},{value:"grid",paraId:4,tocIndex:3},{value:"：网格布局",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"grid",paraId:4,tocIndex:3},{value:"flex",paraId:4,tocIndex:3},{value:"showTitle",paraId:4,tocIndex:3},{value:"是否显示标题",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"titleText",paraId:4,tocIndex:3},{value:"标题内容",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:'""',paraId:4,tocIndex:3},{value:"x",paraId:4,tocIndex:3},{value:"图例在画布中的相对的横向位置，优先级高于position",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"y",paraId:4,tocIndex:3},{value:"图例在画布中的相对的纵向位置，优先级高于position",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"width",paraId:4,tocIndex:3},{value:"图例的宽度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"240",paraId:4,tocIndex:3},{value:"height",paraId:4,tocIndex:3},{value:"图例的高度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"160",paraId:4,tocIndex:3},{value:"itemSpacing",paraId:4,tocIndex:3},{value:"图例项的文本和对应标记之间的间距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"4",paraId:4,tocIndex:3},{value:"rowPadding",paraId:4,tocIndex:3},{value:"图例中每行之间的间距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"colPadding",paraId:4,tocIndex:3},{value:"图例中每列之间的间距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"10",paraId:4,tocIndex:3},{value:"itemMarkerSize",paraId:4,tocIndex:3},{value:"图例项标记的大小",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"16",paraId:4,tocIndex:3},{value:"itemLabelFontSize",paraId:4,tocIndex:3},{value:"图例项文本的字体大小",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"16",paraId:4,tocIndex:3},{value:"gridCol",paraId:4,tocIndex:3},{value:"图例项在宽度允许情况下的最大列数",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"gridRow",paraId:4,tocIndex:3},{value:"图例项在高度允许情况下的最大行数",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"position",paraId:7,tocIndex:4},{value:" 属性支持以下值：",paraId:7,tocIndex:4},{value:"'top-left'",paraId:8,tocIndex:4},{value:"：左上角",paraId:8,tocIndex:4},{value:"'top-right'",paraId:8,tocIndex:4},{value:"：右上角",paraId:8,tocIndex:4},{value:"'bottom-left'",paraId:8,tocIndex:4},{value:"：左下角",paraId:8,tocIndex:4},{value:"'bottom-right'",paraId:8,tocIndex:4},{value:"：右下角",paraId:8,tocIndex:4},{value:"'left-top'",paraId:8,tocIndex:4},{value:"：左侧靠上",paraId:8,tocIndex:4},{value:"'left-bottom'",paraId:8,tocIndex:4},{value:"：左侧靠下",paraId:8,tocIndex:4},{value:"'right-top'",paraId:8,tocIndex:4},{value:"：右侧靠上",paraId:8,tocIndex:4},{value:"'right-bottom'",paraId:8,tocIndex:4},{value:"：右侧靠下",paraId:8,tocIndex:4},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'legend', // 插件类型为 legend\n      nodeField: 'cluster', // 用于节点分组的数组字段名称\n      edgeField: 'cluster', // 用于边分组的数组字段名称\n    },\n  ],\n});\n",paraId:9,tocIndex:6},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // 其他配置...\n  plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      // 可以通过 position 快捷的来指定位置\n      // position: \"top-left\",\n      // 也可以通过x,y来更加灵活的控制图例的位置\n      x: 20,\n      y: 20,\n    },\n  ],\n});\n",paraId:10,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: 'node-1', type: 'circle', data: { cluster: 'node-type1' } },\n    { id: 'node-2', type: 'rect', data: { cluster: 'node-type2' } },\n  ],\n  edges: [{ source: 'node-1', target: 'node-2', data: { cluster: 'edge-type1' } }],\n};\n\nconst graph = new Graph({\n  data,\n  // 其他配置...\n  plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      layout: 'flex',\n      // 控制只显示一行\n      gridRow: 1,\n      // 控制一行显示10列，当列宽不足时会显示翻页按钮\n      gridCol: 10,\n    },\n  ],\n});\n",paraId:11,tocIndex:8},{value:"orientation",paraId:12,tocIndex:10},{value:"主要控制布局的方向，具体展示",paraId:12,tocIndex:10},{value:"一行多列",paraId:12,tocIndex:10},{value:"还是",paraId:12,tocIndex:10},{value:"一列多行",paraId:12,tocIndex:10},{value:"，主要通过 ",paraId:12,tocIndex:10},{value:"gridRow",paraId:12,tocIndex:10},{value:" 以及",paraId:12,tocIndex:10},{value:"gridCol",paraId:12,tocIndex:10},{value:"来控制，例如想要看起来像是竖向的图例项，则可以通过这样配置:",paraId:12,tocIndex:10},{value:"   plugins: [\n    {\n      type: 'legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n      layout: \"flex\",\n      // 控制一行显示1列\n      gridCol:1,\n      // 控制显示最多20行\n      gridRow: 20,\n    },\n  ],\n",paraId:13,tocIndex:10},{value:"这样就变成了只有一列的图例，符合视觉上的竖向排列。",paraId:14,tocIndex:10},{value:"可以使用 ",paraId:15,tocIndex:11},{value:"updatePlugin",paraId:15,tocIndex:11},{value:" 方法动态更新工具栏：",paraId:15,tocIndex:11},{value:"const graph = new Graph({\n  data,\n  // 其他配置...\n  plugins: [\n    {\n      type: 'legend',\n      key: 'my-legend',\n      nodeField: 'cluster',\n      edgeField: 'cluster',\n    },\n  ],\n});\n\n// 更新图例位置\ngraph.updatePlugin({\n  key: 'my-legend',\n  position: 'bottom-right',\n});\n",paraId:16,tocIndex:11}]},15353:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(98880);const d=[{value:"Minimap（小地图）的主要作用是为用户提供以缩略图形式展示当前图内容的整体布局，可以快速定位图操作位置。",paraId:0,tocIndex:0},{value:"⚠️ 需要注意",paraId:1,tocIndex:0},{value:"，Minimap 插件当前不兼容 React Node 渲染机制，在需要使用 Minimap 功能的场景中，建议通过 ",paraId:1,tocIndex:0},{value:"内置节点",paraId:2,tocIndex:0},{value:" 或者",paraId:1,tocIndex:0},{value:"自定义节点",paraId:3,tocIndex:0},{value:" 实现节点渲染。",paraId:1,tocIndex:0},{value:"Minimap（小地图）插件主要适用于以下场景：",paraId:4,tocIndex:1},{value:"提供全局视野，快速定位区域",paraId:5,tocIndex:1},{value:"导航与交互辅助，通过操作小地图可以快速定位到目标位置",paraId:5,tocIndex:1},{value:"以下是一个简单的 Minimap 插件初始化示例：",paraId:6,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      key: 'minimap',\n      type: 'minimap',\n      size: [240, 160],\n    },\n  ],\n});\n",paraId:7,tocIndex:2},{value:"minimap.md",paraId:8,tocIndex:3},{value:"createGraph(\n  {\n    data: {\n      nodes: Array.from({ length: 50 }).map((_, i) => ({\n        id: `node-${i}`,\n        x: Math.random() * 500,\n        y: Math.random() * 300,\n      })),\n      edges: Array.from({ length: 100 }).map((_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${Math.floor(Math.random() * 50)}`,\n        target: `node-${Math.floor(Math.random() * 50)}`,\n      })),\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'minimap', key: 'minimap', size: [240, 160], position: 'right-bottom' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'minimap',\n      width: 240,\n      height: 160,\n      shape: 'key',\n      padding: 10,\n      position: 'right-bottom',\n      maskStyleBorder: '1px solid #ddd',\n      maskStyleBackground: 'rgba(0, 0, 0, 0.1)',\n      containerStyleBorder: '1px solid #ddd',\n      containerStyleBackground: '#fff',\n      delay: 128,\n    };\n    const optionFolder = gui.addFolder('Minimap Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder\n      .add(options, 'width', 100, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          size: [value, options.height],\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'height', 100, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          size: [options.width, value],\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'shape', ['key'])\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          shape: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'padding', 0, 50, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          padding: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'position', ['right-bottom', 'left-bottom', 'right-top', 'left-top'])\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          position: value,\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'maskStyleBorder')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          maskStyle: { ...options.maskStyle, border: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'maskStyleBackground')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          maskStyle: { ...options.maskStyle, background: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'containerStyleBorder')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          containerStyle: { ...options.containerStyle, border: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .addColor(options, 'containerStyleBackground')\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          containerStyle: { ...options.containerStyle, background: value },\n        });\n        graph.render();\n      });\n    optionFolder\n      .add(options, 'delay', 0, 500, 1)\n      .listen()\n      .onChange((value) => {\n        graph.updatePlugin({\n          key: 'minimap',\n          delay: value,\n        });\n        graph.render();\n      });\n\n    // Update the maskStyle and containerStyle in the options object\n    Object.defineProperty(options, 'maskStyle', {\n      get: () => ({\n        border: options.maskStyleBorder,\n        background: options.maskStyleBackground,\n      }),\n      set: (value) => {\n        options.maskStyleBorder = value.border;\n        options.maskStyleBackground = value.background;\n      },\n    });\n\n    Object.defineProperty(options, 'containerStyle', {\n      get: () => ({\n        border: options.containerStyleBorder,\n        background: options.containerStyleBackground,\n      }),\n      set: (value) => {\n        options.containerStyleBorder = value.border;\n        options.containerStyleBackground = value.background;\n      },\n    });\n  },\n);\n",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"默认值",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"type",paraId:10,tocIndex:4},{value:"插件类型",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"minimap",paraId:10,tocIndex:4},{value:"✓",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:"插件唯一标识符，用于后续更新",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"className",paraId:10,tocIndex:4},{value:"缩略图画布类名，传入外置容器时不生效",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"container",paraId:10,tocIndex:4},{value:"缩略图挂载的容器，无则挂载到 Graph 所在容器",paraId:10,tocIndex:4},{value:"HTMLElement | string",paraId:10,tocIndex:4},{value:"containerStyle",paraId:10,tocIndex:4},{value:"缩略图的容器样式，传入外置容器时不生效",paraId:10,tocIndex:4},{value:"Partial<CSSStyleDeclaration>",paraId:10,tocIndex:4},{value:"delay",paraId:10,tocIndex:4},{value:"延迟更新时间(毫秒)，用于性能优化",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:"128",paraId:10,tocIndex:4},{value:"filter",paraId:10,tocIndex:4},{value:"过滤器，用于过滤不必显示的元素",paraId:10,tocIndex:4},{value:"(id: string, elementType: ",paraId:10,tocIndex:4},{value:"node",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"edge",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"combo",paraId:10,tocIndex:4},{value:") => boolean",paraId:10,tocIndex:4},{value:"maskStyle",paraId:10,tocIndex:4},{value:"遮罩的样式",paraId:10,tocIndex:4},{value:"Partial<CSSStyleDeclaration>",paraId:10,tocIndex:4},{value:"padding",paraId:10,tocIndex:4},{value:"内边距",paraId:10,tocIndex:4},{value:"number | number[]",paraId:10,tocIndex:4},{value:"10",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:"缩略图相对于画布的位置",paraId:10,tocIndex:4},{value:"[number, number] | ",paraId:10,tocIndex:4},{value:"left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"left-top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"left-bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right-top",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"right-bottom",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top-left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"top-right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom-left",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"bottom-right",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"center",paraId:10,tocIndex:4},{value:"right-bottom",paraId:10,tocIndex:4},{value:"renderer",paraId:10,tocIndex:4},{value:"渲染器，默认使用 Canvas 渲染器",paraId:10,tocIndex:4},{value:"IRenderer",paraId:10,tocIndex:4},{value:"shape",paraId:10,tocIndex:4},{value:"元素缩略图形的生成方法",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:" | ((id: string, elementType: ",paraId:10,tocIndex:4},{value:"node",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"edge",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"combo",paraId:10,tocIndex:4},{value:") => DisplayObject)",paraId:10,tocIndex:4},{value:"key",paraId:10,tocIndex:4},{value:"size",paraId:10,tocIndex:4},{value:"宽度和高度",paraId:10,tocIndex:4},{value:"[number, number]",paraId:10,tocIndex:4},{value:"[240, 160]",paraId:10,tocIndex:4},{value:"设置缩略图的容器样式，传入外置容器时不生效。继承了所有 CSS 样式属性（CSSStyleDeclaration），你可以使用任何合法的 CSS 属性来配置缩略图容器的样式。",paraId:11,tocIndex:5},{value:"以下是一些常用配置：",paraId:12,tocIndex:5},{value:"属性",paraId:13,tocIndex:5},{value:"描述",paraId:13,tocIndex:5},{value:"类型",paraId:13,tocIndex:5},{value:"默认值",paraId:13,tocIndex:5},{value:"必选",paraId:13,tocIndex:5},{value:"border",paraId:13,tocIndex:5},{value:"容器边框样式",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"1px solid #ddd",paraId:13,tocIndex:5},{value:"✓",paraId:13,tocIndex:5},{value:"background",paraId:13,tocIndex:5},{value:"容器背景颜色",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"#fff",paraId:13,tocIndex:5},{value:"✓",paraId:13,tocIndex:5},{value:"borderRadius",paraId:13,tocIndex:5},{value:"容器圆角大小",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"boxShadow",paraId:13,tocIndex:5},{value:"容器阴影效果",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"padding",paraId:13,tocIndex:5},{value:"容器内边距",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"margin",paraId:13,tocIndex:5},{value:"容器外边距",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"opacity",paraId:13,tocIndex:5},{value:"透明度",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"-",paraId:13,tocIndex:5},{value:"指定遮罩的样式。继承了所有 CSS 样式属性（CSSStyleDeclaration），你可以使用任何合法的 CSS 属性来配置缩略图容器的样式。",paraId:14,tocIndex:6},{value:"以下是一些常用配置：",paraId:15,tocIndex:6},{value:"属性",paraId:16,tocIndex:6},{value:"描述",paraId:16,tocIndex:6},{value:"类型",paraId:16,tocIndex:6},{value:"默认值",paraId:16,tocIndex:6},{value:"必选",paraId:16,tocIndex:6},{value:"border",paraId:16,tocIndex:6},{value:"容器边框样式",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"1px solid #ddd",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"background",paraId:16,tocIndex:6},{value:"容器背景颜色",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"rgba(0, 0, 0, 0.1)",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"borderRadius",paraId:16,tocIndex:6},{value:"容器圆角大小",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"boxShadow",paraId:16,tocIndex:6},{value:"容器阴影效果",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"padding",paraId:16,tocIndex:6},{value:"容器内边距",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"margin",paraId:16,tocIndex:6},{value:"容器外边距",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"opacity",paraId:16,tocIndex:6},{value:"透明度",paraId:16,tocIndex:6},{value:"string",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"缩略图相对于画布的位置，缩略图位置配置支持数组形式和预设值形式。",paraId:17,tocIndex:7},{value:"数组形式 [number, number] 表示相对位置，取值范围为 0~1。举例：[0, 0] 代表画布左上角，[1, 1] 代表画布右下角。",paraId:18,tocIndex:7},{value:"预设值形式用于设定缩略图所在画布固定方位，可选值有：",paraId:18,tocIndex:7},{value:"left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"left-top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"left-bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right-top",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"right-bottom",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top-left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"top-right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom-left",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"bottom-right",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"center",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  plugins:[\n    {\n      ... // 其他配置\n      key: 'minimap',\n      type: 'minimap',\n      position: 'right-bottom'  // 这里进行修改minimap所在位置\n    }\n  ]\n})\n",paraId:19,tocIndex:7},{value:"效果如下：",paraId:20,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `node-${i}`,\n      x: Math.random() * 500,\n      y: Math.random() * 300,\n    })),\n    edges: Array.from({ length: 100 }).map((_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 50)}`,\n      target: `node-${Math.floor(Math.random() * 50)}`,\n    })),\n  },\n  node: { style: { fill: '#7e3feb' } },\n  edge: { style: { stroke: '#8b9baf' } },\n  layout: { type: 'force' },\n  behaviors: ['drag-canvas'],\n  plugins: [{ type: 'minimap', key: 'minimap', size: [240, 160], position: 'right-bottom' }],\n});\n\ngraph.render();\n",paraId:21,tocIndex:7},{value:"设置小地图的宽度和高度，默认值为 [240, 160]",paraId:22,tocIndex:8},{value:"const graph = new Graph({\n  plugins:[\n    {\n      ... // 其他配置\n      key: 'minimap',\n      type: 'minimap',\n      size: [200, 120]  // minimap的宽度和高度的设置\n    }\n  ]\n})\n",paraId:23,tocIndex:8},{value:"效果如下：",paraId:24,tocIndex:8},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 300,\n  data: {\n    nodes: Array.from({ length: 50 }).map((_, i) => ({\n      id: `node-${i}`,\n      x: Math.random() * 500,\n      y: Math.random() * 300,\n    })),\n    edges: Array.from({ length: 100 }).map((_, i) => ({\n      id: `edge-${i}`,\n      source: `node-${Math.floor(Math.random() * 50)}`,\n      target: `node-${Math.floor(Math.random() * 50)}`,\n    })),\n  },\n  node: { style: { fill: '#7e3feb' } },\n  edge: { style: { stroke: '#8b9baf' } },\n  layout: { type: 'force' },\n  behaviors: ['drag-canvas'],\n  plugins: [{ type: 'minimap', key: 'minimap', size: [200, 120], position: 'right-bottom' }],\n});\n\ngraph.render();\n",paraId:25,tocIndex:8}]},71190:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(35061);const d=[{value:"对齐线插件为画布提供智能对齐参考线，在移动节点时自动显示辅助线并支持自动吸附，帮助用户实现精确对齐，是图形编辑中提升效率和精确度的重要工具。",paraId:0,tocIndex:0},{value:"对齐线插件主要适用于以下场景：",paraId:1,tocIndex:1},{value:"手动调整节点位置时,需要与其他节点精确对齐",paraId:2,tocIndex:1},{value:"拖拽移动多个节点时,保持它们之间的对齐关系",paraId:2,tocIndex:1},{value:"制作规范的图形布局时,确保节点间距和位置的一致性",paraId:2,tocIndex:1},{value:"通过自动吸附功能提高节点排版效率",paraId:2,tocIndex:1},{value:"以下是一个简单的 Snapline 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'snapline',\n      key: 'my-snapline', // 指定唯一标识符\n      tolerance: 5, // 对齐吸附阈值\n      offset: 20, // 对齐线延伸距离\n      autoSnap: true, // 启用自动吸附\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-0' },\n        { id: 'node-1' },\n        { id: 'node-2' },\n        { id: 'node-3' },\n        { id: 'node-4' },\n        { id: 'node-5' },\n      ],\n      edges: [\n        { source: 'node-0', target: 'node-1' },\n        { source: 'node-0', target: 'node-2' },\n        { source: 'node-0', target: 'node-3' },\n        { source: 'node-0', target: 'node-4' },\n        { source: 'node-1', target: 'node-0' },\n        { source: 'node-2', target: 'node-0' },\n        { source: 'node-3', target: 'node-0' },\n        { source: 'node-4', target: 'node-0' },\n        { source: 'node-5', target: 'node-0' },\n      ],\n    },\n    layout: { type: 'grid' },\n    behaviors: ['drag-canvas', 'drag-element'],\n    plugins: [\n      { type: 'grid-line', key: 'grid-line', size: 30 },\n      {\n        type: 'snapline',\n        key: 'snapline',\n        tolerance: 5,\n        offset: 20,\n        verticalLineStyle: { stroke: '#F08F56', lineWidth: 2 },\n        horizontalLineStyle: { stroke: '#17C76F', lineWidth: 2 },\n      },\n    ],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'snapline',\n      tolerance: 5,\n      offset: 20,\n      autoSnap: true,\n    };\n    const optionFolder = gui.addFolder('Snapline Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'tolerance', 1, 20, 1);\n    optionFolder.add(options, 'offset', 1, 50, 1);\n    optionFolder.add(options, 'autoSnap');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'snapline',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:4},{value:"描述",paraId:6,tocIndex:4},{value:"类型",paraId:6,tocIndex:4},{value:"默认值",paraId:6,tocIndex:4},{value:"必选",paraId:6,tocIndex:4},{value:"type",paraId:6,tocIndex:4},{value:"插件类型",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"'snapline'",paraId:6,tocIndex:4},{value:"✓",paraId:6,tocIndex:4},{value:"key",paraId:6,tocIndex:4},{value:"插件唯一标识符",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tolerance",paraId:6,tocIndex:4},{value:"对齐精度，即触发对齐的距离阈值",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"5",paraId:6,tocIndex:4},{value:"offset",paraId:6,tocIndex:4},{value:"对齐线头尾的延伸距离",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"20",paraId:6,tocIndex:4},{value:"autoSnap",paraId:6,tocIndex:4},{value:"是否启用自动吸附",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"shape",paraId:6,tocIndex:4},{value:"指定元素的参照图形：",paraId:6,tocIndex:4},{value:"- ",paraId:6,tocIndex:4},{value:"'key'",paraId:6,tocIndex:4},{value:": 使用元素的主图形作为参照图形",paraId:6,tocIndex:4},{value:"- ",paraId:6,tocIndex:4},{value:"Function",paraId:6,tocIndex:4},{value:": 传入函数时接收元素对象，返回一个图形",paraId:6,tocIndex:4},{value:"string | ((node: Node) => DisplayObject)",paraId:6,tocIndex:4},{value:"'key'",paraId:6,tocIndex:4},{value:"verticalLineStyle",paraId:6,tocIndex:4},{value:"垂直对齐线样式",paraId:6,tocIndex:4},{value:"支持",paraId:6,tocIndex:4},{value:"BaseStyleProps",paraId:7,tocIndex:4},{value:" 下的部分配置，详见",paraId:6,tocIndex:4},{value:"「对齐线样式配置项」",paraId:8,tocIndex:4},{value:"{ stroke: '#1783FF' }",paraId:6,tocIndex:4},{value:"horizontalLineStyle",paraId:6,tocIndex:4},{value:"水平对齐线样式",paraId:6,tocIndex:4},{value:"支持",paraId:6,tocIndex:4},{value:"BaseStyleProps",paraId:9,tocIndex:4},{value:" 下的部分配置，详见",paraId:6,tocIndex:4},{value:"「对齐线样式配置项」",paraId:10,tocIndex:4},{value:"{ stroke: '#1783FF' }",paraId:6,tocIndex:4},{value:"filter",paraId:6,tocIndex:4},{value:"过滤不需要参与对齐的节点",paraId:6,tocIndex:4},{value:"(node: Node) => boolean",paraId:6,tocIndex:4},{value:"() => true",paraId:6,tocIndex:4},{value:"shape",paraId:11,tocIndex:5},{value:" 属性用于指定元素的参照图形，支持以下配置方式：",paraId:11,tocIndex:5},{value:"// 使用主图形作为参照\n{\n  type: 'snapline',\n  shape: 'key'\n}\n\n// 使用自定义函数返回参照图形\n{\n  type: 'snapline',\n  shape: (node) => {\n    return node.getShape('custom-shape');\n  }\n}\n",paraId:12,tocIndex:5},{value:"配置项",paraId:13,tocIndex:6},{value:"说明",paraId:13,tocIndex:6},{value:"类型",paraId:13,tocIndex:6},{value:"默认值",paraId:13,tocIndex:6},{value:"stroke",paraId:13,tocIndex:6},{value:"线条颜色",paraId:13,tocIndex:6},{value:"string | Pattern | null",paraId:13,tocIndex:6},{value:"'#1783FF'",paraId:13,tocIndex:6},{value:"opacity",paraId:13,tocIndex:6},{value:"整体透明度",paraId:13,tocIndex:6},{value:"number | string",paraId:13,tocIndex:6},{value:"1",paraId:13,tocIndex:6},{value:"strokeOpacity",paraId:13,tocIndex:6},{value:"描边透明度",paraId:13,tocIndex:6},{value:"number | string",paraId:13,tocIndex:6},{value:"1",paraId:13,tocIndex:6},{value:"lineWidth",paraId:13,tocIndex:6},{value:"线宽度",paraId:13,tocIndex:6},{value:"number | string",paraId:13,tocIndex:6},{value:"1",paraId:13,tocIndex:6},{value:"lineCap",paraId:13,tocIndex:6},{value:"线段端点样式",paraId:13,tocIndex:6},{value:"'butt'",paraId:13,tocIndex:6},{value:" | ",paraId:13,tocIndex:6},{value:"'round'",paraId:13,tocIndex:6},{value:" | ",paraId:13,tocIndex:6},{value:"'square'",paraId:13,tocIndex:6},{value:"'butt'",paraId:13,tocIndex:6},{value:"lineJoin",paraId:13,tocIndex:6},{value:"线段连接处样式",paraId:13,tocIndex:6},{value:"'miter'",paraId:13,tocIndex:6},{value:" | ",paraId:13,tocIndex:6},{value:"'round'",paraId:13,tocIndex:6},{value:" | ",paraId:13,tocIndex:6},{value:"'bevel'",paraId:13,tocIndex:6},{value:"'miter'",paraId:13,tocIndex:6},{value:"lineDash",paraId:13,tocIndex:6},{value:"虚线配置",paraId:13,tocIndex:6},{value:"number | string | (string | number)[]",paraId:13,tocIndex:6},{value:"-",paraId:13,tocIndex:6},{value:"lineDashOffset",paraId:13,tocIndex:6},{value:"虚线偏移量",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:"0",paraId:13,tocIndex:6},{value:"shadowBlur",paraId:13,tocIndex:6},{value:"阴影模糊程度",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:"0",paraId:13,tocIndex:6},{value:"shadowColor",paraId:13,tocIndex:6},{value:"阴影颜色",paraId:13,tocIndex:6},{value:"string",paraId:13,tocIndex:6},{value:"-",paraId:13,tocIndex:6},{value:"shadowOffsetX",paraId:13,tocIndex:6},{value:"阴影 X 方向偏移",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:"0",paraId:13,tocIndex:6},{value:"shadowOffsetY",paraId:13,tocIndex:6},{value:"阴影 Y 方向偏移",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:"0",paraId:13,tocIndex:6},{value:"cursor",paraId:13,tocIndex:6},{value:"鼠标样式",paraId:13,tocIndex:6},{value:"string",paraId:13,tocIndex:6},{value:"'default'",paraId:13,tocIndex:6},{value:"zIndex",paraId:13,tocIndex:6},{value:"渲染层级",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:"0",paraId:13,tocIndex:6},{value:"示例配置",paraId:14,tocIndex:6},{value:"{\n  type: 'snapline',\n  horizontalLineStyle: {\n    stroke: '#F08F56',\n    strokeOpacity: 0.8,\n    lineWidth: 2,\n    lineDash: [4, 4],\n    lineDashOffset: 0,\n    opacity: 1,\n    cursor: 'move',\n  },\n  verticalLineStyle: {\n    stroke: '#17C76F',\n    strokeOpacity: 0.8,\n    lineWidth: 2,\n    lineDash: [4, 4],\n    lineDashOffset: 0,\n    opacity: 1,\n    cursor: 'move',\n  },\n}\n",paraId:15,tocIndex:6},{value:"最简单的使用方式：",paraId:16,tocIndex:8},{value:"const graph = new Graph({\n  plugins: ['snapline'],\n});\n",paraId:17,tocIndex:8},{value:"可以根据需要自定义对齐线的行为：",paraId:18,tocIndex:9},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'snapline',\n      tolerance: 8, // 更大的吸附范围\n      offset: 30, // 更长的延伸线\n      horizontalLineStyle: {\n        stroke: '#1890ff',\n        lineWidth: 2,\n      },\n      filter: (node) => node.id !== 'node-0', // 根据id过滤节点，不参与对齐\n    },\n  ],\n});\n",paraId:19,tocIndex:9}]},37590:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(12890);const d=[{value:"时间条插件是一个用于时序数据探索的重要工具，它能够通过时间轴或趋势图的形式展示数据的时间分布，并支持时间区间筛选、动态播放等交互方式，帮助用户更好地理解数据随时间的变化。",paraId:0,tocIndex:0},{value:"需要展示和分析时序数据的时间分布",paraId:1,tocIndex:1},{value:"需要通过时间维度筛选和探索图数据",paraId:1,tocIndex:1},{value:"需要动态展示数据随时间变化的过程",paraId:1,tocIndex:1},{value:"以下是一个简单的 Timebar 插件初始化示例：",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'timebar',\n      data: timeData, // 时间数据\n      width: 450, // 时间条宽度\n      height: 60, // 时间条高度\n      position: 'bottom', // 位置\n      loop: false, // 是否循环播放\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: {\n      nodes: new Array(25).fill(0).map((_, index) => ({\n        id: `node-${index}`,\n        data: {\n          timestamp: new Date('2023-08-01').getTime() + (index % 5) * 3600 * 24 * 1000,\n          value: index % 10,\n          label: new Date(new Date('2023-08-01').getTime() + (index % 5) * 3600 * 24 * 1000).toLocaleString(),\n        },\n      })),\n      edges: new Array(25).fill(0).map((_, i) => ({\n        id: `edge-${i}`,\n        source: `node-${i % 12}`,\n        target: `node-${(i % 10) + 15}`,\n        data: {\n          edgeType: 'e1',\n        },\n      })),\n    },\n    layout: { type: 'grid', cols: 5 },\n    node: {\n      style: { size: 24, fill: '#7e3feb' },\n      palette: { field: 'cluster' },\n    },\n    edge: { style: { stroke: '#8b9baf' } },\n    behaviors: ['drag-canvas'],\n    plugins: [\n      'grid-line',\n      {\n        type: 'timebar',\n        key: 'timebar',\n        data: [10, 2, 3, 4, 15].map((value, index) => ({\n          time: new Date(new Date('2023-08-01').getTime() + index * 3600 * 24 * 1000),\n          value,\n          label: new Date(new Date('2023-08-01').getTime() + index * 3600 * 24 * 1000).toLocaleString(),\n        })),\n        timebarType: 'time',\n        height: 100,\n      },\n    ],\n    autoFit: 'view',\n    padding: [10, 0, 100, 0],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      type: 'timebar',\n      position: 'bottom',\n      enable: true,\n      timebarType: 'time',\n      className: 'g6-timebar',\n      width: 450,\n      height: 100,\n      zIndex: 3,\n      elementTypes: ['node'],\n      mode: 'modify',\n      loop: false,\n    };\n    const optionFolder = gui.addFolder('Timebar Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'height', 40, 100, 1);\n    optionFolder.add(options, 'width', 200, 800, 1);\n    optionFolder.add(options, 'position', ['bottom', 'top']);\n    optionFolder.add(options, 'timebarType', ['time', 'chart']);\n    optionFolder.add(options, 'loop');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'timebar',\n        [property]: value,\n      });\n      graph.render();\n    });\n\n    const apiFolder = gui.addFolder('Timebar API');\n    const instance = graph.getPluginInstance('timebar');\n    apiFolder.add(instance, 'play');\n    apiFolder.add(instance, 'pause');\n    apiFolder.add(instance, 'forward');\n    apiFolder.add(instance, 'backward');\n    apiFolder.add(instance, 'reset');\n  },\n);\n",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"必选",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"插件类型",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"timebar",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"key",paraId:5,tocIndex:4},{value:"插件的唯一标识，可用于获取插件实例或更新插件选项",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"className",paraId:5,tocIndex:4},{value:"给工具栏的 DOM 追加的类名",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"g6-timebar",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:"X 位置（设置后 position 会失效）",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"y",paraId:5,tocIndex:4},{value:"Y 位置（设置后 position 会失效）",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:"时间条宽度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"450",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:"时间条高度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"60",paraId:5,tocIndex:4},{value:"position",paraId:5,tocIndex:4},{value:"时间条位置",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"top",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:"padding",paraId:5,tocIndex:4},{value:"边距",paraId:5,tocIndex:4},{value:"number | number[]",paraId:5,tocIndex:4},{value:"10",paraId:5,tocIndex:4},{value:"data",paraId:5,tocIndex:4},{value:"时间数据",paraId:5,tocIndex:4},{value:"number[] | { time: number; value: number }[]",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"timebarType",paraId:5,tocIndex:4},{value:"时间条展示类型",paraId:5,tocIndex:4},{value:"time",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"chart",paraId:5,tocIndex:4},{value:"time",paraId:5,tocIndex:4},{value:"elementTypes",paraId:5,tocIndex:4},{value:"筛选元素类型",paraId:5,tocIndex:4},{value:"(",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"edge",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"combo",paraId:5,tocIndex:4},{value:")[]",paraId:5,tocIndex:4},{value:"[",paraId:5,tocIndex:4},{value:"node",paraId:5,tocIndex:4},{value:"]",paraId:5,tocIndex:4},{value:"mode",paraId:5,tocIndex:4},{value:"控制元素的筛选方式，支持以下两种配置： ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:"：通过修改图数据进行筛选 ",paraId:5,tocIndex:4},{value:"- ",paraId:5,tocIndex:4},{value:"visibility",paraId:5,tocIndex:4},{value:"：通过修改元素可见性进行筛选",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"visibility",paraId:5,tocIndex:4},{value:"modify",paraId:5,tocIndex:4},{value:"values",paraId:5,tocIndex:4},{value:"当前时间值",paraId:5,tocIndex:4},{value:"number | [number, number] | Date | [Date, Date]",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"loop",paraId:5,tocIndex:4},{value:"是否循环播放",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:"getTime",paraId:5,tocIndex:4},{value:"获取元素时间的方法",paraId:5,tocIndex:4},{value:"(datum: ElementDatum) => number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"labelFormatter",paraId:5,tocIndex:4},{value:"图表模式下自定义时间格式化",paraId:5,tocIndex:4},{value:"(time: number | Date) => string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onChange",paraId:5,tocIndex:4},{value:"时间区间变化时的回调",paraId:5,tocIndex:4},{value:"(values: number | [number, number]) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onReset",paraId:5,tocIndex:4},{value:"重置时的回调",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onSpeedChange",paraId:5,tocIndex:4},{value:"播放速度变化时的回调",paraId:5,tocIndex:4},{value:"(speed: number) => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onPlay",paraId:5,tocIndex:4},{value:"开始播放时的回调",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onPause",paraId:5,tocIndex:4},{value:"暂停时的回调",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onBackward",paraId:5,tocIndex:4},{value:"后退时的回调",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"onForward",paraId:5,tocIndex:4},{value:"前进时的回调",paraId:5,tocIndex:4},{value:"() => void",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"timebarType",paraId:6,tocIndex:5},{value:" 属性用于控制时间条的展示类型，支持以下两种配置：",paraId:6,tocIndex:5},{value:"time",paraId:7,tocIndex:5},{value:"：显示为时间轴形式，参考 ",paraId:7,tocIndex:5},{value:"时间模式示例",paraId:8,tocIndex:5},{value:"chart",paraId:7,tocIndex:5},{value:"：显示为趋势图形式，此时",paraId:7,tocIndex:5},{value:"timebar",paraId:7,tocIndex:5},{value:"下的",paraId:7,tocIndex:5},{value:"data",paraId:7,tocIndex:5},{value:"配置项，每个数组项需要额外传入 ",paraId:7,tocIndex:5},{value:"value",paraId:7,tocIndex:5},{value:" 字段作为图表数据，参考 ",paraId:7,tocIndex:5},{value:"图表模式示例",paraId:9,tocIndex:5},{value:"最简单的配置方式：",paraId:10,tocIndex:7},{value:"const graph = new Graph({\n  layout: { type: 'grid', cols: 5 },\n  plugins: [\n    {\n      type: 'timebar',\n      data: [\n        {\n          time: new Date('2023-08-01').getTime(),\n          value: 5,\n        },\n        {\n          time: new Date('2023-08-02').getTime(),\n          value: 10,\n        },\n        {\n          time: new Date('2023-08-03').getTime(),\n          value: 15,\n        },\n      ],\n    },\n  ],\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        label: '节点1',\n        // 默认情况下 elementTypes=['node']，所以节点需要设置 data.timestamp，才能按照时间轴内的时间依次展示\n        data: {\n          timestamp: new Date('2023-08-01').getTime(),\n        },\n      },\n      {\n        id: 'node2',\n        label: '节点2',\n        data: {\n          timestamp: new Date('2023-08-02').getTime(),\n        },\n      },\n      {\n        id: 'node3',\n        label: '节点3',\n        data: {\n          timestamp: new Date('2023-08-03').getTime(),\n        },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge1',\n        source: 'node1',\n        target: 'node2',\n        // 场景一：默认情况 elementTypes = ['node']\n        // - 边不需要设置 data.timestamp，边的显示/隐藏完全取决于其连接的两个节点是否可见\n\n        // 场景二：如果elementTypes包含了'edge'，比如 elementTypes = ['node', 'edge']\n        // - 此时必须为边设置 data.timestamp，边的显示受其控制\n        // data: {\n        //   timestamp: new Date('2023-08-01').getTime()\n        // }\n      },\n      {\n        id: 'edge2',\n        source: 'node2',\n        target: 'node3',\n      },\n      {\n        id: 'edge3',\n        source: 'node3',\n        target: 'node1',\n      },\n    ],\n  },\n});\n",paraId:11,tocIndex:7},{value:"效果如下：",paraId:12,tocIndex:7},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  width: 600,\n  height: 400,\n  layout: { type: 'grid', cols: 5 },\n  plugins: [\n    {\n      type: 'timebar',\n      data: [\n        {\n          time: new Date('2023-08-01').getTime(),\n          value: 5,\n        },\n        {\n          time: new Date('2023-08-02').getTime(),\n          value: 10,\n        },\n        {\n          time: new Date('2023-08-03').getTime(),\n          value: 15,\n        },\n      ],\n    },\n  ],\n  data: {\n    nodes: [\n      {\n        id: 'node1',\n        label: '节点1',\n        data: {\n          timestamp: new Date('2023-08-01').getTime(),\n        },\n      },\n      {\n        id: 'node2',\n        label: '节点2',\n        data: {\n          timestamp: new Date('2023-08-02').getTime(),\n        },\n      },\n      {\n        id: 'node3',\n        label: '节点3',\n        data: {\n          timestamp: new Date('2023-08-03').getTime(),\n        },\n      },\n    ],\n    edges: [\n      {\n        id: 'edge1',\n        source: 'node1',\n        target: 'node2',\n      },\n      {\n        id: 'edge2',\n        source: 'node2',\n        target: 'node3',\n      },\n      {\n        id: 'edge3',\n        source: 'node3',\n        target: 'node1',\n      },\n    ],\n  },\n});\n\ngraph.render();\n",paraId:13,tocIndex:7},{value:"width",paraId:14,tocIndex:8},{value:"、",paraId:14,tocIndex:8},{value:"height",paraId:14,tocIndex:8},{value:"、",paraId:14,tocIndex:8},{value:"padding",paraId:14,tocIndex:8},{value:"、",paraId:14,tocIndex:8},{value:"className",paraId:14,tocIndex:8},{value:" 可自定义时间条的展示效果，但需要注意 ",paraId:14,tocIndex:8},{value:"className",paraId:14,tocIndex:8},{value:" 仅作用于外层 DOM 容器，无法影响时间条内部的 Canvas 渲染内容（时间轴、图表、播放按钮等）。",paraId:14,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'timebar',\n      className: 'custom-timebar', // 注意：由于内容是 Canvas 渲染，CSS 样式无法影响到时间条的内部内容\n      width: 400, // 设置时间条宽度\n      height: 80, // 设置时间条高度\n      padding: [20, 20, 10, 20], // 设置内边距 [上, 右, 下, 左]\n      position: 'bottom', // 位置保持在底部\n      data: timeData,\n      // labelFormatter: (time) => {\n      //   return new Date(time).toLocaleDateString();\n      // }\n    },\n  ],\n});\n",paraId:15,tocIndex:8},{value:"通过 CSS 只能设置时间条容器的样式：",paraId:16,tocIndex:8},{value:".custom-timebar {\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n",paraId:17,tocIndex:8},{value:"效果如下：",paraId:18,tocIndex:8},{value:"createGraph(\n  {\n    data: () => {\n      return {\n        nodes: [\n          {\n            id: 'node1',\n            style: { x: 100, y: 100, label: 'Node 1' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime(),\n            },\n          },\n          {\n            id: 'node2',\n            style: { x: 200, y: 100, label: 'Node 2' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime() + 3600 * 24 * 1000,\n            },\n          },\n          {\n            id: 'node3',\n            style: { x: 150, y: 200, label: 'Node 3' },\n            data: {\n              timestamp: new Date('2023-08-01').getTime() + 3600 * 24 * 1000 * 2,\n            },\n          },\n        ],\n        edges: [\n          { id: 'edge1', source: 'node1', target: 'node2' },\n          { id: 'edge2', source: 'node2', target: 'node3' },\n          { id: 'edge3', source: 'node3', target: 'node1' },\n        ],\n      };\n    },\n    node: {\n      style: {\n        size: 20,\n        label: true,\n      },\n    },\n    edge: {\n      style: {\n        stroke: '#91d5ff',\n        lineWidth: 1,\n      },\n    },\n    plugins: [\n      {\n        type: 'timebar',\n        className: 'custom-timebar',\n        width: 400,\n        height: 80,\n        padding: [20, 20, 10, 20],\n        position: 'bottom',\n        data: [\n          {\n            time: new Date('2023-08-01').getTime(),\n            value: 5,\n          },\n          {\n            time: new Date('2023-08-01').getTime() + 3600 * 24 * 1000,\n            value: 10,\n          },\n          {\n            time: new Date('2023-08-01').getTime() + 3600 * 24 * 1000 * 2,\n            value: 15,\n          },\n        ],\n        labelFormatter: (time) => {\n          return new Date(time).toLocaleDateString();\n        },\n      },\n    ],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    gui?.hide();\n    const style = document.createElement('style');\n    style.innerHTML = `\n      .custom-timebar {\n        background-color: #f0f0f0;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n    `;\n    document.head.appendChild(style);\n  },\n);\n",paraId:19,tocIndex:8},{value:"时间模式",paraId:20,tocIndex:9},{value:"图表模式",paraId:21,tocIndex:9}]},72288:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(81283);const d=[{value:"Toolbar 是 G6 中用于提供操作按钮集合的插件，支持放大、缩小、自适应、重置等常用图表操作。通过工具栏，用户可以快速访问图表的常用功能，提高操作效率和用户体验。",paraId:0,tocIndex:0},{value:"这一插件主要用于：",paraId:1,tocIndex:1},{value:"快速访问图表的常用功能",paraId:2,tocIndex:1},{value:"以下是一个简单的 Toolbar 插件初始化示例：",paraId:3,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n        { id: 'auto-fit', value: 'auto-fit' },\n      ],\n      onClick: (value) => {\n        // 处理按钮点击事件\n        if (value === 'zoom-in') {\n          graph.zoomTo(1.1);\n        } else if (value === 'zoom-out') {\n          graph.zoomTo(0.9);\n        } else if (value === 'auto-fit') {\n          graph.fitView();\n        }\n      },\n    },\n  ],\n});\n",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"必选",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"插件类型",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"toolbar",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"key",paraId:5,tocIndex:3},{value:"插件唯一标识符，用于后续更新",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"className",paraId:5,tocIndex:3},{value:"工具栏DOM元素的额外CSS类名",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"position",paraId:5,tocIndex:3},{value:"工具栏位置，相对于画布，",paraId:5,tocIndex:3},{value:"可选值",paraId:6,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"'top-left'",paraId:5,tocIndex:3},{value:"style",paraId:5,tocIndex:3},{value:"工具栏DOM元素的自定义样式，",paraId:5,tocIndex:3},{value:"常用值",paraId:7,tocIndex:3},{value:"CSSStyleDeclaration",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"getItems",paraId:5,tocIndex:3},{value:"返回工具栏项目列表",paraId:5,tocIndex:3},{value:"() => ",paraId:5,tocIndex:3},{value:"ToolbarItem",paraId:8,tocIndex:3},{value:"[] | Promise<",paraId:5,tocIndex:3},{value:"ToolbarItem",paraId:9,tocIndex:3},{value:"[]>",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"onClick",paraId:5,tocIndex:3},{value:"工具栏项目点击后的回调函数",paraId:5,tocIndex:3},{value:"(value: string, target: Element) => void",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"position",paraId:10,tocIndex:4},{value:" 参数支持以下值：",paraId:10,tocIndex:4},{value:"'top-left'",paraId:11,tocIndex:4},{value:"：左上角",paraId:11,tocIndex:4},{value:"'top-right'",paraId:11,tocIndex:4},{value:"：右上角",paraId:11,tocIndex:4},{value:"'bottom-left'",paraId:11,tocIndex:4},{value:"：左下角",paraId:11,tocIndex:4},{value:"'bottom-right'",paraId:11,tocIndex:4},{value:"：右下角",paraId:11,tocIndex:4},{value:"'left-top'",paraId:11,tocIndex:4},{value:"：左侧靠上",paraId:11,tocIndex:4},{value:"'left-bottom'",paraId:11,tocIndex:4},{value:"：左侧靠下",paraId:11,tocIndex:4},{value:"'right-top'",paraId:11,tocIndex:4},{value:"：右侧靠上",paraId:11,tocIndex:4},{value:"'right-bottom'",paraId:11,tocIndex:4},{value:"：右侧靠下",paraId:11,tocIndex:4},{value:"属性",paraId:12,tocIndex:5},{value:"描述",paraId:12,tocIndex:5},{value:"类型",paraId:12,tocIndex:5},{value:"默认值",paraId:12,tocIndex:5},{value:"backgroundColor",paraId:12,tocIndex:5},{value:"背景颜色",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"#fff",paraId:12,tocIndex:5},{value:"border",paraId:12,tocIndex:5},{value:"边框",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"1px solid #e8e8e8",paraId:12,tocIndex:5},{value:"borderRadius",paraId:12,tocIndex:5},{value:"圆角",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"4px",paraId:12,tocIndex:5},{value:"height",paraId:12,tocIndex:5},{value:"高度",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"auto",paraId:12,tocIndex:5},{value:"margin",paraId:12,tocIndex:5},{value:"外边距",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"12px",paraId:12,tocIndex:5},{value:"opacity",paraId:12,tocIndex:5},{value:"透明度",paraId:12,tocIndex:5},{value:"number",paraId:12,tocIndex:5},{value:"0.9",paraId:12,tocIndex:5},{value:"padding",paraId:12,tocIndex:5},{value:"内边距",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"8px",paraId:12,tocIndex:5},{value:"width",paraId:12,tocIndex:5},{value:"宽度",paraId:12,tocIndex:5},{value:"string",paraId:12,tocIndex:5},{value:"auto",paraId:12,tocIndex:5},{value:"每个工具栏项目 (ToolbarItem) 包含以下属性：",paraId:13,tocIndex:6},{value:"属性",paraId:14,tocIndex:6},{value:"描述",paraId:14,tocIndex:6},{value:"类型",paraId:14,tocIndex:6},{value:"必选",paraId:14,tocIndex:6},{value:"id",paraId:14,tocIndex:6},{value:"项目的图标ID，内置图标ID见",paraId:14,tocIndex:6},{value:"内置图标",paraId:15,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"value",paraId:14,tocIndex:6},{value:"点击项目时返回的值",paraId:14,tocIndex:6},{value:"string",paraId:14,tocIndex:6},{value:"✓",paraId:14,tocIndex:6},{value:"Toolbar 提供以下内置图标 ID：",paraId:16,tocIndex:7},{value:"'zoom-in'",paraId:17,tocIndex:7},{value:"：放大",paraId:17,tocIndex:7},{value:"'zoom-out'",paraId:17,tocIndex:7},{value:"：缩小",paraId:17,tocIndex:7},{value:"'redo'",paraId:17,tocIndex:7},{value:"：重做",paraId:17,tocIndex:7},{value:"'undo'",paraId:17,tocIndex:7},{value:"：撤销",paraId:17,tocIndex:7},{value:"'edit'",paraId:17,tocIndex:7},{value:"：编辑",paraId:17,tocIndex:7},{value:"'delete'",paraId:17,tocIndex:7},{value:"：删除",paraId:17,tocIndex:7},{value:"'auto-fit'",paraId:17,tocIndex:7},{value:"：自适应视图",paraId:17,tocIndex:7},{value:"'export'",paraId:17,tocIndex:7},{value:"：导出图表",paraId:17,tocIndex:7},{value:"'reset'",paraId:17,tocIndex:7},{value:"：重置视图",paraId:17,tocIndex:7},{value:"'request-fullscreen'",paraId:17,tocIndex:7},{value:"：请求全屏",paraId:17,tocIndex:7},{value:"'exit-fullscreen'",paraId:17,tocIndex:7},{value:"：退出全屏",paraId:17,tocIndex:7},{value:"除了使用内置图标外，还可以通过引入第三方图标库（如阿里巴巴 iconfont）来使用自定义图标：",paraId:18,tocIndex:8},{value:"// 引入 iconfont 脚本\nconst iconFont = document.createElement('script');\niconFont.src = '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js'; // 替换为你的 iconfont 脚本地址\ndocument.head.appendChild(iconFont);\n\n// 在工具栏中使用自定义图标\nconst graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'icon-xinjian', value: 'new' }, // 使用 iconfont 中的图标\n        { id: 'icon-fenxiang', value: 'share' },\n        { id: 'icon-chexiao', value: 'undo' },\n      ],\n      onClick: (value) => {\n        // 处理点击事件\n      },\n    },\n  ],\n});\n",paraId:19,tocIndex:8},{value:"注意：自定义图标的 ID 通常以 ",paraId:20,tocIndex:8},{value:"icon-",paraId:20,tocIndex:8},{value:" 开头，需要与引入的 iconfont 中的图标名称对应。",paraId:20,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      position: 'top-right',\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n        { id: 'undo', value: 'undo' },\n        { id: 'redo', value: 'redo' },\n        { id: 'auto-fit', value: 'fit' },\n      ],\n      onClick: (value) => {\n        // redo、undo 需要配合 history 插件使用\n        const history = graph.getPluginInstance('history');\n        switch (value) {\n          case 'zoom-in':\n            graph.zoomTo(1.1);\n            break;\n          case 'zoom-out':\n            graph.zoomTo(0.9);\n            break;\n          case 'undo':\n            history?.undo();\n            break;\n          case 'redo':\n            history?.redo();\n            break;\n          case 'fit':\n            graph.fitView();\n            break;\n          default:\n            break;\n        }\n      },\n    },\n  ],\n});\n",paraId:21,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      className: 'my-custom-toolbar',\n      style: {\n        backgroundColor: '#f5f5f5',\n        padding: '8px',\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n        borderRadius: '8px',\n        border: '1px solid #e8e8e8',\n        opacity: '0.9',\n        marginTop: '12px',\n        marginLeft: '12px',\n      },\n      getItems: () => [\n        { id: 'zoom-in', value: 'zoom-in' },\n        { id: 'zoom-out', value: 'zoom-out' },\n      ],\n      onClick: (value) => {\n        // 处理点击事件\n      },\n    },\n  ],\n});\n",paraId:22,tocIndex:11},{value:"常用的样式属性包括：",paraId:23,tocIndex:11},{value:"backgroundColor",paraId:24,tocIndex:11},{value:"：背景颜色",paraId:24,tocIndex:11},{value:"padding",paraId:24,tocIndex:11},{value:"：内边距",paraId:24,tocIndex:11},{value:"margin",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"marginTop",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"marginLeft",paraId:24,tocIndex:11},{value:" 等：外边距",paraId:24,tocIndex:11},{value:"border",paraId:24,tocIndex:11},{value:"：边框",paraId:24,tocIndex:11},{value:"borderRadius",paraId:24,tocIndex:11},{value:"：圆角",paraId:24,tocIndex:11},{value:"boxShadow",paraId:24,tocIndex:11},{value:"：阴影效果",paraId:24,tocIndex:11},{value:"opacity",paraId:24,tocIndex:11},{value:"：透明度",paraId:24,tocIndex:11},{value:"width",paraId:24,tocIndex:11},{value:"/",paraId:24,tocIndex:11},{value:"height",paraId:24,tocIndex:11},{value:"：宽高（默认自适应内容）",paraId:24,tocIndex:11},{value:"zIndex",paraId:24,tocIndex:11},{value:"：层级（默认为 100）",paraId:24,tocIndex:11},{value:"display",paraId:24,tocIndex:11},{value:"：显示方式（默认为 flex）",paraId:24,tocIndex:11},{value:"工具栏容器默认设置 ",paraId:25,tocIndex:11},{value:"display: flex",paraId:25,tocIndex:11},{value:"，子项目默认使用行布局（或根据 position 配置的方向改变）。你可以通过 ",paraId:25,tocIndex:11},{value:"style",paraId:25,tocIndex:11},{value:" 自定义其外观和位置。",paraId:25,tocIndex:11},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      getItems: async () => {\n        // 可以从服务器或其他异步源获取工具栏配置\n        const response = await fetch('/api/toolbar-config');\n        const items = await response.json();\n        return items;\n      },\n      onClick: (value) => {\n        // 处理点击事件\n      },\n    },\n  ],\n});\n",paraId:26,tocIndex:12},{value:"检查是否使用了正确的内置图标 ID",paraId:27,tocIndex:14},{value:"确保 CSS 样式未被覆盖或冲突",paraId:27,tocIndex:14},{value:"工具栏常常与其他插件（如历史记录）配合使用：",paraId:28,tocIndex:15},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'history',\n      key: 'history',\n    },\n    {\n      type: 'toolbar',\n      getItems: () => [\n        { id: 'undo', value: 'undo' },\n        { id: 'redo', value: 'redo' },\n      ],\n      onClick: (value) => {\n        const history = graph.getPluginInstance('history');\n        if (value === 'undo') {\n          history.undo();\n        } else if (value === 'redo') {\n          history.redo();\n        }\n      },\n    },\n  ],\n});\n",paraId:29,tocIndex:15},{value:"可以使用 ",paraId:30,tocIndex:16},{value:"updatePlugin",paraId:30,tocIndex:16},{value:" 方法动态更新工具栏：",paraId:30,tocIndex:16},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'toolbar',\n      key: 'my-toolbar',\n    },\n  ],\n});\n\n// 更新工具栏位置\ngraph.updatePlugin({\n  key: 'my-toolbar',\n  position: 'bottom-right',\n});\n",paraId:31,tocIndex:16}]},91708:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46522);const d=[{value:"用于在用户将鼠标悬停在图中的元素上时，显示额外的信息。Tooltip 可以帮助用户更好地理解图中的数据，提高交互体验。",paraId:0,tocIndex:0},{value:"当用户需要了解元素的详细信息时，可以使用 Tooltip 提示框来展示这些信息。",paraId:1,tocIndex:1},{value:"在数据可视化中，Tooltip 可以用于显示图表中的数据点的详细信息，帮助用户更好地理解数据。",paraId:1,tocIndex:1},{value:"以下是一个简单的 Tooltip 插件初始化示例：",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'tooltip',\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:"type",paraId:4,tocIndex:3},{value:"插件类型",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"tooltip",paraId:4,tocIndex:3},{value:"✓",paraId:4,tocIndex:3},{value:"key",paraId:4,tocIndex:3},{value:"标识符",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"position",paraId:4,tocIndex:3},{value:"气泡框位置",paraId:4,tocIndex:3},{value:"top",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"right",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"top-left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"top-right",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom-left",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"bottom-right",paraId:4,tocIndex:3},{value:"top-right",paraId:4,tocIndex:3},{value:"enable",paraId:4,tocIndex:3},{value:"插件是否启用",paraId:4,tocIndex:3},{value:"boolean | ((event: ",paraId:4,tocIndex:3},{value:"IElementEvent",paraId:5,tocIndex:3},{value:", items: NodeData | EdgeData | ComboData[]) => boolean)",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"getContent",paraId:4,tocIndex:3},{value:"自定义内容",paraId:4,tocIndex:3},{value:"(event: ",paraId:4,tocIndex:3},{value:"IElementEvent",paraId:6,tocIndex:3},{value:", items: NodeData | EdgeData | ComboData[]) => Promise<HTMLElement | string>",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"onOpenChange",paraId:4,tocIndex:3},{value:"显示隐藏的回调",paraId:4,tocIndex:3},{value:"(open: boolean) => void",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"trigger",paraId:4,tocIndex:3},{value:"触发行为",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"click",paraId:4,tocIndex:3},{value:"hover",paraId:4,tocIndex:3},{value:"container",paraId:4,tocIndex:3},{value:"tooltip自定义渲染的容器",paraId:4,tocIndex:3},{value:"string | HTMLElement",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"offset",paraId:4,tocIndex:3},{value:"偏移距离",paraId:4,tocIndex:3},{value:"[number,number]",paraId:4,tocIndex:3},{value:"[10,10]",paraId:4,tocIndex:3},{value:"enterable",paraId:4,tocIndex:3},{value:"指针是否可以进入",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"title",paraId:4,tocIndex:3},{value:"标题",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style",paraId:4,tocIndex:3},{value:"样式对象",paraId:4,tocIndex:3},{value:"Record<string,any>",paraId:4,tocIndex:3},{value:"{'.tooltip': { visibility: 'hidden'}}",paraId:4,tocIndex:3},{value:"是否启用, 支持传入函数动态调整启用插件逻辑",paraId:7,tocIndex:4},{value:"只有节点使用tooltip插件",paraId:8,tocIndex:4},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'tooltip',\n      enable:(e) => e.targetType === 'node';\n    },\n  ],\n});\n",paraId:9,tocIndex:4},{value:"自定义渲染Tooltip 内容，支持返回 HTMLElement 或 string",paraId:10,tocIndex:5},{value:"动态渲染自定义html内容",paraId:11,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'tooltip',\n      trigger: 'click',\n      getContent: (e, items) => {\n        let result = `<h4>Custom Content</h4>`;\n        items.forEach((item) => {\n          result += `<p>Type: ${item.data.description}</p>`;\n        });\n        return result;\n      },\n    },\n  ],\n});\n",paraId:12,tocIndex:5},{value:"显示隐藏的回调",paraId:13,tocIndex:6},{value:"触发tooltip显示，可加入自定义埋点统计上报内容",paraId:14,tocIndex:6},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      trigger: 'click',\n      onOpenChange: (open) => {\n        console.log('Tooltip open change');\n      },\n    },\n  ],\n});\n",paraId:15,tocIndex:6},{value:"触发行为",paraId:16,tocIndex:7},{value:"'hover'",paraId:17,tocIndex:7},{value:"：鼠标移入元素时触发",paraId:17,tocIndex:7},{value:"'click'",paraId:17,tocIndex:7},{value:"：鼠标点击元素时触发",paraId:17,tocIndex:7},{value:"点击元素触发tooltip",paraId:18,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      trigger: 'click',\n    },\n  ],\n});\n",paraId:19,tocIndex:7},{value:"展示位置 支持以下值",paraId:20,tocIndex:8},{value:"top",paraId:21,tocIndex:8},{value:": 顶部",paraId:21,tocIndex:8},{value:"bottom",paraId:21,tocIndex:8},{value:": 底部",paraId:21,tocIndex:8},{value:"left",paraId:21,tocIndex:8},{value:": 左侧",paraId:21,tocIndex:8},{value:"right",paraId:21,tocIndex:8},{value:": 右侧",paraId:21,tocIndex:8},{value:"top-left",paraId:21,tocIndex:8},{value:" : 顶部靠左",paraId:21,tocIndex:8},{value:"top-right",paraId:21,tocIndex:8},{value:" : 顶部靠右",paraId:21,tocIndex:8},{value:"bottom-left",paraId:21,tocIndex:8},{value:" : 底部靠左",paraId:21,tocIndex:8},{value:"bottom-right",paraId:21,tocIndex:8},{value:" : 底部靠右",paraId:21,tocIndex:8},{value:"展示在底部",paraId:22,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      position: 'bottom',\n    },\n  ],\n});\n",paraId:23,tocIndex:8},{value:"显示位置的偏移量，以鼠标进入元素的点为基点",paraId:24,tocIndex:9},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      position: 'bottom',\n    },\n  ],\n});\n",paraId:25,tocIndex:9},{value:"鼠标指针是否可以进入气泡框",paraId:26,tocIndex:10},{value:"鼠标可进入气泡框",paraId:27,tocIndex:10},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      enterable: true,\n    },\n  ],\n});\n",paraId:28,tocIndex:10},{value:"样式对象",paraId:29,tocIndex:11},{value:"黑色元素背景颜色",paraId:30,tocIndex:11},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      key: 'tooltip-click',\n      type: 'tooltip',\n      style: {\n        ['.tooltip']: {\n          backgroundColor: 'black',\n        },\n      },\n    },\n  ],\n});\n",paraId:31,tocIndex:11},{value:"createGraph(\n  {\n    data: {\n      nodes: [\n        { id: 'node-0' },\n        { id: 'node-1' },\n        { id: 'node-2' },\n        { id: 'node-3' },\n        { id: 'node-4' },\n        { id: 'node-5' },\n      ],\n      edges: [\n        { source: 'node-0', target: 'node-1' },\n        { source: 'node-0', target: 'node-2' },\n        { source: 'node-0', target: 'node-3' },\n        { source: 'node-0', target: 'node-4' },\n        { source: 'node-1', target: 'node-0' },\n        { source: 'node-2', target: 'node-0' },\n        { source: 'node-3', target: 'node-0' },\n        { source: 'node-4', target: 'node-0' },\n        { source: 'node-5', target: 'node-0' },\n      ],\n    },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'grid' },\n    behaviors: ['drag-canvas'],\n    plugins: ['grid-line', { type: 'tooltip', key: 'tooltip' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'tooltip',\n      trigger: 'hover',\n      enable: 'always',\n      position: 'top-left',\n      enterable: false,\n    };\n    const optionFolder = gui.addFolder('Tooltip Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'trigger', ['click', 'hover']);\n    optionFolder.add(options, 'enable', ['always', 'node', 'edge']);\n    optionFolder.add(options, 'position', [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-left',\n      'top-right',\n      'bottom-left',\n      'bottom-right',\n    ]);\n    optionFolder.add(options, 'enterable');\n\n    optionFolder.onChange((e) => {\n      const { enable, ...rest } = e.object;\n      let enableFn = () => true;\n      if ((enable === 'node') | (enable === 'edge')) {\n        enableFn = (e) => e.targetType === enable;\n      }\n      graph.updatePlugin({\n        key: 'tooltip',\n        enable: enableFn,\n        ...rest,\n      });\n      graph.render();\n    });\n    // const apiFolder = gui.addFolder('Contextmenu API');\n    // const instance = graph.getPluginInstance('contextmenu');\n    // apiFolder.add(instance, 'hide');\n  },\n);\n",paraId:32,tocIndex:12},{value:"参考示例",paraId:33,tocIndex:12},{value:"：",paraId:33,tocIndex:12},{value:"提示框",paraId:34,tocIndex:12},{value:"点击触发 Tooltip",paraId:35,tocIndex:12},{value:"鼠标移入和点击同一元素时显示不同的提示框",paraId:36,tocIndex:12}]},28756:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73915);const d=[{value:"水印插件支持使用文本和图片作为水印，实现原理是在 Graph 容器的 div 上加上 ",paraId:0,tocIndex:0},{value:"background-image",paraId:0,tocIndex:0},{value:" 属性，然后通过 CSS 来控制水印的位置和样式。对于文本水印，会使用隐藏 canvas 将文本转换为图片的方式来实现。",paraId:0,tocIndex:0},{value:"为图表添加版权或所有权标识",paraId:1,tocIndex:1},{value:"在演示或预览时标记图表的状态",paraId:1,tocIndex:1},{value:"为敏感数据添加防泄露标记",paraId:1,tocIndex:1},{value:"以下是一个简单的 Watermark 插件初始化示例：",paraId:2,tocIndex:2},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph', // 水印文本\n      opacity: 0.2, // 透明度\n      rotate: Math.PI / 12, // 旋转角度\n    },\n  ],\n});\n",paraId:3,tocIndex:2},{value:"createGraph(\n  {\n    data: { nodes: [{ id: 'node-1' }] },\n    node: { style: { fill: '#7e3feb' } },\n    edge: { style: { stroke: '#8b9baf' } },\n    layout: { type: 'force' },\n    behaviors: ['drag-canvas'],\n    plugins: [{ type: 'watermark', key: 'watermark', text: 'G6: Graph Visualization' }],\n  },\n  { width: 600, height: 300 },\n  (gui, graph) => {\n    const options = {\n      type: 'watermark',\n      width: 200,\n      height: 100,\n      opacity: 0.2,\n      rotate: Math.PI / 12,\n      text: 'G6: Graph Visualization',\n    };\n    const optionFolder = gui.addFolder('Watermark Options');\n    optionFolder.add(options, 'type').disable(true);\n    optionFolder.add(options, 'width', 1, 1280, 1);\n    optionFolder.add(options, 'height', 1, 800, 1);\n    optionFolder.add(options, 'opacity', 0, 1, 0.1);\n    optionFolder.add(options, 'rotate', 0, 2 * Math.PI, Math.PI / 12);\n    optionFolder.add(options, 'text');\n\n    optionFolder.onChange(({ property, value }) => {\n      graph.updatePlugin({\n        key: 'watermark',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"必选",paraId:5,tocIndex:4},{value:"type",paraId:5,tocIndex:4},{value:"插件类型",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"watermark",paraId:5,tocIndex:4},{value:"✓",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:"单个水印的宽度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"200",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:"单个水印的高度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"100",paraId:5,tocIndex:4},{value:"opacity",paraId:5,tocIndex:4},{value:"水印的透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"0.2",paraId:5,tocIndex:4},{value:"rotate",paraId:5,tocIndex:4},{value:"水印的旋转角度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"Math.PI / 12",paraId:5,tocIndex:4},{value:"imageURL",paraId:5,tocIndex:4},{value:"图片水印的地址，优先级高于文本水印",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"text",paraId:5,tocIndex:4},{value:"水印文本内容",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFill",paraId:5,tocIndex:4},{value:"文本水印的颜色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"#000",paraId:5,tocIndex:4},{value:"textFontSize",paraId:5,tocIndex:4},{value:"文本水印的字体大小",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"16",paraId:5,tocIndex:4},{value:"textFontFamily",paraId:5,tocIndex:4},{value:"文本水印的字体",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFontWeight",paraId:5,tocIndex:4},{value:"文本水印的字体粗细",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textFontVariant",paraId:5,tocIndex:4},{value:"文本水印的字体变体",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"textAlign",paraId:5,tocIndex:4},{value:"文本水印的对齐方式",paraId:5,tocIndex:4},{value:"center",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"end",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"left",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"right",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"start",paraId:5,tocIndex:4},{value:"center",paraId:5,tocIndex:4},{value:"textBaseline",paraId:5,tocIndex:4},{value:"文本水印的基线对齐方式",paraId:5,tocIndex:4},{value:"alphabetic",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"bottom",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"hanging",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"ideographic",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"middle",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"top",paraId:5,tocIndex:4},{value:"middle",paraId:5,tocIndex:4},{value:"backgroundRepeat",paraId:5,tocIndex:4},{value:"水印的重复方式",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"repeat",paraId:5,tocIndex:4},{value:"backgroundAttachment",paraId:5,tocIndex:4},{value:"水印的背景定位行为",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundBlendMode",paraId:5,tocIndex:4},{value:"水印的背景混合模式",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundClip",paraId:5,tocIndex:4},{value:"水印的背景裁剪",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundColor",paraId:5,tocIndex:4},{value:"水印的背景颜色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundImage",paraId:5,tocIndex:4},{value:"水印的背景图片",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundOrigin",paraId:5,tocIndex:4},{value:"水印的背景原点",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPosition",paraId:5,tocIndex:4},{value:"水印的背景位置",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPositionX",paraId:5,tocIndex:4},{value:"水印的背景水平位置",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundPositionY",paraId:5,tocIndex:4},{value:"水印的背景垂直位置",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"backgroundSize",paraId:5,tocIndex:4},{value:"水印的背景大小",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"最简单的文本水印配置：",paraId:6,tocIndex:6},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph',\n    },\n  ],\n});\n",paraId:7,tocIndex:6},{value:"使用图片作为水印：",paraId:8,tocIndex:7},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      imageURL: 'https://example.com/logo.png',\n      width: 100,\n      height: 50,\n      opacity: 0.1,\n    },\n  ],\n});\n",paraId:9,tocIndex:7},{value:"可以自定义水印的样式和位置：",paraId:10,tocIndex:8},{value:"const graph = new Graph({\n  plugins: [\n    {\n      type: 'watermark',\n      text: 'G6 Graph',\n      textFontSize: 20, // 设置字体大小\n      textFontFamily: 'Arial', // 设置字体\n      textFontWeight: 'bold', // 设置字体粗细\n      textFill: '#1890ff', // 设置文字颜色\n      rotate: Math.PI / 6, // 设置旋转角度\n      opacity: 0.15, // 设置透明度\n      width: 180, // 设置水印宽度\n      height: 100, // 设置水印高度\n      backgroundRepeat: 'space', // 设置重复方式\n      backgroundPosition: 'center', // 设置位置\n      textAlign: 'center', // 设置文本对齐\n      textBaseline: 'middle', // 设置基线对齐\n    },\n  ],\n});\n",paraId:11,tocIndex:8},{value:"文本水印",paraId:12,tocIndex:9},{value:"图片水印",paraId:13,tocIndex:9}]},94279:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(84660);const d=[{value:"自定义插件可以实现一些额外的功能，例如添加额外的组件、渲染逻辑等。通过自定义插件可以很好地实现功能解耦，更好地进行管理、编排代码以及后续维护。",paraId:0,tocIndex:0},{value:"额外的组件",paraId:1,tocIndex:2},{value:"：如内置插件的",paraId:1,tocIndex:2},{value:"提示框",paraId:1,tocIndex:2},{value:"、",paraId:1,tocIndex:2},{value:"小地图",paraId:1,tocIndex:2},{value:"、",paraId:1,tocIndex:2},{value:"对齐线",paraId:1,tocIndex:2},{value:"、",paraId:1,tocIndex:2},{value:"网格线",paraId:1,tocIndex:2},{value:"、",paraId:1,tocIndex:2},{value:"上下文菜单",paraId:1,tocIndex:2},{value:"、",paraId:1,tocIndex:2},{value:"水印",paraId:1,tocIndex:2},{value:"等",paraId:1,tocIndex:2},{value:"渲染逻辑",paraId:1,tocIndex:2},{value:"：如内置插件的",paraId:1,tocIndex:2},{value:"边绑定",paraId:1,tocIndex:2},{value:"，以及",paraId:1,tocIndex:2},{value:"远程数据加载",paraId:1,tocIndex:2},{value:"（",paraId:1,tocIndex:2},{value:"示例",paraId:2,tocIndex:2},{value:"）等",paraId:1,tocIndex:2},{value:"当内置插件无法完全满足业务需求时，用户也可以通过自定义插件（继承内置插件）进行调整和修改。",paraId:3,tocIndex:3},{value:"（如果需要内置插件支持的特性是较通用的，或者内置插件存在 Bug ，这种时候欢迎大家到 ",paraId:4,tocIndex:3},{value:"Github",paraId:4,tocIndex:3},{value:" 提 Issue 或者 PR ）",paraId:4,tocIndex:3},{value:"与交互类似，插件的实现也相当灵活，你可以以你喜欢的风格实现你的插件。",paraId:5,tocIndex:4},{value:"下面列举几个简单的自定义插件实现：",paraId:6,tocIndex:4},{value:"在图实例化过程中自动加载远程数据：",paraId:7,tocIndex:5},{value:"import { BasePlugin } from '@antv/g6';\nimport type { BasePluginOptions, RuntimeContext } from '@antv/g6';\n\ninterface RemoteDataSourceOptions extends BasePluginOptions {}\n\nclass RemoteDataSource extends BasePlugin<RemoteDataSourceOptions> {\n  constructor(context: RuntimeContext, options: RemoteDataSourceOptions) {\n    super(context, options);\n    this.loadData();\n  }\n\n  private async loadData() {\n    // mock remote data\n    const data = {\n      nodes: [\n        { id: 'node-1', x: 100, y: 100 },\n        { id: 'node-2', x: 200, y: 200 },\n      ],\n      edges: [{ source: 'node-1', target: 'node-2' }],\n    };\n\n    const { graph } = this.context;\n    graph.setData(data);\n    await graph.render();\n  }\n}\n",paraId:8,tocIndex:5},{value:"在这个例子中，我们模拟实现了一个数据加载插件，在使用该插件后，实例化 Graph 时不用再传入数据，该插件会自动加载远程数据。",paraId:9,tocIndex:5},{value:"BasePlugin",paraId:10,tocIndex:5},{value:" 是所有插件的基类，每个自定义插件都需要继承这个基类实现。",paraId:10,tocIndex:5},{value:"import { BasePlugin, Graph, register, ExtensionCategory } from '@antv/g6';\n\nclass RemoteDataSource extends BasePlugin {\n  constructor(context, options) {\n    super(context, options);\n    this.loadData();\n  }\n\n  async loadData() {\n    // mock remote data\n    const data = {\n      nodes: [\n        { id: 'node-1', style: { x: 25, y: 50 } },\n        { id: 'node-2', style: { x: 175, y: 50 } },\n      ],\n      edges: [{ source: 'node-1', target: 'node-2' }],\n    };\n\n    const { graph } = this.context;\n    graph.setData(data);\n    await graph.render();\n  }\n}\n\nregister(ExtensionCategory.PLUGIN, 'remote-data-source', RemoteDataSource);\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 100,\n  plugins: ['remote-data-source'],\n});\n\ngraph.render();\n",paraId:11,tocIndex:5},{value:"import type { BasePluginOptions, RuntimeContext } from '@antv/g6';\nimport { BasePlugin, GraphEvent } from '@antv/g6';\n\ninterface AutoSwitchAnimationOptions extends BasePluginOptions {\n  maxLength: number; // 节点数量达到这个值后关闭全局动画\n}\n\nclass AutoSwitchAnimation extends BasePlugin<AutoSwitchAnimationOptions> {\n  static defaultOptions: Partial<AutoSwitchAnimationOptions> = {\n    maxLength: 1000,\n  };\n  constructor(context: RuntimeContext, options: AutoSwitchAnimationOptions) {\n    super(context, options);\n    this.bindEvents();\n  }\n  private bindEvents() {\n    const { graph } = this.context;\n    graph.on(GraphEvent.BEFORE_RENDER, this.switchAnimation);\n  }\n  private switchAnimation() {\n    const { graph } = this.context;\n    graph.setOptions({\n      animation: graph.getNodeData().length < this.options.maxLength,\n    });\n  }\n  private unbindEvents() {\n    const { graph } = this.context;\n    graph.off(GraphEvent.BEFORE_RENDER, this.switchAnimation);\n  }\n  destroy() {\n    this.unbindEvents();\n    super.destroy();\n  }\n}\n",paraId:12,tocIndex:6},{value:"在这个例子中，我们监听 ",paraId:13,tocIndex:6},{value:"GraphEvent.BEFORE_RENDER",paraId:13,tocIndex:6},{value:" 事件，在响应中判断当前节点数量是否大于指定值，是的话则关闭全局动画，否则开启",paraId:13,tocIndex:6},{value:"maxLength",paraId:13,tocIndex:6},{value:" 是定义的配置项，可在初始化画布实例时传入具体配置，",paraId:13,tocIndex:6},{value:"插件配置",paraId:14,tocIndex:6},{value:"通过 G6 提供的 register 方法注册即可",paraId:15,tocIndex:7},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { MyCustomPlugin } from './my-custom-plugin';\n\nregister(ExtensionCategory.PLUGIN, 'my-custom-plugin', MyCustomPlugin);\n",paraId:16,tocIndex:7},{value:"可在 ",paraId:17,tocIndex:8},{value:"plugins",paraId:17,tocIndex:8},{value:" 中传入插件类型名称或配置参数对象，详见",paraId:17,tocIndex:8},{value:"配置插件",paraId:18,tocIndex:8},{value:"比如前面的",paraId:19,tocIndex:8},{value:"自动判断节点数量开启或关闭动画",paraId:20,tocIndex:8},{value:"，配置如下：",paraId:19,tocIndex:8},{value:"const graph = new Graph({\n  // 其他配置\n  plugins: [\n    {\n      type: 'auto-switch-animation',\n      maxLength: 500,\n    },\n  ],\n});\n",paraId:21,tocIndex:8}]},22533:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63586);const d=[{value:"插件(Plugin)是 G6 中最灵活的扩展机制，用户可以通过插件来扩展 G6 的功能，例如在画布中额外挂载图形组件、实现撤销重做等功能。",paraId:0,tocIndex:0},{value:"绝大多数的定制需求都可以通过插件来实现，G6 内置了一些常用的插件，例如：",paraId:1,tocIndex:0},{value:"Tooltip",paraId:2,tocIndex:0},{value:"、",paraId:1,tocIndex:0},{value:"Grid",paraId:3,tocIndex:0},{value:"、",paraId:1,tocIndex:0},{value:"History",paraId:4,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"G6 提供了丰富的内置插件，涵盖多种常见功能场景：",paraId:5,tocIndex:1},{value:"分类",paraId:6,tocIndex:1},{value:"插件名称",paraId:6,tocIndex:1},{value:"注册类型",paraId:6,tocIndex:1},{value:"功能描述",paraId:6,tocIndex:1},{value:"视觉样式增强",paraId:6,tocIndex:1},{value:"网格线",paraId:7,tocIndex:1},{value:"grid-line",paraId:6,tocIndex:1},{value:"在画布上显示网格参考线",paraId:6,tocIndex:1},{value:"背景",paraId:8,tocIndex:1},{value:"background",paraId:6,tocIndex:1},{value:"为画布添加背景图片或颜色",paraId:6,tocIndex:1},{value:"水印",paraId:9,tocIndex:1},{value:"watermark",paraId:6,tocIndex:1},{value:"为画布添加水印，保护版权",paraId:6,tocIndex:1},{value:"轮廓包围",paraId:10,tocIndex:1},{value:"hull",paraId:6,tocIndex:1},{value:"为指定节点集合创建轮廓",paraId:6,tocIndex:1},{value:"气泡集",paraId:11,tocIndex:1},{value:"bubble-sets",paraId:6,tocIndex:1},{value:"创建平滑气泡状的元素集合轮廓",paraId:6,tocIndex:1},{value:"对齐线",paraId:12,tocIndex:1},{value:"snapline",paraId:6,tocIndex:1},{value:"拖动元素时显示对齐参考线",paraId:6,tocIndex:1},{value:"导航与概览",paraId:6,tocIndex:1},{value:"缩略图",paraId:13,tocIndex:1},{value:"minimap",paraId:6,tocIndex:1},{value:"显示图的缩略预览，支持导航",paraId:6,tocIndex:1},{value:"全屏",paraId:14,tocIndex:1},{value:"fullscreen",paraId:6,tocIndex:1},{value:"支持图表全屏显示和退出",paraId:6,tocIndex:1},{value:"时间轴",paraId:15,tocIndex:1},{value:"timebar",paraId:6,tocIndex:1},{value:"提供时序数据的筛选和播放控制",paraId:6,tocIndex:1},{value:"交互控件",paraId:6,tocIndex:1},{value:"工具栏",paraId:16,tocIndex:1},{value:"toolbar",paraId:6,tocIndex:1},{value:"提供常用操作按钮集合",paraId:6,tocIndex:1},{value:"上下文菜单",paraId:17,tocIndex:1},{value:"contextmenu",paraId:6,tocIndex:1},{value:"右键点击时显示可选操作菜单",paraId:6,tocIndex:1},{value:"提示框",paraId:18,tocIndex:1},{value:"tooltip",paraId:6,tocIndex:1},{value:"悬停时显示元素详细信息",paraId:6,tocIndex:1},{value:"图例",paraId:19,tocIndex:1},{value:"legend",paraId:6,tocIndex:1},{value:"显示图表数据的类别和对应样式说明",paraId:6,tocIndex:1},{value:"数据探索",paraId:6,tocIndex:1},{value:"鱼眼放大镜",paraId:20,tocIndex:1},{value:"fisheye",paraId:6,tocIndex:1},{value:"提供焦点+上下文的探索体验",paraId:6,tocIndex:1},{value:"边过滤镜",paraId:21,tocIndex:1},{value:"edge-filter-lens",paraId:6,tocIndex:1},{value:"在指定区域内筛选显示边",paraId:6,tocIndex:1},{value:"边绑定",paraId:22,tocIndex:1},{value:"edge-bundling",paraId:6,tocIndex:1},{value:"将相似路径的边捆绑在一起，减少视觉混乱",paraId:6,tocIndex:1},{value:"高级功能",paraId:6,tocIndex:1},{value:"历史记录",paraId:23,tocIndex:1},{value:"history",paraId:6,tocIndex:1},{value:"支持撤销/重做操作",paraId:6,tocIndex:1},{value:"相机设置",paraId:6,tocIndex:1},{value:"camera-setting",paraId:6,tocIndex:1},{value:"配置3D场景下的相机参数",paraId:6,tocIndex:1},{value:"各插件的详细配置可参考 ",paraId:24,tocIndex:1},{value:"内置插件文档",paraId:25,tocIndex:1},{value:"。",paraId:24,tocIndex:1},{value:"在图实例初始化时，通过 ",paraId:26,tocIndex:3},{value:"plugins",paraId:26,tocIndex:3},{value:" 数组指定需要的插件：",paraId:26,tocIndex:3},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // 其他配置...\n  plugins: ['grid', 'minimap', 'tooltip'],\n});\n",paraId:27,tocIndex:3},{value:"对于需要自定义参数的插件，可以使用 ",paraId:28,tocIndex:4},{value:"object",paraId:28,tocIndex:4},{value:" 形式配置属性：",paraId:28,tocIndex:4},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    'grid',\n    {\n      type: 'tooltip',\n      key: 'my-tooltip', // 为插件指定key，便于后续更新\n      getContent: (e) => `<div>节点：${e.target.id}</div>`,\n    },\n  ],\n});\n",paraId:29,tocIndex:4},{value:"G6 支持在图实例运行期间动态管理插件，满足复杂交互需求：",paraId:30,tocIndex:5},{value:"通过 ",paraId:31,tocIndex:5},{value:"getPlugins",paraId:32,tocIndex:5},{value:" 方法获取当前插件列表：",paraId:31,tocIndex:5},{value:"// 获取插件列表\nconst plugins = graph.getPlugins();\n// console.log(plugins) 👉 ['minimap', 'grid']\n",paraId:33,tocIndex:5},{value:"可以通过 ",paraId:34,tocIndex:5},{value:"setPlugins",paraId:35,tocIndex:5},{value:" 方法调整插件：",paraId:34,tocIndex:5},{value:"// 添加新插件\ngraph.setPlugins((plugins) => [...plugins, 'minimap']);\n\n// 移除插件\ngraph.setPlugins((plugins) => plugins.filter((p) => p !== 'grid'));\n",paraId:36,tocIndex:5},{value:"可以通过 ",paraId:37,tocIndex:5},{value:"updatePlugin",paraId:38,tocIndex:5},{value:" 方法更新插件的配置：",paraId:37,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  plugins: [\n    {\n      type: 'tooltip',\n      key: 'my-tooltip',\n      getContent: (e) => `<div>节点：${e.target.id}</div>`,\n    },\n  ],\n});\n\n// 更新单个插件\ngraph.updatePlugin({\n  key: 'my-tooltip',\n  getContent: (e) => `<div>更新的内容：${e.target.id}</div>`,\n});\n",paraId:39,tocIndex:5},{value:"使用 ",paraId:40},{value:"updatePlugin",paraId:40},{value:" 方法时，需要在初始化时为插件指定唯一的 ",paraId:40},{value:"key",paraId:40},{value:"。",paraId:40},{value:"使用 ",paraId:41,tocIndex:6},{value:"setPlugins",paraId:42,tocIndex:6},{value:" 方法同样可以卸载插件，将插件配置列表置为空即可：",paraId:41,tocIndex:6},{value:"// 卸载所有插件\ngraph.setPlugins([]);\n",paraId:43,tocIndex:6},{value:"一些插件提供了可供用户调用的 API 方法，例如 ",paraId:44,tocIndex:7},{value:"history",paraId:44,tocIndex:7},{value:" 插件提供了 ",paraId:44,tocIndex:7},{value:"undo",paraId:44,tocIndex:7},{value:" 和 ",paraId:44,tocIndex:7},{value:"redo",paraId:44,tocIndex:7},{value:" 方法，用户可以通过调用这些方法来实现撤销和重做操作。",paraId:44,tocIndex:7},{value:"要调用这些方法，需要先获取到插件实例，可通过 ",paraId:45,tocIndex:7},{value:"getPluginInstance",paraId:46,tocIndex:7},{value:" 方法获取：",paraId:45,tocIndex:7},{value:"// 配置插件\nconst graph = new Graph({\n  plugins: [{ type: 'history', key: 'my-history' }],\n});\n\n// 获取插件实例\nconst history = graph.getPluginInstance('my-history');\n\n// 调用插件方法\nhistory.undo();\nhistory.redo();\n",paraId:47,tocIndex:7},{value:"graph.getPluginInstance",paraId:48},{value:" 方法接收插件 key 值作为参数，因此如果需要获取插件实例，需要将对应插件配置为 ",paraId:48},{value:"object",paraId:48},{value:" 的形式，并传入 ",paraId:48},{value:"key",paraId:48},{value:" 值。",paraId:48},{value:"更多与插件相关的 API 请参考 ",paraId:49},{value:"插件 API 文档",paraId:50},{value:"。",paraId:49},{value:"当内置插件无法满足需求时，你可以：",paraId:51,tocIndex:8},{value:"继承和扩展现有插件",paraId:52,tocIndex:8},{value:"创建全新的自定义插件",paraId:52,tocIndex:8},{value:"自定义插件需要先注册后使用。详细教程请参考 ",paraId:53,tocIndex:8},{value:"自定义插件",paraId:54,tocIndex:8},{value:" 文档。",paraId:53,tocIndex:8},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { MyCustomPlugin } from './my-custom-plugin';\n\n// 注册自定义插件\nregister(ExtensionCategory.PLUGIN, 'my-custom-plugin', MyCustomPlugin);\n\n// 使用自定义插件\nconst graph = new Graph({\n  plugins: ['my-custom-plugin'],\n});\n",paraId:55,tocIndex:8},{value:"通过合理组合和配置插件，你可以构建出功能丰富、交互体验出色的图可视化应用。",paraId:56,tocIndex:8}]},24633:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(21508);const d=[{value:"色板",paraId:0,tocIndex:0},{value:" 中提到，G6 支持离散色板和连续色板，其中离散色板本质上是一个颜色数组，而连续色板是一个颜色插值器。",paraId:1,tocIndex:0},{value:"因此自定义色板也采用这两种方式，下面分别介绍如何自定义离散色板和连续色板。",paraId:2,tocIndex:0},{value:"直接定义一个包含颜色值的字符串数组即可，颜值值支持：RGB 色值、16 进制、颜色名，下面是一组离散色板示例：",paraId:3,tocIndex:2},{value:"const hex = ['#FF0000', '#00FF00', '#0000FF'];\n\nconst color = ['red', 'green', 'blue'];\n\nconst rgb = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)'];\n",paraId:4,tocIndex:2},{value:"连续色板需要定义一个颜色插值器，插值器是一个函数，接受一个数值参数，返回一个颜色值，下面是一个连续色板示例：",paraId:5,tocIndex:3},{value:"const color = (value: number) => `rgb(${value * 255}, 0, 0)`;\n",paraId:6,tocIndex:3},{value:"通过 G6 提供的 register 方法注册即可，详见",paraId:7,tocIndex:4},{value:"注册色板",paraId:8,tocIndex:4},{value:"除此之外，你也可以在需要使用色板的位置跳过注册机制直接传入色板值，例如：",paraId:9,tocIndex:5},{value:"{\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: ['#5B8FF9', '#61DDAA', '#F6BD16'], // 传入颜色数组\n    }\n  },\n  edge: {\n    palette: {\n      type: 'value',\n      field: 'value',\n      color: (value) => `rgb(${value * 255}, 0, 0)`, // 传入插值器\n    }\n  }\n}\n",paraId:10,tocIndex:5}]},40769:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53414);const d=[{value:"除了使用内置主题外，G6 还支持创建自定义主题来满足特定的视觉需求。本文将介绍如何创建和使用自定义主题。",paraId:0},{value:"一个自定义主题需要遵循主题的基本结构，包含画布背景色和元素样式配置：",paraId:1,tocIndex:0},{value:"const customTheme = {\n  // 1. 画布背景色\n  background: '#f0f0f0',\n\n  // 2. 节点配置\n  node: {\n    // 调色板配置\n    palette: {\n      type: 'group',\n      color: ['#1783FF', '#00C9C9' /* 自定义颜色... */],\n    },\n    // 基础样式\n    style: {\n      fill: '#fff',\n      stroke: '#d9d9d9',\n      lineWidth: 1,\n      // ... 其他节点样式\n    },\n    // 状态样式\n    state: {\n      selected: {\n        fill: '#e8f3ff',\n        stroke: '#1783FF',\n      },\n      // ... 其他状态样式\n    },\n  },\n\n  // 3. 边配置\n  edge: {\n    style: {\n      stroke: '#d9d9d9',\n      lineWidth: 1,\n      // ... 其他边样式\n    },\n    state: {\n      // ... 状态样式\n    },\n  },\n\n  // 4. Combo 配置\n  combo: {\n    style: {\n      fill: '#f7f7f7',\n      stroke: '#d9d9d9',\n      // ... 其他 Combo 样式\n    },\n    state: {\n      // ... 状态样式\n    },\n  },\n};\n",paraId:2,tocIndex:0},{value:"在创建自定义主题时，需要注意以下限制：",paraId:3,tocIndex:1},{value:"仅支持静态值",paraId:4,tocIndex:1},{value:"// ❌ 错误示例：不支持回调函数\nconst theme = {\n  node: {\n    style: {\n      fill: (d) => d.style.color,\n    },\n  },\n};\n",paraId:5,tocIndex:1},{value:"不支持配置元素类型",paraId:6,tocIndex:1},{value:"// ❌ 错误示例：不支持在主题中配置元素类型\nconst theme = {\n  node: {\n    type: 'rect',\n    style: {\n      fill: '#fff',\n    },\n  },\n};\n",paraId:7,tocIndex:1},{value:"状态样式需要对应默认样式",paraId:8,tocIndex:1},{value:"// ✅ 正确示例：状态样式的属性在默认样式中都有定义\nconst theme = {\n  node: {\n    style: {\n      fill: '#fff',\n      stroke: '#000',\n    },\n    state: {\n      selected: {\n        fill: '#e8f3ff',\n        stroke: '#1783FF',\n      },\n    },\n  },\n};\n",paraId:9,tocIndex:1},{value:"先注册主题，然后通过名称引用：",paraId:10,tocIndex:2},{value:"// 1. 注册主题\nimport { register, ExtensionCategory } from '@antv/g6';\nregister(ExtensionCategory.THEME, 'custom-theme', customTheme);\n\n// 2. 使用主题\nconst graph = new Graph({\n  theme: 'custom-theme',\n  // ... 其他配置\n});\n",paraId:11,tocIndex:2}]},42121:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(29042);const d=[{value:"G6 中的主题是 Graph Options 的子集，它包含了关于画布和元素样式的配置。多主题可以帮助你快速地切换不同的图样式。",paraId:0,tocIndex:0},{value:"一个主题由以下四个部分组成：",paraId:1,tocIndex:1},{value:"画布背景色 (background)",paraId:2,tocIndex:1},{value:"控制整个画布的背景颜色",paraId:3,tocIndex:1},{value:"节点配置 (node)",paraId:4,tocIndex:1},{value:"基础样式：填充色、描边、标签等静态视觉属性",paraId:5,tocIndex:1},{value:"调色板",paraId:6,tocIndex:1},{value:"：用于节点分组的颜色配置",paraId:5,tocIndex:1},{value:"状态样式：不同状态下的样式配置（选中、激活、禁用等）",paraId:5,tocIndex:1},{value:"动画配置：节点的动画效果配置",paraId:5,tocIndex:1},{value:"边配置 (edge)",paraId:7,tocIndex:1},{value:"基础样式：线条样式、箭头、标签等静态视觉属性",paraId:8,tocIndex:1},{value:"调色板",paraId:9,tocIndex:1},{value:"：用于边分组的颜色配置",paraId:8,tocIndex:1},{value:"状态样式：不同状态下的样式配置",paraId:8,tocIndex:1},{value:"动画配置：边的动画效果配置",paraId:8,tocIndex:1},{value:"Combo 配置 (combo)",paraId:10,tocIndex:1},{value:"基础样式：填充、描边、折叠按钮等静态视觉属性",paraId:11,tocIndex:1},{value:"状态样式：不同状态下的样式配置",paraId:11,tocIndex:1},{value:"动画配置：Combo 的动画效果配置",paraId:11,tocIndex:1},{value:"注意：主题中的样式配置仅支持静态值，不支持回调函数形式的动态配置。如需动态样式，请使用图的配置项。",paraId:12,tocIndex:1},{value:"G6 默认提供两种内置主题：",paraId:13,tocIndex:2},{value:"查看亮色主题完整配置项",paraId:14},{value:"const lightTheme = {\n  background: '#ffffff',\n  node: {\n    palette: {\n      type: 'group',\n      color: [\n        '#1783FF',\n        '#00C9C9',\n        '#F08F56',\n        '#D580FF',\n        '#7863FF',\n        '#DB9D0D',\n        '#60C42D',\n        '#FF80CA',\n        '#2491B3',\n        '#17C76F',\n      ],\n    },\n    style: {\n      donutOpacity: 1,\n      badgeBackgroundOpacity: 1,\n      badgeFill: '#fff',\n      badgeFontSize: 8,\n      badgePadding: [0, 4],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'],\n      fill: '#1783ff',\n      fillOpacity: 1,\n      halo: false,\n      iconFill: '#fff',\n      iconOpacity: 1,\n      labelBackground: false,\n      labelBackgroundFill: '#ffffff',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelFill: '#000000',\n      labelFillOpacity: 0.85,\n      labelLineHeight: 16,\n      labelPadding: [0, 2],\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      labelOffsetY: 2,\n      lineWidth: 0,\n      portFill: '#1783ff',\n      portLineWidth: 1,\n      portStroke: '#000000',\n      portStrokeOpacity: 0.65,\n      size: 32,\n      stroke: '#000000',\n      strokeOpacity: 1,\n      zIndex: 2,\n    },\n    state: {\n      selected: {\n        halo: true,\n        haloLineWidth: 24,\n        haloStrokeOpacity: 0.25,\n        labelFontSize: 12,\n        labelFontWeight: 'bold',\n        lineWidth: 4,\n        stroke: '#000000',\n      },\n      active: {\n        halo: true,\n        haloLineWidth: 12,\n        haloStrokeOpacity: 0.15,\n      },\n      highlight: {\n        labelFontWeight: 'bold',\n        lineWidth: 4,\n        stroke: '#000000',\n        strokeOpacity: 0.85,\n      },\n      inactive: {\n        badgeBackgroundOpacity: 0.25,\n        donutOpacity: 0.25,\n        fillOpacity: 0.25,\n        iconOpacity: 0.85,\n        labelFill: '#000000',\n        labelFillOpacity: 0.25,\n        strokeOpacity: 0.25,\n      },\n      disabled: {\n        badgeBackgroundOpacity: 0.25,\n        donutOpacity: 0.06,\n        fill: '#1B324F',\n        fillOpacity: 0.06,\n        iconFill: '#1B324F',\n        iconOpacity: 0.25,\n        labelFill: '#000000',\n        labelFillOpacity: 0.25,\n        strokeOpacity: 0.06,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      show: 'fade',\n      hide: 'fade',\n      expand: 'node-expand',\n      collapse: 'node-collapse',\n      update: [{ fields: ['x', 'y', 'fill', 'stroke'] }],\n      translate: [{ fields: ['x', 'y'] }],\n    },\n  },\n  edge: {\n    palette: {\n      type: 'group',\n      color: [\n        '#99ADD1',\n        '#1783FF',\n        '#00C9C9',\n        '#F08F56',\n        '#D580FF',\n        '#7863FF',\n        '#DB9D0D',\n        '#60C42D',\n        '#FF80CA',\n        '#2491B3',\n        '#17C76F',\n      ],\n    },\n    style: {\n      badgeBackgroundFill: '#99ADD1',\n      badgeFill: '#fff',\n      badgeFontSize: 8,\n      badgeOffsetX: 10,\n      fillOpacity: 1,\n      halo: false,\n      haloLineWidth: 12,\n      haloStrokeOpacity: 1,\n      increasedLineWidthForHitTesting: 2,\n      labelBackground: false,\n      labelBackgroundFill: '#ffffff',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelBackgroundPadding: [4, 4, 4, 4],\n      labelFill: '#000000',\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      labelPlacement: 'center',\n      labelTextBaseline: 'middle',\n      lineWidth: 1,\n      stroke: '#99ADD1',\n      strokeOpacity: 1,\n      zIndex: 1,\n    },\n    state: {\n      selected: {\n        halo: true,\n        haloStrokeOpacity: 0.25,\n        labelFontSize: 14,\n        labelFontWeight: 'bold',\n        lineWidth: 3,\n      },\n      active: {\n        halo: true,\n        haloStrokeOpacity: 0.15,\n      },\n      highlight: {\n        labelFontWeight: 'bold',\n        lineWidth: 3,\n      },\n      inactive: {\n        stroke: '#1B324F',\n        fillOpacity: 0.08,\n        labelOpacity: 0.25,\n        strokeOpacity: 0.08,\n        badgeBackgroundOpacity: 0.25,\n      },\n      disabled: {\n        stroke: '#d9d9d9',\n        fillOpacity: 0.45,\n        strokeOpacity: 0.45,\n        labelOpacity: 0.25,\n        badgeBackgroundOpacity: 0.45,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      expand: 'path-in',\n      collapse: 'path-out',\n      show: 'fade',\n      hide: 'fade',\n      update: [{ fields: ['sourceNode', 'targetNode'] }, { fields: ['stroke'], shape: 'key' }],\n      translate: [{ fields: ['sourceNode', 'targetNode'] }],\n    },\n  },\n  combo: {\n    style: {\n      collapsedMarkerFill: '#ffffff',\n      collapsedMarkerFontSize: 12,\n      collapsedMarkerFillOpacity: 1,\n      collapsedSize: 32,\n      collapsedFillOpacity: 1,\n      fill: '#99ADD1',\n      halo: false,\n      haloLineWidth: 12,\n      haloStroke: '#99ADD1',\n      haloStrokeOpacity: 0.25,\n      labelBackground: false,\n      labelBackgroundFill: '#ffffff',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelBackgroundPadding: [2, 4, 2, 4],\n      labelFill: '#000000',\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      lineDash: 0,\n      lineWidth: 1,\n      fillOpacity: 0.04,\n      strokeOpacity: 1,\n      padding: 10,\n      stroke: '#99ADD1',\n    },\n    state: {\n      selected: {\n        halo: true,\n        labelFontSize: 14,\n        labelFontWeight: 700,\n        lineWidth: 4,\n      },\n      active: {\n        halo: true,\n      },\n      highlight: {\n        labelFontWeight: 700,\n        lineWidth: 4,\n      },\n      inactive: {\n        fillOpacity: 0.65,\n        labelOpacity: 0.25,\n        strokeOpacity: 0.65,\n      },\n      disabled: {\n        fill: '#d9d9d9',\n        fillOpacity: 0.25,\n        labelOpacity: 0.25,\n        stroke: '#d9d9d9',\n        strokeOpacity: 0.25,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      show: 'fade',\n      hide: 'fade',\n      expand: 'combo-expand',\n      collapse: 'combo-collapse',\n      update: [{ fields: ['x', 'y'] }, { fields: ['fill', 'stroke', 'lineWidth'], shape: 'key' }],\n      translate: [{ fields: ['x', 'y'] }],\n    },\n  },\n};\n",paraId:15,tocIndex:3},{value:"查看暗色主题完整配置项",paraId:14},{value:"const darkTheme = {\n  background: '#000000',\n  node: {\n    palette: {\n      type: 'group',\n      color: [\n        '#1783FF',\n        '#00C9C9',\n        '#F08F56',\n        '#D580FF',\n        '#7863FF',\n        '#DB9D0D',\n        '#60C42D',\n        '#FF80CA',\n        '#2491B3',\n        '#17C76F',\n      ],\n    },\n    style: {\n      donutOpacity: 1,\n      badgeBackgroundOpacity: 1,\n      badgeFill: '#fff',\n      badgeFontSize: 8,\n      badgePadding: [0, 4],\n      badgePalette: ['#7E92B5', '#F4664A', '#FFBE3A'],\n      fill: '#1783ff',\n      fillOpacity: 1,\n      halo: false,\n      iconFill: '#fff',\n      iconOpacity: 1,\n      labelBackground: false,\n      labelBackgroundFill: '#000000',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelFill: '#ffffff',\n      labelFillOpacity: 0.85,\n      labelLineHeight: 16,\n      labelPadding: [0, 2],\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      labelOffsetY: 2,\n      lineWidth: 0,\n      portFill: '#1783ff',\n      portLineWidth: 1,\n      portStroke: '#d0e4ff',\n      portStrokeOpacity: 0.65,\n      size: 32,\n      stroke: '#d0e4ff',\n      strokeOpacity: 1,\n      zIndex: 2,\n    },\n    state: {\n      selected: {\n        halo: true,\n        haloLineWidth: 24,\n        haloStrokeOpacity: 0.45,\n        labelFontSize: 12,\n        labelFontWeight: 'bold',\n        lineWidth: 4,\n        stroke: '#d0e4ff',\n      },\n      active: {\n        halo: true,\n        haloLineWidth: 12,\n        haloStrokeOpacity: 0.25,\n      },\n      highlight: {\n        labelFontWeight: 'bold',\n        lineWidth: 4,\n        stroke: '#d0e4ff',\n        strokeOpacity: 0.85,\n      },\n      inactive: {\n        badgeBackgroundOpacity: 0.45,\n        donutOpacity: 0.45,\n        fillOpacity: 0.45,\n        iconOpacity: 0.45,\n        labelFill: '#ffffff',\n        labelFillOpacity: 0.45,\n        strokeOpacity: 0.45,\n      },\n      disabled: {\n        badgeBackgroundOpacity: 0.25,\n        donutOpacity: 0.25,\n        fill: '#D0E4FF',\n        fillOpacity: 0.25,\n        iconFill: '#D0E4FF',\n        iconOpacity: 0.25,\n        labelFill: '#ffffff',\n        labelFillOpacity: 0.25,\n        strokeOpacity: 0.25,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      show: 'fade',\n      hide: 'fade',\n      expand: 'node-expand',\n      collapse: 'node-collapse',\n      update: [{ fields: ['x', 'y', 'fill', 'stroke'] }],\n      translate: [{ fields: ['x', 'y'] }],\n    },\n  },\n  edge: {\n    palette: {\n      type: 'group',\n      color: [\n        '#637088',\n        '#0F55A6',\n        '#008383',\n        '#9C5D38',\n        '#8B53A6',\n        '#4E40A6',\n        '#8F6608',\n        '#3E801D',\n        '#A65383',\n        '#175E75',\n        '#0F8248',\n      ],\n    },\n    style: {\n      badgeBackgroundFill: '#637088',\n      badgeFill: '#fff',\n      badgeFontSize: 8,\n      badgeOffsetX: 10,\n      fillOpacity: 1,\n      halo: false,\n      haloLineWidth: 12,\n      haloStrokeOpacity: 1,\n      increasedLineWidthForHitTesting: 2,\n      labelBackground: false,\n      labelBackgroundFill: '#000000',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelBackgroundPadding: [4, 4, 4, 4],\n      labelFill: '#ffffff',\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      labelPlacement: 'center',\n      labelTextBaseline: 'middle',\n      lineWidth: 1,\n      stroke: '#637088',\n      strokeOpacity: 1,\n      zIndex: 1,\n    },\n    state: {\n      selected: {\n        halo: true,\n        haloStrokeOpacity: 0.25,\n        labelFontSize: 14,\n        labelFontWeight: 'bold',\n        lineWidth: 3,\n      },\n      active: {\n        halo: true,\n        haloStrokeOpacity: 0.15,\n      },\n      highlight: {\n        labelFontWeight: 'bold',\n        lineWidth: 3,\n      },\n      inactive: {\n        stroke: '#D0E4FF',\n        fillOpacity: 0.08,\n        labelOpacity: 0.25,\n        strokeOpacity: 0.08,\n        badgeBackgroundOpacity: 0.25,\n      },\n      disabled: {\n        stroke: '#637088',\n        fillOpacity: 0.45,\n        strokeOpacity: 0.45,\n        labelOpacity: 0.25,\n        badgeBackgroundOpacity: 0.45,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      expand: 'path-in',\n      collapse: 'path-out',\n      show: 'fade',\n      hide: 'fade',\n      update: [{ fields: ['sourceNode', 'targetNode'] }, { fields: ['stroke'], shape: 'key' }],\n      translate: [{ fields: ['sourceNode', 'targetNode'] }],\n    },\n  },\n  combo: {\n    style: {\n      collapsedMarkerFill: '#000000',\n      collapsedMarkerFontSize: 12,\n      collapsedMarkerFillOpacity: 1,\n      collapsedSize: 32,\n      collapsedFillOpacity: 1,\n      fill: '#fdfdfd',\n      halo: false,\n      haloLineWidth: 12,\n      haloStroke: '#99add1',\n      haloStrokeOpacity: 0.25,\n      labelBackground: false,\n      labelBackgroundFill: '#000000',\n      labelBackgroundLineWidth: 0,\n      labelBackgroundOpacity: 0.75,\n      labelBackgroundPadding: [2, 4, 2, 4],\n      labelFill: '#ffffff',\n      labelFontSize: 12,\n      labelFontWeight: 400,\n      labelOpacity: 1,\n      lineDash: 0,\n      lineWidth: 1,\n      fillOpacity: 0.04,\n      strokeOpacity: 1,\n      padding: 10,\n      stroke: '#99add1',\n    },\n    state: {\n      selected: {\n        halo: true,\n        labelFontSize: 14,\n        labelFontWeight: 700,\n        lineWidth: 4,\n      },\n      active: {\n        halo: true,\n      },\n      highlight: {\n        labelFontWeight: 700,\n        lineWidth: 4,\n      },\n      inactive: {\n        fillOpacity: 0.65,\n        labelOpacity: 0.25,\n        strokeOpacity: 0.65,\n      },\n      disabled: {\n        fill: '#d0e4ff',\n        fillOpacity: 0.25,\n        labelOpacity: 0.25,\n        stroke: '#969696',\n        strokeOpacity: 0.25,\n      },\n    },\n    animation: {\n      enter: 'fade',\n      exit: 'fade',\n      show: 'fade',\n      hide: 'fade',\n      expand: 'combo-expand',\n      collapse: 'combo-collapse',\n      update: [{ fields: ['x', 'y'] }, { fields: ['fill', 'stroke', 'lineWidth'], shape: 'key' }],\n      translate: [{ fields: ['x', 'y'] }],\n    },\n  },\n};\n",paraId:16,tocIndex:4},{value:"在创建图时通过 ",paraId:17,tocIndex:6},{value:"theme",paraId:17,tocIndex:6},{value:" 选项指定要使用的主题：",paraId:17,tocIndex:6},{value:"const graph = new Graph({\n  theme: 'light', // 或 'dark'\n  // ... 其他配置\n});\n",paraId:18,tocIndex:6},{value:"创建图后，可以通过 ",paraId:19,tocIndex:7},{value:"setTheme",paraId:19,tocIndex:7},{value:" 方法动态切换主题：",paraId:19,tocIndex:7},{value:"// 切换到暗色主题\ngraph.setTheme('dark');\n\n// 获取当前主题\nconst currentTheme = graph.getTheme(); // 'dark'\n",paraId:20,tocIndex:7},{value:"在 G6 中，元素的最终样式由多个层级的样式合并而成，按优先级从低到高排序：",paraId:21,tocIndex:8},{value:"⭐️ 主题默认样式",paraId:22,tocIndex:8},{value:" < 调色板样式 < 数据样式 < 图的默认样式 < ",paraId:22,tocIndex:8},{value:"⭐️ 主题状态样式",paraId:22,tocIndex:8},{value:" < 图的状态样式",paraId:22,tocIndex:8},{value:"详细说明：",paraId:23,tocIndex:8},{value:"主题默认样式",paraId:24,tocIndex:8},{value:"：主题系统提供的基础样式",paraId:24,tocIndex:8},{value:"调色板样式",paraId:24,tocIndex:8},{value:"：基于主题调色板配置的自动着色样式",paraId:24,tocIndex:8},{value:"数据样式",paraId:24,tocIndex:8},{value:"：在数据中定义的样式",paraId:24,tocIndex:8},{value:"图的默认样式",paraId:24,tocIndex:8},{value:"：通过图的配置项设置的样式",paraId:24,tocIndex:8},{value:"主题状态样式",paraId:24,tocIndex:8},{value:"：主题中定义的状态样式",paraId:24,tocIndex:8},{value:"图的状态样式",paraId:24,tocIndex:8},{value:"：通过图的配置项设置的状态样式",paraId:24,tocIndex:8},{value:"更多关于自定义主题的内容，请参考",paraId:25,tocIndex:8},{value:"自定义主题",paraId:26,tocIndex:8},{value:"。",paraId:25,tocIndex:8}]},19947:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(32054);const d=[{value:"色板(Palette)是指一组预定义的颜色集合，用于帮助用户更方便的选择颜色。在 G6 中，色板是一种常见的配置项，用户可以通过色板来配置节点、边、连线等元素的颜色。",paraId:0,tocIndex:0},{value:"色板分为",paraId:1,tocIndex:0},{value:"离散色板",paraId:1,tocIndex:0},{value:"和",paraId:1,tocIndex:0},{value:"连续色板",paraId:1,tocIndex:0},{value:"两种类型。",paraId:1,tocIndex:0},{value:"离散色板是一组颜色数组，用于将元素中的离散值映射到不同的颜色上，例如节点的类型、边的关系等。下面是一个简单的离散色板示例：",paraId:2,tocIndex:0},{value:"['#5B8FF9', '#61DDAA', '#F6BD16', '#F6903D', '#F08BB4'];\n",paraId:3,tocIndex:0},{value:"连续色板是一个插值器，输入 0~1 的值，返回对应的颜色，用于将元素中的连续值映射到不同的颜色上，例如节点的度数、边的权重等。下面是一个简单的连续色板示例：",paraId:4,tocIndex:0},{value:"(value: number) => `rgb(${value * 255}, 0, 0)`;\n",paraId:5,tocIndex:0},{value:"你可以直接使用内置色板，如果想使用其他色板，需要先进行注册：",paraId:6,tocIndex:1},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { CustomPalette } from 'package-name/or/path-to-your-custom-palette';\n\nregister(ExtensionCategory.PALETTE, 'custom-palette', CustomPalette);\n",paraId:7,tocIndex:1},{value:"在注册色板过程中并不会区分离散色板和连续色板，使用色板过程中需要自行保证色板类型和数据类型的一致性。",paraId:8},{value:"目前 G6 内置了 5 套常用的离散色板，用户可以直接使用：",paraId:9,tocIndex:2},{value:"spectral",paraId:10,tocIndex:2},{value:"tableau",paraId:11,tocIndex:2},{value:"oranges",paraId:12,tocIndex:2},{value:"greens",paraId:13,tocIndex:2},{value:"blues",paraId:14,tocIndex:2},{value:"目前开放色板配置的地方主要以元素为主，以节点为例：",paraId:15,tocIndex:3},{value:"默认配置，直接配置 ",paraId:16,tocIndex:4},{value:"palette",paraId:16,tocIndex:4},{value:" 的值为色板名，会默认为每个节点分配不同的颜色",paraId:16,tocIndex:4},{value:"{\n  node: {\n    palette: 'spectral', // spectral 为色板名\n  }\n}\n",paraId:17,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 400,\n  height: 100,\n  data: {\n    nodes: new Array(30).fill(0).map((_, i) => ({ id: `node-${i}` })),\n  },\n  layout: { type: 'grid', cols: 10, rows: 3 },\n  node: {\n    palette: 'spectral',\n  },\n});\n\ngraph.render();\n",paraId:18,tocIndex:4},{value:"当元素数量超过色板颜色数量时，会循环使用色板中的颜色",paraId:19,tocIndex:4},{value:"标准配置，离散色板配置属性包括：",paraId:20,tocIndex:4},{value:"type: 'group'",paraId:20,tocIndex:4},{value:"，",paraId:20,tocIndex:4},{value:"field",paraId:20,tocIndex:4},{value:"，",paraId:20,tocIndex:4},{value:"color",paraId:20,tocIndex:4},{value:"，",paraId:20,tocIndex:4},{value:"invert",paraId:20,tocIndex:4},{value:"其中 ",paraId:21,tocIndex:4},{value:"type: 'group'",paraId:21,tocIndex:4},{value:" 显式指定了当前色板类型为离散色板；",paraId:21,tocIndex:4},{value:"field",paraId:21,tocIndex:4},{value:" 指定元素数据中的分组字段；",paraId:21,tocIndex:4},{value:"color",paraId:21,tocIndex:4},{value:" 为色板名；",paraId:21,tocIndex:4},{value:"invert",paraId:21,tocIndex:4},{value:" 为是否反转色板。",paraId:21,tocIndex:4},{value:"给定一组示例数据：",paraId:22,tocIndex:4},{value:'{\n  "nodes": [\n    { "id": "node-1", "data": { "category": "A" } },\n    { "id": "node-2", "data": { "category": "B" } },\n    { "id": "node-3", "data": { "category": "C" } },\n    { "id": "node-4", "data": { "category": "A" } },\n    { "id": "node-5", "data": { "category": "B" } },\n    { "id": "node-6", "data": { "category": "C" } }\n  ]\n}\n',paraId:23,tocIndex:4},{value:"数据中 ",paraId:24,tocIndex:4},{value:"node-1",paraId:24,tocIndex:4},{value:"，",paraId:24,tocIndex:4},{value:"node-4",paraId:24,tocIndex:4},{value:" 属于 A 类别，",paraId:24,tocIndex:4},{value:"node-2",paraId:24,tocIndex:4},{value:"，",paraId:24,tocIndex:4},{value:"node-5",paraId:24,tocIndex:4},{value:" 属于 B 类别，",paraId:24,tocIndex:4},{value:"node-3",paraId:24,tocIndex:4},{value:"，",paraId:24,tocIndex:4},{value:"node-6",paraId:24,tocIndex:4},{value:" 属于 C 类别。",paraId:24,tocIndex:4},{value:"通过以下方式配置节点的颜色，使得同类别的节点颜色相同：",paraId:25,tocIndex:4},{value:"{\n  node: {\n    palette: {\n      type: 'group', // 指定色板类型为分类色板\n      field: 'category', // 指定数据中的分组字段\n      color: 'tableau', // 使用 tableau 色板\n    }\n  }\n}\n",paraId:26,tocIndex:4},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i}`, data: { category: ['A', 'B', 'C'][i % 3] } })),\n  },\n  layout: { type: 'grid', cols: 6 },\n  node: {\n    palette: {\n      type: 'group',\n      field: 'category',\n      color: 'tableau',\n    },\n  },\n});\n\ngraph.render();\n",paraId:27,tocIndex:4},{value:"连续色板只支持标准方式配置，配置属性包括：",paraId:28,tocIndex:5},{value:"type: 'value'",paraId:28,tocIndex:5},{value:"，",paraId:28,tocIndex:5},{value:"field",paraId:28,tocIndex:5},{value:"，",paraId:28,tocIndex:5},{value:"color",paraId:28,tocIndex:5},{value:"，",paraId:28,tocIndex:5},{value:"invert",paraId:28,tocIndex:5},{value:"。",paraId:28,tocIndex:5},{value:"给定一组示例数据：",paraId:29,tocIndex:5},{value:'{\n  "nodes": [\n    { "id": "node-1", "data": { "value": 0 } },\n    { "id": "node-2", "data": { "value": 20 } },\n    { "id": "node-3", "data": { "value": 40 } },\n    { "id": "node-4", "data": { "value": 60 } },\n    { "id": "node-5", "data": { "value": 80 } },\n    { "id": "node-6", "data": { "value": 100 } }\n  ]\n}\n',paraId:30,tocIndex:5},{value:"现在创建一个插值器，将最大值映射为红色(",paraId:31,tocIndex:5},{value:"rgb(255, 0, 0)",paraId:31,tocIndex:5},{value:")，最小值映射为黑色(",paraId:31,tocIndex:5},{value:"rgb(0, 0, 0)",paraId:31,tocIndex:5},{value:")：",paraId:31,tocIndex:5},{value:"(value) => `rgb(${value * 255}, 0, 0)`;\n",paraId:32,tocIndex:5},{value:"通过以下配置使得节点的颜色根据数据中的 ",paraId:33,tocIndex:5},{value:"value",paraId:33,tocIndex:5},{value:" 字段的值映射到不同的颜色：",paraId:33,tocIndex:5},{value:"{\n  node: {\n    palette: {\n      type: 'value', // 指定色板类型为连续色板\n      field: 'value', // 指定数据中的数值字段\n      color: (value) => `rgb(${value * 255}, 0, 0)`, // 使用插值器\n    }\n  }\n}\n",paraId:34,tocIndex:5},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 50,\n  data: {\n    nodes: new Array(6).fill(0).map((_, i) => ({ id: `node-${i}`, data: { value: (i + 1) * 20 } })),\n  },\n  layout: { type: 'grid', cols: 6 },\n  node: {\n    palette: {\n      type: 'value',\n      field: 'value',\n      color: (value) => `rgb(${value * 255}, 0, 0)`,\n    },\n  },\n});\n\ngraph.render();\n",paraId:35,tocIndex:5},{value:"内置连续色板不支持指定值域范围，如果有更复杂的颜色映射需求，可以在样式映射中自定义",paraId:36},{value:"如果内置色板无法满足需求，可以自定义色板，具体请参考",paraId:37,tocIndex:6},{value:"自定义色板",paraId:38,tocIndex:6},{value:"。",paraId:37,tocIndex:6},{value:"色板会基于元素类型生成样式，对于节点和组合，会将颜色映射到 ",paraId:39,tocIndex:7},{value:"fill",paraId:39,tocIndex:7},{value:" 属性；对于边，会将颜色映射到 ",paraId:39,tocIndex:7},{value:"stroke",paraId:39,tocIndex:7},{value:" 属性。",paraId:39,tocIndex:7},{value:"如果同时配置了色板和样式映射，样式映射会覆盖色板颜色。下面的例子中，节点的颜色始终为红色：",paraId:40,tocIndex:7},{value:"{\n  node: {\n    style: {\n      fill: 'red',\n    },\n    palette: 'spectral',\n  }\n}\n",paraId:41,tocIndex:7}]},53669:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(72320);const d=[{value:"在图可视化中，节点的大小通常用于传达节点的重要性或影响力。通过根据节点中心性调整节点的大小，我们可以更直观地展示网络中各个节点的重要性，从而帮助用户更好地理解和分析复杂的网络结构。",paraId:0,tocIndex:0},{value:"需要通过节点大小来突出节点的重要性和影响力时，可使用此数据处理。",paraId:1,tocIndex:1},{value:"以下为常见的场景：",paraId:2,tocIndex:1},{value:"社交网络分析",paraId:3,tocIndex:1},{value:"：比如分析社交媒体平台中用户的活跃度与影响力，通过节点大小突出高互动用户。",paraId:3,tocIndex:1},{value:"金融风险传导网络",paraId:4,tocIndex:1},{value:"：比如识别金融系统中承担关键资金流转职能的机构，预防系统性风险。",paraId:4,tocIndex:1},{value:"交通枢纽规划",paraId:5,tocIndex:1},{value:"：比如优化城市地铁网络设计，识别换乘压力点。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"必选",paraId:6,tocIndex:2},{value:"type",paraId:6,tocIndex:2},{value:"数据处理类型",paraId:6,tocIndex:2},{value:"map-node-size",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"centrality",paraId:6,tocIndex:2},{value:"节点中心性的度量方法，",paraId:6,tocIndex:2},{value:"配置项",paraId:7,tocIndex:2},{value:"NodeCentralityOptions",paraId:8,tocIndex:2},{value:" | ((graphData: ",paraId:6,tocIndex:2},{value:"GraphData",paraId:9,tocIndex:2},{value:") => Map<string, number>)",paraId:6,tocIndex:2},{value:"{ type: 'degree' }",paraId:6,tocIndex:2},{value:"mapLabelSize",paraId:6,tocIndex:2},{value:"是否同步调整标签大小",paraId:6,tocIndex:2},{value:"boolean | [number, number]",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"maxSize",paraId:6,tocIndex:2},{value:"节点最大尺寸",paraId:6,tocIndex:2},{value:"number | [number, number] | [number, number, number]",paraId:6,tocIndex:2},{value:"80",paraId:6,tocIndex:2},{value:"minSize",paraId:6,tocIndex:2},{value:"节点最小尺寸",paraId:6,tocIndex:2},{value:"number | [number, number] | [number, number, number]",paraId:6,tocIndex:2},{value:"20",paraId:6,tocIndex:2},{value:"scale",paraId:6,tocIndex:2},{value:"插值函数，用于将节点中心性映射到节点大小，",paraId:6,tocIndex:2},{value:"配置项",paraId:10,tocIndex:2},{value:"linear",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"log",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"pow",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"sqrt",paraId:6,tocIndex:2},{value:" | ((value: number, domain: [number, number], range: [number, number]) => number)",paraId:6,tocIndex:2},{value:"log",paraId:6,tocIndex:2},{value:"节点中心性的度量方法",paraId:11,tocIndex:3},{value:"'degree'",paraId:12,tocIndex:3},{value:"：度中心性，通过节点的度数（连接的边的数量）来衡量其重要性。度中心性高的节点通常具有较多的直接连接，在网络中可能扮演着重要的角色",paraId:12,tocIndex:3},{value:"'betweenness'",paraId:12,tocIndex:3},{value:"：介数中心性，通过节点在所有最短路径中出现的次数来衡量其重要性。介数中心性高的节点通常在网络中起到桥梁作用，控制着信息的流动",paraId:12,tocIndex:3},{value:"'closeness'",paraId:12,tocIndex:3},{value:"：接近中心性，通过节点到其他所有节点的最短路径长度总和的倒数来衡量其重要性。接近中心性高的节点通常能够更快地到达网络中的其他节点",paraId:12,tocIndex:3},{value:"'eigenvector'",paraId:12,tocIndex:3},{value:"：特征向量中心性，通过节点与其他中心节点的连接程度来衡量其重要性。特征向量中心性高的节点通常连接着其他重要节点",paraId:12,tocIndex:3},{value:"'pagerank'",paraId:12,tocIndex:3},{value:"：PageRank 中心性，通过节点被其他节点引用的次数来衡量其重要性，常用于有向图。PageRank 中心性高的节点通常在网络中具有较高的影响力，类似于网页排名算法",paraId:12,tocIndex:3},{value:"自定义中心性计算方法：",paraId:12,tocIndex:3},{value:"(graphData: GraphData) => Map<ID, number>",paraId:12,tocIndex:3},{value:"，其中 ",paraId:12,tocIndex:3},{value:"graphData",paraId:12,tocIndex:3},{value:" 为图数据，",paraId:12,tocIndex:3},{value:"Map<ID, number>",paraId:12,tocIndex:3},{value:" 为节点 ID 到中心性值的映射",paraId:12,tocIndex:3},{value:"示例：",paraId:13,tocIndex:3},{value:"const graph = new Graph({\n  // 其他配置...\n  transforms: [\n    {\n      type: 'map-node-size',\n      centrality: {\n        type: 'degree',\n        direction: 'both',\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:3},{value:"效果如下（可切换度量方法查看不同效果，示例中节点 label 为",paraId:15,tocIndex:3},{value:"${节点 id } - ${节点大小}",paraId:15,tocIndex:3},{value:"）：",paraId:15,tocIndex:3},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [{ id: 'node1' }, { id: 'node2' }, { id: 'node3' }, { id: 'node4' }, { id: 'node5' }],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node2', target: 'node3' },\n        { source: 'node3', target: 'node4' },\n        { source: 'node4', target: 'node5' },\n        { source: 'node1', target: 'node4' },\n        { source: 'node1', target: 'node3' },\n      ],\n    },\n    node: {\n      type: 'circle',\n      style: {\n        labelText: (d) => d.id + ' - ' + d.style.size[0].toFixed(0),\n      },\n    },\n    layout: {\n      type: 'circular',\n      radius: 180,\n    },\n    behaviors: ['drag-canvas'],\n    transforms: [\n      {\n        key: 'map-node-size',\n        type: 'map-node-size',\n        centrality: {\n          type: 'pagerank',\n        },\n      },\n    ],\n  },\n  { width: 600, height: 460 },\n  (gui, graph) => {\n    const options = {\n      type: 'degree',\n    };\n    const optionFolder = gui.addFolder('Centrality Options');\n    optionFolder.add(options, 'type', ['degree', 'betweenness', 'closeness', 'eigenvector', 'pagerank']);\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.updateTransform({\n        key: 'map-node-size',\n        centrality: {\n          [property]: value,\n        },\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:16,tocIndex:3},{value:"type NodeCentralityOptions =\n  | { type: 'degree'; direction?: 'in' | 'out' | 'both' }\n  | { type: 'betweenness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'closeness'; directed?: boolean; weightPropertyName?: string }\n  | { type: 'eigenvector'; directed?: boolean }\n  | { type: 'pagerank'; epsilon?: number; linkProb?: number };\n",paraId:17,tocIndex:4},{value:"direction",paraId:18,tocIndex:4},{value:"：表示统计哪些方向的边，",paraId:18,tocIndex:4},{value:"in",paraId:18,tocIndex:4},{value:" -入边、 ",paraId:18,tocIndex:4},{value:"out",paraId:18,tocIndex:4},{value:" -出边、 ",paraId:18,tocIndex:4},{value:"both",paraId:18,tocIndex:4},{value:" -入边和出边都考虑进去",paraId:18,tocIndex:4},{value:"directed",paraId:19,tocIndex:4},{value:"：是否为有向图",paraId:19,tocIndex:4},{value:"weightPropertyName",paraId:20,tocIndex:4},{value:"：边的权重属性名",paraId:20,tocIndex:4},{value:"epsilon",paraId:21,tocIndex:4},{value:"：PageRank 算法的收敛容差",paraId:21,tocIndex:4},{value:"linkProb",paraId:22,tocIndex:4},{value:"：PageRank 算法的阻尼系数，指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85",paraId:22,tocIndex:4},{value:"'linear'",paraId:23,tocIndex:5},{value:"：线性插值函数，将一个值从一个范围线性映射到另一个范围，常用于处理中心性值的差异较小的情况",paraId:23,tocIndex:5},{value:"'log'",paraId:23,tocIndex:5},{value:"：对数插值函数，将一个值从一个范围对数映射到另一个范围，常用于处理中心性值的差异较大的情况",paraId:23,tocIndex:5},{value:"'pow'",paraId:23,tocIndex:5},{value:"：幂律插值函数，将一个值从一个范围幂律映射到另一个范围，常用于处理中心性值的差异较大的情况",paraId:23,tocIndex:5},{value:"'sqrt'",paraId:23,tocIndex:5},{value:"：平方根插值函数，将一个值从一个范围平方根映射到另一个范围，常用于处理中心性值的差异较大的情况",paraId:23,tocIndex:5},{value:"自定义插值函数：",paraId:23,tocIndex:5},{value:"(value: number, domain: [number, number], range: [number, number]) => number",paraId:23,tocIndex:5},{value:"，其中 ",paraId:23,tocIndex:5},{value:"value",paraId:23,tocIndex:5},{value:" 为需要映射的值，",paraId:23,tocIndex:5},{value:"domain",paraId:23,tocIndex:5},{value:" 为输入值的范围，",paraId:23,tocIndex:5},{value:"range",paraId:23,tocIndex:5},{value:" 为输出值的范围",paraId:23,tocIndex:5},{value:"示例：",paraId:24,tocIndex:5},{value:"const graph = new Graph({\n  // 其他配置...\n  transforms: [\n    {\n      type: 'map-node-size',\n      centrality: {\n        type: 'degree',\n      },\n      scale: 'linear',\n    },\n  ],\n});\n",paraId:25,tocIndex:5},{value:"效果如下（该示例为基于度中心性 ",paraId:26,tocIndex:5},{value:"degree",paraId:26,tocIndex:5},{value:" ，可切换插值函数查看不同效果，示例中节点 label 为",paraId:26,tocIndex:5},{value:"${节点 id } - ${节点大小}",paraId:26,tocIndex:5},{value:"）：",paraId:26,tocIndex:5},{value:"createGraph(\n  {\n    autoFit: 'center',\n    data: {\n      nodes: [\n        { id: 'node1' },\n        { id: 'node2' },\n        { id: 'node3' },\n        { id: 'node4' },\n        { id: 'node5' },\n        { id: 'node6' },\n        { id: 'node7' },\n      ],\n      edges: [\n        { source: 'node1', target: 'node2' },\n        { source: 'node1', target: 'node3' },\n        { source: 'node1', target: 'node4' },\n        { source: 'node2', target: 'node5' },\n        { source: 'node3', target: 'node6' },\n        { source: 'node4', target: 'node7' },\n      ],\n    },\n    node: {\n      type: 'circle',\n      style: {\n        labelText: (d) => d.id + ' - ' + d.style.size[0].toFixed(0),\n      },\n    },\n    layout: {\n      type: 'antv-dagre',\n    },\n    behaviors: ['drag-canvas'],\n    transforms: [\n      {\n        key: 'map-node-size',\n        type: 'map-node-size',\n        centrality: {\n          type: 'degree',\n        },\n        scale: 'log',\n      },\n    ],\n  },\n  { width: 600, height: 400 },\n  (gui, graph) => {\n    const options = {\n      scale: 'log',\n    };\n    const optionFolder = gui.addFolder('MapNodeSize Options');\n    optionFolder.add(options, 'scale', ['log', 'linear', 'pow', 'sqrt']);\n    optionFolder.onChange(async ({ property, value }) => {\n      graph.updateTransform({\n        key: 'map-node-size',\n        [property]: value,\n      });\n      graph.render();\n    });\n  },\n);\n",paraId:27,tocIndex:5},{value:"场景案例：独角兽和他们的投资者",paraId:28,tocIndex:6}]},9801:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78491);const d=[{value:"参考示例",paraId:0},{value:"：",paraId:0},{value:"径向生态树",paraId:1},{value:"径向紧凑树",paraId:2},{value:"place-radial-labels",paraId:3,tocIndex:1},{value:" | string",paraId:3,tocIndex:1},{value:"此数据处理已内置，你可以通过 ",paraId:4,tocIndex:1},{value:"type: 'place-radial-labels'",paraId:4,tocIndex:1},{value:" 来使用它。",paraId:4,tocIndex:1},{value:"number",paraId:5,tocIndex:2},{value:"偏移量",paraId:6,tocIndex:2}]},48682:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(14151);const d=[{value:"平行边（Parallel Edges）是指在图结构中，两个节点之间存在多条边。这些边共享相同的源节点和目标节点，但可能代表不同的关系或属性。为了避免边的重叠和混淆，提供了两种处理平行边的方式：",paraId:0,tocIndex:0},{value:"捆绑模式（bundle）：将平行边捆绑在一起，通过改变曲率与其他边分开",paraId:1,tocIndex:0},{value:"合并模式（merge）：将平行边合并为一条聚合",paraId:1,tocIndex:0},{value:"下面为常见使用场景举例：",paraId:2,tocIndex:1},{value:"双向数据流，比如客户端发送请求，服务端返回响应",paraId:3,tocIndex:1},{value:"多依赖关系，即一个节点通过多种方式依赖另一个节点，比如微服务架构中，服务 A 调用服务 B的两个不同 API",paraId:4,tocIndex:1},{value:"多链路，比如高可用架构中，主链路（实线，状态正常）与备份链路（灰色虚线，状态待机）同时展示",paraId:5,tocIndex:1},{value:"1. 快速配置（静态）",paraId:6,tocIndex:2},{value:"使用字符串形式直接声明，这种方式简洁但仅支持默认配置，且配置后不可动态修改：",paraId:7,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  transforms: ['process-parallel-edges'],\n});\n",paraId:8,tocIndex:2},{value:"2. 对象配置（推荐）",paraId:9,tocIndex:2},{value:"使用对象形式进行配置，支持自定义参数，且可以在运行时动态更新配置：",paraId:10,tocIndex:2},{value:"const graph = new Graph({\n  // 其他配置...\n  transforms: [\n    {\n      type: 'process-parallel-edges',\n      key: 'process-parallel-edges',\n      mode: 'bundle', // 默认就是捆绑模式了\n      distance: 30, // 配置捆绑模式下边之间的距离为30\n    },\n  ],\n});\n",paraId:11,tocIndex:2},{value:"属性",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"必选",paraId:12,tocIndex:3},{value:"type",paraId:12,tocIndex:3},{value:"数据处理类型",paraId:12,tocIndex:3},{value:"process-parallel-edges",paraId:12,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"✓",paraId:12,tocIndex:3},{value:"distance",paraId:12,tocIndex:3},{value:"边之间的距离，仅在捆绑模式下有效",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"15",paraId:12,tocIndex:3},{value:"edges",paraId:12,tocIndex:3},{value:"考虑要处理的边，默认为全部边",paraId:12,tocIndex:3},{value:"string[]",paraId:12,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"mode",paraId:12,tocIndex:3},{value:"处理模式，",paraId:12,tocIndex:3},{value:"配置项",paraId:13,tocIndex:3},{value:"'bundle'",paraId:12,tocIndex:3},{value:"'merge'",paraId:12,tocIndex:3},{value:" | ",paraId:12,tocIndex:3},{value:"'bundle'",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"合并边的样式，仅在合并模式下有效，",paraId:12,tocIndex:3},{value:"配置项",paraId:14,tocIndex:3},{value:"PathStyleProps | ((prev: ",paraId:12,tocIndex:3},{value:"EdgeData",paraId:15,tocIndex:3},{value:"[]) => PathStyleProps)",paraId:12,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"提供了两种处理模式：",paraId:16,tocIndex:4},{value:"'merge'",paraId:17,tocIndex:4},{value:": 将平行边合并为一条边，适用于不需要区分平行边的情况，",paraId:17,tocIndex:4},{value:"示例",paraId:18,tocIndex:4},{value:"merge",paraId:19,tocIndex:4},{value:" 使用的是内置的直线（ ",paraId:19,tocIndex:4},{value:"line",paraId:20,tocIndex:4},{value:" ）来展示合并边。",paraId:19,tocIndex:4},{value:"'bundle'",paraId:21,tocIndex:4},{value:": 每条边都会与其他所有平行边捆绑在一起，并通过改变曲率与其他边分开。如果一组平行边的数量是奇数，那么中心的边将被绘制为直线，其他的边将被绘制为曲线，",paraId:21,tocIndex:4},{value:"示例",paraId:22,tocIndex:4},{value:"bundle",paraId:23,tocIndex:4},{value:" 使用的是内置的二次贝塞尔曲线（ ",paraId:23,tocIndex:4},{value:"quadratic",paraId:24,tocIndex:4},{value:" ）来实现，数据处理过程会强制把每个 ",paraId:23,tocIndex:4},{value:"edgeDatum.type",paraId:23,tocIndex:4},{value:" 改为 ",paraId:23,tocIndex:4},{value:"quadratic",paraId:23,tocIndex:4},{value:"，并计算每条线的曲率。",paraId:23,tocIndex:4},{value:"禁止在创建 Graph 实例时配置 ",paraId:25},{value:"edge.type",paraId:25},{value:" 即默认的边类型，因为它的优先级比 ",paraId:25},{value:"edgeDatum.type",paraId:25},{value:" 要高，会导致 ",paraId:25},{value:"bundle",paraId:25},{value:" 模式的处理无法生效。",paraId:25},{value:"合并边的样式，仅在合并模式下有效",paraId:26,tocIndex:5},{value:"下表列出了常用的属性，更多属性请参考 ",paraId:27,tocIndex:6},{value:"PathStyleProps",paraId:27,tocIndex:6},{value:"。",paraId:27,tocIndex:6},{value:"属性",paraId:28,tocIndex:6},{value:"描述",paraId:28,tocIndex:6},{value:"类型",paraId:28,tocIndex:6},{value:"默认值",paraId:28,tocIndex:6},{value:"必选",paraId:28,tocIndex:6},{value:"fill",paraId:28,tocIndex:6},{value:"填充色",paraId:28,tocIndex:6},{value:"string",paraId:28,tocIndex:6},{value:"#1783FF",paraId:28,tocIndex:6},{value:"fillOpacity",paraId:28,tocIndex:6},{value:"填充色透明度",paraId:28,tocIndex:6},{value:"number | string",paraId:28,tocIndex:6},{value:"1",paraId:28,tocIndex:6},{value:"lineCap",paraId:28,tocIndex:6},{value:"描边端点样式",paraId:28,tocIndex:6},{value:"round",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"square",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"butt",paraId:28,tocIndex:6},{value:"butt",paraId:28,tocIndex:6},{value:"lineDash",paraId:28,tocIndex:6},{value:"描边虚线样式",paraId:28,tocIndex:6},{value:"number[]",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"lineDashOffset",paraId:28,tocIndex:6},{value:"描边虚线偏移量",paraId:28,tocIndex:6},{value:"number",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"lineJoin",paraId:28,tocIndex:6},{value:"描边连接处样式",paraId:28,tocIndex:6},{value:"round",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"bevel",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"miter",paraId:28,tocIndex:6},{value:"miter",paraId:28,tocIndex:6},{value:"lineWidth",paraId:28,tocIndex:6},{value:"描边宽度",paraId:28,tocIndex:6},{value:"number",paraId:28,tocIndex:6},{value:"1",paraId:28,tocIndex:6},{value:"opacity",paraId:28,tocIndex:6},{value:"透明度",paraId:28,tocIndex:6},{value:"number | string",paraId:28,tocIndex:6},{value:"1",paraId:28,tocIndex:6},{value:"shadowBlur",paraId:28,tocIndex:6},{value:"阴影模糊度",paraId:28,tocIndex:6},{value:"number",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"shadowColor",paraId:28,tocIndex:6},{value:"阴影颜色",paraId:28,tocIndex:6},{value:"string",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"shadowOffsetX",paraId:28,tocIndex:6},{value:"阴影在 x 轴方向上的偏移量",paraId:28,tocIndex:6},{value:"number | string",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"shadowOffsetY",paraId:28,tocIndex:6},{value:"阴影在 y 轴方向上的偏移量",paraId:28,tocIndex:6},{value:"number | string",paraId:28,tocIndex:6},{value:"-",paraId:28,tocIndex:6},{value:"shadowType",paraId:28,tocIndex:6},{value:"阴影类型",paraId:28,tocIndex:6},{value:"inner",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"outer",paraId:28,tocIndex:6},{value:"outer",paraId:28,tocIndex:6},{value:"stroke",paraId:28,tocIndex:6},{value:"描边色",paraId:28,tocIndex:6},{value:"string",paraId:28,tocIndex:6},{value:"#000",paraId:28,tocIndex:6},{value:"strokeOpacity",paraId:28,tocIndex:6},{value:"描边色透明度",paraId:28,tocIndex:6},{value:"number | string",paraId:28,tocIndex:6},{value:"1",paraId:28,tocIndex:6},{value:"visibility",paraId:28,tocIndex:6},{value:"图形是否可见",paraId:28,tocIndex:6},{value:"visible",paraId:28,tocIndex:6},{value:" | ",paraId:28,tocIndex:6},{value:"hidden",paraId:28,tocIndex:6},{value:"visible",paraId:28,tocIndex:6},{value:"下面是一个简单的合并模式的例子，需要注意：",paraId:29,tocIndex:9},{value:"不需要合并（即两个节点间只有一条边）的边，合并样式不会在这条边上生效，比如例子中的 ",paraId:30,tocIndex:9},{value:"A->C",paraId:30,tocIndex:9},{value:"合并样式实际上是赋值给 ",paraId:30,tocIndex:9},{value:"datum.style",paraId:30,tocIndex:9},{value:" ，也就是优先级会比实例化 Graph 时配置的默认样式低（ ",paraId:30,tocIndex:9},{value:"edge.style",paraId:30,tocIndex:9},{value:" ），所以例子中合并样式的 ",paraId:30,tocIndex:9},{value:"startArrow",paraId:30,tocIndex:9},{value:" 没有生效",paraId:30,tocIndex:9}]},98099:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(72138);const d=[{value:"自定义数据处理允许用户在业务实现过程中，把额外的数据处理封装起来，在渲染前或者布局后对数据进行进一步处理。用户通过自定义数据处理，实现部分数据处理解耦，更好地进行管理、编排代码以及提高代码可维护性。",paraId:0,tocIndex:0},{value:"用户在进行自定义数据处理前，需要仔细阅读并掌握数据处理器的 ",paraId:1,tocIndex:1},{value:"实现原理和执行时机",paraId:2,tocIndex:1},{value:" 。",paraId:1,tocIndex:1},{value:"接下来将讲述两个可能的业务场景，并通过自定义数据处理来实现：",paraId:3,tocIndex:2},{value:"需求",paraId:4,tocIndex:3},{value:"游离节点，即没有连线的节点，画布渲染时不展示游离节点",paraId:5,tocIndex:3},{value:"实现",paraId:6,tocIndex:3},{value:"import type { DrawData, DrawContext } from '@antv/g6';\nimport { Graph, BaseTransform, register, ExtensionCategory } from '@antv/g6';\n\nclass HideFreeNode extends BaseTransform {\n  public beforeDraw(input: DrawData, context: DrawContext): DrawData {\n    const { model } = this.context;\n    const { add, update, remove } = input;\n\n    add.nodes.forEach((nodeData, nodeId) => {\n      // 获取节点的相关连线\n      const edges = model.getRelatedEdgesData(nodeId);\n      // 没有任何连线的的节点则从add里面移除，添加到remove里面\n      if (!edges.length) {\n        add.nodes.delete(nodeId);\n        remove.nodes.set(nodeId, nodeData);\n      }\n    });\n\n    return input;\n  }\n}\n",paraId:7,tocIndex:3},{value:"import { Graph, BaseTransform, register, ExtensionCategory } from '@antv/g6';\n\nclass HideFreeNode extends BaseTransform {\n  beforeDraw(input, context) {\n    const { model } = this.context;\n    const { add, update, remove } = input;\n\n    add.nodes.forEach((nodeData, nodeId) => {\n      // 获取节点的相关连线\n      const edges = model.getRelatedEdgesData(nodeId);\n      // 没有任何连线的的节点则从add里面移除，添加到remove里面\n      if (!edges.length) {\n        add.nodes.delete(nodeId);\n        remove.nodes.set(nodeId, nodeData);\n      }\n    });\n\n    return input;\n  }\n}\n\nregister(ExtensionCategory.TRANSFORM, 'hide-free-node', HideFreeNode);\n\nconst data = {\n  nodes: [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }, { id: '5' }],\n  edges: [\n    { source: '1', target: '2' },\n    { source: '2', target: '3' },\n    { source: '3', target: '5' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  autoFit: 'center',\n  data,\n  node: {\n    style: {\n      labelText: (d) => d.id,\n    },\n  },\n  layout: {\n    type: 'antv-dagre',\n    rankdir: 'LR',\n  },\n  transforms: ['hide-free-node'],\n});\n\ngraph.render();\n",paraId:8,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"示例中总共有6个节点，id为1-6，id为4的节点没有连线，因此被移除了。",paraId:10,tocIndex:3},{value:"通过 ",paraId:11,tocIndex:3},{value:"getRelatedEdgesData",paraId:11,tocIndex:3},{value:" 获取节点的相关连线，没有则把该节点放到 ",paraId:11,tocIndex:3},{value:"remove.nodes",paraId:11,tocIndex:3},{value:" 里面去，并从 ",paraId:11,tocIndex:3},{value:"add.nodes",paraId:11,tocIndex:3},{value:" 里面移除。",paraId:11,tocIndex:3},{value:"需求",paraId:12,tocIndex:4},{value:"使用 ",paraId:13,tocIndex:4},{value:"环形布局",paraId:14,tocIndex:4},{value:" 时，节点 label 的也需要像内置数据处理器 ",paraId:13,tocIndex:4},{value:"PlaceRadialLabels",paraId:15,tocIndex:4},{value:" 一样实现径向展示（但 PlaceRadialLabels 只支持径向布局，环形布局不是径向布局）",paraId:13,tocIndex:4},{value:"实现",paraId:16,tocIndex:4},{value:"import type { RuntimeContext, DrawContext, Point, TransformArray, Vector2, Vector3 } from '@antv/g6';\nimport { Graph, BaseTransform, register, ExtensionCategory, BaseTransformOptions } from '@antv/g6';\n\n// 目前circular布局没有暴露方法可以获取布局中心，这里简单处理先固定一个，配置circular布局时center与这里保持一致即可\nconst circularCenter = [300, 300];\n\n// 下面的函数 G6 没有暴露出来，先自行声明\nfunction subtract(a: Vector2 | Vector3, b: Vector2 | Vector3): Vector2 | Vector3 {\n  return a.map((v, i) => v - b[i]) as Vector2 | Vector3;\n}\nfunction rad(a: Vector2 | Vector3): number {\n  const [x, y] = a;\n  if (!x && !y) return 0;\n  return Math.atan2(y, x);\n}\nfunction rad2deg(rad: number): number {\n  return rad * (180 / Math.PI);\n}\n\ninterface CircularRadialLabelsOptions extends BaseTransformOptions {\n  offset?: number; // 偏移量\n}\n\nclass CircularRadialLabels extends BaseTransform<CircularRadialLabelsOptions> {\n  static defaultOptions = {\n    offset: 5,\n  };\n  constructor(context: RuntimeContext, options: CircularRadialLabelsOptions) {\n    super(context, Object.assign({}, CircularRadialLabels.defaultOptions, options));\n  }\n  get center(): Point {\n    return circularCenter;\n  }\n  public afterLayout() {\n    const { graph, model } = this.context;\n    const data = model.getData();\n    data.nodes?.forEach((datum) => {\n      const radian = rad(subtract([datum.style.x, datum.style.y], this.center));\n      const isLeft = Math.abs(radian) > Math.PI / 2;\n      const isLeaf = !datum.children || datum.children.length === 0;\n      const nodeId = datum.id;\n      const node = this.context.element?.getElement(nodeId);\n      if (!node || !node.isVisible()) return;\n\n      const nodeHalfWidth = graph.getElementRenderStyle(nodeId).size / 2;\n      const offset = (isLeaf ? 1 : -1) * (nodeHalfWidth + this.options.offset);\n\n      const labelTransform: TransformArray = [\n        ['translate', offset * Math.cos(radian), offset * Math.sin(radian)],\n        ['rotate', isLeft ? rad2deg(radian) + 180 : rad2deg(radian)],\n      ];\n\n      model.updateNodeData([\n        {\n          id: datum.id,\n          style: {\n            labelTextAlign: isLeft === isLeaf ? 'right' : 'left',\n            labelTextBaseline: 'middle',\n            labelTransform,\n          },\n        },\n      ]);\n    });\n\n    graph.draw();\n  }\n}\n",paraId:17,tocIndex:4},{value:"import { Graph, BaseTransform, register, ExtensionCategory } from '@antv/g6';\n\n// 目前circular布局没有暴露方法可以获取布局中心，这里简单处理先固定一个\nconst circularCenter = [300, 300];\n\n// 下面的函数 G6 没有暴露出来，先自行声明\nfunction subtract(a, b) {\n  return a.map((v, i) => v - b[i]);\n}\nfunction rad(a) {\n  const [x, y] = a;\n  if (!x && !y) return 0;\n  return Math.atan2(y, x);\n}\nfunction rad2deg(rad) {\n  return rad * (180 / Math.PI);\n}\n\nclass CircularRadialLabels extends BaseTransform {\n  static defaultOptions = {\n    offset: 5,\n  };\n  constructor(context, options) {\n    super(context, Object.assign({}, CircularRadialLabels.defaultOptions, options));\n  }\n  get center() {\n    return circularCenter;\n  }\n  afterLayout() {\n    const { graph, model } = this.context;\n    const data = model.getData();\n    data.nodes?.forEach((datum) => {\n      const radian = rad(subtract([datum.style.x, datum.style.y], this.center));\n      const isLeft = Math.abs(radian) > Math.PI / 2;\n      const isLeaf = !datum.children || datum.children.length === 0;\n      const nodeId = datum.id;\n      const node = this.context.element?.getElement(nodeId);\n      if (!node || !node.isVisible()) return;\n\n      const nodeHalfWidth = graph.getElementRenderStyle(nodeId).size / 2;\n      const offset = (isLeaf ? 1 : -1) * (nodeHalfWidth + this.options.offset);\n\n      const labelTransform = [\n        ['translate', offset * Math.cos(radian), offset * Math.sin(radian)],\n        ['rotate', isLeft ? rad2deg(radian) + 180 : rad2deg(radian)],\n      ];\n\n      model.updateNodeData([\n        {\n          id: datum.id,\n          style: {\n            labelTextAlign: isLeft === isLeaf ? 'right' : 'left',\n            labelTextBaseline: 'middle',\n            labelTransform,\n          },\n        },\n      ]);\n    });\n\n    graph.draw();\n  }\n}\n\nregister(ExtensionCategory.TRANSFORM, 'circular-radial-labels', CircularRadialLabels);\n\nconst data = {\n  nodes: [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }, { id: '5' }, { id: '6' }],\n  edges: [\n    { source: '1', target: '2' },\n    { source: '2', target: '3' },\n    { source: '3', target: '4' },\n    { source: '4', target: '5' },\n    { source: '5', target: '6' },\n    { source: '6', target: '1' },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  width: 600,\n  height: 400,\n  autoFit: 'center',\n  data,\n  node: {\n    style: {\n      labelText: (d) => 'label' + d.id,\n      size: 30,\n    },\n  },\n  layout: {\n    type: 'circular',\n    width: 200,\n    center: circularCenter,\n    preLayout: false, // 不能是渲染前布局，否则不生效\n  },\n  transforms: ['circular-radial-labels'],\n});\n\ngraph.render();\n",paraId:18,tocIndex:4},{value:"说明",paraId:19,tocIndex:4},{value:"\n上面的实现基本是参考内置数据处理器 ",paraId:19,tocIndex:4},{value:"PlaceRadialLabels",paraId:20,tocIndex:4},{value:" 来实现的，区别是这里的实现是通过拿到布局中心来计算偏移和旋转，具体可参考 PlaceRadialLabels 的 ",paraId:19,tocIndex:4},{value:"源码",paraId:19,tocIndex:4}]},60114:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(65141);const d=[{value:"数据处理（ ",paraId:0,tocIndex:0},{value:"transform",paraId:0,tocIndex:0},{value:" ），也叫数据转换器，是 G6 提供的支持在 ",paraId:0,tocIndex:0},{value:"渲染前( ",paraId:0,tocIndex:0},{value:"beforeDraw",paraId:0,tocIndex:0},{value:" )",paraId:0,tocIndex:0},{value:" 或者 ",paraId:0,tocIndex:0},{value:"布局后( ",paraId:0,tocIndex:0},{value:"afterLayout",paraId:0,tocIndex:0},{value:" )",paraId:0,tocIndex:0},{value:" 对绘制数据进行转化处理的机制，用户可以通过数据处理很方便地对数据处理逻辑进行封装解耦。",paraId:0,tocIndex:0},{value:"所有的数据处理器都是基于 ",paraId:1,tocIndex:2},{value:"BaseTransform",paraId:1,tocIndex:2},{value:" 这个基类进行实现，里面定义了两个基类方法 ",paraId:1,tocIndex:2},{value:"beforeDraw",paraId:1,tocIndex:2},{value:" 和 ",paraId:1,tocIndex:2},{value:"afterLayout",paraId:1,tocIndex:2},{value:" ：",paraId:1,tocIndex:2},{value:"export abstract class BaseTransform<T extends BaseTransformOptions = BaseTransformOptions> extends BaseExtension<T> {\n  public beforeDraw(data: DrawData, context: DrawContext): DrawData {\n    return data;\n  }\n\n  public afterLayout(type: 'pre', data: DrawData): void;\n  public afterLayout(type: 'post', data?: undefined): void;\n  public afterLayout(type: 'pre' | 'post', data?: DrawData) {}\n}\n",paraId:2,tocIndex:2},{value:"以下是这两个方法里核心的参数类型说明：",paraId:3,tocIndex:2},{value:"DrawData",paraId:4,tocIndex:2},{value:"type ProcedureData = {\n  nodes: Map<ID, NodeData>;\n  edges: Map<ID, EdgeData>;\n  combos: Map<ID, ComboData>;\n};\n\ntype DrawData = {\n  add: ProcedureData; // 本次渲染需要新增的元素\n  update: ProcedureData; // 本次渲染需要更新的元素\n  remove: ProcedureData; // 本次渲染需要移除的元素\n};\n",paraId:5,tocIndex:2},{value:"pre | post",paraId:6,tocIndex:2},{value:"pre：绘制前进行的布局（只会在首次布局触发）",paraId:7,tocIndex:2},{value:"post：完成绘制后进行的布局",paraId:8,tocIndex:2},{value:"beforeDraw",paraId:9,tocIndex:3},{value:"下面是每次渲染时数据处理的执行流程/时机：",paraId:10,tocIndex:3},{value:"详细说明：",paraId:11,tocIndex:3},{value:"G6 在每次渲染前计算出 ",paraId:12,tocIndex:3},{value:"add",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"update",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"remove",paraId:12,tocIndex:3},{value:"，分别对应为需要新增、更新、移除的元素，以下简称为 ",paraId:12,tocIndex:3},{value:"DrawData",paraId:12,tocIndex:3},{value:"此时数据处理介入，按配置顺序执行每个数据处理的 ",paraId:12,tocIndex:3},{value:"beforeDraw",paraId:12,tocIndex:3},{value:" 方法，参数则为 ",paraId:12,tocIndex:3},{value:"DrawData",paraId:12,tocIndex:3},{value:"数据处理器中，对 ",paraId:12,tocIndex:3},{value:"DrawData",paraId:12,tocIndex:3},{value:" 里面的元素数据进行改动，即可以按需对 ",paraId:12,tocIndex:3},{value:"add",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"update",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"remove",paraId:12,tocIndex:3},{value:" 里面的元素数据进行修改、移除或者插入元素数据等，最终把改动后的 ",paraId:12,tocIndex:3},{value:"DrawData",paraId:12,tocIndex:3},{value:" 返回给渲染主体逻辑",paraId:12,tocIndex:3},{value:"在执行数据处理后，执行对应的新增、更新、移除元素的操作，完成渲染",paraId:12,tocIndex:3},{value:"触发渲染的场景分为主动和被动，列举如下：",paraId:13},{value:"主动：",paraId:14},{value:" 用户主动调用 ",paraId:14},{value:"graph.render()",paraId:14},{value:" 、 ",paraId:14},{value:"graph.draw()",paraId:14},{value:" 或者在自定义插件、交互等实例里面通过上下文拿到元素控制器（ ",paraId:14},{value:"ElementController",paraId:14},{value:" ）实例调用 ",paraId:14},{value:"this.context.element.draw()",paraId:14},{value:"，等（ ",paraId:14},{value:"graph.render()",paraId:14},{value:" 和 ",paraId:14},{value:"graph.draw()",paraId:14},{value:" 也是调用元素控制器的 ",paraId:14},{value:"draw",paraId:14},{value:" 方法）",paraId:14},{value:"被动：",paraId:14},{value:" 部分内置交互和插件有触发渲染，布局执行后也有触发渲染更新元素位置，等",paraId:14},{value:"afterLayout",paraId:15},{value:"：在执行完布局计算并开始更新节点位置后，执行数据处理",paraId:15},{value:"G6 提供给用户的内置数据处理如下：",paraId:16,tocIndex:4},{value:"各数据处理详细配置可参考 ",paraId:17,tocIndex:4},{value:"内置数据处理文档",paraId:18,tocIndex:4},{value:"。",paraId:17,tocIndex:4},{value:"数据处理名称",paraId:19,tocIndex:4},{value:"注册类型",paraId:19,tocIndex:4},{value:"功能描述",paraId:19,tocIndex:4},{value:"执行时机",paraId:19,tocIndex:4},{value:"动态调整节点大小",paraId:20,tocIndex:4},{value:"map-node-size",paraId:19,tocIndex:4},{value:"根据节点中心性调整节点的大小",paraId:19,tocIndex:4},{value:"beforeDraw",paraId:19,tocIndex:4},{value:"径向标签",paraId:21,tocIndex:4},{value:"place-radial-labels",paraId:19,tocIndex:4},{value:"根据径向布局自动调整节点标签样式，包括位置和旋转角度",paraId:19,tocIndex:4},{value:"afterDraw",paraId:19,tocIndex:4},{value:"平行边",paraId:22,tocIndex:4},{value:"process-parallel-edges",paraId:19,tocIndex:4},{value:"处理平行边，即多条边共享同一源节点和目标节点",paraId:19,tocIndex:4},{value:"beforeDraw",paraId:19,tocIndex:4},{value:"G6 内嵌的数据处理如下：",paraId:23,tocIndex:4},{value:"除了提供给用户选用的数据处理外， G6 也封装并使用了以下数据处理机制来实现基础功能。以下数据处理不开放给用户配置使用，默认必带（列举出来供用户有需要时点击查看并参考源码）：",paraId:24,tocIndex:4},{value:"数据处理名称",paraId:25,tocIndex:4},{value:"注册类型",paraId:25,tocIndex:4},{value:"功能描述",paraId:25,tocIndex:4},{value:"执行时机",paraId:25,tocIndex:4},{value:"调整combo绘制顺序",paraId:25,tocIndex:4},{value:"arrange-draw-order",paraId:25,tocIndex:4},{value:"combo 嵌套时，优先绘制子 combo",paraId:25,tocIndex:4},{value:"beforeDraw",paraId:25,tocIndex:4},{value:"处理组合的展开收起",paraId:25,tocIndex:4},{value:"collapse-expand-combo",paraId:25,tocIndex:4},{value:"收起时，移除 combo 内部元素、销毁内部边，外部边则连到收起的 combo 上；",paraId:25,tocIndex:4},{value:"展开时，反之；",paraId:25,tocIndex:4},{value:"beforeDraw",paraId:25,tocIndex:4},{value:"处理（树图）节点的收起和展开",paraId:25,tocIndex:4},{value:"collapse-expand-node",paraId:25,tocIndex:4},{value:"绘制前，处理（树图）节点的收起和展开",paraId:25,tocIndex:4},{value:"beforeDraw",paraId:25,tocIndex:4},{value:"获取边的实际端点",paraId:25,tocIndex:4},{value:"get-edge-actual-ends",paraId:25,tocIndex:4},{value:"配合",paraId:25,tocIndex:4},{value:"collapse-expand-combo",paraId:25,tocIndex:4},{value:"实现收起时，combo 外部连到内部节点的边改为连到收起的 combo 上（",paraId:25,tocIndex:4},{value:"collapse-expand-combo",paraId:25,tocIndex:4},{value:"只是在收起时判断并标记了这些边需要更新端点）",paraId:25,tocIndex:4},{value:"beforeDraw",paraId:25,tocIndex:4},{value:"更新节点、combo相关边",paraId:25,tocIndex:4},{value:"update-related-edges",paraId:25,tocIndex:4},{value:"如果更新了节点/combo，则把连接的边也一起更新了",paraId:25,tocIndex:4},{value:"beforeDraw",paraId:25,tocIndex:4},{value:"上面 G6 为实现自身基础功能使用的数据处理仅供参考，不可改动。如有需要在这些数据处理基础上做特殊处理，可通过 ",paraId:26},{value:"自定义数据处理",paraId:27},{value:" 实现。",paraId:26},{value:"在图实例初始化时，通过 ",paraId:28,tocIndex:6},{value:"transforms",paraId:28,tocIndex:6},{value:" 数组指定需要的数据处理：",paraId:28,tocIndex:6},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // 其他配置...\n  transforms: ['process-parallel-edges'],\n});\n",paraId:29,tocIndex:6},{value:"对于需要自定义参数的数据处理，可以使用 ",paraId:30,tocIndex:7},{value:"object",paraId:30,tocIndex:7},{value:" 形式配置属性：",paraId:30,tocIndex:7},{value:"const graph = new Graph({\n  // 其他配置...\n  transforms: [\n    'place-radial-labels',\n    {\n      type: 'process-parallel-edges',\n      key: 'process-parallel-edges-1',\n      mode: 'bundle',\n      distance: 30,\n    },\n  ],\n});\n",paraId:31,tocIndex:7},{value:"G6 支持在图实例运行期间动态管理数据处理：",paraId:32,tocIndex:8},{value:"可以通过 ",paraId:33,tocIndex:8},{value:"setTransforms",paraId:34,tocIndex:8},{value:" 方法调整数据处理器：",paraId:33,tocIndex:8},{value:"// 添加新的数据处理器\ngraph.setTransforms((transforms) => [...transforms, 'place-radial-labels']);\n\n// 移除数据处理器\ngraph.setTransforms((transforms) => transforms.filter((t) => t !== 'place-radial-labels'));\n",paraId:35,tocIndex:8},{value:"可以通过 ",paraId:36,tocIndex:8},{value:"updateTransform",paraId:37,tocIndex:8},{value:" 方法更新数据处理的配置：",paraId:36,tocIndex:8},{value:"// 更新单个数据处理器\ngraph.updateTransform({\n  key: 'process-parallel-edges-1',\n  distance: 100,\n});\n",paraId:38,tocIndex:8},{value:"使用",paraId:39},{value:"updateTransform",paraId:39},{value:"方法时，需要在初始化时为数据处理指定唯一的",paraId:39},{value:"key",paraId:39},{value:"。",paraId:39},{value:"使用 ",paraId:40,tocIndex:9},{value:"setTransforms",paraId:41,tocIndex:9},{value:" 方法同样可以卸载数据处理，将数据处理配置列表置为空即可：",paraId:40,tocIndex:9},{value:"// 卸载所有数据处理器\ngraph.setTransforms([]);\n",paraId:42,tocIndex:9},{value:"当内置数据处理器无法满足需求时，你可以：",paraId:43,tocIndex:10},{value:"继承和扩展现有数据处理",paraId:44,tocIndex:10},{value:"创建全新的自定义数据处理",paraId:44,tocIndex:10},{value:"自定义数据处理需要先注册后使用。详细教程请参考 ",paraId:45,tocIndex:10},{value:"自定义数据处理",paraId:46,tocIndex:10},{value:" 文档。",paraId:45,tocIndex:10},{value:"import { register, ExtensionCategory } from '@antv/g6';\nimport { MyCustomTransform } from './my-custom-transform';\n\n// 注册自定义数据处理器\nregister(ExtensionCategory.TRANSFORM, 'my-custom-transform', MyCustomTransform);\n\n// 使用自定义数据处理\nconst graph = new Graph({\n  transforms: ['my-custom-transform'],\n});\n",paraId:47,tocIndex:10}]},52614:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(85144);const d=[{value:"G6 5.0 重新设计了图配置范式，在保证能力完善的基础上，优化配置项结构，更加直观、易于理解。",paraId:0,tocIndex:0},{value:"仅需快速了解基本",paraId:1,tocIndex:0},{value:"核心概念",paraId:2,tocIndex:0},{value:"，即可快速上手 G6，快速实现图可视化。",paraId:1,tocIndex:0},{value:"😰 4.0 配置项",paraId:3,tocIndex:0},{value:" 嵌套结构复杂，语义化能力较弱",paraId:3,tocIndex:0},{value:"{\n  defaultNode: {\n    size: 30,\n    style: {\n      fill: 'steelblue',\n      stroke: '#666',\n      lineWidth: 1\n    },\n    labelCfg: {\n      style: {\n        fill: '#fff',\n      }\n    }\n  },\n  nodeStateStyles: {\n    hover: {\n      fill: 'lightsteelblue'\n    }\n  },\n  modes: {\n    default: ['zoom-canvas', 'drag-canvas', 'drag-node'],\n  },\n}\n",paraId:4,tocIndex:0},{value:"😄 5.0 配置项",paraId:5,tocIndex:0},{value:" 结构清晰，易于理解",paraId:5,tocIndex:0},{value:"{\n  node: {\n    style: {\n      size: 30,\n      fill: 'steelblue',\n      stroke: '#666',\n      lineWidth: 1\n      labelFill: '#fff',\n    },\n    state: {\n      hover: {\n        fill: 'lightsteelblue'\n      }\n    }\n  },\n  behaviors: ['zoom-canvas', 'drag-canvas', 'drag-element'],\n}\n",paraId:6,tocIndex:0},{value:"G6 5.0 采用了更加简洁、易用的 API 设计，更加符合现代前端框架的设计风格。",paraId:7,tocIndex:1},{value:"树图本质上是一种单向无环图，G6 5.0 融合了图与树图的设计，降低了理解和使用成本。",paraId:8,tocIndex:2},{value:"现在，你可以在 G6 中直接使用 ",paraId:9,tocIndex:2},{value:"Graph",paraId:9,tocIndex:2},{value:" 来实例化绘制树图，而不需要再使用 ",paraId:9,tocIndex:2},{value:"TreeGraph",paraId:9,tocIndex:2},{value:"，仅需指定布局为树图布局即可。",paraId:9,tocIndex:2},{value:"此外，G6 提供了 ",paraId:10,tocIndex:2},{value:"treeToGraphData",paraId:10,tocIndex:2},{value:" 工具方法，帮助你快速将树图数据转换为图数据。",paraId:10,tocIndex:2},{value:"import { Graph, treeToGraphData } from '@antv/g6';\n\nconst data = {\n  id: 'root',\n  children: [\n    { id: 'node1', children: [{ id: 'node1-1' }, { id: 'node1-2' }] },\n    { id: 'node2', children: [{ id: 'node2-1' }, { id: 'node2-2' }] },\n  ],\n};\n\nconst graph = new Graph({\n  container: 'container',\n  layout: {\n    type: 'compact-box',\n    direction: 'TB',\n  },\n  data: treeToGraphData(data),\n  edge: {\n    type: 'cubic-vertical',\n  },\n});\n\ngraph.render();\n",paraId:11,tocIndex:2},{value:"import { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  container: 'container',\n  width: 200,\n  height: 200,\n  autoFit: 'view',\n  data: g6.treeToGraphData({\n    id: 'root',\n    children: [\n      { id: 'node1', children: [{ id: 'node1-1' }, { id: 'node1-2' }] },\n      { id: 'node2', children: [{ id: 'node2-1' }, { id: 'node2-2' }] },\n    ],\n  }),\n  layout: {\n    type: 'compact-box',\n    direction: 'TB',\n  },\n  node: {\n    style: {\n      ports: [{ placement: 'center' }],\n    },\n  },\n  edge: {\n    type: 'cubic-vertical',\n  },\n});\n\ngraph.render();\n",paraId:12,tocIndex:2},{value:"G6 5.0 采用了新一代设计的 @antv/g 渲染引擎，提供了 ",paraId:13,tocIndex:3},{value:"Canvas",paraId:13,tocIndex:3},{value:" ",paraId:13,tocIndex:3},{value:"SVG",paraId:13,tocIndex:3},{value:" ",paraId:13,tocIndex:3},{value:"WebGL",paraId:13,tocIndex:3},{value:" 多种渲染器支持，并且分层画布支持不同渲染器的混合使用。",paraId:13,tocIndex:3},{value:"import { Renderer } from '@antv/g-webgl';\nimport { Graph } from '@antv/g6';\n\nconst graph = new Graph({\n  // ... 其他配置\n  // 使用 WebGL 渲染器\n  renderer: () => new Renderer(),\n});\n",paraId:14,tocIndex:3},{value:"G6 5.0 采用了全新布局引擎，部分布局提供 Rust 实现，提供了更高性能的布局计算。另有布局支持 WebGPU 加速。",paraId:15,tocIndex:4},{value:"🚀 高性能布局需要安装 ",paraId:16,tocIndex:4},{value:"@antv/layout-wasm",paraId:16,tocIndex:4},{value:" 包",paraId:16,tocIndex:4},{value:"import { ForceAtlas2Layout, initThreads, supportsThreads } from '@antv/layout-wasm';\nimport { Graph, register, ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.LAYOUT, 'forceatlas2-wasm', ForceAtlas2Layout);\n\nconst supported = await supportsThreads();\nconst threads = await initThreads(supported);\n\nconst graph = new Graph({\n  // ... 其他配置\n  layout: {\n    type: 'forceatlas2-wasm',\n    threads,\n    // ... 其他布局配置\n  },\n});\n",paraId:17,tocIndex:4},{value:"GPU 加速布局需要安装 ",paraId:18,tocIndex:4},{value:"@antv/layout-gpu",paraId:18,tocIndex:4},{value:" 包",paraId:18,tocIndex:4},{value:"import { FruchtermanLayout } from '@antv/layout-gpu';\nimport { Graph, register, ExtensionCategory } from '@antv/g6';\n\nregister(ExtensionCategory.LAYOUT, 'fruchterman-gpu', FruchtermanLayout);\n\nconst graph = new Graph({\n  // ... 其他配置\n  layout: {\n    type: 'fruchterman-gpu',\n    // ... 其他布局配置\n  },\n});\n",paraId:19,tocIndex:4},{value:"G6 5.0 内置了亮色、暗色两套主题，并可基于使用场景进行灵活定制，具体可参考",paraId:20,tocIndex:5},{value:"自定义主题",paraId:21,tocIndex:5},{value:"。",paraId:20,tocIndex:5},{value:"G6 5.0 提供了 3D 大图渲染、布局、交互能力，从 ",paraId:22,tocIndex:6},{value:"@antv/g6-extension-3d",paraId:22,tocIndex:6},{value:" 中引入 3D 元素、渲染器、交互等注册即可使用，详见：",paraId:22,tocIndex:6},{value:"使用 3D",paraId:23,tocIndex:6},{value:"。",paraId:22,tocIndex:6},{value:"G6 5.0 对现有插件进行了优化增强，解除了 Graph 与插件之间的耦合，并优化配置的同时提供了更加丰富了能力。",paraId:24,tocIndex:7},{value:"敬请前往",paraId:25,tocIndex:7},{value:"插件",paraId:26,tocIndex:7},{value:"体验更多插件的能力。",paraId:25,tocIndex:7},{value:"得益于 G6 5.0 良好的模块化的设计以及扩展注册机制，对于未使用的模块，不会被打包到最终的构建文件中，减小了包体积。",paraId:27,tocIndex:8},{value:"与 4.0 相比，UMD 包体积从 1.8 MB 减小到 0.96 MB，减小了近 50%。",paraId:28,tocIndex:8}]},56535:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70869);const d=[{value:"本文档将引导你从 G6 ",paraId:0},{value:"4.x",paraId:0},{value:" 版本升级到 ",paraId:0},{value:"5.x",paraId:0},{value:" 版本。如果你使用的是 ",paraId:0},{value:"3.x",paraId:0},{value:" 版本，请先升级到 ",paraId:0},{value:"4.x",paraId:0},{value:" 版本。",paraId:0},{value:"请确保当前 git 分支是干净的，没有未提交的代码。",paraId:1,tocIndex:0},{value:"参考 ",paraId:1,tocIndex:0},{value:"安装",paraId:2,tocIndex:0},{value:" 文档安装 ",paraId:1,tocIndex:0},{value:"5.x",paraId:1,tocIndex:0},{value:" 版本，并移除 ",paraId:1,tocIndex:0},{value:"4.x",paraId:1,tocIndex:0},{value:" 版本依赖。",paraId:1,tocIndex:0},{value:"新版本的数据格式有所变化，具体如下：",paraId:3,tocIndex:2},{value:"nodes",paraId:4,tocIndex:2},{value:" ",paraId:4,tocIndex:2},{value:"edges",paraId:4,tocIndex:2},{value:" ",paraId:4,tocIndex:2},{value:"combos",paraId:4,tocIndex:2},{value:" 中所有样式属性都需要放在 ",paraId:4,tocIndex:2},{value:"style",paraId:4,tocIndex:2},{value:" 中，",paraId:4,tocIndex:2},{value:"data",paraId:4,tocIndex:2},{value:" 中存放数据属性：",paraId:4,tocIndex:2},{value:"// 4.x\nconst data = {\n  nodes: [\n    { id: 'node1', label: 'node1', size: 20 },\n    { id: 'node2', label: 'node2', size: 20 },\n  ],\n  edges: [{ source: 'node1', target: 'node2' }],\n};\n\n// 5.x\nconst data = {\n  nodes: [\n    // label 为非样式属性，放在 data 中，可在样式映射函数中访问\n    // size 为样式属性，放在 style 中\n    { id: 'node1', data: { label: 'node1' }, style: { size: 20 } },\n    { id: 'node2', data: { label: 'node2' }, style: { size: 20 } },\n  ],\n  edges: [{ source: 'node1', target: 'node2' }],\n};\n",paraId:5,tocIndex:2},{value:"由于我们重新设计实现了元素，新的元素配置项请参考相应文档进行修改：",paraId:6,tocIndex:2},{value:"Node",paraId:7,tocIndex:2},{value:"Edge",paraId:8,tocIndex:2},{value:"Combo",paraId:9,tocIndex:2},{value:"如果要在数据中指定元素类型，可以使用 ",paraId:10,tocIndex:2},{value:"type",paraId:10,tocIndex:2},{value:" 属性：",paraId:10,tocIndex:2},{value:"{\n  nodes: [\n    // 指定节点类型为 rect\n    { id: 'node1', type: 'rect' },\n  ];\n}\n",paraId:11,tocIndex:2},{value:"变更",paraId:12,tocIndex:3},{value:" ",paraId:13,tocIndex:3},{value:"fitView / fitCenter / fitViewPadding",paraId:13,tocIndex:3},{value:"fitView",paraId:14,tocIndex:3},{value:" 和 ",paraId:14,tocIndex:3},{value:"fitCenter",paraId:14,tocIndex:3},{value:" 配置项已经合并为 ",paraId:14,tocIndex:3},{value:"autoFit",paraId:14,tocIndex:3},{value:"若要使用 ",paraId:14,tocIndex:3},{value:"fitView",paraId:14,tocIndex:3},{value:"，可以配置为 ",paraId:14,tocIndex:3},{value:"autoFit: 'view'",paraId:14,tocIndex:3},{value:"若要使用 ",paraId:14,tocIndex:3},{value:"fitCenter",paraId:14,tocIndex:3},{value:"，可以配置为 ",paraId:14,tocIndex:3},{value:"autoFit: 'center'",paraId:14,tocIndex:3},{value:"也可以传入对象进行完整配置：",paraId:14,tocIndex:3},{value:"autoFit: {\n  type: 'view',\n  options: {\n    // ...\n  }\n}\n",paraId:15,tocIndex:3},{value:"fitViewPadding",paraId:16,tocIndex:3},{value:" 已变更为 ",paraId:16,tocIndex:3},{value:"padding",paraId:16,tocIndex:3},{value:"移除",paraId:17,tocIndex:3},{value:" ",paraId:18,tocIndex:3},{value:"linkCenter",paraId:18,tocIndex:3},{value:"5.x 的边连接机制会按照如下顺序依次尝试连接到节点/Combo：",paraId:19,tocIndex:3},{value:"连接桩",paraId:20,tocIndex:3},{value:"轮廓",paraId:20,tocIndex:3},{value:"中心",paraId:20,tocIndex:3},{value:"移除",paraId:21,tocIndex:3},{value:" ",paraId:22,tocIndex:3},{value:"groupByTypes",paraId:22,tocIndex:3},{value:"移除",paraId:23,tocIndex:3},{value:" ",paraId:24,tocIndex:3},{value:"autoPaint",paraId:24,tocIndex:3},{value:"请手动调用 ",paraId:25,tocIndex:3},{value:"render",paraId:25,tocIndex:3},{value:" 或 ",paraId:25,tocIndex:3},{value:"draw",paraId:25,tocIndex:3},{value:" 方法进行绘制。",paraId:25,tocIndex:3},{value:"变更",paraId:26,tocIndex:3},{value:" ",paraId:27,tocIndex:3},{value:"modes",paraId:27,tocIndex:3},{value:"5.x 已经移除交互模式，你可以通过设置 ",paraId:28,tocIndex:3},{value:"behaviors",paraId:28,tocIndex:3},{value:" 来切换当前启用的交互行为。",paraId:28,tocIndex:3},{value:"// 4.x\n{\n  modes: {\n    default: ['drag-canvas', 'zoom-canvas'],\n    preview: ['drag-canvas'],\n  },\n}\n\ngraph.setMode('preview');\n",paraId:29,tocIndex:3},{value:"\n// 5.x\n{\n  behaviors: ['drag-canvas', 'zoom-canvas'],\n}\n\ngraph.setBehaviors(['drag-canvas']);\n\n",paraId:30,tocIndex:3},{value:"变更",paraId:31,tocIndex:3},{value:" ",paraId:32,tocIndex:3},{value:"defaultNode / defaultEdge / defaultCombo",paraId:32,tocIndex:3},{value:"元素样式已移至 ",paraId:33,tocIndex:3},{value:"[element].style",paraId:33,tocIndex:3},{value:" 中，如 ",paraId:33,tocIndex:3},{value:"defaultNode",paraId:33,tocIndex:3},{value:" 变更为 ",paraId:33,tocIndex:3},{value:"node.style",paraId:33,tocIndex:3},{value:"：",paraId:33,tocIndex:3},{value:"// 4.x\n{\n  defaultNode: {\n    size: 20,\n    fill: 'red',\n  }\n}\n\n// 5.x\n{\n  node: {\n    style: {\n      size: 20,\n      fill: 'red',\n    }\n  }\n}\n",paraId:34,tocIndex:3},{value:"变更",paraId:35,tocIndex:3},{value:" ",paraId:36,tocIndex:3},{value:"nodeStateStyles / edgeStateStyles / comboStateStyle",paraId:36,tocIndex:3},{value:"元素状态样式已移至 ",paraId:37,tocIndex:3},{value:"[element].state",paraId:37,tocIndex:3},{value:" 中，如 ",paraId:37,tocIndex:3},{value:"nodeStateStyles",paraId:37,tocIndex:3},{value:" 变更为 ",paraId:37,tocIndex:3},{value:"node.stateStyles",paraId:37,tocIndex:3},{value:"：",paraId:37,tocIndex:3},{value:"// 4.x\n{\n  nodeStateStyles: {\n    selected: {\n      fill: 'red',\n    }\n  }\n}\n\n// 5.x\n{\n  node: {\n    state: {\n      selected: {\n        fill: 'red',\n      }\n    }\n  }\n}\n",paraId:38,tocIndex:3},{value:"变更",paraId:39,tocIndex:3},{value:" ",paraId:40,tocIndex:3},{value:"animate / animateCfg",paraId:40,tocIndex:3},{value:"animate",paraId:41,tocIndex:3},{value:" 配置项已变更为 ",paraId:41,tocIndex:3},{value:"animation",paraId:41,tocIndex:3},{value:"animate",paraId:41,tocIndex:3},{value:" 和 ",paraId:41,tocIndex:3},{value:"animateCfg",paraId:41,tocIndex:3},{value:" 已合并为 ",paraId:41,tocIndex:3},{value:"animation",paraId:41,tocIndex:3},{value:"// 4.x\n{\n  animate: true,\n}\n\n// 5.x\n{\n  animation: true,\n}\n{\n  animation: {\n    duration: 500,\n    easing: 'easeLinear',\n  }\n}\n",paraId:42,tocIndex:3},{value:"变更",paraId:43,tocIndex:3},{value:" ",paraId:44,tocIndex:3},{value:"minZoom / maxZoom",paraId:44,tocIndex:3},{value:"minZoom",paraId:45,tocIndex:3},{value:" 和 ",paraId:45,tocIndex:3},{value:"maxZoom",paraId:45,tocIndex:3},{value:" 已合并为 ",paraId:45,tocIndex:3},{value:"zoomRange",paraId:45,tocIndex:3},{value:"// 4.x\n{\n  minZoom: 0.5,\n  maxZoom: 2,\n}\n\n// 5.x\n{\n  zoomRange: [0.5, 2],\n}\n",paraId:46,tocIndex:3},{value:"变更",paraId:47,tocIndex:3},{value:" ",paraId:48,tocIndex:3},{value:"renderer",paraId:48,tocIndex:3},{value:"G6 5.x 支持多层画布，默认使用 ",paraId:49,tocIndex:3},{value:"canvas",paraId:49,tocIndex:3},{value:" 渲染。",paraId:49,tocIndex:3},{value:"renderer 不再支持字符串类型，变更为回调函数：",paraId:50,tocIndex:3},{value:"// 4.x\nvar options = {\n  renderer: 'svg',\n};\n\n// 5.x\nimport { Renderer } from '@antv/g-svg';\n\n{\n  renderer: () => new Renderer(),\n}\n",paraId:51,tocIndex:3},{value:"移除",paraId:52,tocIndex:3},{value:" ",paraId:53,tocIndex:3},{value:"enabledStack / maxStep",paraId:53,tocIndex:3},{value:"5.x 已移除内置撤销重做功能，相关能力请使用插件实现。",paraId:54,tocIndex:3},{value:"变更",paraId:55,tocIndex:4},{value:" ",paraId:56,tocIndex:4},{value:"data / save / read / changeData",paraId:56,tocIndex:4},{value:"5.x 提供了全新的数据 API，详见 ",paraId:57,tocIndex:4},{value:"数据 API",paraId:58,tocIndex:4},{value:"。",paraId:57,tocIndex:4},{value:"4.x ",paraId:59,tocIndex:4},{value:"data",paraId:59,tocIndex:4},{value:" ",paraId:59,tocIndex:4},{value:"changeData",paraId:59,tocIndex:4},{value:" 方法使用 5.x ",paraId:59,tocIndex:4},{value:"setData",paraId:59,tocIndex:4},{value:" 替代",paraId:59,tocIndex:4},{value:"4.x ",paraId:59,tocIndex:4},{value:"save",paraId:59,tocIndex:4},{value:" 方法使用 5.x ",paraId:59,tocIndex:4},{value:"getData",paraId:59,tocIndex:4},{value:" 替代",paraId:59,tocIndex:4},{value:"4.x ",paraId:59,tocIndex:4},{value:"read",paraId:59,tocIndex:4},{value:" 方法使用 5.x ",paraId:59,tocIndex:4},{value:"setData",paraId:59,tocIndex:4},{value:" + ",paraId:59,tocIndex:4},{value:"render",paraId:59,tocIndex:4},{value:" 替代",paraId:59,tocIndex:4},{value:"变更",paraId:60,tocIndex:4},{value:" ",paraId:61,tocIndex:4},{value:"get / set",paraId:61,tocIndex:4},{value:"若要访问 Graph options，请使用 ",paraId:62,tocIndex:4},{value:"getOptions",paraId:62,tocIndex:4},{value:" 或者 ",paraId:62,tocIndex:4},{value:"getXxx",paraId:62,tocIndex:4},{value:" API，例如 ",paraId:62,tocIndex:4},{value:"getZoomRange",paraId:62,tocIndex:4},{value:" ",paraId:62,tocIndex:4},{value:"getBehaviors",paraId:62,tocIndex:4},{value:" 等。 ",paraId:62,tocIndex:4},{value:"set",paraId:62,tocIndex:4},{value:" 同理。",paraId:62,tocIndex:4},{value:"变更",paraId:63,tocIndex:4},{value:" ",paraId:64,tocIndex:4},{value:"getContainer",paraId:64,tocIndex:4},{value:"暂不支持直接获取容器的 API，但可以通过 ",paraId:65,tocIndex:4},{value:"graph.getCanvas().getContainer()",paraId:65,tocIndex:4},{value:" 获取。",paraId:65,tocIndex:4},{value:"绝大部分情况下，你都不需要直接操作容器。",paraId:66,tocIndex:4},{value:"移除",paraId:67,tocIndex:4},{value:" ",paraId:68,tocIndex:4},{value:"getGroup",paraId:68,tocIndex:4},{value:"变更",paraId:69,tocIndex:4},{value:" ",paraId:70,tocIndex:4},{value:"getMinZoom / getMaxZoom",paraId:70,tocIndex:4},{value:"使用 ",paraId:71,tocIndex:4},{value:"getZoomRange",paraId:71,tocIndex:4},{value:" 获取。",paraId:71,tocIndex:4},{value:"变更",paraId:72,tocIndex:4},{value:" ",paraId:73,tocIndex:4},{value:"setMinZoom / setMaxZoom",paraId:73,tocIndex:4},{value:"使用 ",paraId:74,tocIndex:4},{value:"setZoomRange",paraId:74,tocIndex:4},{value:" 方法设置。",paraId:74,tocIndex:4},{value:"变更",paraId:75,tocIndex:4},{value:" ",paraId:76,tocIndex:4},{value:"getWidth / getHeight",paraId:76,tocIndex:4},{value:"使用 ",paraId:77,tocIndex:4},{value:"getSize",paraId:77,tocIndex:4},{value:" 获取。",paraId:77,tocIndex:4},{value:"变更",paraId:78,tocIndex:4},{value:" ",paraId:79,tocIndex:4},{value:"changeSize",paraId:79,tocIndex:4},{value:"使用 ",paraId:80,tocIndex:4},{value:"setSize",paraId:80,tocIndex:4},{value:" 设置。",paraId:80,tocIndex:4},{value:"变更",paraId:81,tocIndex:4},{value:" ",paraId:82,tocIndex:4},{value:"zoom",paraId:82,tocIndex:4},{value:"变更为 ",paraId:83,tocIndex:4},{value:"zoomBy",paraId:83,tocIndex:4},{value:"。",paraId:83,tocIndex:4},{value:"变更",paraId:84,tocIndex:4},{value:" ",paraId:85,tocIndex:4},{value:"translate",paraId:85,tocIndex:4},{value:"变更为 ",paraId:86,tocIndex:4},{value:"translateBy",paraId:86,tocIndex:4},{value:"。",paraId:86,tocIndex:4},{value:"变更",paraId:87,tocIndex:4},{value:" ",paraId:88,tocIndex:4},{value:"moveTo",paraId:88,tocIndex:4},{value:"变更为 ",paraId:89,tocIndex:4},{value:"translateTo",paraId:89,tocIndex:4},{value:"。",paraId:89,tocIndex:4},{value:"变更",paraId:90,tocIndex:4},{value:" ",paraId:91,tocIndex:4},{value:"focusItem",paraId:91,tocIndex:4},{value:"变更为 ",paraId:92,tocIndex:4},{value:"focusElement",paraId:92,tocIndex:4},{value:"。",paraId:92,tocIndex:4},{value:"移除",paraId:93,tocIndex:4},{value:" ",paraId:94,tocIndex:4},{value:"addItem / updateItem / removeItem",paraId:94,tocIndex:4},{value:"通过 ",paraId:95,tocIndex:4},{value:"addData",paraId:95,tocIndex:4},{value:" / ",paraId:95,tocIndex:4},{value:"updateData",paraId:95,tocIndex:4},{value:" / ",paraId:95,tocIndex:4},{value:"removeData",paraId:95,tocIndex:4},{value:" 方法操作数据来添加或删除元素。",paraId:95,tocIndex:4},{value:"移除",paraId:96,tocIndex:4},{value:" ",paraId:97,tocIndex:4},{value:"refreshItem",paraId:97,tocIndex:4},{value:"移除",paraId:98,tocIndex:4},{value:" ",paraId:99,tocIndex:4},{value:"refreshPositions",paraId:99,tocIndex:4},{value:"移除",paraId:100,tocIndex:4},{value:" ",paraId:101,tocIndex:4},{value:"updateCombo",paraId:101,tocIndex:4},{value:"移除",paraId:102,tocIndex:4},{value:" ",paraId:103,tocIndex:4},{value:"updateCombos",paraId:103,tocIndex:4},{value:"移除",paraId:104,tocIndex:4},{value:" ",paraId:105,tocIndex:4},{value:"updateComboTree",paraId:105,tocIndex:4},{value:"变更",paraId:106,tocIndex:4},{value:" ",paraId:107,tocIndex:4},{value:"node / edge / combo",paraId:107,tocIndex:4},{value:"使用 ",paraId:108,tocIndex:4},{value:"setNode",paraId:108,tocIndex:4},{value:" / ",paraId:108,tocIndex:4},{value:"setEdge",paraId:108,tocIndex:4},{value:" / ",paraId:108,tocIndex:4},{value:"setCombo",paraId:108,tocIndex:4},{value:" 方法替代。",paraId:108,tocIndex:4},{value:"变更",paraId:109,tocIndex:4},{value:" ",paraId:110,tocIndex:4},{value:"showItem / hideItem",paraId:110,tocIndex:4},{value:"使用 ",paraId:111,tocIndex:4},{value:"setElementVisibility",paraId:111,tocIndex:4},{value:" 方法替代。",paraId:111,tocIndex:4},{value:"移除",paraId:112,tocIndex:4},{value:" ",paraId:113,tocIndex:4},{value:"getNodes / getEdges / getCombos / getComboChildren /getNeighbors /find /findById / findAll /findAllByState",paraId:113,tocIndex:4},{value:"5.x 不支持直接获取元素实例。",paraId:114,tocIndex:4},{value:"若要获取元素数据，使用 ",paraId:115,tocIndex:4},{value:"getData",paraId:115,tocIndex:4},{value:" ",paraId:115,tocIndex:4},{value:"getNodeData",paraId:115,tocIndex:4},{value:" ",paraId:115,tocIndex:4},{value:"getEdgeData",paraId:115,tocIndex:4},{value:" ",paraId:115,tocIndex:4},{value:"getComboData",paraId:115,tocIndex:4},{value:" 方法，支持传入元素 id 进行查找。",paraId:115,tocIndex:4},{value:"获取子节点数据，使用 ",paraId:115,tocIndex:4},{value:"getChildrenData",paraId:115,tocIndex:4},{value:" 方法。",paraId:115,tocIndex:4},{value:"获取邻居节点数据，使用 ",paraId:115,tocIndex:4},{value:"getNeighborNodesData",paraId:115,tocIndex:4},{value:" 方法。",paraId:115,tocIndex:4},{value:"基于状态查找元素数据，使用 ",paraId:115,tocIndex:4},{value:"getElementDataByState",paraId:115,tocIndex:4},{value:"。",paraId:115,tocIndex:4},{value:"变更",paraId:116,tocIndex:4},{value:" ",paraId:117,tocIndex:4},{value:"collapseCombo / expandCombo",paraId:117,tocIndex:4},{value:"使用 ",paraId:118,tocIndex:4},{value:"collapseElement",paraId:118,tocIndex:4},{value:" / ",paraId:118,tocIndex:4},{value:"expandElement",paraId:118,tocIndex:4},{value:" 方法替代。",paraId:118,tocIndex:4},{value:"移除",paraId:119,tocIndex:4},{value:" ",paraId:120,tocIndex:4},{value:"collapseExpandCombo",paraId:120,tocIndex:4},{value:"移除",paraId:121,tocIndex:4},{value:" ",paraId:122,tocIndex:4},{value:"createCombo",paraId:122,tocIndex:4},{value:"通过 ",paraId:123,tocIndex:4},{value:"addData",paraId:123,tocIndex:4},{value:" / ",paraId:123,tocIndex:4},{value:"addComboData",paraId:123,tocIndex:4},{value:" 方法添加 Combo。",paraId:123,tocIndex:4},{value:"移除",paraId:124,tocIndex:4},{value:" ",paraId:125,tocIndex:4},{value:"uncombo",paraId:125,tocIndex:4},{value:"通过 ",paraId:126,tocIndex:4},{value:"removeData",paraId:126,tocIndex:4},{value:" / ",paraId:126,tocIndex:4},{value:"removeComboData",paraId:126,tocIndex:4},{value:" 方法移除 Combo。",paraId:126,tocIndex:4},{value:"变更",paraId:127,tocIndex:4},{value:" ",paraId:128,tocIndex:4},{value:"setItemState",paraId:128,tocIndex:4},{value:"使用 ",paraId:129,tocIndex:4},{value:"setElementState",paraId:129,tocIndex:4},{value:" 方法替代。",paraId:129,tocIndex:4},{value:"移除",paraId:130,tocIndex:4},{value:" ",paraId:131,tocIndex:4},{value:"clearItemStates",paraId:131,tocIndex:4},{value:"清除单个元素所有状态：",paraId:132,tocIndex:4},{value:"graph.setElementState(id, [])",paraId:132,tocIndex:4},{value:"清除多个元素所有状态：",paraId:132,tocIndex:4},{value:"graph.setElementState({ id1: [], id2: [] })",paraId:132,tocIndex:4},{value:"移除",paraId:133,tocIndex:4},{value:" ",paraId:134,tocIndex:4},{value:"priorityState",paraId:134,tocIndex:4},{value:"setElementState",paraId:135,tocIndex:4},{value:" 时状态数组中靠后的状态优先级更高。",paraId:135,tocIndex:4},{value:"移除",paraId:136,tocIndex:4},{value:" ",paraId:137,tocIndex:4},{value:"setMode",paraId:137,tocIndex:4},{value:"使用 ",paraId:138,tocIndex:4},{value:"setBehaviors",paraId:138,tocIndex:4},{value:" 来设置当前交互。",paraId:138,tocIndex:4},{value:"移除",paraId:139,tocIndex:4},{value:" ",paraId:140,tocIndex:4},{value:"setCurrentMode",paraId:140,tocIndex:4},{value:"变更",paraId:141,tocIndex:4},{value:" ",paraId:142,tocIndex:4},{value:"layout",paraId:142,tocIndex:4},{value:"不支持参数，如需配置布局，请使用 ",paraId:143,tocIndex:4},{value:"setLayout",paraId:143,tocIndex:4},{value:"。",paraId:143,tocIndex:4},{value:"变更",paraId:144,tocIndex:4},{value:" ",paraId:145,tocIndex:4},{value:"updateLayout",paraId:145,tocIndex:4},{value:"变更为 ",paraId:146,tocIndex:4},{value:"setLayout",paraId:146,tocIndex:4},{value:"。",paraId:146,tocIndex:4},{value:"移除",paraId:147,tocIndex:4},{value:" ",paraId:148,tocIndex:4},{value:"destroyLayout",paraId:148,tocIndex:4},{value:"变更",paraId:149,tocIndex:4},{value:" ",paraId:150,tocIndex:4},{value:"addBehaviors / removeBehaviors",paraId:150,tocIndex:4},{value:"使用 ",paraId:151,tocIndex:4},{value:"setBehaviors",paraId:151,tocIndex:4},{value:" 替代。",paraId:151,tocIndex:4},{value:"移除",paraId:152,tocIndex:4},{value:" ",paraId:153,tocIndex:4},{value:"createHull / getHulls / removeHull / removeHulls",paraId:153,tocIndex:4},{value:"多个 ",paraId:154,tocIndex:4},{value:"Hull",paraId:154,tocIndex:4},{value:" 需在 ",paraId:154,tocIndex:4},{value:"plugins",paraId:154,tocIndex:4},{value:" 中配置多个 ",paraId:154,tocIndex:4},{value:"hull",paraId:154,tocIndex:4},{value:" 插件，如：",paraId:154,tocIndex:4},{value:"{\n  plugins: ['hull', 'hull'],\n};\n",paraId:155,tocIndex:4},{value:"Hull",paraId:156,tocIndex:4},{value:" 的获取、更新、移除操作通过 ",paraId:156,tocIndex:4},{value:"setPlugins",paraId:156,tocIndex:4},{value:", ",paraId:156,tocIndex:4},{value:"updatePlugin",paraId:156,tocIndex:4},{value:" 实现。",paraId:156,tocIndex:4},{value:"暂未提供",paraId:157,tocIndex:4},{value:" ",paraId:158,tocIndex:4},{value:"getNodeDegree",paraId:158,tocIndex:4},{value:"暂未提供",paraId:159,tocIndex:4},{value:" ",paraId:160,tocIndex:4},{value:"getShortestPathMatrix",paraId:160,tocIndex:4},{value:"暂未提供",paraId:161,tocIndex:4},{value:" ",paraId:162,tocIndex:4},{value:"getAdjMatrix",paraId:162,tocIndex:4},{value:"移除",paraId:163,tocIndex:4},{value:" ",paraId:164,tocIndex:4},{value:"pushStack / getUndoStack / getRedoStack / getStackData / clearStack",paraId:164,tocIndex:4},{value:"所有撤销重做相关 API 请获取到对应插件后调用 API，例：",paraId:165,tocIndex:4},{value:"// 'history' 为使用插件时配置的 key\nconst history = graph.getPluginInstance('history');\n\nhistory.redo();\n",paraId:166,tocIndex:4},{value:"移除",paraId:167,tocIndex:4},{value:" ",paraId:168,tocIndex:4},{value:"positionsAnimate / stopAnimate / isAnimating",paraId:168,tocIndex:4},{value:"动画相关信息通过事件抛出：",paraId:169,tocIndex:4},{value:"动画开始事件：",paraId:170,tocIndex:4},{value:"beforeanimate",paraId:170,tocIndex:4},{value:"动画结束事件：",paraId:170,tocIndex:4},{value:"afteranimate",paraId:170,tocIndex:4},{value:"停止动画：",paraId:170,tocIndex:4},{value:"graph.on('beforeanimate', (event) => {\n  event.animation.stop();\n});\n",paraId:171,tocIndex:4},{value:"变更",paraId:172,tocIndex:4},{value:" ",paraId:173,tocIndex:4},{value:"getPointByClient / getClientByPoint / getPointByCanvas / getCanvasByPoint / getGraphCenterPoint / getViewPortCenterPoint",paraId:173,tocIndex:4},{value:"G6 5.x 采用了与 4.x 不同的坐标系，详见 ",paraId:174,tocIndex:4},{value:"坐标系",paraId:175,tocIndex:4},{value:"。",paraId:174,tocIndex:4},{value:"移除",paraId:176,tocIndex:4},{value:" ",paraId:177,tocIndex:4},{value:"setTextWaterMarker / setImageWaterMarker",paraId:177,tocIndex:4},{value:"要使用水印功能，请参考 ",paraId:178,tocIndex:4},{value:"水印",paraId:179,tocIndex:4},{value:"插件。",paraId:178,tocIndex:4},{value:"变更",paraId:180,tocIndex:4},{value:" ",paraId:181,tocIndex:4},{value:"toFullDataURL",paraId:181,tocIndex:4},{value:"使用 ",paraId:182,tocIndex:4},{value:"toDataURL",paraId:182,tocIndex:4},{value:" 替代，指定参数为：",paraId:182,tocIndex:4},{value:"mode: 'overall'",paraId:182,tocIndex:4},{value:"graph.toDataURL({ mode: 'overall' });\n",paraId:183,tocIndex:4},{value:"移除",paraId:184,tocIndex:4},{value:" ",paraId:185,tocIndex:4},{value:"downloadFullImage / downloadImage",paraId:185,tocIndex:4},{value:"仅提供导出为 ",paraId:186,tocIndex:4},{value:"DataURL",paraId:186,tocIndex:4},{value:" 的能力，如需下载图片，请参考如下实例代码：",paraId:186,tocIndex:4},{value:"async function downloadImage() {\n  const dataURL = await graph.toDataURL();\n  const [head, content] = dataURL.split(',');\n  const contentType = head.match(/:(.*?);/)![1];\n\n  const bstr = atob(content);\n  let length = bstr.length;\n  const u8arr = new Uint8Array(length);\n\n  while (length--) {\n    u8arr[length] = bstr.charCodeAt(length);\n  }\n\n  const blob = new Blob([u8arr], { type: contentType });\n\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'graph.png';\n  a.click();\n}\n",paraId:187,tocIndex:4},{value:"移除",paraId:188,tocIndex:4},{value:" ",paraId:189,tocIndex:4},{value:"clear",paraId:189,tocIndex:4},{value:"使用 ",paraId:190,tocIndex:4},{value:"setData",paraId:190,tocIndex:4},{value:" + ",paraId:190,tocIndex:4},{value:"draw",paraId:190,tocIndex:4},{value:" 清空数据和画布。",paraId:190,tocIndex:4},{value:"与 G6 4.x 不同，G6 5.x 使用的统一的扩展注册函数(register)，你可以参考 ",paraId:191,tocIndex:5},{value:"注册扩展",paraId:192,tocIndex:5},{value:" 来注册 G6 扩展。",paraId:191,tocIndex:5},{value:"下列 G6 4.x 的注册函数已经废除：",paraId:193,tocIndex:5},{value:"registerNode",paraId:194,tocIndex:5},{value:"registerEdge",paraId:194,tocIndex:5},{value:"registerCombo",paraId:194,tocIndex:5},{value:"registerLayout",paraId:194,tocIndex:5},{value:"registerBehavior",paraId:194,tocIndex:5},{value:"与 G6 4.x 相比，G6 5.x 的事件但存下如下差异：",paraId:195,tocIndex:6},{value:"移除了 ",paraId:196,tocIndex:6},{value:"mouse",paraId:196,tocIndex:6},{value:" 和 ",paraId:196,tocIndex:6},{value:"touch",paraId:196,tocIndex:6},{value:" 事件，统一使用 ",paraId:196,tocIndex:6},{value:"pointer",paraId:196,tocIndex:6},{value:" 事件",paraId:196,tocIndex:6},{value:"生命周期事件名命名格式通常为： ",paraId:196,tocIndex:6},{value:"before/after",paraId:196,tocIndex:6},{value:" + ",paraId:196,tocIndex:6},{value:"对象/属性",paraId:196,tocIndex:6},{value:" + ",paraId:196,tocIndex:6},{value:"操作",paraId:196,tocIndex:6},{value:"，例如：",paraId:196,tocIndex:6},{value:"beforeelementcreate",paraId:196,tocIndex:6},{value:" 表示在创建元素前触发",paraId:196,tocIndex:6},{value:"下列事件已被移除：\n",paraId:196,tocIndex:6},{value:"afteractivaterelations",paraId:197,tocIndex:6},{value:"afteradditem",paraId:197,tocIndex:6},{value:"aftercreateedge",paraId:197,tocIndex:6},{value:"aftergraphrefresh",paraId:197,tocIndex:6},{value:"aftergraphrefreshposition",paraId:197,tocIndex:6},{value:"afteritemrefresh",paraId:197,tocIndex:6},{value:"aftermodechange",paraId:197,tocIndex:6},{value:"afterremoveitem",paraId:197,tocIndex:6},{value:"afterupdateitem",paraId:197,tocIndex:6},{value:"beforeadditem",paraId:197,tocIndex:6},{value:"beforecreateedge",paraId:197,tocIndex:6},{value:"beforegraphrefresh",paraId:197,tocIndex:6},{value:"beforegraphrefreshposition",paraId:197,tocIndex:6},{value:"beforeitemrefresh",paraId:197,tocIndex:6},{value:"beforemodechange",paraId:197,tocIndex:6},{value:"beforeremoveitem",paraId:197,tocIndex:6},{value:"beforeupdateitem",paraId:197,tocIndex:6},{value:"dragnodeend",paraId:197,tocIndex:6},{value:"nodeselectchange",paraId:197,tocIndex:6},{value:"stackchange",paraId:197,tocIndex:6},{value:"tooltipchange",paraId:197,tocIndex:6},{value:"下列元素变更事件被移除，但你仍可通过 ",paraId:196,tocIndex:6},{value:"beforeelementupdate",paraId:196,tocIndex:6},{value:" 和 ",paraId:196,tocIndex:6},{value:"afterelementupdate",paraId:196,tocIndex:6},{value:" 获取：\n",paraId:196,tocIndex:6},{value:"afteritemstatechange",paraId:198,tocIndex:6},{value:"afteritemstatesclear",paraId:198,tocIndex:6},{value:"afteritemvisibilitychange",paraId:198,tocIndex:6},{value:"beforeitemstatechange",paraId:198,tocIndex:6},{value:"beforeitemstatesclear",paraId:198,tocIndex:6},{value:"beforeitemvisibilitychange",paraId:198,tocIndex:6},{value:"下列事件有所变更：\n",paraId:196,tocIndex:6},{value:"graphstatechange 事件变更为 beforeelementstatechange / afterelementstatechange",paraId:199,tocIndex:6},{value:"viewportchange 事件变更为 beforetransform / aftertransform",paraId:199,tocIndex:6},{value:"完整的事件列表请参考 ",paraId:200,tocIndex:6},{value:"事件",paraId:201,tocIndex:6},{value:"。",paraId:200,tocIndex:6}]}}]);